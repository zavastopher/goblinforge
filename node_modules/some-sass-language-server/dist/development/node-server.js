/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "../../node_modules/@nodelib/fs.scandir/out/adapters/fs.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.scandir/out/adapters/fs.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
const fs = __webpack_require__(/*! fs */ "fs");
exports.FILE_SYSTEM_ADAPTER = {
    lstat: fs.lstat,
    stat: fs.stat,
    lstatSync: fs.lstatSync,
    statSync: fs.statSync,
    readdir: fs.readdir,
    readdirSync: fs.readdirSync
};
function createFileSystemAdapter(fsMethods) {
    if (fsMethods === undefined) {
        return exports.FILE_SYSTEM_ADAPTER;
    }
    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
}
exports.createFileSystemAdapter = createFileSystemAdapter;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.scandir/out/constants.js":
/*!***************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.scandir/out/constants.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
const NODE_PROCESS_VERSION_PARTS = process.versions.node.split('.');
if (NODE_PROCESS_VERSION_PARTS[0] === undefined || NODE_PROCESS_VERSION_PARTS[1] === undefined) {
    throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
}
const MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
const MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
const SUPPORTED_MAJOR_VERSION = 10;
const SUPPORTED_MINOR_VERSION = 10;
const IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
const IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
/**
 * IS `true` for Node.js 10.10 and greater.
 */
exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.scandir/out/index.js":
/*!***********************************************************!*\
  !*** ../../node_modules/@nodelib/fs.scandir/out/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Settings = exports.scandirSync = exports.scandir = void 0;
const async = __webpack_require__(/*! ./providers/async */ "../../node_modules/@nodelib/fs.scandir/out/providers/async.js");
const sync = __webpack_require__(/*! ./providers/sync */ "../../node_modules/@nodelib/fs.scandir/out/providers/sync.js");
const settings_1 = __webpack_require__(/*! ./settings */ "../../node_modules/@nodelib/fs.scandir/out/settings.js");
exports.Settings = settings_1.default;
function scandir(path, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === 'function') {
        async.read(path, getSettings(), optionsOrSettingsOrCallback);
        return;
    }
    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
}
exports.scandir = scandir;
function scandirSync(path, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync.read(path, settings);
}
exports.scandirSync = scandirSync;
function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
}


/***/ }),

/***/ "../../node_modules/@nodelib/fs.scandir/out/providers/async.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.scandir/out/providers/async.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
const fsStat = __webpack_require__(/*! @nodelib/fs.stat */ "../../node_modules/@nodelib/fs.stat/out/index.js");
const rpl = __webpack_require__(/*! run-parallel */ "../../node_modules/run-parallel/index.js");
const constants_1 = __webpack_require__(/*! ../constants */ "../../node_modules/@nodelib/fs.scandir/out/constants.js");
const utils = __webpack_require__(/*! ../utils */ "../../node_modules/@nodelib/fs.scandir/out/utils/index.js");
const common = __webpack_require__(/*! ./common */ "../../node_modules/@nodelib/fs.scandir/out/providers/common.js");
function read(directory, settings, callback) {
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        readdirWithFileTypes(directory, settings, callback);
        return;
    }
    readdir(directory, settings, callback);
}
exports.read = read;
function readdirWithFileTypes(directory, settings, callback) {
    settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
        if (readdirError !== null) {
            callFailureCallback(callback, readdirError);
            return;
        }
        const entries = dirents.map((dirent) => ({
            dirent,
            name: dirent.name,
            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        }));
        if (!settings.followSymbolicLinks) {
            callSuccessCallback(callback, entries);
            return;
        }
        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
        rpl(tasks, (rplError, rplEntries) => {
            if (rplError !== null) {
                callFailureCallback(callback, rplError);
                return;
            }
            callSuccessCallback(callback, rplEntries);
        });
    });
}
exports.readdirWithFileTypes = readdirWithFileTypes;
function makeRplTaskEntry(entry, settings) {
    return (done) => {
        if (!entry.dirent.isSymbolicLink()) {
            done(null, entry);
            return;
        }
        settings.fs.stat(entry.path, (statError, stats) => {
            if (statError !== null) {
                if (settings.throwErrorOnBrokenSymbolicLink) {
                    done(statError);
                    return;
                }
                done(null, entry);
                return;
            }
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            done(null, entry);
        });
    };
}
function readdir(directory, settings, callback) {
    settings.fs.readdir(directory, (readdirError, names) => {
        if (readdirError !== null) {
            callFailureCallback(callback, readdirError);
            return;
        }
        const tasks = names.map((name) => {
            const path = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
            return (done) => {
                fsStat.stat(path, settings.fsStatSettings, (error, stats) => {
                    if (error !== null) {
                        done(error);
                        return;
                    }
                    const entry = {
                        name,
                        path,
                        dirent: utils.fs.createDirentFromStats(name, stats)
                    };
                    if (settings.stats) {
                        entry.stats = stats;
                    }
                    done(null, entry);
                });
            };
        });
        rpl(tasks, (rplError, entries) => {
            if (rplError !== null) {
                callFailureCallback(callback, rplError);
                return;
            }
            callSuccessCallback(callback, entries);
        });
    });
}
exports.readdir = readdir;
function callFailureCallback(callback, error) {
    callback(error);
}
function callSuccessCallback(callback, result) {
    callback(null, result);
}


/***/ }),

/***/ "../../node_modules/@nodelib/fs.scandir/out/providers/common.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.scandir/out/providers/common.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.joinPathSegments = void 0;
function joinPathSegments(a, b, separator) {
    /**
     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).
     */
    if (a.endsWith(separator)) {
        return a + b;
    }
    return a + separator + b;
}
exports.joinPathSegments = joinPathSegments;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.scandir/out/providers/sync.js":
/*!********************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.scandir/out/providers/sync.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
const fsStat = __webpack_require__(/*! @nodelib/fs.stat */ "../../node_modules/@nodelib/fs.stat/out/index.js");
const constants_1 = __webpack_require__(/*! ../constants */ "../../node_modules/@nodelib/fs.scandir/out/constants.js");
const utils = __webpack_require__(/*! ../utils */ "../../node_modules/@nodelib/fs.scandir/out/utils/index.js");
const common = __webpack_require__(/*! ./common */ "../../node_modules/@nodelib/fs.scandir/out/providers/common.js");
function read(directory, settings) {
    if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        return readdirWithFileTypes(directory, settings);
    }
    return readdir(directory, settings);
}
exports.read = read;
function readdirWithFileTypes(directory, settings) {
    const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
    return dirents.map((dirent) => {
        const entry = {
            dirent,
            name: dirent.name,
            path: common.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        };
        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
            try {
                const stats = settings.fs.statSync(entry.path);
                entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
            }
            catch (error) {
                if (settings.throwErrorOnBrokenSymbolicLink) {
                    throw error;
                }
            }
        }
        return entry;
    });
}
exports.readdirWithFileTypes = readdirWithFileTypes;
function readdir(directory, settings) {
    const names = settings.fs.readdirSync(directory);
    return names.map((name) => {
        const entryPath = common.joinPathSegments(directory, name, settings.pathSegmentSeparator);
        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
        const entry = {
            name,
            path: entryPath,
            dirent: utils.fs.createDirentFromStats(name, stats)
        };
        if (settings.stats) {
            entry.stats = stats;
        }
        return entry;
    });
}
exports.readdir = readdir;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.scandir/out/settings.js":
/*!**************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.scandir/out/settings.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const path = __webpack_require__(/*! path */ "path");
const fsStat = __webpack_require__(/*! @nodelib/fs.stat */ "../../node_modules/@nodelib/fs.stat/out/index.js");
const fs = __webpack_require__(/*! ./adapters/fs */ "../../node_modules/@nodelib/fs.scandir/out/adapters/fs.js");
class Settings {
    constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
        this.fs = fs.createFileSystemAdapter(this._options.fs);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);
        this.stats = this._getValue(this._options.stats, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        this.fsStatSettings = new fsStat.Settings({
            followSymbolicLink: this.followSymbolicLinks,
            fs: this.fs,
            throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
        });
    }
    _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
    }
}
exports["default"] = Settings;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.scandir/out/utils/fs.js":
/*!**************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.scandir/out/utils/fs.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDirentFromStats = void 0;
class DirentFromStats {
    constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
}
function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats);
}
exports.createDirentFromStats = createDirentFromStats;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.scandir/out/utils/index.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.scandir/out/utils/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.fs = void 0;
const fs = __webpack_require__(/*! ./fs */ "../../node_modules/@nodelib/fs.scandir/out/utils/fs.js");
exports.fs = fs;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.stat/out/adapters/fs.js":
/*!**************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.stat/out/adapters/fs.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
const fs = __webpack_require__(/*! fs */ "fs");
exports.FILE_SYSTEM_ADAPTER = {
    lstat: fs.lstat,
    stat: fs.stat,
    lstatSync: fs.lstatSync,
    statSync: fs.statSync
};
function createFileSystemAdapter(fsMethods) {
    if (fsMethods === undefined) {
        return exports.FILE_SYSTEM_ADAPTER;
    }
    return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
}
exports.createFileSystemAdapter = createFileSystemAdapter;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.stat/out/index.js":
/*!********************************************************!*\
  !*** ../../node_modules/@nodelib/fs.stat/out/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.statSync = exports.stat = exports.Settings = void 0;
const async = __webpack_require__(/*! ./providers/async */ "../../node_modules/@nodelib/fs.stat/out/providers/async.js");
const sync = __webpack_require__(/*! ./providers/sync */ "../../node_modules/@nodelib/fs.stat/out/providers/sync.js");
const settings_1 = __webpack_require__(/*! ./settings */ "../../node_modules/@nodelib/fs.stat/out/settings.js");
exports.Settings = settings_1.default;
function stat(path, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === 'function') {
        async.read(path, getSettings(), optionsOrSettingsOrCallback);
        return;
    }
    async.read(path, getSettings(optionsOrSettingsOrCallback), callback);
}
exports.stat = stat;
function statSync(path, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    return sync.read(path, settings);
}
exports.statSync = statSync;
function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
}


/***/ }),

/***/ "../../node_modules/@nodelib/fs.stat/out/providers/async.js":
/*!******************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.stat/out/providers/async.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.read = void 0;
function read(path, settings, callback) {
    settings.fs.lstat(path, (lstatError, lstat) => {
        if (lstatError !== null) {
            callFailureCallback(callback, lstatError);
            return;
        }
        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
            callSuccessCallback(callback, lstat);
            return;
        }
        settings.fs.stat(path, (statError, stat) => {
            if (statError !== null) {
                if (settings.throwErrorOnBrokenSymbolicLink) {
                    callFailureCallback(callback, statError);
                    return;
                }
                callSuccessCallback(callback, lstat);
                return;
            }
            if (settings.markSymbolicLink) {
                stat.isSymbolicLink = () => true;
            }
            callSuccessCallback(callback, stat);
        });
    });
}
exports.read = read;
function callFailureCallback(callback, error) {
    callback(error);
}
function callSuccessCallback(callback, result) {
    callback(null, result);
}


/***/ }),

/***/ "../../node_modules/@nodelib/fs.stat/out/providers/sync.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.stat/out/providers/sync.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.read = void 0;
function read(path, settings) {
    const lstat = settings.fs.lstatSync(path);
    if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
        return lstat;
    }
    try {
        const stat = settings.fs.statSync(path);
        if (settings.markSymbolicLink) {
            stat.isSymbolicLink = () => true;
        }
        return stat;
    }
    catch (error) {
        if (!settings.throwErrorOnBrokenSymbolicLink) {
            return lstat;
        }
        throw error;
    }
}
exports.read = read;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.stat/out/settings.js":
/*!***********************************************************!*\
  !*** ../../node_modules/@nodelib/fs.stat/out/settings.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const fs = __webpack_require__(/*! ./adapters/fs */ "../../node_modules/@nodelib/fs.stat/out/adapters/fs.js");
class Settings {
    constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
        this.fs = fs.createFileSystemAdapter(this._options.fs);
        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
    }
    _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
    }
}
exports["default"] = Settings;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.walk/out/index.js":
/*!********************************************************!*\
  !*** ../../node_modules/@nodelib/fs.walk/out/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;
const async_1 = __webpack_require__(/*! ./providers/async */ "../../node_modules/@nodelib/fs.walk/out/providers/async.js");
const stream_1 = __webpack_require__(/*! ./providers/stream */ "../../node_modules/@nodelib/fs.walk/out/providers/stream.js");
const sync_1 = __webpack_require__(/*! ./providers/sync */ "../../node_modules/@nodelib/fs.walk/out/providers/sync.js");
const settings_1 = __webpack_require__(/*! ./settings */ "../../node_modules/@nodelib/fs.walk/out/settings.js");
exports.Settings = settings_1.default;
function walk(directory, optionsOrSettingsOrCallback, callback) {
    if (typeof optionsOrSettingsOrCallback === 'function') {
        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
        return;
    }
    new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
}
exports.walk = walk;
function walkSync(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    const provider = new sync_1.default(directory, settings);
    return provider.read();
}
exports.walkSync = walkSync;
function walkStream(directory, optionsOrSettings) {
    const settings = getSettings(optionsOrSettings);
    const provider = new stream_1.default(directory, settings);
    return provider.read();
}
exports.walkStream = walkStream;
function getSettings(settingsOrOptions = {}) {
    if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
    }
    return new settings_1.default(settingsOrOptions);
}


/***/ }),

/***/ "../../node_modules/@nodelib/fs.walk/out/providers/async.js":
/*!******************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.walk/out/providers/async.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const async_1 = __webpack_require__(/*! ../readers/async */ "../../node_modules/@nodelib/fs.walk/out/readers/async.js");
class AsyncProvider {
    constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._storage = [];
    }
    read(callback) {
        this._reader.onError((error) => {
            callFailureCallback(callback, error);
        });
        this._reader.onEntry((entry) => {
            this._storage.push(entry);
        });
        this._reader.onEnd(() => {
            callSuccessCallback(callback, this._storage);
        });
        this._reader.read();
    }
}
exports["default"] = AsyncProvider;
function callFailureCallback(callback, error) {
    callback(error);
}
function callSuccessCallback(callback, entries) {
    callback(null, entries);
}


/***/ }),

/***/ "../../node_modules/@nodelib/fs.walk/out/providers/stream.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.walk/out/providers/stream.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const stream_1 = __webpack_require__(/*! stream */ "stream");
const async_1 = __webpack_require__(/*! ../readers/async */ "../../node_modules/@nodelib/fs.walk/out/readers/async.js");
class StreamProvider {
    constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._stream = new stream_1.Readable({
            objectMode: true,
            read: () => { },
            destroy: () => {
                if (!this._reader.isDestroyed) {
                    this._reader.destroy();
                }
            }
        });
    }
    read() {
        this._reader.onError((error) => {
            this._stream.emit('error', error);
        });
        this._reader.onEntry((entry) => {
            this._stream.push(entry);
        });
        this._reader.onEnd(() => {
            this._stream.push(null);
        });
        this._reader.read();
        return this._stream;
    }
}
exports["default"] = StreamProvider;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.walk/out/providers/sync.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.walk/out/providers/sync.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const sync_1 = __webpack_require__(/*! ../readers/sync */ "../../node_modules/@nodelib/fs.walk/out/readers/sync.js");
class SyncProvider {
    constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new sync_1.default(this._root, this._settings);
    }
    read() {
        return this._reader.read();
    }
}
exports["default"] = SyncProvider;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.walk/out/readers/async.js":
/*!****************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.walk/out/readers/async.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const events_1 = __webpack_require__(/*! events */ "events");
const fsScandir = __webpack_require__(/*! @nodelib/fs.scandir */ "../../node_modules/@nodelib/fs.scandir/out/index.js");
const fastq = __webpack_require__(/*! fastq */ "../../node_modules/fastq/queue.js");
const common = __webpack_require__(/*! ./common */ "../../node_modules/@nodelib/fs.walk/out/readers/common.js");
const reader_1 = __webpack_require__(/*! ./reader */ "../../node_modules/@nodelib/fs.walk/out/readers/reader.js");
class AsyncReader extends reader_1.default {
    constructor(_root, _settings) {
        super(_root, _settings);
        this._settings = _settings;
        this._scandir = fsScandir.scandir;
        this._emitter = new events_1.EventEmitter();
        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
        this._isFatalError = false;
        this._isDestroyed = false;
        this._queue.drain = () => {
            if (!this._isFatalError) {
                this._emitter.emit('end');
            }
        };
    }
    read() {
        this._isFatalError = false;
        this._isDestroyed = false;
        setImmediate(() => {
            this._pushToQueue(this._root, this._settings.basePath);
        });
        return this._emitter;
    }
    get isDestroyed() {
        return this._isDestroyed;
    }
    destroy() {
        if (this._isDestroyed) {
            throw new Error('The reader is already destroyed');
        }
        this._isDestroyed = true;
        this._queue.killAndDrain();
    }
    onEntry(callback) {
        this._emitter.on('entry', callback);
    }
    onError(callback) {
        this._emitter.once('error', callback);
    }
    onEnd(callback) {
        this._emitter.once('end', callback);
    }
    _pushToQueue(directory, base) {
        const queueItem = { directory, base };
        this._queue.push(queueItem, (error) => {
            if (error !== null) {
                this._handleError(error);
            }
        });
    }
    _worker(item, done) {
        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
            if (error !== null) {
                done(error, undefined);
                return;
            }
            for (const entry of entries) {
                this._handleEntry(entry, item.base);
            }
            done(null, undefined);
        });
    }
    _handleError(error) {
        if (this._isDestroyed || !common.isFatalError(this._settings, error)) {
            return;
        }
        this._isFatalError = true;
        this._isDestroyed = true;
        this._emitter.emit('error', error);
    }
    _handleEntry(entry, base) {
        if (this._isDestroyed || this._isFatalError) {
            return;
        }
        const fullpath = entry.path;
        if (base !== undefined) {
            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._emitEntry(entry);
        }
        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
        }
    }
    _emitEntry(entry) {
        this._emitter.emit('entry', entry);
    }
}
exports["default"] = AsyncReader;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.walk/out/readers/common.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.walk/out/readers/common.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;
function isFatalError(settings, error) {
    if (settings.errorFilter === null) {
        return true;
    }
    return !settings.errorFilter(error);
}
exports.isFatalError = isFatalError;
function isAppliedFilter(filter, value) {
    return filter === null || filter(value);
}
exports.isAppliedFilter = isAppliedFilter;
function replacePathSegmentSeparator(filepath, separator) {
    return filepath.split(/[/\\]/).join(separator);
}
exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
function joinPathSegments(a, b, separator) {
    if (a === '') {
        return b;
    }
    /**
     * The correct handling of cases when the first segment is a root (`/`, `C:/`) or UNC path (`//?/C:/`).
     */
    if (a.endsWith(separator)) {
        return a + b;
    }
    return a + separator + b;
}
exports.joinPathSegments = joinPathSegments;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.walk/out/readers/reader.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.walk/out/readers/reader.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const common = __webpack_require__(/*! ./common */ "../../node_modules/@nodelib/fs.walk/out/readers/common.js");
class Reader {
    constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._root = common.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
    }
}
exports["default"] = Reader;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.walk/out/readers/sync.js":
/*!***************************************************************!*\
  !*** ../../node_modules/@nodelib/fs.walk/out/readers/sync.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const fsScandir = __webpack_require__(/*! @nodelib/fs.scandir */ "../../node_modules/@nodelib/fs.scandir/out/index.js");
const common = __webpack_require__(/*! ./common */ "../../node_modules/@nodelib/fs.walk/out/readers/common.js");
const reader_1 = __webpack_require__(/*! ./reader */ "../../node_modules/@nodelib/fs.walk/out/readers/reader.js");
class SyncReader extends reader_1.default {
    constructor() {
        super(...arguments);
        this._scandir = fsScandir.scandirSync;
        this._storage = [];
        this._queue = new Set();
    }
    read() {
        this._pushToQueue(this._root, this._settings.basePath);
        this._handleQueue();
        return this._storage;
    }
    _pushToQueue(directory, base) {
        this._queue.add({ directory, base });
    }
    _handleQueue() {
        for (const item of this._queue.values()) {
            this._handleDirectory(item.directory, item.base);
        }
    }
    _handleDirectory(directory, base) {
        try {
            const entries = this._scandir(directory, this._settings.fsScandirSettings);
            for (const entry of entries) {
                this._handleEntry(entry, base);
            }
        }
        catch (error) {
            this._handleError(error);
        }
    }
    _handleError(error) {
        if (!common.isFatalError(this._settings, error)) {
            return;
        }
        throw error;
    }
    _handleEntry(entry, base) {
        const fullpath = entry.path;
        if (base !== undefined) {
            entry.path = common.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common.isAppliedFilter(this._settings.entryFilter, entry)) {
            this._pushToStorage(entry);
        }
        if (entry.dirent.isDirectory() && common.isAppliedFilter(this._settings.deepFilter, entry)) {
            this._pushToQueue(fullpath, base === undefined ? undefined : entry.path);
        }
    }
    _pushToStorage(entry) {
        this._storage.push(entry);
    }
}
exports["default"] = SyncReader;


/***/ }),

/***/ "../../node_modules/@nodelib/fs.walk/out/settings.js":
/*!***********************************************************!*\
  !*** ../../node_modules/@nodelib/fs.walk/out/settings.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const path = __webpack_require__(/*! path */ "path");
const fsScandir = __webpack_require__(/*! @nodelib/fs.scandir */ "../../node_modules/@nodelib/fs.scandir/out/index.js");
class Settings {
    constructor(_options = {}) {
        this._options = _options;
        this.basePath = this._getValue(this._options.basePath, undefined);
        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
        this.deepFilter = this._getValue(this._options.deepFilter, null);
        this.entryFilter = this._getValue(this._options.entryFilter, null);
        this.errorFilter = this._getValue(this._options.errorFilter, null);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path.sep);
        this.fsScandirSettings = new fsScandir.Settings({
            followSymbolicLinks: this._options.followSymbolicLinks,
            fs: this._options.fs,
            pathSegmentSeparator: this._options.pathSegmentSeparator,
            stats: this._options.stats,
            throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
        });
    }
    _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
    }
}
exports["default"] = Settings;


/***/ }),

/***/ "../../node_modules/@vscode/l10n/dist/main.js":
/*!****************************************************!*\
  !*** ../../node_modules/@vscode/l10n/dist/main.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  config: () => config,
  t: () => t
});
module.exports = __toCommonJS(main_exports);

// src/node/reader.ts
var import_fs = __webpack_require__(/*! fs */ "fs");
var import_promises = __webpack_require__(/*! fs/promises */ "fs/promises");
async function readFileFromUri(uri) {
  if (uri.protocol === "file:") {
    return await (0, import_promises.readFile)(uri, "utf8");
  }
  if (uri.protocol === "http:" || uri.protocol === "https:") {
    const res = await fetch(uri.toString(), {
      headers: {
        "Accept-Encoding": "gzip, deflate",
        "Accept": "application/json"
      },
      redirect: "follow"
    });
    if (!res.ok) {
      let error = `Unexpected ${res.status} response while trying to read ${uri}`;
      try {
        error += `: ${await res.text()}`;
      } catch {
      }
      throw new Error(error);
    }
    const decoded = await res.text();
    return decoded;
  }
  throw new Error("Unsupported protocol");
}
function readFileFromFsPath(fsPath) {
  return (0, import_fs.readFileSync)(fsPath, "utf8");
}

// src/main.ts
var bundle;
function config(config2) {
  if ("contents" in config2) {
    if (typeof config2.contents === "string") {
      bundle = JSON.parse(config2.contents);
    } else {
      bundle = config2.contents;
    }
    return;
  }
  if ("fsPath" in config2) {
    const fileContent = readFileFromFsPath(config2.fsPath);
    const content = JSON.parse(fileContent);
    bundle = isBuiltinExtension(content) ? content.contents.bundle : content;
    return;
  }
  if (config2.uri) {
    let uri = config2.uri;
    if (typeof config2.uri === "string") {
      uri = new URL(config2.uri);
    }
    return new Promise((resolve, reject) => {
      readFileFromUri(uri).then((uriContent) => {
        try {
          const content = JSON.parse(uriContent);
          bundle = isBuiltinExtension(content) ? content.contents.bundle : content;
          resolve();
        } catch (err) {
          reject(err);
        }
      }).catch((err) => {
        reject(err);
      });
    });
  }
}
function t(...args) {
  const firstArg = args[0];
  let key;
  let message;
  let formatArgs;
  if (typeof firstArg === "string") {
    key = firstArg;
    message = firstArg;
    args.splice(0, 1);
    formatArgs = !args || typeof args[0] !== "object" ? args : args[0];
  } else if (firstArg instanceof Array) {
    const replacements = args.slice(1);
    if (firstArg.length !== replacements.length + 1) {
      throw new Error("expected a string as the first argument to l10n.t");
    }
    let str = firstArg[0];
    for (let i = 1; i < firstArg.length; i++) {
      str += `{${i - 1}}` + firstArg[i];
    }
    return t(str, ...replacements);
  } else {
    message = firstArg.message;
    key = message;
    if (firstArg.comment && firstArg.comment.length > 0) {
      key += `/${Array.isArray(firstArg.comment) ? firstArg.comment.join("") : firstArg.comment}`;
    }
    formatArgs = firstArg.args ?? {};
  }
  const messageFromBundle = bundle?.[key];
  if (!messageFromBundle) {
    return format(message, formatArgs);
  }
  if (typeof messageFromBundle === "string") {
    return format(messageFromBundle, formatArgs);
  }
  if (messageFromBundle.comment) {
    return format(messageFromBundle.message, formatArgs);
  }
  return format(message, formatArgs);
}
var _format2Regexp = /{([^}]+)}/g;
function format(template, values) {
  if (Object.keys(values).length === 0) {
    return template;
  }
  return template.replace(_format2Regexp, (match, group) => values[group] ?? match);
}
function isBuiltinExtension(json) {
  return !!(typeof json?.contents?.bundle === "object" && typeof json?.version === "string");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (0);


/***/ }),

/***/ "../../node_modules/braces/index.js":
/*!******************************************!*\
  !*** ../../node_modules/braces/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const stringify = __webpack_require__(/*! ./lib/stringify */ "../../node_modules/braces/lib/stringify.js");
const compile = __webpack_require__(/*! ./lib/compile */ "../../node_modules/braces/lib/compile.js");
const expand = __webpack_require__(/*! ./lib/expand */ "../../node_modules/braces/lib/expand.js");
const parse = __webpack_require__(/*! ./lib/parse */ "../../node_modules/braces/lib/parse.js");

/**
 * Expand the given pattern or create a regex-compatible string.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']
 * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {String}
 * @api public
 */

const braces = (input, options = {}) => {
  let output = [];

  if (Array.isArray(input)) {
    for (let pattern of input) {
      let result = braces.create(pattern, options);
      if (Array.isArray(result)) {
        output.push(...result);
      } else {
        output.push(result);
      }
    }
  } else {
    output = [].concat(braces.create(input, options));
  }

  if (options && options.expand === true && options.nodupes === true) {
    output = [...new Set(output)];
  }
  return output;
};

/**
 * Parse the given `str` with the given `options`.
 *
 * ```js
 * // braces.parse(pattern, [, options]);
 * const ast = braces.parse('a/{b,c}/d');
 * console.log(ast);
 * ```
 * @param {String} pattern Brace pattern to parse
 * @param {Object} options
 * @return {Object} Returns an AST
 * @api public
 */

braces.parse = (input, options = {}) => parse(input, options);

/**
 * Creates a braces string from an AST, or an AST node.
 *
 * ```js
 * const braces = require('braces');
 * let ast = braces.parse('foo/{a,b}/bar');
 * console.log(stringify(ast.nodes[2])); //=> '{a,b}'
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.stringify = (input, options = {}) => {
  if (typeof input === 'string') {
    return stringify(braces.parse(input, options), options);
  }
  return stringify(input, options);
};

/**
 * Compiles a brace pattern into a regex-compatible, optimized string.
 * This method is called by the main [braces](#braces) function by default.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.compile('a/{b,c}/d'));
 * //=> ['a/(b|c)/d']
 * ```
 * @param {String} `input` Brace pattern or AST.
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.compile = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options);
  }
  return compile(input, options);
};

/**
 * Expands a brace pattern into an array. This method is called by the
 * main [braces](#braces) function when `options.expand` is true. Before
 * using this method it's recommended that you read the [performance notes](#performance))
 * and advantages of using [.compile](#compile) instead.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.expand('a/{b,c}/d'));
 * //=> ['a/b/d', 'a/c/d'];
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.expand = (input, options = {}) => {
  if (typeof input === 'string') {
    input = braces.parse(input, options);
  }

  let result = expand(input, options);

  // filter out empty strings if specified
  if (options.noempty === true) {
    result = result.filter(Boolean);
  }

  // filter out duplicates if specified
  if (options.nodupes === true) {
    result = [...new Set(result)];
  }

  return result;
};

/**
 * Processes a brace pattern and returns either an expanded array
 * (if `options.expand` is true), a highly optimized regex-compatible string.
 * This method is called by the main [braces](#braces) function.
 *
 * ```js
 * const braces = require('braces');
 * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))
 * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'
 * ```
 * @param {String} `pattern` Brace pattern
 * @param {Object} `options`
 * @return {Array} Returns an array of expanded values.
 * @api public
 */

braces.create = (input, options = {}) => {
  if (input === '' || input.length < 3) {
    return [input];
  }

 return options.expand !== true
    ? braces.compile(input, options)
    : braces.expand(input, options);
};

/**
 * Expose "braces"
 */

module.exports = braces;


/***/ }),

/***/ "../../node_modules/braces/lib/compile.js":
/*!************************************************!*\
  !*** ../../node_modules/braces/lib/compile.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fill = __webpack_require__(/*! fill-range */ "../../node_modules/fill-range/index.js");
const utils = __webpack_require__(/*! ./utils */ "../../node_modules/braces/lib/utils.js");

const compile = (ast, options = {}) => {
  let walk = (node, parent = {}) => {
    let invalidBlock = utils.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let invalid = invalidBlock === true || invalidNode === true;
    let prefix = options.escapeInvalid === true ? '\\' : '';
    let output = '';

    if (node.isOpen === true) {
      return prefix + node.value;
    }
    if (node.isClose === true) {
      return prefix + node.value;
    }

    if (node.type === 'open') {
      return invalid ? (prefix + node.value) : '(';
    }

    if (node.type === 'close') {
      return invalid ? (prefix + node.value) : ')';
    }

    if (node.type === 'comma') {
      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');
    }

    if (node.value) {
      return node.value;
    }

    if (node.nodes && node.ranges > 0) {
      let args = utils.reduce(node.nodes);
      let range = fill(...args, { ...options, wrap: false, toRegex: true });

      if (range.length !== 0) {
        return args.length > 1 && range.length > 1 ? `(${range})` : range;
      }
    }

    if (node.nodes) {
      for (let child of node.nodes) {
        output += walk(child, node);
      }
    }
    return output;
  };

  return walk(ast);
};

module.exports = compile;


/***/ }),

/***/ "../../node_modules/braces/lib/constants.js":
/*!**************************************************!*\
  !*** ../../node_modules/braces/lib/constants.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


module.exports = {
  MAX_LENGTH: 1024 * 64,

  // Digits
  CHAR_0: '0', /* 0 */
  CHAR_9: '9', /* 9 */

  // Alphabet chars.
  CHAR_UPPERCASE_A: 'A', /* A */
  CHAR_LOWERCASE_A: 'a', /* a */
  CHAR_UPPERCASE_Z: 'Z', /* Z */
  CHAR_LOWERCASE_Z: 'z', /* z */

  CHAR_LEFT_PARENTHESES: '(', /* ( */
  CHAR_RIGHT_PARENTHESES: ')', /* ) */

  CHAR_ASTERISK: '*', /* * */

  // Non-alphabetic chars.
  CHAR_AMPERSAND: '&', /* & */
  CHAR_AT: '@', /* @ */
  CHAR_BACKSLASH: '\\', /* \ */
  CHAR_BACKTICK: '`', /* ` */
  CHAR_CARRIAGE_RETURN: '\r', /* \r */
  CHAR_CIRCUMFLEX_ACCENT: '^', /* ^ */
  CHAR_COLON: ':', /* : */
  CHAR_COMMA: ',', /* , */
  CHAR_DOLLAR: '$', /* . */
  CHAR_DOT: '.', /* . */
  CHAR_DOUBLE_QUOTE: '"', /* " */
  CHAR_EQUAL: '=', /* = */
  CHAR_EXCLAMATION_MARK: '!', /* ! */
  CHAR_FORM_FEED: '\f', /* \f */
  CHAR_FORWARD_SLASH: '/', /* / */
  CHAR_HASH: '#', /* # */
  CHAR_HYPHEN_MINUS: '-', /* - */
  CHAR_LEFT_ANGLE_BRACKET: '<', /* < */
  CHAR_LEFT_CURLY_BRACE: '{', /* { */
  CHAR_LEFT_SQUARE_BRACKET: '[', /* [ */
  CHAR_LINE_FEED: '\n', /* \n */
  CHAR_NO_BREAK_SPACE: '\u00A0', /* \u00A0 */
  CHAR_PERCENT: '%', /* % */
  CHAR_PLUS: '+', /* + */
  CHAR_QUESTION_MARK: '?', /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: '>', /* > */
  CHAR_RIGHT_CURLY_BRACE: '}', /* } */
  CHAR_RIGHT_SQUARE_BRACKET: ']', /* ] */
  CHAR_SEMICOLON: ';', /* ; */
  CHAR_SINGLE_QUOTE: '\'', /* ' */
  CHAR_SPACE: ' ', /*   */
  CHAR_TAB: '\t', /* \t */
  CHAR_UNDERSCORE: '_', /* _ */
  CHAR_VERTICAL_LINE: '|', /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\uFEFF' /* \uFEFF */
};


/***/ }),

/***/ "../../node_modules/braces/lib/expand.js":
/*!***********************************************!*\
  !*** ../../node_modules/braces/lib/expand.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const fill = __webpack_require__(/*! fill-range */ "../../node_modules/fill-range/index.js");
const stringify = __webpack_require__(/*! ./stringify */ "../../node_modules/braces/lib/stringify.js");
const utils = __webpack_require__(/*! ./utils */ "../../node_modules/braces/lib/utils.js");

const append = (queue = '', stash = '', enclose = false) => {
  let result = [];

  queue = [].concat(queue);
  stash = [].concat(stash);

  if (!stash.length) return queue;
  if (!queue.length) {
    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;
  }

  for (let item of queue) {
    if (Array.isArray(item)) {
      for (let value of item) {
        result.push(append(value, stash, enclose));
      }
    } else {
      for (let ele of stash) {
        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;
        result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));
      }
    }
  }
  return utils.flatten(result);
};

const expand = (ast, options = {}) => {
  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;

  let walk = (node, parent = {}) => {
    node.queue = [];

    let p = parent;
    let q = parent.queue;

    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {
      p = p.parent;
      q = p.queue;
    }

    if (node.invalid || node.dollar) {
      q.push(append(q.pop(), stringify(node, options)));
      return;
    }

    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {
      q.push(append(q.pop(), ['{}']));
      return;
    }

    if (node.nodes && node.ranges > 0) {
      let args = utils.reduce(node.nodes);

      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');
      }

      let range = fill(...args, options);
      if (range.length === 0) {
        range = stringify(node, options);
      }

      q.push(append(q.pop(), range));
      node.nodes = [];
      return;
    }

    let enclose = utils.encloseBrace(node);
    let queue = node.queue;
    let block = node;

    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {
      block = block.parent;
      queue = block.queue;
    }

    for (let i = 0; i < node.nodes.length; i++) {
      let child = node.nodes[i];

      if (child.type === 'comma' && node.type === 'brace') {
        if (i === 1) queue.push('');
        queue.push('');
        continue;
      }

      if (child.type === 'close') {
        q.push(append(q.pop(), queue, enclose));
        continue;
      }

      if (child.value && child.type !== 'open') {
        queue.push(append(queue.pop(), child.value));
        continue;
      }

      if (child.nodes) {
        walk(child, node);
      }
    }

    return queue;
  };

  return utils.flatten(walk(ast));
};

module.exports = expand;


/***/ }),

/***/ "../../node_modules/braces/lib/parse.js":
/*!**********************************************!*\
  !*** ../../node_modules/braces/lib/parse.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const stringify = __webpack_require__(/*! ./stringify */ "../../node_modules/braces/lib/stringify.js");

/**
 * Constants
 */

const {
  MAX_LENGTH,
  CHAR_BACKSLASH, /* \ */
  CHAR_BACKTICK, /* ` */
  CHAR_COMMA, /* , */
  CHAR_DOT, /* . */
  CHAR_LEFT_PARENTHESES, /* ( */
  CHAR_RIGHT_PARENTHESES, /* ) */
  CHAR_LEFT_CURLY_BRACE, /* { */
  CHAR_RIGHT_CURLY_BRACE, /* } */
  CHAR_LEFT_SQUARE_BRACKET, /* [ */
  CHAR_RIGHT_SQUARE_BRACKET, /* ] */
  CHAR_DOUBLE_QUOTE, /* " */
  CHAR_SINGLE_QUOTE, /* ' */
  CHAR_NO_BREAK_SPACE,
  CHAR_ZERO_WIDTH_NOBREAK_SPACE
} = __webpack_require__(/*! ./constants */ "../../node_modules/braces/lib/constants.js");

/**
 * parse
 */

const parse = (input, options = {}) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string');
  }

  let opts = options || {};
  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  if (input.length > max) {
    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
  }

  let ast = { type: 'root', input, nodes: [] };
  let stack = [ast];
  let block = ast;
  let prev = ast;
  let brackets = 0;
  let length = input.length;
  let index = 0;
  let depth = 0;
  let value;
  let memo = {};

  /**
   * Helpers
   */

  const advance = () => input[index++];
  const push = node => {
    if (node.type === 'text' && prev.type === 'dot') {
      prev.type = 'text';
    }

    if (prev && prev.type === 'text' && node.type === 'text') {
      prev.value += node.value;
      return;
    }

    block.nodes.push(node);
    node.parent = block;
    node.prev = prev;
    prev = node;
    return node;
  };

  push({ type: 'bos' });

  while (index < length) {
    block = stack[stack.length - 1];
    value = advance();

    /**
     * Invalid chars
     */

    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
      continue;
    }

    /**
     * Escaped chars
     */

    if (value === CHAR_BACKSLASH) {
      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });
      continue;
    }

    /**
     * Right square bracket (literal): ']'
     */

    if (value === CHAR_RIGHT_SQUARE_BRACKET) {
      push({ type: 'text', value: '\\' + value });
      continue;
    }

    /**
     * Left square bracket: '['
     */

    if (value === CHAR_LEFT_SQUARE_BRACKET) {
      brackets++;

      let closed = true;
      let next;

      while (index < length && (next = advance())) {
        value += next;

        if (next === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          continue;
        }

        if (next === CHAR_BACKSLASH) {
          value += advance();
          continue;
        }

        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          brackets--;

          if (brackets === 0) {
            break;
          }
        }
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Parentheses
     */

    if (value === CHAR_LEFT_PARENTHESES) {
      block = push({ type: 'paren', nodes: [] });
      stack.push(block);
      push({ type: 'text', value });
      continue;
    }

    if (value === CHAR_RIGHT_PARENTHESES) {
      if (block.type !== 'paren') {
        push({ type: 'text', value });
        continue;
      }
      block = stack.pop();
      push({ type: 'text', value });
      block = stack[stack.length - 1];
      continue;
    }

    /**
     * Quotes: '|"|`
     */

    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
      let open = value;
      let next;

      if (options.keepQuotes !== true) {
        value = '';
      }

      while (index < length && (next = advance())) {
        if (next === CHAR_BACKSLASH) {
          value += next + advance();
          continue;
        }

        if (next === open) {
          if (options.keepQuotes === true) value += next;
          break;
        }

        value += next;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Left curly brace: '{'
     */

    if (value === CHAR_LEFT_CURLY_BRACE) {
      depth++;

      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;
      let brace = {
        type: 'brace',
        open: true,
        close: false,
        dollar,
        depth,
        commas: 0,
        ranges: 0,
        nodes: []
      };

      block = push(brace);
      stack.push(block);
      push({ type: 'open', value });
      continue;
    }

    /**
     * Right curly brace: '}'
     */

    if (value === CHAR_RIGHT_CURLY_BRACE) {
      if (block.type !== 'brace') {
        push({ type: 'text', value });
        continue;
      }

      let type = 'close';
      block = stack.pop();
      block.close = true;

      push({ type, value });
      depth--;

      block = stack[stack.length - 1];
      continue;
    }

    /**
     * Comma: ','
     */

    if (value === CHAR_COMMA && depth > 0) {
      if (block.ranges > 0) {
        block.ranges = 0;
        let open = block.nodes.shift();
        block.nodes = [open, { type: 'text', value: stringify(block) }];
      }

      push({ type: 'comma', value });
      block.commas++;
      continue;
    }

    /**
     * Dot: '.'
     */

    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
      let siblings = block.nodes;

      if (depth === 0 || siblings.length === 0) {
        push({ type: 'text', value });
        continue;
      }

      if (prev.type === 'dot') {
        block.range = [];
        prev.value += value;
        prev.type = 'range';

        if (block.nodes.length !== 3 && block.nodes.length !== 5) {
          block.invalid = true;
          block.ranges = 0;
          prev.type = 'text';
          continue;
        }

        block.ranges++;
        block.args = [];
        continue;
      }

      if (prev.type === 'range') {
        siblings.pop();

        let before = siblings[siblings.length - 1];
        before.value += prev.value + value;
        prev = before;
        block.ranges--;
        continue;
      }

      push({ type: 'dot', value });
      continue;
    }

    /**
     * Text
     */

    push({ type: 'text', value });
  }

  // Mark imbalanced braces and brackets as invalid
  do {
    block = stack.pop();

    if (block.type !== 'root') {
      block.nodes.forEach(node => {
        if (!node.nodes) {
          if (node.type === 'open') node.isOpen = true;
          if (node.type === 'close') node.isClose = true;
          if (!node.nodes) node.type = 'text';
          node.invalid = true;
        }
      });

      // get the location of the block on parent.nodes (block's siblings)
      let parent = stack[stack.length - 1];
      let index = parent.nodes.indexOf(block);
      // replace the (invalid) block with it's nodes
      parent.nodes.splice(index, 1, ...block.nodes);
    }
  } while (stack.length > 0);

  push({ type: 'eos' });
  return ast;
};

module.exports = parse;


/***/ }),

/***/ "../../node_modules/braces/lib/stringify.js":
/*!**************************************************!*\
  !*** ../../node_modules/braces/lib/stringify.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const utils = __webpack_require__(/*! ./utils */ "../../node_modules/braces/lib/utils.js");

module.exports = (ast, options = {}) => {
  let stringify = (node, parent = {}) => {
    let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
    let invalidNode = node.invalid === true && options.escapeInvalid === true;
    let output = '';

    if (node.value) {
      if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
        return '\\' + node.value;
      }
      return node.value;
    }

    if (node.value) {
      return node.value;
    }

    if (node.nodes) {
      for (let child of node.nodes) {
        output += stringify(child);
      }
    }
    return output;
  };

  return stringify(ast);
};



/***/ }),

/***/ "../../node_modules/braces/lib/utils.js":
/*!**********************************************!*\
  !*** ../../node_modules/braces/lib/utils.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.isInteger = num => {
  if (typeof num === 'number') {
    return Number.isInteger(num);
  }
  if (typeof num === 'string' && num.trim() !== '') {
    return Number.isInteger(Number(num));
  }
  return false;
};

/**
 * Find a node of the given type
 */

exports.find = (node, type) => node.nodes.find(node => node.type === type);

/**
 * Find a node of the given type
 */

exports.exceedsLimit = (min, max, step = 1, limit) => {
  if (limit === false) return false;
  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;
  return ((Number(max) - Number(min)) / Number(step)) >= limit;
};

/**
 * Escape the given node with '\\' before node.value
 */

exports.escapeNode = (block, n = 0, type) => {
  let node = block.nodes[n];
  if (!node) return;

  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {
    if (node.escaped !== true) {
      node.value = '\\' + node.value;
      node.escaped = true;
    }
  }
};

/**
 * Returns true if the given brace node should be enclosed in literal braces
 */

exports.encloseBrace = node => {
  if (node.type !== 'brace') return false;
  if ((node.commas >> 0 + node.ranges >> 0) === 0) {
    node.invalid = true;
    return true;
  }
  return false;
};

/**
 * Returns true if a brace node is invalid.
 */

exports.isInvalidBrace = block => {
  if (block.type !== 'brace') return false;
  if (block.invalid === true || block.dollar) return true;
  if ((block.commas >> 0 + block.ranges >> 0) === 0) {
    block.invalid = true;
    return true;
  }
  if (block.open !== true || block.close !== true) {
    block.invalid = true;
    return true;
  }
  return false;
};

/**
 * Returns true if a node is an open or close node
 */

exports.isOpenOrClose = node => {
  if (node.type === 'open' || node.type === 'close') {
    return true;
  }
  return node.open === true || node.close === true;
};

/**
 * Reduce an array of text nodes.
 */

exports.reduce = nodes => nodes.reduce((acc, node) => {
  if (node.type === 'text') acc.push(node.value);
  if (node.type === 'range') node.type = 'text';
  return acc;
}, []);

/**
 * Flatten an array
 */

exports.flatten = (...args) => {
  const result = [];
  const flat = arr => {
    for (let i = 0; i < arr.length; i++) {
      let ele = arr[i];
      Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
    }
    return result;
  };
  flat(args);
  return result;
};


/***/ }),

/***/ "../../node_modules/cdocparser/index.js":
/*!**********************************************!*\
  !*** ../../node_modules/cdocparser/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var EventEmitter = (__webpack_require__(/*! events */ "events").EventEmitter);
var util = __webpack_require__(/*! util */ "util");
var stripIndent = __webpack_require__(/*! strip-indent */ "../../node_modules/cdocparser/node_modules/strip-indent/index.js");
var extend = __webpack_require__(/*! lodash.assign */ "../../node_modules/lodash.assign/index.js");
var escapeStringRegexp = __webpack_require__(/*! escape-string-regexp */ "../../node_modules/cdocparser/node_modules/escape-string-regexp/index.js");

/**
 * Index a buffer of text to give the byte offset for each line.
 *
 * @param {String} buffer
 * @return {Object} index
 */
function createIndex (buffer) {
  var indexData = {0: 0};

  for (var i = 0, length = buffer.length, line = 1; i < length; i++) {
    if (buffer[i] === '\n') {
      indexData[i + 1] = line;
      line += 1;
    }
  }

  return indexData;
}

/**
 * Extract all C-Style comments from the input code
 */
var CommentExtractor = (function () {

  /**
   * Create a RegExp to extract comments.
   *
   * @param {String} lineCommentStyle Characters we expect to see at the start of a line comment.
   * @param {String} blockCommentStyle Characters we expect to see at the start of a block comment.
   * @return {RegExp}
   */
  function createDocCommentRegExp (lineCommentStyle, blockCommentStyle) {
    var linePattern;
    if (lineCommentStyle) {
      linePattern =
          '^(?:[ \\t]*' +
          escapeStringRegexp(lineCommentStyle) +
          '.*\\S*[\\s]?)+$';
    }

    var blockPattern;
    if (blockCommentStyle) {
      blockPattern =
          '^[ \\t]*' +
          escapeStringRegexp(blockCommentStyle) +
          '((?:[^*]|\\n|(?:\\*+(?:[^*/]|\\n)))*)(\\*+)\\/';
    }


    var regex = linePattern;

    if (regex !== undefined && blockPattern !== undefined){
      regex += '|' + blockPattern;
    }

    if (regex === undefined) {
      regex = blockPattern;
    }

    return new RegExp(regex, 'gm');
  }

  /**
   * Create a RegExp for extracting the text of line comments.
   *
   * @param {String} lineCommentStyle Characters we expect to see at the start of a line comment.
   * @return {RegExp}
   */
  function createLineCommentRegExp (lineCommentStyle) {
    if (lineCommentStyle) {
      return new RegExp(escapeStringRegexp(lineCommentStyle) + '[\\/]*');
    }
    return null;
  }

  /**
   * Generate a function that will index a buffer of text
   * and return a line for a specify char index
   *
   * @param {String} buffer buffer that is indexed
   * @return {Function} Function that translates an char index to line number
   */
  function index(buffer) {
    var indexData = createIndex(buffer);

    return function (offset) {
      // offset 0 will always be the first line
      if (offset === 0) { return 0; }

      // exact match
      if (indexData[offset] !== undefined) { return indexData[offset]; }

      // step backwards until we find a newline
      for (var i = offset; i > 0 && buffer[i-1] != '\n'; i--);

      return indexData[i];
    };
  }

  var cleanBlockComment = function (comment) {
    var removeFirstLine = comment.replace(/^.*?\n+|\n.*?$/g, '');
    var removeLeadingStar = removeFirstLine.replace(/^[ \t]*\*/gm, '');
    return stripIndent(removeLeadingStar).split(/\n/);
  };

  var cleanLineComments = function (comment, lineCommentRegExp) {
    var type;
    var lines = comment.split(lineCommentRegExp);
    lines.shift();

    if (lines[0] !== undefined && comment.trim().indexOf('////') === 0){
      lines.shift(); // Remove line with stars
      type = 'poster';
    }

    var removedCommentChars = lines.join('').replace(/\n$/, '');

    // Remove indention and remove last element if empty
    lines = stripIndent(removedCommentChars).split('\n');

    return {
      lines : lines,
      type : type
    };
  };

  var unifyLineEndings = function (code) {
    return code.replace(/\r\n?|\n/g, '\n');
  };


  function CommentExtractor (parseContext, opts) {
    this.parseContext = parseContext;

    opts = opts || {};

    // Enable both line comments and block comments
    opts.lineComment  = opts.lineComment  === false ? false : true;
    opts.blockComment = opts.blockComment === false ? false : true;

    if (opts.lineComment === false && opts.blockComment === false) {
      throw new Error('At least one comment style has to be enabled.');
    }

    if (opts.lineComment && !opts.lineCommentStyle) {
      opts.lineCommentStyle = '///';
    }

    if (opts.blockComment && !opts.blockCommentStyle) {
      opts.blockCommentStyle = '/**';
    }

    this.opts = opts;

    this.docCommentRegEx = createDocCommentRegExp(opts.lineCommentStyle, opts.blockCommentStyle);
    this.lineCommentRegEx = createLineCommentRegExp(opts.lineCommentStyle);
  }

  /**
   * Extract all comments from `code`
   * The `this.contextParser` to extract the context of the comment
   * @return {Array} Array of comment object like `{ lines : [array of comment lines], context : [result of contextParser] }`
   */
  CommentExtractor.prototype.extract = function (code) {
    code = unifyLineEndings(code);

    var match;
    var comments = [];

    var lineNumberFor = index(code);

    // reset
    this.docCommentRegEx.lastIndex = 0;

    while ( (match = this.docCommentRegEx.exec(code)) ) {
      var commentType = 'block'; // Defaults to block comment
      var lines;
      // Detect if line comment or block comment
      if (match[1] === undefined){
        var lineObj = cleanLineComments(match[0], this.lineCommentRegEx);
        lines = lineObj.lines;
        commentType = lineObj.type || 'line';
      } else {
        lines = cleanBlockComment(match[1]);
        // If there are more than one stare
        if (match[2].length > 1) {
          commentType =  'poster';
        }
      }

      var endOffset = match.index + match[0].length;

      var lineNumberWithOffsetFor = function(offset){
        return lineNumberFor(endOffset + 1 + offset);
      };

      // Add 1 so we get 1-based values.
      var startLineNumber = lineNumberFor(match.index) + 1;

      // Exclude the final character as sometimes it will be a newline
      var endLineNumber = lineNumberFor(endOffset - 1) + 1;

      comments.push({
        lines: lines,
        type: commentType,
        commentRange: {
          start: startLineNumber,
          end: endLineNumber
        },
        context: this.parseContext(code.substr(endOffset), lineNumberWithOffsetFor)
      });
    }

    return comments;
  };

  return CommentExtractor;
})();

var isAnnotationAllowed = function (comment, annotation){
  if (comment.type !== 'poster' &&
      comment.context.type &&
      Array.isArray(annotation.allowedOn)) {
    return annotation.allowedOn.indexOf(comment.context.type) !== -1;
  }
  return true;
};

var shouldAutofill = function(name, config){
  if (config.autofill === undefined || config.autofill === true ){
    return true;
  }
  if (Array.isArray(config.autofill)){
    return config.autofill.indexOf(name) !== -1;
  }
  return false;
};

var isMultiple = function(annotation){
  return annotation.multiple === undefined || annotation.multiple === true;
};

var getContent = function(line, match){
  return line.substr(match.index + match[0].length).replace(/^[ \t]+|[ \t]+$/g,'');
};

/**
 * Capable of parsing comments and resolving @annotations
 */
var CommentParser = (function(){
  var annotationRegex = /^@(\w+)/;

  function CommentParser (annotations, config) {
    EventEmitter.call(this);
    this.annotations = annotations;

    this.config = config || {};

    // Translate autofill from alias to real names.
    if (Array.isArray(this.config.autofill)){
      this.config.autofill = this.config.autofill.map(function(name){
        return annotations._.alias[name] || name;
      });
    }
  }

  util.inherits(CommentParser, EventEmitter);

  var parseComment = function (comment, annotations, posterComment, id) {
    var parsedComment = {
      description: '',
      commentRange: comment.commentRange,
      context: comment.context
    };

    comment.lines.forEach(function (line) {
      var match = annotationRegex.exec(line);
      if (match) {
        var name = annotations._.alias[match[1]] || match[1]; // Resolve name from alias
        var annotation = annotations[name];

        if (annotation && annotation.parse){

          if (isAnnotationAllowed(comment, annotation)){

            var allowMultiple = isMultiple(annotation);

            if (allowMultiple){

              if (typeof parsedComment[name] === 'undefined') {
                parsedComment[name] = [];
              }

              // Parse the annotation.
              var result = annotation.parse(getContent(line, match), parsedComment, id);

              // If it is a boolean use the annotaion as a flag
              if ( result === false || result === true) {
                parsedComment[name] = result;
              } else if ( result !== undefined ) {
                parsedComment[name].push( result );
              }

            } else if (typeof parsedComment[name] === 'undefined'){
              parsedComment[name] = annotation.parse(getContent(line, match), parsedComment, id);
            } else {
              this.emit(
                'warning',
                new Error(
                  'Annotation `'+ name + '` is only allowed once per comment, second value will be ignored.' +
                  ((id) ? 'Location `' + id + ':' + comment.commentRange.start + ':' + comment.commentRange.end + '`' : '')
                )
              );
            }
          } else {
            this.emit(
              'warning',
              new Error(
                'Annotation `' + name + '` is not allowed on comment from type `' + comment.context.type + '`' +
                ((id) ? ' in `' + id + ':' + comment.commentRange.start + ':' + comment.commentRange.end + '`' : '') +
                '.'
              )
            );
          }

        } else { 
          this.emit(
            'warning',
            new Error(
              'Parser for annotation `' + match[1] + '` not found.' +
              ((id) ? ' Location: `' + id + ':' + comment.commentRange.start + ':' + comment.commentRange.end + '`' : '')
            )
          );
        }
      } else {
        parsedComment.description += line + '\n';
      }
    }, this);



    // Save this as the PosterComment
    if (comment.type === 'poster'){
      // Only allow one posterComment per file
      if (Object.keys(posterComment).length === 0){
        extend(posterComment, parsedComment);
      } else {
        this.emit(
          'warning',
          new Error(
            'You can\'t have more than one poster comment.' +
            ((id) ? ' Location: `' + id + ':' + comment.commentRange.start + ':' + comment.commentRange.end + '`' : '')
          )
        );
      }
      // Don't add poster comments to the output
      return null;
    } else {
      // Merge in posterComment annotations and overwrite each annotation of item if it was not set
      // do it only if the annotation is allowed on the parsedComment.context.type
      Object.keys(posterComment).forEach(function(key){
        if (parsedComment[key] === undefined &&
            isAnnotationAllowed(parsedComment, annotations[key])){
          parsedComment[key] = posterComment[key];
        }
      });
    }
    // Fill in defaults
    Object.keys(annotations).forEach(function (name){
      if ( name !== '_' ){
        var defaultFunc = annotations[name].default;
        var autofillFunc = annotations[name].autofill;
        if ( isAnnotationAllowed(comment, annotations[name]) ) {

          // Only use default if user hasn't used annotation
          if (defaultFunc && parsedComment[name] === undefined ) {
            var defaultValue = defaultFunc(parsedComment);
            if (defaultValue !== undefined) {
              parsedComment[name] = defaultValue;
            }
          }

          if (autofillFunc && shouldAutofill(name, this.config)) {
            var autofillValue = autofillFunc(parsedComment);
            if (autofillValue !== undefined) {
              parsedComment[name] = autofillValue;
            }
          }
        }
      }
    }, this);

    return parsedComment;
  };

  /**
   * Parse the comments returned by the CommentExtractor.
   * Generate data use in the view
   */
  CommentParser.prototype.parse = function (comments, id) {
    var result = [];
    var posterComment = {};
    var thisParseComment = parseComment.bind(this);

    comments.forEach(function (comment) {
      var parsedComment = thisParseComment(comment, this.annotations, posterComment, id);
      if (parsedComment !== null){
        result.push(parsedComment);
      }
    }, this);

    return result;
  };


  return CommentParser;
})();

/**
 * Create an indexer function using given getter to choose the key
 * to index on.
 *
 * @param {Function} getter
 * @return {Function}
 */
function indexBy(getter) {

  /**
   * Index given data.
   *
   * @param {Array} data
   * @return {Object}
   */
  return function indexer(data) {
    var index = {};

    data.forEach(function (comment) {
      var type = getter(comment);

      if (typeof index[type] === 'undefined') {
        index[type] = [];
      }

      index[type].push(comment);
    });

    return index;
  };
}

var indexByType = indexBy(function (comment) {
  return comment.context.type;
});

module.exports.CommentParser = CommentParser;
module.exports.CommentExtractor = CommentExtractor;
module.exports.createIndex = createIndex;
module.exports.indexBy = indexBy;
module.exports.indexByType = indexByType;


/***/ }),

/***/ "../../node_modules/cdocparser/node_modules/escape-string-regexp/index.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/cdocparser/node_modules/escape-string-regexp/index.js ***!
  \********************************************************************************/
/***/ ((module) => {

"use strict";


var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

module.exports = function (str) {
	if (typeof str !== 'string') {
		throw new TypeError('Expected a string');
	}

	return str.replace(matchOperatorsRe, '\\$&');
};


/***/ }),

/***/ "../../node_modules/cdocparser/node_modules/strip-indent/index.js":
/*!************************************************************************!*\
  !*** ../../node_modules/cdocparser/node_modules/strip-indent/index.js ***!
  \************************************************************************/
/***/ ((module) => {

"use strict";

module.exports = function (str) {
	var match = str.match(/^[ \t]*(?=\S)/gm);

	if (!match) {
		return str;
	}

	var indent = Math.min.apply(Math, match.map(function (el) {
		return el.length;
	}));

	var re = new RegExp('^[ \\t]{' + indent + '}', 'gm');

	return indent > 0 ? str.replace(re, '') : str;
};


/***/ }),

/***/ "../../node_modules/fast-glob/node_modules/glob-parent/index.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/fast-glob/node_modules/glob-parent/index.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isGlob = __webpack_require__(/*! is-glob */ "../../node_modules/is-glob/index.js");
var pathPosixDirname = (__webpack_require__(/*! path */ "path").posix).dirname;
var isWin32 = (__webpack_require__(/*! os */ "os").platform)() === 'win32';

var slash = '/';
var backslash = /\\/g;
var enclosure = /[\{\[].*[\}\]]$/;
var globby = /(^|[^\\])([\{\[]|\([^\)]+$)/;
var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;

/**
 * @param {string} str
 * @param {Object} opts
 * @param {boolean} [opts.flipBackslashes=true]
 * @returns {string}
 */
module.exports = function globParent(str, opts) {
  var options = Object.assign({ flipBackslashes: true }, opts);

  // flip windows path separators
  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {
    str = str.replace(backslash, slash);
  }

  // special case for strings ending in enclosure containing path separator
  if (enclosure.test(str)) {
    str += slash;
  }

  // preserves full path in case of trailing path separator
  str += 'a';

  // remove path parts that are globby
  do {
    str = pathPosixDirname(str);
  } while (isGlob(str) || globby.test(str));

  // remove escape chars and return result
  return str.replace(escaped, '$1');
};


/***/ }),

/***/ "../../node_modules/fast-glob/out/index.js":
/*!*************************************************!*\
  !*** ../../node_modules/fast-glob/out/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

const taskManager = __webpack_require__(/*! ./managers/tasks */ "../../node_modules/fast-glob/out/managers/tasks.js");
const async_1 = __webpack_require__(/*! ./providers/async */ "../../node_modules/fast-glob/out/providers/async.js");
const stream_1 = __webpack_require__(/*! ./providers/stream */ "../../node_modules/fast-glob/out/providers/stream.js");
const sync_1 = __webpack_require__(/*! ./providers/sync */ "../../node_modules/fast-glob/out/providers/sync.js");
const settings_1 = __webpack_require__(/*! ./settings */ "../../node_modules/fast-glob/out/settings.js");
const utils = __webpack_require__(/*! ./utils */ "../../node_modules/fast-glob/out/utils/index.js");
async function FastGlob(source, options) {
    assertPatternsInput(source);
    const works = getWorks(source, async_1.default, options);
    const result = await Promise.all(works);
    return utils.array.flatten(result);
}
// https://github.com/typescript-eslint/typescript-eslint/issues/60
// eslint-disable-next-line no-redeclare
(function (FastGlob) {
    FastGlob.glob = FastGlob;
    FastGlob.globSync = sync;
    FastGlob.globStream = stream;
    FastGlob.async = FastGlob;
    function sync(source, options) {
        assertPatternsInput(source);
        const works = getWorks(source, sync_1.default, options);
        return utils.array.flatten(works);
    }
    FastGlob.sync = sync;
    function stream(source, options) {
        assertPatternsInput(source);
        const works = getWorks(source, stream_1.default, options);
        /**
         * The stream returned by the provider cannot work with an asynchronous iterator.
         * To support asynchronous iterators, regardless of the number of tasks, we always multiplex streams.
         * This affects performance (+25%). I don't see best solution right now.
         */
        return utils.stream.merge(works);
    }
    FastGlob.stream = stream;
    function generateTasks(source, options) {
        assertPatternsInput(source);
        const patterns = [].concat(source);
        const settings = new settings_1.default(options);
        return taskManager.generate(patterns, settings);
    }
    FastGlob.generateTasks = generateTasks;
    function isDynamicPattern(source, options) {
        assertPatternsInput(source);
        const settings = new settings_1.default(options);
        return utils.pattern.isDynamicPattern(source, settings);
    }
    FastGlob.isDynamicPattern = isDynamicPattern;
    function escapePath(source) {
        assertPatternsInput(source);
        return utils.path.escape(source);
    }
    FastGlob.escapePath = escapePath;
    function convertPathToPattern(source) {
        assertPatternsInput(source);
        return utils.path.convertPathToPattern(source);
    }
    FastGlob.convertPathToPattern = convertPathToPattern;
    let posix;
    (function (posix) {
        function escapePath(source) {
            assertPatternsInput(source);
            return utils.path.escapePosixPath(source);
        }
        posix.escapePath = escapePath;
        function convertPathToPattern(source) {
            assertPatternsInput(source);
            return utils.path.convertPosixPathToPattern(source);
        }
        posix.convertPathToPattern = convertPathToPattern;
    })(posix = FastGlob.posix || (FastGlob.posix = {}));
    let win32;
    (function (win32) {
        function escapePath(source) {
            assertPatternsInput(source);
            return utils.path.escapeWindowsPath(source);
        }
        win32.escapePath = escapePath;
        function convertPathToPattern(source) {
            assertPatternsInput(source);
            return utils.path.convertWindowsPathToPattern(source);
        }
        win32.convertPathToPattern = convertPathToPattern;
    })(win32 = FastGlob.win32 || (FastGlob.win32 = {}));
})(FastGlob || (FastGlob = {}));
function getWorks(source, _Provider, options) {
    const patterns = [].concat(source);
    const settings = new settings_1.default(options);
    const tasks = taskManager.generate(patterns, settings);
    const provider = new _Provider(settings);
    return tasks.map(provider.read, provider);
}
function assertPatternsInput(input) {
    const source = [].concat(input);
    const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
    if (!isValidSource) {
        throw new TypeError('Patterns must be a string (non empty) or an array of strings');
    }
}
module.exports = FastGlob;


/***/ }),

/***/ "../../node_modules/fast-glob/out/managers/tasks.js":
/*!**********************************************************!*\
  !*** ../../node_modules/fast-glob/out/managers/tasks.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;
const utils = __webpack_require__(/*! ../utils */ "../../node_modules/fast-glob/out/utils/index.js");
function generate(input, settings) {
    const patterns = processPatterns(input, settings);
    const ignore = processPatterns(settings.ignore, settings);
    const positivePatterns = getPositivePatterns(patterns);
    const negativePatterns = getNegativePatternsAsPositive(patterns, ignore);
    const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
    const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
    const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, /* dynamic */ false);
    const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, /* dynamic */ true);
    return staticTasks.concat(dynamicTasks);
}
exports.generate = generate;
function processPatterns(input, settings) {
    let patterns = input;
    /**
     * The original pattern like `{,*,**,a/*}` can lead to problems checking the depth when matching entry
     * and some problems with the micromatch package (see fast-glob issues: #365, #394).
     *
     * To solve this problem, we expand all patterns containing brace expansion. This can lead to a slight slowdown
     * in matching in the case of a large set of patterns after expansion.
     */
    if (settings.braceExpansion) {
        patterns = utils.pattern.expandPatternsWithBraceExpansion(patterns);
    }
    /**
     * If the `baseNameMatch` option is enabled, we must add globstar to patterns, so that they can be used
     * at any nesting level.
     *
     * We do this here, because otherwise we have to complicate the filtering logic. For example, we need to change
     * the pattern in the filter before creating a regular expression. There is no need to change the patterns
     * in the application. Only on the input.
     */
    if (settings.baseNameMatch) {
        patterns = patterns.map((pattern) => pattern.includes('/') ? pattern : `**/${pattern}`);
    }
    /**
     * This method also removes duplicate slashes that may have been in the pattern or formed as a result of expansion.
     */
    return patterns.map((pattern) => utils.pattern.removeDuplicateSlashes(pattern));
}
/**
 * Returns tasks grouped by basic pattern directories.
 *
 * Patterns that can be found inside (`./`) and outside (`../`) the current directory are handled separately.
 * This is necessary because directory traversal starts at the base directory and goes deeper.
 */
function convertPatternsToTasks(positive, negative, dynamic) {
    const tasks = [];
    const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
    const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
    const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
    const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
    tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
    /*
     * For the sake of reducing future accesses to the file system, we merge all tasks within the current directory
     * into a global task, if at least one pattern refers to the root (`.`). In this case, the global task covers the rest.
     */
    if ('.' in insideCurrentDirectoryGroup) {
        tasks.push(convertPatternGroupToTask('.', patternsInsideCurrentDirectory, negative, dynamic));
    }
    else {
        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
    }
    return tasks;
}
exports.convertPatternsToTasks = convertPatternsToTasks;
function getPositivePatterns(patterns) {
    return utils.pattern.getPositivePatterns(patterns);
}
exports.getPositivePatterns = getPositivePatterns;
function getNegativePatternsAsPositive(patterns, ignore) {
    const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore);
    const positive = negative.map(utils.pattern.convertToPositivePattern);
    return positive;
}
exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
function groupPatternsByBaseDirectory(patterns) {
    const group = {};
    return patterns.reduce((collection, pattern) => {
        const base = utils.pattern.getBaseDirectory(pattern);
        if (base in collection) {
            collection[base].push(pattern);
        }
        else {
            collection[base] = [pattern];
        }
        return collection;
    }, group);
}
exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
function convertPatternGroupsToTasks(positive, negative, dynamic) {
    return Object.keys(positive).map((base) => {
        return convertPatternGroupToTask(base, positive[base], negative, dynamic);
    });
}
exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
function convertPatternGroupToTask(base, positive, negative, dynamic) {
    return {
        dynamic,
        positive,
        negative,
        base,
        patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
    };
}
exports.convertPatternGroupToTask = convertPatternGroupToTask;


/***/ }),

/***/ "../../node_modules/fast-glob/out/providers/async.js":
/*!***********************************************************!*\
  !*** ../../node_modules/fast-glob/out/providers/async.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const async_1 = __webpack_require__(/*! ../readers/async */ "../../node_modules/fast-glob/out/readers/async.js");
const provider_1 = __webpack_require__(/*! ./provider */ "../../node_modules/fast-glob/out/providers/provider.js");
class ProviderAsync extends provider_1.default {
    constructor() {
        super(...arguments);
        this._reader = new async_1.default(this._settings);
    }
    async read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const entries = await this.api(root, task, options);
        return entries.map((entry) => options.transform(entry));
    }
    api(root, task, options) {
        if (task.dynamic) {
            return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
    }
}
exports["default"] = ProviderAsync;


/***/ }),

/***/ "../../node_modules/fast-glob/out/providers/filters/deep.js":
/*!******************************************************************!*\
  !*** ../../node_modules/fast-glob/out/providers/filters/deep.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const utils = __webpack_require__(/*! ../../utils */ "../../node_modules/fast-glob/out/utils/index.js");
const partial_1 = __webpack_require__(/*! ../matchers/partial */ "../../node_modules/fast-glob/out/providers/matchers/partial.js");
class DeepFilter {
    constructor(_settings, _micromatchOptions) {
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
    }
    getFilter(basePath, positive, negative) {
        const matcher = this._getMatcher(positive);
        const negativeRe = this._getNegativePatternsRe(negative);
        return (entry) => this._filter(basePath, entry, matcher, negativeRe);
    }
    _getMatcher(patterns) {
        return new partial_1.default(patterns, this._settings, this._micromatchOptions);
    }
    _getNegativePatternsRe(patterns) {
        const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
        return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
    }
    _filter(basePath, entry, matcher, negativeRe) {
        if (this._isSkippedByDeep(basePath, entry.path)) {
            return false;
        }
        if (this._isSkippedSymbolicLink(entry)) {
            return false;
        }
        const filepath = utils.path.removeLeadingDotSegment(entry.path);
        if (this._isSkippedByPositivePatterns(filepath, matcher)) {
            return false;
        }
        return this._isSkippedByNegativePatterns(filepath, negativeRe);
    }
    _isSkippedByDeep(basePath, entryPath) {
        /**
         * Avoid unnecessary depth calculations when it doesn't matter.
         */
        if (this._settings.deep === Infinity) {
            return false;
        }
        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
    }
    _getEntryLevel(basePath, entryPath) {
        const entryPathDepth = entryPath.split('/').length;
        if (basePath === '') {
            return entryPathDepth;
        }
        const basePathDepth = basePath.split('/').length;
        return entryPathDepth - basePathDepth;
    }
    _isSkippedSymbolicLink(entry) {
        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
    }
    _isSkippedByPositivePatterns(entryPath, matcher) {
        return !this._settings.baseNameMatch && !matcher.match(entryPath);
    }
    _isSkippedByNegativePatterns(entryPath, patternsRe) {
        return !utils.pattern.matchAny(entryPath, patternsRe);
    }
}
exports["default"] = DeepFilter;


/***/ }),

/***/ "../../node_modules/fast-glob/out/providers/filters/entry.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/fast-glob/out/providers/filters/entry.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const utils = __webpack_require__(/*! ../../utils */ "../../node_modules/fast-glob/out/utils/index.js");
class EntryFilter {
    constructor(_settings, _micromatchOptions) {
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this.index = new Map();
    }
    getFilter(positive, negative) {
        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);
        const negativeRe = utils.pattern.convertPatternsToRe(negative, Object.assign(Object.assign({}, this._micromatchOptions), { dot: true }));
        return (entry) => this._filter(entry, positiveRe, negativeRe);
    }
    _filter(entry, positiveRe, negativeRe) {
        const filepath = utils.path.removeLeadingDotSegment(entry.path);
        if (this._settings.unique && this._isDuplicateEntry(filepath)) {
            return false;
        }
        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
            return false;
        }
        if (this._isSkippedByAbsoluteNegativePatterns(filepath, negativeRe)) {
            return false;
        }
        const isDirectory = entry.dirent.isDirectory();
        const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory) && !this._isMatchToPatterns(filepath, negativeRe, isDirectory);
        if (this._settings.unique && isMatched) {
            this._createIndexRecord(filepath);
        }
        return isMatched;
    }
    _isDuplicateEntry(filepath) {
        return this.index.has(filepath);
    }
    _createIndexRecord(filepath) {
        this.index.set(filepath, undefined);
    }
    _onlyFileFilter(entry) {
        return this._settings.onlyFiles && !entry.dirent.isFile();
    }
    _onlyDirectoryFilter(entry) {
        return this._settings.onlyDirectories && !entry.dirent.isDirectory();
    }
    _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
        if (!this._settings.absolute) {
            return false;
        }
        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);
        return utils.pattern.matchAny(fullpath, patternsRe);
    }
    _isMatchToPatterns(filepath, patternsRe, isDirectory) {
        // Trying to match files and directories by patterns.
        const isMatched = utils.pattern.matchAny(filepath, patternsRe);
        // A pattern with a trailling slash can be used for directory matching.
        // To apply such pattern, we need to add a tralling slash to the path.
        if (!isMatched && isDirectory) {
            return utils.pattern.matchAny(filepath + '/', patternsRe);
        }
        return isMatched;
    }
}
exports["default"] = EntryFilter;


/***/ }),

/***/ "../../node_modules/fast-glob/out/providers/filters/error.js":
/*!*******************************************************************!*\
  !*** ../../node_modules/fast-glob/out/providers/filters/error.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const utils = __webpack_require__(/*! ../../utils */ "../../node_modules/fast-glob/out/utils/index.js");
class ErrorFilter {
    constructor(_settings) {
        this._settings = _settings;
    }
    getFilter() {
        return (error) => this._isNonFatalError(error);
    }
    _isNonFatalError(error) {
        return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
    }
}
exports["default"] = ErrorFilter;


/***/ }),

/***/ "../../node_modules/fast-glob/out/providers/matchers/matcher.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/fast-glob/out/providers/matchers/matcher.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const utils = __webpack_require__(/*! ../../utils */ "../../node_modules/fast-glob/out/utils/index.js");
class Matcher {
    constructor(_patterns, _settings, _micromatchOptions) {
        this._patterns = _patterns;
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this._storage = [];
        this._fillStorage();
    }
    _fillStorage() {
        for (const pattern of this._patterns) {
            const segments = this._getPatternSegments(pattern);
            const sections = this._splitSegmentsIntoSections(segments);
            this._storage.push({
                complete: sections.length <= 1,
                pattern,
                segments,
                sections
            });
        }
    }
    _getPatternSegments(pattern) {
        const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
        return parts.map((part) => {
            const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
            if (!dynamic) {
                return {
                    dynamic: false,
                    pattern: part
                };
            }
            return {
                dynamic: true,
                pattern: part,
                patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
            };
        });
    }
    _splitSegmentsIntoSections(segments) {
        return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
    }
}
exports["default"] = Matcher;


/***/ }),

/***/ "../../node_modules/fast-glob/out/providers/matchers/partial.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/fast-glob/out/providers/matchers/partial.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const matcher_1 = __webpack_require__(/*! ./matcher */ "../../node_modules/fast-glob/out/providers/matchers/matcher.js");
class PartialMatcher extends matcher_1.default {
    match(filepath) {
        const parts = filepath.split('/');
        const levels = parts.length;
        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
        for (const pattern of patterns) {
            const section = pattern.sections[0];
            /**
             * In this case, the pattern has a globstar and we must read all directories unconditionally,
             * but only if the level has reached the end of the first group.
             *
             * fixtures/{a,b}/**
             *  ^ true/false  ^ always true
            */
            if (!pattern.complete && levels > section.length) {
                return true;
            }
            const match = parts.every((part, index) => {
                const segment = pattern.segments[index];
                if (segment.dynamic && segment.patternRe.test(part)) {
                    return true;
                }
                if (!segment.dynamic && segment.pattern === part) {
                    return true;
                }
                return false;
            });
            if (match) {
                return true;
            }
        }
        return false;
    }
}
exports["default"] = PartialMatcher;


/***/ }),

/***/ "../../node_modules/fast-glob/out/providers/provider.js":
/*!**************************************************************!*\
  !*** ../../node_modules/fast-glob/out/providers/provider.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const path = __webpack_require__(/*! path */ "path");
const deep_1 = __webpack_require__(/*! ./filters/deep */ "../../node_modules/fast-glob/out/providers/filters/deep.js");
const entry_1 = __webpack_require__(/*! ./filters/entry */ "../../node_modules/fast-glob/out/providers/filters/entry.js");
const error_1 = __webpack_require__(/*! ./filters/error */ "../../node_modules/fast-glob/out/providers/filters/error.js");
const entry_2 = __webpack_require__(/*! ./transformers/entry */ "../../node_modules/fast-glob/out/providers/transformers/entry.js");
class Provider {
    constructor(_settings) {
        this._settings = _settings;
        this.errorFilter = new error_1.default(this._settings);
        this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
        this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
        this.entryTransformer = new entry_2.default(this._settings);
    }
    _getRootDirectory(task) {
        return path.resolve(this._settings.cwd, task.base);
    }
    _getReaderOptions(task) {
        const basePath = task.base === '.' ? '' : task.base;
        return {
            basePath,
            pathSegmentSeparator: '/',
            concurrency: this._settings.concurrency,
            deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
            entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
            errorFilter: this.errorFilter.getFilter(),
            followSymbolicLinks: this._settings.followSymbolicLinks,
            fs: this._settings.fs,
            stats: this._settings.stats,
            throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
            transform: this.entryTransformer.getTransformer()
        };
    }
    _getMicromatchOptions() {
        return {
            dot: this._settings.dot,
            matchBase: this._settings.baseNameMatch,
            nobrace: !this._settings.braceExpansion,
            nocase: !this._settings.caseSensitiveMatch,
            noext: !this._settings.extglob,
            noglobstar: !this._settings.globstar,
            posix: true,
            strictSlashes: false
        };
    }
}
exports["default"] = Provider;


/***/ }),

/***/ "../../node_modules/fast-glob/out/providers/stream.js":
/*!************************************************************!*\
  !*** ../../node_modules/fast-glob/out/providers/stream.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const stream_1 = __webpack_require__(/*! stream */ "stream");
const stream_2 = __webpack_require__(/*! ../readers/stream */ "../../node_modules/fast-glob/out/readers/stream.js");
const provider_1 = __webpack_require__(/*! ./provider */ "../../node_modules/fast-glob/out/providers/provider.js");
class ProviderStream extends provider_1.default {
    constructor() {
        super(...arguments);
        this._reader = new stream_2.default(this._settings);
    }
    read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const source = this.api(root, task, options);
        const destination = new stream_1.Readable({ objectMode: true, read: () => { } });
        source
            .once('error', (error) => destination.emit('error', error))
            .on('data', (entry) => destination.emit('data', options.transform(entry)))
            .once('end', () => destination.emit('end'));
        destination
            .once('close', () => source.destroy());
        return destination;
    }
    api(root, task, options) {
        if (task.dynamic) {
            return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
    }
}
exports["default"] = ProviderStream;


/***/ }),

/***/ "../../node_modules/fast-glob/out/providers/sync.js":
/*!**********************************************************!*\
  !*** ../../node_modules/fast-glob/out/providers/sync.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const sync_1 = __webpack_require__(/*! ../readers/sync */ "../../node_modules/fast-glob/out/readers/sync.js");
const provider_1 = __webpack_require__(/*! ./provider */ "../../node_modules/fast-glob/out/providers/provider.js");
class ProviderSync extends provider_1.default {
    constructor() {
        super(...arguments);
        this._reader = new sync_1.default(this._settings);
    }
    read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const entries = this.api(root, task, options);
        return entries.map(options.transform);
    }
    api(root, task, options) {
        if (task.dynamic) {
            return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
    }
}
exports["default"] = ProviderSync;


/***/ }),

/***/ "../../node_modules/fast-glob/out/providers/transformers/entry.js":
/*!************************************************************************!*\
  !*** ../../node_modules/fast-glob/out/providers/transformers/entry.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const utils = __webpack_require__(/*! ../../utils */ "../../node_modules/fast-glob/out/utils/index.js");
class EntryTransformer {
    constructor(_settings) {
        this._settings = _settings;
    }
    getTransformer() {
        return (entry) => this._transform(entry);
    }
    _transform(entry) {
        let filepath = entry.path;
        if (this._settings.absolute) {
            filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
            filepath = utils.path.unixify(filepath);
        }
        if (this._settings.markDirectories && entry.dirent.isDirectory()) {
            filepath += '/';
        }
        if (!this._settings.objectMode) {
            return filepath;
        }
        return Object.assign(Object.assign({}, entry), { path: filepath });
    }
}
exports["default"] = EntryTransformer;


/***/ }),

/***/ "../../node_modules/fast-glob/out/readers/async.js":
/*!*********************************************************!*\
  !*** ../../node_modules/fast-glob/out/readers/async.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const fsWalk = __webpack_require__(/*! @nodelib/fs.walk */ "../../node_modules/@nodelib/fs.walk/out/index.js");
const reader_1 = __webpack_require__(/*! ./reader */ "../../node_modules/fast-glob/out/readers/reader.js");
const stream_1 = __webpack_require__(/*! ./stream */ "../../node_modules/fast-glob/out/readers/stream.js");
class ReaderAsync extends reader_1.default {
    constructor() {
        super(...arguments);
        this._walkAsync = fsWalk.walk;
        this._readerStream = new stream_1.default(this._settings);
    }
    dynamic(root, options) {
        return new Promise((resolve, reject) => {
            this._walkAsync(root, options, (error, entries) => {
                if (error === null) {
                    resolve(entries);
                }
                else {
                    reject(error);
                }
            });
        });
    }
    async static(patterns, options) {
        const entries = [];
        const stream = this._readerStream.static(patterns, options);
        // After #235, replace it with an asynchronous iterator.
        return new Promise((resolve, reject) => {
            stream.once('error', reject);
            stream.on('data', (entry) => entries.push(entry));
            stream.once('end', () => resolve(entries));
        });
    }
}
exports["default"] = ReaderAsync;


/***/ }),

/***/ "../../node_modules/fast-glob/out/readers/reader.js":
/*!**********************************************************!*\
  !*** ../../node_modules/fast-glob/out/readers/reader.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const path = __webpack_require__(/*! path */ "path");
const fsStat = __webpack_require__(/*! @nodelib/fs.stat */ "../../node_modules/@nodelib/fs.stat/out/index.js");
const utils = __webpack_require__(/*! ../utils */ "../../node_modules/fast-glob/out/utils/index.js");
class Reader {
    constructor(_settings) {
        this._settings = _settings;
        this._fsStatSettings = new fsStat.Settings({
            followSymbolicLink: this._settings.followSymbolicLinks,
            fs: this._settings.fs,
            throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
        });
    }
    _getFullEntryPath(filepath) {
        return path.resolve(this._settings.cwd, filepath);
    }
    _makeEntry(stats, pattern) {
        const entry = {
            name: pattern,
            path: pattern,
            dirent: utils.fs.createDirentFromStats(pattern, stats)
        };
        if (this._settings.stats) {
            entry.stats = stats;
        }
        return entry;
    }
    _isFatalError(error) {
        return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
    }
}
exports["default"] = Reader;


/***/ }),

/***/ "../../node_modules/fast-glob/out/readers/stream.js":
/*!**********************************************************!*\
  !*** ../../node_modules/fast-glob/out/readers/stream.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const stream_1 = __webpack_require__(/*! stream */ "stream");
const fsStat = __webpack_require__(/*! @nodelib/fs.stat */ "../../node_modules/@nodelib/fs.stat/out/index.js");
const fsWalk = __webpack_require__(/*! @nodelib/fs.walk */ "../../node_modules/@nodelib/fs.walk/out/index.js");
const reader_1 = __webpack_require__(/*! ./reader */ "../../node_modules/fast-glob/out/readers/reader.js");
class ReaderStream extends reader_1.default {
    constructor() {
        super(...arguments);
        this._walkStream = fsWalk.walkStream;
        this._stat = fsStat.stat;
    }
    dynamic(root, options) {
        return this._walkStream(root, options);
    }
    static(patterns, options) {
        const filepaths = patterns.map(this._getFullEntryPath, this);
        const stream = new stream_1.PassThrough({ objectMode: true });
        stream._write = (index, _enc, done) => {
            return this._getEntry(filepaths[index], patterns[index], options)
                .then((entry) => {
                if (entry !== null && options.entryFilter(entry)) {
                    stream.push(entry);
                }
                if (index === filepaths.length - 1) {
                    stream.end();
                }
                done();
            })
                .catch(done);
        };
        for (let i = 0; i < filepaths.length; i++) {
            stream.write(i);
        }
        return stream;
    }
    _getEntry(filepath, pattern, options) {
        return this._getStat(filepath)
            .then((stats) => this._makeEntry(stats, pattern))
            .catch((error) => {
            if (options.errorFilter(error)) {
                return null;
            }
            throw error;
        });
    }
    _getStat(filepath) {
        return new Promise((resolve, reject) => {
            this._stat(filepath, this._fsStatSettings, (error, stats) => {
                return error === null ? resolve(stats) : reject(error);
            });
        });
    }
}
exports["default"] = ReaderStream;


/***/ }),

/***/ "../../node_modules/fast-glob/out/readers/sync.js":
/*!********************************************************!*\
  !*** ../../node_modules/fast-glob/out/readers/sync.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
const fsStat = __webpack_require__(/*! @nodelib/fs.stat */ "../../node_modules/@nodelib/fs.stat/out/index.js");
const fsWalk = __webpack_require__(/*! @nodelib/fs.walk */ "../../node_modules/@nodelib/fs.walk/out/index.js");
const reader_1 = __webpack_require__(/*! ./reader */ "../../node_modules/fast-glob/out/readers/reader.js");
class ReaderSync extends reader_1.default {
    constructor() {
        super(...arguments);
        this._walkSync = fsWalk.walkSync;
        this._statSync = fsStat.statSync;
    }
    dynamic(root, options) {
        return this._walkSync(root, options);
    }
    static(patterns, options) {
        const entries = [];
        for (const pattern of patterns) {
            const filepath = this._getFullEntryPath(pattern);
            const entry = this._getEntry(filepath, pattern, options);
            if (entry === null || !options.entryFilter(entry)) {
                continue;
            }
            entries.push(entry);
        }
        return entries;
    }
    _getEntry(filepath, pattern, options) {
        try {
            const stats = this._getStat(filepath);
            return this._makeEntry(stats, pattern);
        }
        catch (error) {
            if (options.errorFilter(error)) {
                return null;
            }
            throw error;
        }
    }
    _getStat(filepath) {
        return this._statSync(filepath, this._fsStatSettings);
    }
}
exports["default"] = ReaderSync;


/***/ }),

/***/ "../../node_modules/fast-glob/out/settings.js":
/*!****************************************************!*\
  !*** ../../node_modules/fast-glob/out/settings.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
const fs = __webpack_require__(/*! fs */ "fs");
const os = __webpack_require__(/*! os */ "os");
/**
 * The `os.cpus` method can return zero. We expect the number of cores to be greater than zero.
 * https://github.com/nodejs/node/blob/7faeddf23a98c53896f8b574a6e66589e8fb1eb8/lib/os.js#L106-L107
 */
const CPU_COUNT = Math.max(os.cpus().length, 1);
exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
    lstat: fs.lstat,
    lstatSync: fs.lstatSync,
    stat: fs.stat,
    statSync: fs.statSync,
    readdir: fs.readdir,
    readdirSync: fs.readdirSync
};
class Settings {
    constructor(_options = {}) {
        this._options = _options;
        this.absolute = this._getValue(this._options.absolute, false);
        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
        this.braceExpansion = this._getValue(this._options.braceExpansion, true);
        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
        this.cwd = this._getValue(this._options.cwd, process.cwd());
        this.deep = this._getValue(this._options.deep, Infinity);
        this.dot = this._getValue(this._options.dot, false);
        this.extglob = this._getValue(this._options.extglob, true);
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
        this.fs = this._getFileSystemMethods(this._options.fs);
        this.globstar = this._getValue(this._options.globstar, true);
        this.ignore = this._getValue(this._options.ignore, []);
        this.markDirectories = this._getValue(this._options.markDirectories, false);
        this.objectMode = this._getValue(this._options.objectMode, false);
        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
        this.onlyFiles = this._getValue(this._options.onlyFiles, true);
        this.stats = this._getValue(this._options.stats, false);
        this.suppressErrors = this._getValue(this._options.suppressErrors, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
        this.unique = this._getValue(this._options.unique, true);
        if (this.onlyDirectories) {
            this.onlyFiles = false;
        }
        if (this.stats) {
            this.objectMode = true;
        }
        // Remove the cast to the array in the next major (#404).
        this.ignore = [].concat(this.ignore);
    }
    _getValue(option, value) {
        return option === undefined ? value : option;
    }
    _getFileSystemMethods(methods = {}) {
        return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
    }
}
exports["default"] = Settings;


/***/ }),

/***/ "../../node_modules/fast-glob/out/utils/array.js":
/*!*******************************************************!*\
  !*** ../../node_modules/fast-glob/out/utils/array.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.splitWhen = exports.flatten = void 0;
function flatten(items) {
    return items.reduce((collection, item) => [].concat(collection, item), []);
}
exports.flatten = flatten;
function splitWhen(items, predicate) {
    const result = [[]];
    let groupIndex = 0;
    for (const item of items) {
        if (predicate(item)) {
            groupIndex++;
            result[groupIndex] = [];
        }
        else {
            result[groupIndex].push(item);
        }
    }
    return result;
}
exports.splitWhen = splitWhen;


/***/ }),

/***/ "../../node_modules/fast-glob/out/utils/errno.js":
/*!*******************************************************!*\
  !*** ../../node_modules/fast-glob/out/utils/errno.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEnoentCodeError = void 0;
function isEnoentCodeError(error) {
    return error.code === 'ENOENT';
}
exports.isEnoentCodeError = isEnoentCodeError;


/***/ }),

/***/ "../../node_modules/fast-glob/out/utils/fs.js":
/*!****************************************************!*\
  !*** ../../node_modules/fast-glob/out/utils/fs.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createDirentFromStats = void 0;
class DirentFromStats {
    constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
    }
}
function createDirentFromStats(name, stats) {
    return new DirentFromStats(name, stats);
}
exports.createDirentFromStats = createDirentFromStats;


/***/ }),

/***/ "../../node_modules/fast-glob/out/utils/index.js":
/*!*******************************************************!*\
  !*** ../../node_modules/fast-glob/out/utils/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0;
const array = __webpack_require__(/*! ./array */ "../../node_modules/fast-glob/out/utils/array.js");
exports.array = array;
const errno = __webpack_require__(/*! ./errno */ "../../node_modules/fast-glob/out/utils/errno.js");
exports.errno = errno;
const fs = __webpack_require__(/*! ./fs */ "../../node_modules/fast-glob/out/utils/fs.js");
exports.fs = fs;
const path = __webpack_require__(/*! ./path */ "../../node_modules/fast-glob/out/utils/path.js");
exports.path = path;
const pattern = __webpack_require__(/*! ./pattern */ "../../node_modules/fast-glob/out/utils/pattern.js");
exports.pattern = pattern;
const stream = __webpack_require__(/*! ./stream */ "../../node_modules/fast-glob/out/utils/stream.js");
exports.stream = stream;
const string = __webpack_require__(/*! ./string */ "../../node_modules/fast-glob/out/utils/string.js");
exports.string = string;


/***/ }),

/***/ "../../node_modules/fast-glob/out/utils/path.js":
/*!******************************************************!*\
  !*** ../../node_modules/fast-glob/out/utils/path.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.convertPosixPathToPattern = exports.convertWindowsPathToPattern = exports.convertPathToPattern = exports.escapePosixPath = exports.escapeWindowsPath = exports.escape = exports.removeLeadingDotSegment = exports.makeAbsolute = exports.unixify = void 0;
const os = __webpack_require__(/*! os */ "os");
const path = __webpack_require__(/*! path */ "path");
const IS_WINDOWS_PLATFORM = os.platform() === 'win32';
const LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2; // ./ or .\\
/**
 * All non-escaped special characters.
 * Posix: ()*?[]{|}, !+@ before (, ! at the beginning, \\ before non-special characters.
 * Windows: (){}[], !+@ before (, ! at the beginning.
 */
const POSIX_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\()|\\(?![!()*+?@[\]{|}]))/g;
const WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()[\]{}]|^!|[!+@](?=\())/g;
/**
 * The device path (\\.\ or \\?\).
 * https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths
 */
const DOS_DEVICE_PATH_RE = /^\\\\([.?])/;
/**
 * All backslashes except those escaping special characters.
 * Windows: !()+@{}
 * https://learn.microsoft.com/en-us/windows/win32/fileio/naming-a-file#naming-conventions
 */
const WINDOWS_BACKSLASHES_RE = /\\(?![!()+@[\]{}])/g;
/**
 * Designed to work only with simple paths: `dir\\file`.
 */
function unixify(filepath) {
    return filepath.replace(/\\/g, '/');
}
exports.unixify = unixify;
function makeAbsolute(cwd, filepath) {
    return path.resolve(cwd, filepath);
}
exports.makeAbsolute = makeAbsolute;
function removeLeadingDotSegment(entry) {
    // We do not use `startsWith` because this is 10x slower than current implementation for some cases.
    // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with
    if (entry.charAt(0) === '.') {
        const secondCharactery = entry.charAt(1);
        if (secondCharactery === '/' || secondCharactery === '\\') {
            return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
        }
    }
    return entry;
}
exports.removeLeadingDotSegment = removeLeadingDotSegment;
exports.escape = IS_WINDOWS_PLATFORM ? escapeWindowsPath : escapePosixPath;
function escapeWindowsPath(pattern) {
    return pattern.replace(WINDOWS_UNESCAPED_GLOB_SYMBOLS_RE, '\\$2');
}
exports.escapeWindowsPath = escapeWindowsPath;
function escapePosixPath(pattern) {
    return pattern.replace(POSIX_UNESCAPED_GLOB_SYMBOLS_RE, '\\$2');
}
exports.escapePosixPath = escapePosixPath;
exports.convertPathToPattern = IS_WINDOWS_PLATFORM ? convertWindowsPathToPattern : convertPosixPathToPattern;
function convertWindowsPathToPattern(filepath) {
    return escapeWindowsPath(filepath)
        .replace(DOS_DEVICE_PATH_RE, '//$1')
        .replace(WINDOWS_BACKSLASHES_RE, '/');
}
exports.convertWindowsPathToPattern = convertWindowsPathToPattern;
function convertPosixPathToPattern(filepath) {
    return escapePosixPath(filepath);
}
exports.convertPosixPathToPattern = convertPosixPathToPattern;


/***/ }),

/***/ "../../node_modules/fast-glob/out/utils/pattern.js":
/*!*********************************************************!*\
  !*** ../../node_modules/fast-glob/out/utils/pattern.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.removeDuplicateSlashes = exports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0;
const path = __webpack_require__(/*! path */ "path");
const globParent = __webpack_require__(/*! glob-parent */ "../../node_modules/fast-glob/node_modules/glob-parent/index.js");
const micromatch = __webpack_require__(/*! micromatch */ "../../node_modules/micromatch/index.js");
const GLOBSTAR = '**';
const ESCAPE_SYMBOL = '\\';
const COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
const REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
const REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
const GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
const BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
/**
 * Matches a sequence of two or more consecutive slashes, excluding the first two slashes at the beginning of the string.
 * The latter is due to the presence of the device path at the beginning of the UNC path.
 */
const DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
function isStaticPattern(pattern, options = {}) {
    return !isDynamicPattern(pattern, options);
}
exports.isStaticPattern = isStaticPattern;
function isDynamicPattern(pattern, options = {}) {
    /**
     * A special case with an empty string is necessary for matching patterns that start with a forward slash.
     * An empty string cannot be a dynamic pattern.
     * For example, the pattern `/lib/*` will be spread into parts: '', 'lib', '*'.
     */
    if (pattern === '') {
        return false;
    }
    /**
     * When the `caseSensitiveMatch` option is disabled, all patterns must be marked as dynamic, because we cannot check
     * filepath directly (without read directory).
     */
    if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
        return true;
    }
    if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
        return true;
    }
    if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
        return true;
    }
    if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
        return true;
    }
    return false;
}
exports.isDynamicPattern = isDynamicPattern;
function hasBraceExpansion(pattern) {
    const openingBraceIndex = pattern.indexOf('{');
    if (openingBraceIndex === -1) {
        return false;
    }
    const closingBraceIndex = pattern.indexOf('}', openingBraceIndex + 1);
    if (closingBraceIndex === -1) {
        return false;
    }
    const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
    return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
}
function convertToPositivePattern(pattern) {
    return isNegativePattern(pattern) ? pattern.slice(1) : pattern;
}
exports.convertToPositivePattern = convertToPositivePattern;
function convertToNegativePattern(pattern) {
    return '!' + pattern;
}
exports.convertToNegativePattern = convertToNegativePattern;
function isNegativePattern(pattern) {
    return pattern.startsWith('!') && pattern[1] !== '(';
}
exports.isNegativePattern = isNegativePattern;
function isPositivePattern(pattern) {
    return !isNegativePattern(pattern);
}
exports.isPositivePattern = isPositivePattern;
function getNegativePatterns(patterns) {
    return patterns.filter(isNegativePattern);
}
exports.getNegativePatterns = getNegativePatterns;
function getPositivePatterns(patterns) {
    return patterns.filter(isPositivePattern);
}
exports.getPositivePatterns = getPositivePatterns;
/**
 * Returns patterns that can be applied inside the current directory.
 *
 * @example
 * // ['./*', '*', 'a/*']
 * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])
 */
function getPatternsInsideCurrentDirectory(patterns) {
    return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
}
exports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
/**
 * Returns patterns to be expanded relative to (outside) the current directory.
 *
 * @example
 * // ['../*', './../*']
 * getPatternsInsideCurrentDirectory(['./*', '*', 'a/*', '../*', './../*'])
 */
function getPatternsOutsideCurrentDirectory(patterns) {
    return patterns.filter(isPatternRelatedToParentDirectory);
}
exports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
function isPatternRelatedToParentDirectory(pattern) {
    return pattern.startsWith('..') || pattern.startsWith('./..');
}
exports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
function getBaseDirectory(pattern) {
    return globParent(pattern, { flipBackslashes: false });
}
exports.getBaseDirectory = getBaseDirectory;
function hasGlobStar(pattern) {
    return pattern.includes(GLOBSTAR);
}
exports.hasGlobStar = hasGlobStar;
function endsWithSlashGlobStar(pattern) {
    return pattern.endsWith('/' + GLOBSTAR);
}
exports.endsWithSlashGlobStar = endsWithSlashGlobStar;
function isAffectDepthOfReadingPattern(pattern) {
    const basename = path.basename(pattern);
    return endsWithSlashGlobStar(pattern) || isStaticPattern(basename);
}
exports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
function expandPatternsWithBraceExpansion(patterns) {
    return patterns.reduce((collection, pattern) => {
        return collection.concat(expandBraceExpansion(pattern));
    }, []);
}
exports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
function expandBraceExpansion(pattern) {
    const patterns = micromatch.braces(pattern, { expand: true, nodupes: true, keepEscaping: true });
    /**
     * Sort the patterns by length so that the same depth patterns are processed side by side.
     * `a/{b,}/{c,}/*` – `['a///*', 'a/b//*', 'a//c/*', 'a/b/c/*']`
     */
    patterns.sort((a, b) => a.length - b.length);
    /**
     * Micromatch can return an empty string in the case of patterns like `{a,}`.
     */
    return patterns.filter((pattern) => pattern !== '');
}
exports.expandBraceExpansion = expandBraceExpansion;
function getPatternParts(pattern, options) {
    let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));
    /**
     * The scan method returns an empty array in some cases.
     * See micromatch/picomatch#58 for more details.
     */
    if (parts.length === 0) {
        parts = [pattern];
    }
    /**
     * The scan method does not return an empty part for the pattern with a forward slash.
     * This is another part of micromatch/picomatch#58.
     */
    if (parts[0].startsWith('/')) {
        parts[0] = parts[0].slice(1);
        parts.unshift('');
    }
    return parts;
}
exports.getPatternParts = getPatternParts;
function makeRe(pattern, options) {
    return micromatch.makeRe(pattern, options);
}
exports.makeRe = makeRe;
function convertPatternsToRe(patterns, options) {
    return patterns.map((pattern) => makeRe(pattern, options));
}
exports.convertPatternsToRe = convertPatternsToRe;
function matchAny(entry, patternsRe) {
    return patternsRe.some((patternRe) => patternRe.test(entry));
}
exports.matchAny = matchAny;
/**
 * This package only works with forward slashes as a path separator.
 * Because of this, we cannot use the standard `path.normalize` method, because on Windows platform it will use of backslashes.
 */
function removeDuplicateSlashes(pattern) {
    return pattern.replace(DOUBLE_SLASH_RE, '/');
}
exports.removeDuplicateSlashes = removeDuplicateSlashes;


/***/ }),

/***/ "../../node_modules/fast-glob/out/utils/stream.js":
/*!********************************************************!*\
  !*** ../../node_modules/fast-glob/out/utils/stream.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.merge = void 0;
const merge2 = __webpack_require__(/*! merge2 */ "../../node_modules/merge2/index.js");
function merge(streams) {
    const mergedStream = merge2(streams);
    streams.forEach((stream) => {
        stream.once('error', (error) => mergedStream.emit('error', error));
    });
    mergedStream.once('close', () => propagateCloseEventToSources(streams));
    mergedStream.once('end', () => propagateCloseEventToSources(streams));
    return mergedStream;
}
exports.merge = merge;
function propagateCloseEventToSources(streams) {
    streams.forEach((stream) => stream.emit('close'));
}


/***/ }),

/***/ "../../node_modules/fast-glob/out/utils/string.js":
/*!********************************************************!*\
  !*** ../../node_modules/fast-glob/out/utils/string.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.isEmpty = exports.isString = void 0;
function isString(input) {
    return typeof input === 'string';
}
exports.isString = isString;
function isEmpty(input) {
    return input === '';
}
exports.isEmpty = isEmpty;


/***/ }),

/***/ "../../node_modules/fastq/queue.js":
/*!*****************************************!*\
  !*** ../../node_modules/fastq/queue.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* eslint-disable no-var */

var reusify = __webpack_require__(/*! reusify */ "../../node_modules/reusify/reusify.js")

function fastqueue (context, worker, _concurrency) {
  if (typeof context === 'function') {
    _concurrency = worker
    worker = context
    context = null
  }

  if (!(_concurrency >= 1)) {
    throw new Error('fastqueue concurrency must be equal to or greater than 1')
  }

  var cache = reusify(Task)
  var queueHead = null
  var queueTail = null
  var _running = 0
  var errorHandler = null

  var self = {
    push: push,
    drain: noop,
    saturated: noop,
    pause: pause,
    paused: false,

    get concurrency () {
      return _concurrency
    },
    set concurrency (value) {
      if (!(value >= 1)) {
        throw new Error('fastqueue concurrency must be equal to or greater than 1')
      }
      _concurrency = value

      if (self.paused) return
      for (; queueHead && _running < _concurrency;) {
        _running++
        release()
      }
    },

    running: running,
    resume: resume,
    idle: idle,
    length: length,
    getQueue: getQueue,
    unshift: unshift,
    empty: noop,
    kill: kill,
    killAndDrain: killAndDrain,
    error: error
  }

  return self

  function running () {
    return _running
  }

  function pause () {
    self.paused = true
  }

  function length () {
    var current = queueHead
    var counter = 0

    while (current) {
      current = current.next
      counter++
    }

    return counter
  }

  function getQueue () {
    var current = queueHead
    var tasks = []

    while (current) {
      tasks.push(current.value)
      current = current.next
    }

    return tasks
  }

  function resume () {
    if (!self.paused) return
    self.paused = false
    if (queueHead === null) {
      _running++
      release()
      return
    }
    for (; queueHead && _running < _concurrency;) {
      _running++
      release()
    }
  }

  function idle () {
    return _running === 0 && self.length() === 0
  }

  function push (value, done) {
    var current = cache.get()

    current.context = context
    current.release = release
    current.value = value
    current.callback = done || noop
    current.errorHandler = errorHandler

    if (_running >= _concurrency || self.paused) {
      if (queueTail) {
        queueTail.next = current
        queueTail = current
      } else {
        queueHead = current
        queueTail = current
        self.saturated()
      }
    } else {
      _running++
      worker.call(context, current.value, current.worked)
    }
  }

  function unshift (value, done) {
    var current = cache.get()

    current.context = context
    current.release = release
    current.value = value
    current.callback = done || noop
    current.errorHandler = errorHandler

    if (_running >= _concurrency || self.paused) {
      if (queueHead) {
        current.next = queueHead
        queueHead = current
      } else {
        queueHead = current
        queueTail = current
        self.saturated()
      }
    } else {
      _running++
      worker.call(context, current.value, current.worked)
    }
  }

  function release (holder) {
    if (holder) {
      cache.release(holder)
    }
    var next = queueHead
    if (next && _running <= _concurrency) {
      if (!self.paused) {
        if (queueTail === queueHead) {
          queueTail = null
        }
        queueHead = next.next
        next.next = null
        worker.call(context, next.value, next.worked)
        if (queueTail === null) {
          self.empty()
        }
      } else {
        _running--
      }
    } else if (--_running === 0) {
      self.drain()
    }
  }

  function kill () {
    queueHead = null
    queueTail = null
    self.drain = noop
  }

  function killAndDrain () {
    queueHead = null
    queueTail = null
    self.drain()
    self.drain = noop
  }

  function error (handler) {
    errorHandler = handler
  }
}

function noop () {}

function Task () {
  this.value = null
  this.callback = noop
  this.next = null
  this.release = noop
  this.context = null
  this.errorHandler = null

  var self = this

  this.worked = function worked (err, result) {
    var callback = self.callback
    var errorHandler = self.errorHandler
    var val = self.value
    self.value = null
    self.callback = noop
    if (self.errorHandler) {
      errorHandler(err, val)
    }
    callback.call(self.context, err, result)
    self.release(self)
  }
}

function queueAsPromised (context, worker, _concurrency) {
  if (typeof context === 'function') {
    _concurrency = worker
    worker = context
    context = null
  }

  function asyncWrapper (arg, cb) {
    worker.call(this, arg)
      .then(function (res) {
        cb(null, res)
      }, cb)
  }

  var queue = fastqueue(context, asyncWrapper, _concurrency)

  var pushCb = queue.push
  var unshiftCb = queue.unshift

  queue.push = push
  queue.unshift = unshift
  queue.drained = drained

  return queue

  function push (value) {
    var p = new Promise(function (resolve, reject) {
      pushCb(value, function (err, result) {
        if (err) {
          reject(err)
          return
        }
        resolve(result)
      })
    })

    // Let's fork the promise chain to
    // make the error bubble up to the user but
    // not lead to a unhandledRejection
    p.catch(noop)

    return p
  }

  function unshift (value) {
    var p = new Promise(function (resolve, reject) {
      unshiftCb(value, function (err, result) {
        if (err) {
          reject(err)
          return
        }
        resolve(result)
      })
    })

    // Let's fork the promise chain to
    // make the error bubble up to the user but
    // not lead to a unhandledRejection
    p.catch(noop)

    return p
  }

  function drained () {
    if (queue.idle()) {
      return new Promise(function (resolve) {
        resolve()
      })
    }

    var previousDrain = queue.drain

    var p = new Promise(function (resolve) {
      queue.drain = function () {
        previousDrain()
        resolve()
      }
    })

    return p
  }
}

module.exports = fastqueue
module.exports.promise = queueAsPromised


/***/ }),

/***/ "../../node_modules/fill-range/index.js":
/*!**********************************************!*\
  !*** ../../node_modules/fill-range/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */



const util = __webpack_require__(/*! util */ "util");
const toRegexRange = __webpack_require__(/*! to-regex-range */ "../../node_modules/to-regex-range/index.js");

const isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);

const transform = toNumber => {
  return value => toNumber === true ? Number(value) : String(value);
};

const isValidValue = value => {
  return typeof value === 'number' || (typeof value === 'string' && value !== '');
};

const isNumber = num => Number.isInteger(+num);

const zeros = input => {
  let value = `${input}`;
  let index = -1;
  if (value[0] === '-') value = value.slice(1);
  if (value === '0') return false;
  while (value[++index] === '0');
  return index > 0;
};

const stringify = (start, end, options) => {
  if (typeof start === 'string' || typeof end === 'string') {
    return true;
  }
  return options.stringify === true;
};

const pad = (input, maxLength, toNumber) => {
  if (maxLength > 0) {
    let dash = input[0] === '-' ? '-' : '';
    if (dash) input = input.slice(1);
    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));
  }
  if (toNumber === false) {
    return String(input);
  }
  return input;
};

const toMaxLen = (input, maxLength) => {
  let negative = input[0] === '-' ? '-' : '';
  if (negative) {
    input = input.slice(1);
    maxLength--;
  }
  while (input.length < maxLength) input = '0' + input;
  return negative ? ('-' + input) : input;
};

const toSequence = (parts, options) => {
  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);

  let prefix = options.capture ? '' : '?:';
  let positives = '';
  let negatives = '';
  let result;

  if (parts.positives.length) {
    positives = parts.positives.join('|');
  }

  if (parts.negatives.length) {
    negatives = `-(${prefix}${parts.negatives.join('|')})`;
  }

  if (positives && negatives) {
    result = `${positives}|${negatives}`;
  } else {
    result = positives || negatives;
  }

  if (options.wrap) {
    return `(${prefix}${result})`;
  }

  return result;
};

const toRange = (a, b, isNumbers, options) => {
  if (isNumbers) {
    return toRegexRange(a, b, { wrap: false, ...options });
  }

  let start = String.fromCharCode(a);
  if (a === b) return start;

  let stop = String.fromCharCode(b);
  return `[${start}-${stop}]`;
};

const toRegex = (start, end, options) => {
  if (Array.isArray(start)) {
    let wrap = options.wrap === true;
    let prefix = options.capture ? '' : '?:';
    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');
  }
  return toRegexRange(start, end, options);
};

const rangeError = (...args) => {
  return new RangeError('Invalid range arguments: ' + util.inspect(...args));
};

const invalidRange = (start, end, options) => {
  if (options.strictRanges === true) throw rangeError([start, end]);
  return [];
};

const invalidStep = (step, options) => {
  if (options.strictRanges === true) {
    throw new TypeError(`Expected step "${step}" to be a number`);
  }
  return [];
};

const fillNumbers = (start, end, step = 1, options = {}) => {
  let a = Number(start);
  let b = Number(end);

  if (!Number.isInteger(a) || !Number.isInteger(b)) {
    if (options.strictRanges === true) throw rangeError([start, end]);
    return [];
  }

  // fix negative zero
  if (a === 0) a = 0;
  if (b === 0) b = 0;

  let descending = a > b;
  let startString = String(start);
  let endString = String(end);
  let stepString = String(step);
  step = Math.max(Math.abs(step), 1);

  let padded = zeros(startString) || zeros(endString) || zeros(stepString);
  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
  let toNumber = padded === false && stringify(start, end, options) === false;
  let format = options.transform || transform(toNumber);

  if (options.toRegex && step === 1) {
    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
  }

  let parts = { negatives: [], positives: [] };
  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));
  let range = [];
  let index = 0;

  while (descending ? a >= b : a <= b) {
    if (options.toRegex === true && step > 1) {
      push(a);
    } else {
      range.push(pad(format(a, index), maxLen, toNumber));
    }
    a = descending ? a - step : a + step;
    index++;
  }

  if (options.toRegex === true) {
    return step > 1
      ? toSequence(parts, options)
      : toRegex(range, null, { wrap: false, ...options });
  }

  return range;
};

const fillLetters = (start, end, step = 1, options = {}) => {
  if ((!isNumber(start) && start.length > 1) || (!isNumber(end) && end.length > 1)) {
    return invalidRange(start, end, options);
  }


  let format = options.transform || (val => String.fromCharCode(val));
  let a = `${start}`.charCodeAt(0);
  let b = `${end}`.charCodeAt(0);

  let descending = a > b;
  let min = Math.min(a, b);
  let max = Math.max(a, b);

  if (options.toRegex && step === 1) {
    return toRange(min, max, false, options);
  }

  let range = [];
  let index = 0;

  while (descending ? a >= b : a <= b) {
    range.push(format(a, index));
    a = descending ? a - step : a + step;
    index++;
  }

  if (options.toRegex === true) {
    return toRegex(range, null, { wrap: false, options });
  }

  return range;
};

const fill = (start, end, step, options = {}) => {
  if (end == null && isValidValue(start)) {
    return [start];
  }

  if (!isValidValue(start) || !isValidValue(end)) {
    return invalidRange(start, end, options);
  }

  if (typeof step === 'function') {
    return fill(start, end, 1, { transform: step });
  }

  if (isObject(step)) {
    return fill(start, end, 0, step);
  }

  let opts = { ...options };
  if (opts.capture === true) opts.wrap = true;
  step = step || opts.step || 1;

  if (!isNumber(step)) {
    if (step != null && !isObject(step)) return invalidStep(step, opts);
    return fill(start, end, 1, step);
  }

  if (isNumber(start) && isNumber(end)) {
    return fillNumbers(start, end, step, opts);
  }

  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
};

module.exports = fill;


/***/ }),

/***/ "../../node_modules/is-extglob/index.js":
/*!**********************************************!*\
  !*** ../../node_modules/is-extglob/index.js ***!
  \**********************************************/
/***/ ((module) => {

/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */

module.exports = function isExtglob(str) {
  if (typeof str !== 'string' || str === '') {
    return false;
  }

  var match;
  while ((match = /(\\).|([@?!+*]\(.*\))/g.exec(str))) {
    if (match[2]) return true;
    str = str.slice(match.index + match[0].length);
  }

  return false;
};


/***/ }),

/***/ "../../node_modules/is-glob/index.js":
/*!*******************************************!*\
  !*** ../../node_modules/is-glob/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */

var isExtglob = __webpack_require__(/*! is-extglob */ "../../node_modules/is-extglob/index.js");
var chars = { '{': '}', '(': ')', '[': ']'};
var strictCheck = function(str) {
  if (str[0] === '!') {
    return true;
  }
  var index = 0;
  var pipeIndex = -2;
  var closeSquareIndex = -2;
  var closeCurlyIndex = -2;
  var closeParenIndex = -2;
  var backSlashIndex = -2;
  while (index < str.length) {
    if (str[index] === '*') {
      return true;
    }

    if (str[index + 1] === '?' && /[\].+)]/.test(str[index])) {
      return true;
    }

    if (closeSquareIndex !== -1 && str[index] === '[' && str[index + 1] !== ']') {
      if (closeSquareIndex < index) {
        closeSquareIndex = str.indexOf(']', index);
      }
      if (closeSquareIndex > index) {
        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
          return true;
        }
        backSlashIndex = str.indexOf('\\', index);
        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
          return true;
        }
      }
    }

    if (closeCurlyIndex !== -1 && str[index] === '{' && str[index + 1] !== '}') {
      closeCurlyIndex = str.indexOf('}', index);
      if (closeCurlyIndex > index) {
        backSlashIndex = str.indexOf('\\', index);
        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
          return true;
        }
      }
    }

    if (closeParenIndex !== -1 && str[index] === '(' && str[index + 1] === '?' && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ')') {
      closeParenIndex = str.indexOf(')', index);
      if (closeParenIndex > index) {
        backSlashIndex = str.indexOf('\\', index);
        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
          return true;
        }
      }
    }

    if (pipeIndex !== -1 && str[index] === '(' && str[index + 1] !== '|') {
      if (pipeIndex < index) {
        pipeIndex = str.indexOf('|', index);
      }
      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ')') {
        closeParenIndex = str.indexOf(')', pipeIndex);
        if (closeParenIndex > pipeIndex) {
          backSlashIndex = str.indexOf('\\', pipeIndex);
          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
            return true;
          }
        }
      }
    }

    if (str[index] === '\\') {
      var open = str[index + 1];
      index += 2;
      var close = chars[open];

      if (close) {
        var n = str.indexOf(close, index);
        if (n !== -1) {
          index = n + 1;
        }
      }

      if (str[index] === '!') {
        return true;
      }
    } else {
      index++;
    }
  }
  return false;
};

var relaxedCheck = function(str) {
  if (str[0] === '!') {
    return true;
  }
  var index = 0;
  while (index < str.length) {
    if (/[*?{}()[\]]/.test(str[index])) {
      return true;
    }

    if (str[index] === '\\') {
      var open = str[index + 1];
      index += 2;
      var close = chars[open];

      if (close) {
        var n = str.indexOf(close, index);
        if (n !== -1) {
          index = n + 1;
        }
      }

      if (str[index] === '!') {
        return true;
      }
    } else {
      index++;
    }
  }
  return false;
};

module.exports = function isGlob(str, options) {
  if (typeof str !== 'string' || str === '') {
    return false;
  }

  if (isExtglob(str)) {
    return true;
  }

  var check = strictCheck;

  // optionally relax check
  if (options && options.strict === false) {
    check = relaxedCheck;
  }

  return check(str);
};


/***/ }),

/***/ "../../node_modules/is-number/index.js":
/*!*********************************************!*\
  !*** ../../node_modules/is-number/index.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */



module.exports = function(num) {
  if (typeof num === 'number') {
    return num - num === 0;
  }
  if (typeof num === 'string' && num.trim() !== '') {
    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
  }
  return false;
};


/***/ }),

/***/ "../../node_modules/lodash._basebind/index.js":
/*!****************************************************!*\
  !*** ../../node_modules/lodash._basebind/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var baseCreate = __webpack_require__(/*! lodash._basecreate */ "../../node_modules/lodash._basecreate/index.js"),
    isObject = __webpack_require__(/*! lodash.isobject */ "../../node_modules/lodash.isobject/index.js"),
    setBindData = __webpack_require__(/*! lodash._setbinddata */ "../../node_modules/lodash._setbinddata/index.js"),
    slice = __webpack_require__(/*! lodash._slice */ "../../node_modules/lodash._slice/index.js");

/**
 * Used for `Array` method references.
 *
 * Normally `Array.prototype` would suffice, however, using an array literal
 * avoids issues in Narwhal.
 */
var arrayRef = [];

/** Native method shortcuts */
var push = arrayRef.push;

/**
 * The base implementation of `_.bind` that creates the bound function and
 * sets its meta data.
 *
 * @private
 * @param {Array} bindData The bind data array.
 * @returns {Function} Returns the new bound function.
 */
function baseBind(bindData) {
  var func = bindData[0],
      partialArgs = bindData[2],
      thisArg = bindData[4];

  function bound() {
    // `Function#bind` spec
    // http://es5.github.io/#x15.3.4.5
    if (partialArgs) {
      // avoid `arguments` object deoptimizations by using `slice` instead
      // of `Array.prototype.slice.call` and not assigning `arguments` to a
      // variable as a ternary expression
      var args = slice(partialArgs);
      push.apply(args, arguments);
    }
    // mimic the constructor's `return` behavior
    // http://es5.github.io/#x13.2.2
    if (this instanceof bound) {
      // ensure `new bound` is an instance of `func`
      var thisBinding = baseCreate(func.prototype),
          result = func.apply(thisBinding, args || arguments);
      return isObject(result) ? result : thisBinding;
    }
    return func.apply(thisArg, args || arguments);
  }
  setBindData(bound, bindData);
  return bound;
}

module.exports = baseBind;


/***/ }),

/***/ "../../node_modules/lodash._basecreate/index.js":
/*!******************************************************!*\
  !*** ../../node_modules/lodash._basecreate/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var isNative = __webpack_require__(/*! lodash._isnative */ "../../node_modules/lodash._isnative/index.js"),
    isObject = __webpack_require__(/*! lodash.isobject */ "../../node_modules/lodash.isobject/index.js"),
    noop = __webpack_require__(/*! lodash.noop */ "../../node_modules/lodash.noop/index.js");

/* Native method shortcuts for methods with the same name as other `lodash` methods */
var nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
function baseCreate(prototype, properties) {
  return isObject(prototype) ? nativeCreate(prototype) : {};
}
// fallback for browsers without `Object.create`
if (!nativeCreate) {
  baseCreate = (function() {
    function Object() {}
    return function(prototype) {
      if (isObject(prototype)) {
        Object.prototype = prototype;
        var result = new Object;
        Object.prototype = null;
      }
      return result || global.Object();
    };
  }());
}

module.exports = baseCreate;


/***/ }),

/***/ "../../node_modules/lodash._basecreatecallback/index.js":
/*!**************************************************************!*\
  !*** ../../node_modules/lodash._basecreatecallback/index.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var bind = __webpack_require__(/*! lodash.bind */ "../../node_modules/lodash.bind/index.js"),
    identity = __webpack_require__(/*! lodash.identity */ "../../node_modules/lodash.identity/index.js"),
    setBindData = __webpack_require__(/*! lodash._setbinddata */ "../../node_modules/lodash._setbinddata/index.js"),
    support = __webpack_require__(/*! lodash.support */ "../../node_modules/lodash.support/index.js");

/** Used to detected named functions */
var reFuncName = /^\s*function[ \n\r\t]+\w/;

/** Used to detect functions containing a `this` reference */
var reThis = /\bthis\b/;

/** Native method shortcuts */
var fnToString = Function.prototype.toString;

/**
 * The base implementation of `_.createCallback` without support for creating
 * "_.pluck" or "_.where" style callbacks.
 *
 * @private
 * @param {*} [func=identity] The value to convert to a callback.
 * @param {*} [thisArg] The `this` binding of the created callback.
 * @param {number} [argCount] The number of arguments the callback accepts.
 * @returns {Function} Returns a callback function.
 */
function baseCreateCallback(func, thisArg, argCount) {
  if (typeof func != 'function') {
    return identity;
  }
  // exit early for no `thisArg` or already bound by `Function#bind`
  if (typeof thisArg == 'undefined' || !('prototype' in func)) {
    return func;
  }
  var bindData = func.__bindData__;
  if (typeof bindData == 'undefined') {
    if (support.funcNames) {
      bindData = !func.name;
    }
    bindData = bindData || !support.funcDecomp;
    if (!bindData) {
      var source = fnToString.call(func);
      if (!support.funcNames) {
        bindData = !reFuncName.test(source);
      }
      if (!bindData) {
        // checks if `func` references the `this` keyword and stores the result
        bindData = reThis.test(source);
        setBindData(func, bindData);
      }
    }
  }
  // exit early if there are no `this` references or `func` is bound
  if (bindData === false || (bindData !== true && bindData[1] & 1)) {
    return func;
  }
  switch (argCount) {
    case 1: return function(value) {
      return func.call(thisArg, value);
    };
    case 2: return function(a, b) {
      return func.call(thisArg, a, b);
    };
    case 3: return function(value, index, collection) {
      return func.call(thisArg, value, index, collection);
    };
    case 4: return function(accumulator, value, index, collection) {
      return func.call(thisArg, accumulator, value, index, collection);
    };
  }
  return bind(func, thisArg);
}

module.exports = baseCreateCallback;


/***/ }),

/***/ "../../node_modules/lodash._basecreatewrapper/index.js":
/*!*************************************************************!*\
  !*** ../../node_modules/lodash._basecreatewrapper/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var baseCreate = __webpack_require__(/*! lodash._basecreate */ "../../node_modules/lodash._basecreate/index.js"),
    isObject = __webpack_require__(/*! lodash.isobject */ "../../node_modules/lodash.isobject/index.js"),
    setBindData = __webpack_require__(/*! lodash._setbinddata */ "../../node_modules/lodash._setbinddata/index.js"),
    slice = __webpack_require__(/*! lodash._slice */ "../../node_modules/lodash._slice/index.js");

/**
 * Used for `Array` method references.
 *
 * Normally `Array.prototype` would suffice, however, using an array literal
 * avoids issues in Narwhal.
 */
var arrayRef = [];

/** Native method shortcuts */
var push = arrayRef.push;

/**
 * The base implementation of `createWrapper` that creates the wrapper and
 * sets its meta data.
 *
 * @private
 * @param {Array} bindData The bind data array.
 * @returns {Function} Returns the new function.
 */
function baseCreateWrapper(bindData) {
  var func = bindData[0],
      bitmask = bindData[1],
      partialArgs = bindData[2],
      partialRightArgs = bindData[3],
      thisArg = bindData[4],
      arity = bindData[5];

  var isBind = bitmask & 1,
      isBindKey = bitmask & 2,
      isCurry = bitmask & 4,
      isCurryBound = bitmask & 8,
      key = func;

  function bound() {
    var thisBinding = isBind ? thisArg : this;
    if (partialArgs) {
      var args = slice(partialArgs);
      push.apply(args, arguments);
    }
    if (partialRightArgs || isCurry) {
      args || (args = slice(arguments));
      if (partialRightArgs) {
        push.apply(args, partialRightArgs);
      }
      if (isCurry && args.length < arity) {
        bitmask |= 16 & ~32;
        return baseCreateWrapper([func, (isCurryBound ? bitmask : bitmask & ~3), args, null, thisArg, arity]);
      }
    }
    args || (args = arguments);
    if (isBindKey) {
      func = thisBinding[key];
    }
    if (this instanceof bound) {
      thisBinding = baseCreate(func.prototype);
      var result = func.apply(thisBinding, args);
      return isObject(result) ? result : thisBinding;
    }
    return func.apply(thisBinding, args);
  }
  setBindData(bound, bindData);
  return bound;
}

module.exports = baseCreateWrapper;


/***/ }),

/***/ "../../node_modules/lodash._createwrapper/index.js":
/*!*********************************************************!*\
  !*** ../../node_modules/lodash._createwrapper/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var baseBind = __webpack_require__(/*! lodash._basebind */ "../../node_modules/lodash._basebind/index.js"),
    baseCreateWrapper = __webpack_require__(/*! lodash._basecreatewrapper */ "../../node_modules/lodash._basecreatewrapper/index.js"),
    isFunction = __webpack_require__(/*! lodash.isfunction */ "../../node_modules/lodash._createwrapper/node_modules/lodash.isfunction/index.js"),
    slice = __webpack_require__(/*! lodash._slice */ "../../node_modules/lodash._slice/index.js");

/**
 * Used for `Array` method references.
 *
 * Normally `Array.prototype` would suffice, however, using an array literal
 * avoids issues in Narwhal.
 */
var arrayRef = [];

/** Native method shortcuts */
var push = arrayRef.push,
    unshift = arrayRef.unshift;

/**
 * Creates a function that, when called, either curries or invokes `func`
 * with an optional `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to reference.
 * @param {number} bitmask The bitmask of method flags to compose.
 *  The bitmask may be composed of the following flags:
 *  1 - `_.bind`
 *  2 - `_.bindKey`
 *  4 - `_.curry`
 *  8 - `_.curry` (bound)
 *  16 - `_.partial`
 *  32 - `_.partialRight`
 * @param {Array} [partialArgs] An array of arguments to prepend to those
 *  provided to the new function.
 * @param {Array} [partialRightArgs] An array of arguments to append to those
 *  provided to the new function.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new function.
 */
function createWrapper(func, bitmask, partialArgs, partialRightArgs, thisArg, arity) {
  var isBind = bitmask & 1,
      isBindKey = bitmask & 2,
      isCurry = bitmask & 4,
      isCurryBound = bitmask & 8,
      isPartial = bitmask & 16,
      isPartialRight = bitmask & 32;

  if (!isBindKey && !isFunction(func)) {
    throw new TypeError;
  }
  if (isPartial && !partialArgs.length) {
    bitmask &= ~16;
    isPartial = partialArgs = false;
  }
  if (isPartialRight && !partialRightArgs.length) {
    bitmask &= ~32;
    isPartialRight = partialRightArgs = false;
  }
  var bindData = func && func.__bindData__;
  if (bindData && bindData !== true) {
    // clone `bindData`
    bindData = slice(bindData);
    if (bindData[2]) {
      bindData[2] = slice(bindData[2]);
    }
    if (bindData[3]) {
      bindData[3] = slice(bindData[3]);
    }
    // set `thisBinding` is not previously bound
    if (isBind && !(bindData[1] & 1)) {
      bindData[4] = thisArg;
    }
    // set if previously bound but not currently (subsequent curried functions)
    if (!isBind && bindData[1] & 1) {
      bitmask |= 8;
    }
    // set curried arity if not yet set
    if (isCurry && !(bindData[1] & 4)) {
      bindData[5] = arity;
    }
    // append partial left arguments
    if (isPartial) {
      push.apply(bindData[2] || (bindData[2] = []), partialArgs);
    }
    // append partial right arguments
    if (isPartialRight) {
      unshift.apply(bindData[3] || (bindData[3] = []), partialRightArgs);
    }
    // merge flags
    bindData[1] |= bitmask;
    return createWrapper.apply(null, bindData);
  }
  // fast path for `_.bind`
  var creater = (bitmask == 1 || bitmask === 17) ? baseBind : baseCreateWrapper;
  return creater([func, bitmask, partialArgs, partialRightArgs, thisArg, arity]);
}

module.exports = createWrapper;


/***/ }),

/***/ "../../node_modules/lodash._createwrapper/node_modules/lodash.isfunction/index.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/lodash._createwrapper/node_modules/lodash.isfunction/index.js ***!
  \****************************************************************************************/
/***/ ((module) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */

/**
 * Checks if `value` is a function.
 *
 * @static
 * @memberOf _
 * @category Objects
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if the `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 */
function isFunction(value) {
  return typeof value == 'function';
}

module.exports = isFunction;


/***/ }),

/***/ "../../node_modules/lodash._isnative/index.js":
/*!****************************************************!*\
  !*** ../../node_modules/lodash._isnative/index.js ***!
  \****************************************************/
/***/ ((module) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */

/** Used for native method references */
var objectProto = Object.prototype;

/** Used to resolve the internal [[Class]] of values */
var toString = objectProto.toString;

/** Used to detect if a method is native */
var reNative = RegExp('^' +
  String(toString)
    .replace(/[.*+?^${}()|[\]\\]/g, '\\$&')
    .replace(/toString| for [^\]]+/g, '.*?') + '$'
);

/**
 * Checks if `value` is a native function.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if the `value` is a native function, else `false`.
 */
function isNative(value) {
  return typeof value == 'function' && reNative.test(value);
}

module.exports = isNative;


/***/ }),

/***/ "../../node_modules/lodash._objecttypes/index.js":
/*!*******************************************************!*\
  !*** ../../node_modules/lodash._objecttypes/index.js ***!
  \*******************************************************/
/***/ ((module) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */

/** Used to determine if values are of the language type Object */
var objectTypes = {
  'boolean': false,
  'function': true,
  'object': true,
  'number': false,
  'string': false,
  'undefined': false
};

module.exports = objectTypes;


/***/ }),

/***/ "../../node_modules/lodash._setbinddata/index.js":
/*!*******************************************************!*\
  !*** ../../node_modules/lodash._setbinddata/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var isNative = __webpack_require__(/*! lodash._isnative */ "../../node_modules/lodash._isnative/index.js"),
    noop = __webpack_require__(/*! lodash.noop */ "../../node_modules/lodash.noop/index.js");

/** Used as the property descriptor for `__bindData__` */
var descriptor = {
  'configurable': false,
  'enumerable': false,
  'value': null,
  'writable': false
};

/** Used to set meta data on functions */
var defineProperty = (function() {
  // IE 8 only accepts DOM elements
  try {
    var o = {},
        func = isNative(func = Object.defineProperty) && func,
        result = func(o, o, o) && func;
  } catch(e) { }
  return result;
}());

/**
 * Sets `this` binding data on a given function.
 *
 * @private
 * @param {Function} func The function to set data on.
 * @param {Array} value The data array to set.
 */
var setBindData = !defineProperty ? noop : function(func, value) {
  descriptor.value = value;
  defineProperty(func, '__bindData__', descriptor);
};

module.exports = setBindData;


/***/ }),

/***/ "../../node_modules/lodash._shimkeys/index.js":
/*!****************************************************!*\
  !*** ../../node_modules/lodash._shimkeys/index.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var objectTypes = __webpack_require__(/*! lodash._objecttypes */ "../../node_modules/lodash._objecttypes/index.js");

/** Used for native method references */
var objectProto = Object.prototype;

/** Native method shortcuts */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A fallback implementation of `Object.keys` which produces an array of the
 * given object's own enumerable property names.
 *
 * @private
 * @type Function
 * @param {Object} object The object to inspect.
 * @returns {Array} Returns an array of property names.
 */
var shimKeys = function(object) {
  var index, iterable = object, result = [];
  if (!iterable) return result;
  if (!(objectTypes[typeof object])) return result;
    for (index in iterable) {
      if (hasOwnProperty.call(iterable, index)) {
        result.push(index);
      }
    }
  return result
};

module.exports = shimKeys;


/***/ }),

/***/ "../../node_modules/lodash._slice/index.js":
/*!*************************************************!*\
  !*** ../../node_modules/lodash._slice/index.js ***!
  \*************************************************/
/***/ ((module) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */

/**
 * Slices the `collection` from the `start` index up to, but not including,
 * the `end` index.
 *
 * Note: This function is used instead of `Array#slice` to support node lists
 * in IE < 9 and to ensure dense arrays are returned.
 *
 * @private
 * @param {Array|Object|string} collection The collection to slice.
 * @param {number} start The start index.
 * @param {number} end The end index.
 * @returns {Array} Returns the new array.
 */
function slice(array, start, end) {
  start || (start = 0);
  if (typeof end == 'undefined') {
    end = array ? array.length : 0;
  }
  var index = -1,
      length = end - start || 0,
      result = Array(length < 0 ? 0 : length);

  while (++index < length) {
    result[index] = array[start + index];
  }
  return result;
}

module.exports = slice;


/***/ }),

/***/ "../../node_modules/lodash.assign/index.js":
/*!*************************************************!*\
  !*** ../../node_modules/lodash.assign/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var baseCreateCallback = __webpack_require__(/*! lodash._basecreatecallback */ "../../node_modules/lodash._basecreatecallback/index.js"),
    keys = __webpack_require__(/*! lodash.keys */ "../../node_modules/lodash.keys/index.js"),
    objectTypes = __webpack_require__(/*! lodash._objecttypes */ "../../node_modules/lodash._objecttypes/index.js");

/**
 * Assigns own enumerable properties of source object(s) to the destination
 * object. Subsequent sources will overwrite property assignments of previous
 * sources. If a callback is provided it will be executed to produce the
 * assigned values. The callback is bound to `thisArg` and invoked with two
 * arguments; (objectValue, sourceValue).
 *
 * @static
 * @memberOf _
 * @type Function
 * @alias extend
 * @category Objects
 * @param {Object} object The destination object.
 * @param {...Object} [source] The source objects.
 * @param {Function} [callback] The function to customize assigning values.
 * @param {*} [thisArg] The `this` binding of `callback`.
 * @returns {Object} Returns the destination object.
 * @example
 *
 * _.assign({ 'name': 'fred' }, { 'employer': 'slate' });
 * // => { 'name': 'fred', 'employer': 'slate' }
 *
 * var defaults = _.partialRight(_.assign, function(a, b) {
 *   return typeof a == 'undefined' ? b : a;
 * });
 *
 * var object = { 'name': 'barney' };
 * defaults(object, { 'name': 'fred', 'employer': 'slate' });
 * // => { 'name': 'barney', 'employer': 'slate' }
 */
var assign = function(object, source, guard) {
  var index, iterable = object, result = iterable;
  if (!iterable) return result;
  var args = arguments,
      argsIndex = 0,
      argsLength = typeof guard == 'number' ? 2 : args.length;
  if (argsLength > 3 && typeof args[argsLength - 2] == 'function') {
    var callback = baseCreateCallback(args[--argsLength - 1], args[argsLength--], 2);
  } else if (argsLength > 2 && typeof args[argsLength - 1] == 'function') {
    callback = args[--argsLength];
  }
  while (++argsIndex < argsLength) {
    iterable = args[argsIndex];
    if (iterable && objectTypes[typeof iterable]) {
    var ownIndex = -1,
        ownProps = objectTypes[typeof iterable] && keys(iterable),
        length = ownProps ? ownProps.length : 0;

    while (++ownIndex < length) {
      index = ownProps[ownIndex];
      result[index] = callback ? callback(result[index], iterable[index]) : iterable[index];
    }
    }
  }
  return result
};

module.exports = assign;


/***/ }),

/***/ "../../node_modules/lodash.bind/index.js":
/*!***********************************************!*\
  !*** ../../node_modules/lodash.bind/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var createWrapper = __webpack_require__(/*! lodash._createwrapper */ "../../node_modules/lodash._createwrapper/index.js"),
    slice = __webpack_require__(/*! lodash._slice */ "../../node_modules/lodash._slice/index.js");

/**
 * Creates a function that, when called, invokes `func` with the `this`
 * binding of `thisArg` and prepends any additional `bind` arguments to those
 * provided to the bound function.
 *
 * @static
 * @memberOf _
 * @category Functions
 * @param {Function} func The function to bind.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {...*} [arg] Arguments to be partially applied.
 * @returns {Function} Returns the new bound function.
 * @example
 *
 * var func = function(greeting) {
 *   return greeting + ' ' + this.name;
 * };
 *
 * func = _.bind(func, { 'name': 'fred' }, 'hi');
 * func();
 * // => 'hi fred'
 */
function bind(func, thisArg) {
  return arguments.length > 2
    ? createWrapper(func, 17, slice(arguments, 2), null, thisArg)
    : createWrapper(func, 1, null, null, thisArg);
}

module.exports = bind;


/***/ }),

/***/ "../../node_modules/lodash.identity/index.js":
/*!***************************************************!*\
  !*** ../../node_modules/lodash.identity/index.js ***!
  \***************************************************/
/***/ ((module) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */

/**
 * This method returns the first argument provided to it.
 *
 * @static
 * @memberOf _
 * @category Utilities
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'name': 'fred' };
 * _.identity(object) === object;
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "../../node_modules/lodash.isobject/index.js":
/*!***************************************************!*\
  !*** ../../node_modules/lodash.isobject/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var objectTypes = __webpack_require__(/*! lodash._objecttypes */ "../../node_modules/lodash._objecttypes/index.js");

/**
 * Checks if `value` is the language type of Object.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Objects
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if the `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // check if the value is the ECMAScript language type of Object
  // http://es5.github.io/#x8
  // and avoid a V8 bug
  // http://code.google.com/p/v8/issues/detail?id=2291
  return !!(value && objectTypes[typeof value]);
}

module.exports = isObject;


/***/ }),

/***/ "../../node_modules/lodash.keys/index.js":
/*!***********************************************!*\
  !*** ../../node_modules/lodash.keys/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var isNative = __webpack_require__(/*! lodash._isnative */ "../../node_modules/lodash._isnative/index.js"),
    isObject = __webpack_require__(/*! lodash.isobject */ "../../node_modules/lodash.isobject/index.js"),
    shimKeys = __webpack_require__(/*! lodash._shimkeys */ "../../node_modules/lodash._shimkeys/index.js");

/* Native method shortcuts for methods with the same name as other `lodash` methods */
var nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys;

/**
 * Creates an array composed of the own enumerable property names of an object.
 *
 * @static
 * @memberOf _
 * @category Objects
 * @param {Object} object The object to inspect.
 * @returns {Array} Returns an array of property names.
 * @example
 *
 * _.keys({ 'one': 1, 'two': 2, 'three': 3 });
 * // => ['one', 'two', 'three'] (property order is not guaranteed across environments)
 */
var keys = !nativeKeys ? shimKeys : function(object) {
  if (!isObject(object)) {
    return [];
  }
  return nativeKeys(object);
};

module.exports = keys;


/***/ }),

/***/ "../../node_modules/lodash.noop/index.js":
/*!***********************************************!*\
  !*** ../../node_modules/lodash.noop/index.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */

/**
 * A no-operation function.
 *
 * @static
 * @memberOf _
 * @category Utilities
 * @example
 *
 * var object = { 'name': 'fred' };
 * _.noop(object) === undefined;
 * // => true
 */
function noop() {
  // no operation performed
}

module.exports = noop;


/***/ }),

/***/ "../../node_modules/lodash.support/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/lodash.support/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * Lo-Dash 2.4.1 (Custom Build) <http://lodash.com/>
 * Build: `lodash modularize modern exports="npm" -o ./npm/`
 * Copyright 2012-2013 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.5.2 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2013 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <http://lodash.com/license>
 */
var isNative = __webpack_require__(/*! lodash._isnative */ "../../node_modules/lodash._isnative/index.js");

/** Used to detect functions containing a `this` reference */
var reThis = /\bthis\b/;

/**
 * An object used to flag environments features.
 *
 * @static
 * @memberOf _
 * @type Object
 */
var support = {};

/**
 * Detect if functions can be decompiled by `Function#toString`
 * (all but PS3 and older Opera mobile browsers & avoided in Windows 8 apps).
 *
 * @memberOf _.support
 * @type boolean
 */
support.funcDecomp = !isNative(global.WinRTError) && reThis.test(function() { return this; });

/**
 * Detect if `Function#name` is supported (all but IE).
 *
 * @memberOf _.support
 * @type boolean
 */
support.funcNames = typeof Function.name == 'string';

module.exports = support;


/***/ }),

/***/ "../../node_modules/merge2/index.js":
/*!******************************************!*\
  !*** ../../node_modules/merge2/index.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";

/*
 * merge2
 * https://github.com/teambition/merge2
 *
 * Copyright (c) 2014-2020 Teambition
 * Licensed under the MIT license.
 */
const Stream = __webpack_require__(/*! stream */ "stream")
const PassThrough = Stream.PassThrough
const slice = Array.prototype.slice

module.exports = merge2

function merge2 () {
  const streamsQueue = []
  const args = slice.call(arguments)
  let merging = false
  let options = args[args.length - 1]

  if (options && !Array.isArray(options) && options.pipe == null) {
    args.pop()
  } else {
    options = {}
  }

  const doEnd = options.end !== false
  const doPipeError = options.pipeError === true
  if (options.objectMode == null) {
    options.objectMode = true
  }
  if (options.highWaterMark == null) {
    options.highWaterMark = 64 * 1024
  }
  const mergedStream = PassThrough(options)

  function addStream () {
    for (let i = 0, len = arguments.length; i < len; i++) {
      streamsQueue.push(pauseStreams(arguments[i], options))
    }
    mergeStream()
    return this
  }

  function mergeStream () {
    if (merging) {
      return
    }
    merging = true

    let streams = streamsQueue.shift()
    if (!streams) {
      process.nextTick(endStream)
      return
    }
    if (!Array.isArray(streams)) {
      streams = [streams]
    }

    let pipesCount = streams.length + 1

    function next () {
      if (--pipesCount > 0) {
        return
      }
      merging = false
      mergeStream()
    }

    function pipe (stream) {
      function onend () {
        stream.removeListener('merge2UnpipeEnd', onend)
        stream.removeListener('end', onend)
        if (doPipeError) {
          stream.removeListener('error', onerror)
        }
        next()
      }
      function onerror (err) {
        mergedStream.emit('error', err)
      }
      // skip ended stream
      if (stream._readableState.endEmitted) {
        return next()
      }

      stream.on('merge2UnpipeEnd', onend)
      stream.on('end', onend)

      if (doPipeError) {
        stream.on('error', onerror)
      }

      stream.pipe(mergedStream, { end: false })
      // compatible for old stream
      stream.resume()
    }

    for (let i = 0; i < streams.length; i++) {
      pipe(streams[i])
    }

    next()
  }

  function endStream () {
    merging = false
    // emit 'queueDrain' when all streams merged.
    mergedStream.emit('queueDrain')
    if (doEnd) {
      mergedStream.end()
    }
  }

  mergedStream.setMaxListeners(0)
  mergedStream.add = addStream
  mergedStream.on('unpipe', function (stream) {
    stream.emit('merge2UnpipeEnd')
  })

  if (args.length) {
    addStream.apply(null, args)
  }
  return mergedStream
}

// check and pause streams for pipe.
function pauseStreams (streams, options) {
  if (!Array.isArray(streams)) {
    // Backwards-compat with old-style streams
    if (!streams._readableState && streams.pipe) {
      streams = streams.pipe(PassThrough(options))
    }
    if (!streams._readableState || !streams.pause || !streams.pipe) {
      throw new Error('Only readable stream can be merged.')
    }
    streams.pause()
  } else {
    for (let i = 0, len = streams.length; i < len; i++) {
      streams[i] = pauseStreams(streams[i], options)
    }
  }
  return streams
}


/***/ }),

/***/ "../../node_modules/micromatch/index.js":
/*!**********************************************!*\
  !*** ../../node_modules/micromatch/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const util = __webpack_require__(/*! util */ "util");
const braces = __webpack_require__(/*! braces */ "../../node_modules/braces/index.js");
const picomatch = __webpack_require__(/*! picomatch */ "../../node_modules/picomatch/index.js");
const utils = __webpack_require__(/*! picomatch/lib/utils */ "../../node_modules/picomatch/lib/utils.js");
const isEmptyString = val => val === '' || val === './';

/**
 * Returns an array of strings that match one or more glob patterns.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm(list, patterns[, options]);
 *
 * console.log(mm(['a.js', 'a.txt'], ['*.js']));
 * //=> [ 'a.js' ]
 * ```
 * @param {String|Array<string>} `list` List of strings to match.
 * @param {String|Array<string>} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options)
 * @return {Array} Returns an array of matches
 * @summary false
 * @api public
 */

const micromatch = (list, patterns, options) => {
  patterns = [].concat(patterns);
  list = [].concat(list);

  let omit = new Set();
  let keep = new Set();
  let items = new Set();
  let negatives = 0;

  let onResult = state => {
    items.add(state.output);
    if (options && options.onResult) {
      options.onResult(state);
    }
  };

  for (let i = 0; i < patterns.length; i++) {
    let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
    let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
    if (negated) negatives++;

    for (let item of list) {
      let matched = isMatch(item, true);

      let match = negated ? !matched.isMatch : matched.isMatch;
      if (!match) continue;

      if (negated) {
        omit.add(matched.output);
      } else {
        omit.delete(matched.output);
        keep.add(matched.output);
      }
    }
  }

  let result = negatives === patterns.length ? [...items] : [...keep];
  let matches = result.filter(item => !omit.has(item));

  if (options && matches.length === 0) {
    if (options.failglob === true) {
      throw new Error(`No matches found for "${patterns.join(', ')}"`);
    }

    if (options.nonull === true || options.nullglob === true) {
      return options.unescape ? patterns.map(p => p.replace(/\\/g, '')) : patterns;
    }
  }

  return matches;
};

/**
 * Backwards compatibility
 */

micromatch.match = micromatch;

/**
 * Returns a matcher function from the given glob `pattern` and `options`.
 * The returned function takes a string to match as its only argument and returns
 * true if the string is a match.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.matcher(pattern[, options]);
 *
 * const isMatch = mm.matcher('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @param {String} `pattern` Glob pattern
 * @param {Object} `options`
 * @return {Function} Returns a matcher function.
 * @api public
 */

micromatch.matcher = (pattern, options) => picomatch(pattern, options);

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.isMatch(string, patterns[, options]);
 *
 * console.log(mm.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(mm.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String} `str` The string to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `[options]` See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);

/**
 * Backwards compatibility
 */

micromatch.any = micromatch.isMatch;

/**
 * Returns a list of strings that _**do not match any**_ of the given `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.not(list, patterns[, options]);
 *
 * console.log(mm.not(['a.a', 'b.b', 'c.c'], '*.a'));
 * //=> ['b.b', 'c.c']
 * ```
 * @param {Array} `list` Array of strings to match.
 * @param {String|Array} `patterns` One or more glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array} Returns an array of strings that **do not match** the given patterns.
 * @api public
 */

micromatch.not = (list, patterns, options = {}) => {
  patterns = [].concat(patterns).map(String);
  let result = new Set();
  let items = [];

  let onResult = state => {
    if (options.onResult) options.onResult(state);
    items.push(state.output);
  };

  let matches = new Set(micromatch(list, patterns, { ...options, onResult }));

  for (let item of items) {
    if (!matches.has(item)) {
      result.add(item);
    }
  }
  return [...result];
};

/**
 * Returns true if the given `string` contains the given pattern. Similar
 * to [.isMatch](#isMatch) but the pattern can match any part of the string.
 *
 * ```js
 * var mm = require('micromatch');
 * // mm.contains(string, pattern[, options]);
 *
 * console.log(mm.contains('aa/bb/cc', '*b'));
 * //=> true
 * console.log(mm.contains('aa/bb/cc', '*d'));
 * //=> false
 * ```
 * @param {String} `str` The string to match.
 * @param {String|Array} `patterns` Glob pattern to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any of the patterns matches any part of `str`.
 * @api public
 */

micromatch.contains = (str, pattern, options) => {
  if (typeof str !== 'string') {
    throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
  }

  if (Array.isArray(pattern)) {
    return pattern.some(p => micromatch.contains(str, p, options));
  }

  if (typeof pattern === 'string') {
    if (isEmptyString(str) || isEmptyString(pattern)) {
      return false;
    }

    if (str.includes(pattern) || (str.startsWith('./') && str.slice(2).includes(pattern))) {
      return true;
    }
  }

  return micromatch.isMatch(str, pattern, { ...options, contains: true });
};

/**
 * Filter the keys of the given object with the given `glob` pattern
 * and `options`. Does not attempt to match nested keys. If you need this feature,
 * use [glob-object][] instead.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.matchKeys(object, patterns[, options]);
 *
 * const obj = { aa: 'a', ab: 'b', ac: 'c' };
 * console.log(mm.matchKeys(obj, '*b'));
 * //=> { ab: 'b' }
 * ```
 * @param {Object} `object` The object with keys to filter.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Object} Returns an object with only keys that match the given patterns.
 * @api public
 */

micromatch.matchKeys = (obj, patterns, options) => {
  if (!utils.isObject(obj)) {
    throw new TypeError('Expected the first argument to be an object');
  }
  let keys = micromatch(Object.keys(obj), patterns, options);
  let res = {};
  for (let key of keys) res[key] = obj[key];
  return res;
};

/**
 * Returns true if some of the strings in the given `list` match any of the given glob `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.some(list, patterns[, options]);
 *
 * console.log(mm.some(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // true
 * console.log(mm.some(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param {String|Array} `list` The string or array of strings to test. Returns as soon as the first match is found.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any `patterns` matches any of the strings in `list`
 * @api public
 */

micromatch.some = (list, patterns, options) => {
  let items = [].concat(list);

  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options);
    if (items.some(item => isMatch(item))) {
      return true;
    }
  }
  return false;
};

/**
 * Returns true if every string in the given `list` matches
 * any of the given glob `patterns`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.every(list, patterns[, options]);
 *
 * console.log(mm.every('foo.js', ['foo.js']));
 * // true
 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js']));
 * // true
 * console.log(mm.every(['foo.js', 'bar.js'], ['*.js', '!foo.js']));
 * // false
 * console.log(mm.every(['foo.js'], ['*.js', '!foo.js']));
 * // false
 * ```
 * @param {String|Array} `list` The string or array of strings to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if all `patterns` matches all of the strings in `list`
 * @api public
 */

micromatch.every = (list, patterns, options) => {
  let items = [].concat(list);

  for (let pattern of [].concat(patterns)) {
    let isMatch = picomatch(String(pattern), options);
    if (!items.every(item => isMatch(item))) {
      return false;
    }
  }
  return true;
};

/**
 * Returns true if **all** of the given `patterns` match
 * the specified string.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.all(string, patterns[, options]);
 *
 * console.log(mm.all('foo.js', ['foo.js']));
 * // true
 *
 * console.log(mm.all('foo.js', ['*.js', '!foo.js']));
 * // false
 *
 * console.log(mm.all('foo.js', ['*.js', 'foo.js']));
 * // true
 *
 * console.log(mm.all('foo.js', ['*.js', 'f*', '*o*', '*o.js']));
 * // true
 * ```
 * @param {String|Array} `str` The string to test.
 * @param {String|Array} `patterns` One or more glob patterns to use for matching.
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

micromatch.all = (str, patterns, options) => {
  if (typeof str !== 'string') {
    throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
  }

  return [].concat(patterns).every(p => picomatch(p, options)(str));
};

/**
 * Returns an array of matches captured by `pattern` in `string, or `null` if the pattern did not match.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.capture(pattern, string[, options]);
 *
 * console.log(mm.capture('test/*.js', 'test/foo.js'));
 * //=> ['foo']
 * console.log(mm.capture('test/*.js', 'foo/bar.css'));
 * //=> null
 * ```
 * @param {String} `glob` Glob pattern to use for matching.
 * @param {String} `input` String to match
 * @param {Object} `options` See available [options](#options) for changing how matches are performed
 * @return {Array|null} Returns an array of captures if the input matches the glob pattern, otherwise `null`.
 * @api public
 */

micromatch.capture = (glob, input, options) => {
  let posix = utils.isWindows(options);
  let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
  let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);

  if (match) {
    return match.slice(1).map(v => v === void 0 ? '' : v);
  }
};

/**
 * Create a regular expression from the given glob `pattern`.
 *
 * ```js
 * const mm = require('micromatch');
 * // mm.makeRe(pattern[, options]);
 *
 * console.log(mm.makeRe('*.js'));
 * //=> /^(?:(\.[\\\/])?(?!\.)(?=.)[^\/]*?\.js)$/
 * ```
 * @param {String} `pattern` A glob pattern to convert to regex.
 * @param {Object} `options`
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

micromatch.makeRe = (...args) => picomatch.makeRe(...args);

/**
 * Scan a glob pattern to separate the pattern into segments. Used
 * by the [split](#split) method.
 *
 * ```js
 * const mm = require('micromatch');
 * const state = mm.scan(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

micromatch.scan = (...args) => picomatch.scan(...args);

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const mm = require('micromatch');
 * const state = mm.parse(pattern[, options]);
 * ```
 * @param {String} `glob`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as regex source string.
 * @api public
 */

micromatch.parse = (patterns, options) => {
  let res = [];
  for (let pattern of [].concat(patterns || [])) {
    for (let str of braces(String(pattern), options)) {
      res.push(picomatch.parse(str, options));
    }
  }
  return res;
};

/**
 * Process the given brace `pattern`.
 *
 * ```js
 * const { braces } = require('micromatch');
 * console.log(braces('foo/{a,b,c}/bar'));
 * //=> [ 'foo/(a|b|c)/bar' ]
 *
 * console.log(braces('foo/{a,b,c}/bar', { expand: true }));
 * //=> [ 'foo/a/bar', 'foo/b/bar', 'foo/c/bar' ]
 * ```
 * @param {String} `pattern` String with brace pattern to process.
 * @param {Object} `options` Any [options](#options) to change how expansion is performed. See the [braces][] library for all available options.
 * @return {Array}
 * @api public
 */

micromatch.braces = (pattern, options) => {
  if (typeof pattern !== 'string') throw new TypeError('Expected a string');
  if ((options && options.nobrace === true) || !/\{.*\}/.test(pattern)) {
    return [pattern];
  }
  return braces(pattern, options);
};

/**
 * Expand braces
 */

micromatch.braceExpand = (pattern, options) => {
  if (typeof pattern !== 'string') throw new TypeError('Expected a string');
  return micromatch.braces(pattern, { ...options, expand: true });
};

/**
 * Expose micromatch
 */

module.exports = micromatch;


/***/ }),

/***/ "../../node_modules/picomatch/index.js":
/*!*********************************************!*\
  !*** ../../node_modules/picomatch/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


module.exports = __webpack_require__(/*! ./lib/picomatch */ "../../node_modules/picomatch/lib/picomatch.js");


/***/ }),

/***/ "../../node_modules/picomatch/lib/constants.js":
/*!*****************************************************!*\
  !*** ../../node_modules/picomatch/lib/constants.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const path = __webpack_require__(/*! path */ "path");
const WIN_SLASH = '\\\\/';
const WIN_NO_SLASH = `[^${WIN_SLASH}]`;

/**
 * Posix glob regex
 */

const DOT_LITERAL = '\\.';
const PLUS_LITERAL = '\\+';
const QMARK_LITERAL = '\\?';
const SLASH_LITERAL = '\\/';
const ONE_CHAR = '(?=.)';
const QMARK = '[^/]';
const END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
const START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
const DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
const NO_DOT = `(?!${DOT_LITERAL})`;
const NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
const NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
const NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
const QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
const STAR = `${QMARK}*?`;

const POSIX_CHARS = {
  DOT_LITERAL,
  PLUS_LITERAL,
  QMARK_LITERAL,
  SLASH_LITERAL,
  ONE_CHAR,
  QMARK,
  END_ANCHOR,
  DOTS_SLASH,
  NO_DOT,
  NO_DOTS,
  NO_DOT_SLASH,
  NO_DOTS_SLASH,
  QMARK_NO_DOT,
  STAR,
  START_ANCHOR
};

/**
 * Windows glob regex
 */

const WINDOWS_CHARS = {
  ...POSIX_CHARS,

  SLASH_LITERAL: `[${WIN_SLASH}]`,
  QMARK: WIN_NO_SLASH,
  STAR: `${WIN_NO_SLASH}*?`,
  DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
  NO_DOT: `(?!${DOT_LITERAL})`,
  NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
  NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
  QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
  START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
  END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
};

/**
 * POSIX Bracket Regex
 */

const POSIX_REGEX_SOURCE = {
  alnum: 'a-zA-Z0-9',
  alpha: 'a-zA-Z',
  ascii: '\\x00-\\x7F',
  blank: ' \\t',
  cntrl: '\\x00-\\x1F\\x7F',
  digit: '0-9',
  graph: '\\x21-\\x7E',
  lower: 'a-z',
  print: '\\x20-\\x7E ',
  punct: '\\-!"#$%&\'()\\*+,./:;<=>?@[\\]^_`{|}~',
  space: ' \\t\\r\\n\\v\\f',
  upper: 'A-Z',
  word: 'A-Za-z0-9_',
  xdigit: 'A-Fa-f0-9'
};

module.exports = {
  MAX_LENGTH: 1024 * 64,
  POSIX_REGEX_SOURCE,

  // regular expressions
  REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
  REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
  REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
  REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
  REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
  REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,

  // Replace globs with equivalent patterns to reduce parsing time.
  REPLACEMENTS: {
    '***': '*',
    '**/**': '**',
    '**/**/**': '**'
  },

  // Digits
  CHAR_0: 48, /* 0 */
  CHAR_9: 57, /* 9 */

  // Alphabet chars.
  CHAR_UPPERCASE_A: 65, /* A */
  CHAR_LOWERCASE_A: 97, /* a */
  CHAR_UPPERCASE_Z: 90, /* Z */
  CHAR_LOWERCASE_Z: 122, /* z */

  CHAR_LEFT_PARENTHESES: 40, /* ( */
  CHAR_RIGHT_PARENTHESES: 41, /* ) */

  CHAR_ASTERISK: 42, /* * */

  // Non-alphabetic chars.
  CHAR_AMPERSAND: 38, /* & */
  CHAR_AT: 64, /* @ */
  CHAR_BACKWARD_SLASH: 92, /* \ */
  CHAR_CARRIAGE_RETURN: 13, /* \r */
  CHAR_CIRCUMFLEX_ACCENT: 94, /* ^ */
  CHAR_COLON: 58, /* : */
  CHAR_COMMA: 44, /* , */
  CHAR_DOT: 46, /* . */
  CHAR_DOUBLE_QUOTE: 34, /* " */
  CHAR_EQUAL: 61, /* = */
  CHAR_EXCLAMATION_MARK: 33, /* ! */
  CHAR_FORM_FEED: 12, /* \f */
  CHAR_FORWARD_SLASH: 47, /* / */
  CHAR_GRAVE_ACCENT: 96, /* ` */
  CHAR_HASH: 35, /* # */
  CHAR_HYPHEN_MINUS: 45, /* - */
  CHAR_LEFT_ANGLE_BRACKET: 60, /* < */
  CHAR_LEFT_CURLY_BRACE: 123, /* { */
  CHAR_LEFT_SQUARE_BRACKET: 91, /* [ */
  CHAR_LINE_FEED: 10, /* \n */
  CHAR_NO_BREAK_SPACE: 160, /* \u00A0 */
  CHAR_PERCENT: 37, /* % */
  CHAR_PLUS: 43, /* + */
  CHAR_QUESTION_MARK: 63, /* ? */
  CHAR_RIGHT_ANGLE_BRACKET: 62, /* > */
  CHAR_RIGHT_CURLY_BRACE: 125, /* } */
  CHAR_RIGHT_SQUARE_BRACKET: 93, /* ] */
  CHAR_SEMICOLON: 59, /* ; */
  CHAR_SINGLE_QUOTE: 39, /* ' */
  CHAR_SPACE: 32, /*   */
  CHAR_TAB: 9, /* \t */
  CHAR_UNDERSCORE: 95, /* _ */
  CHAR_VERTICAL_LINE: 124, /* | */
  CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279, /* \uFEFF */

  SEP: path.sep,

  /**
   * Create EXTGLOB_CHARS
   */

  extglobChars(chars) {
    return {
      '!': { type: 'negate', open: '(?:(?!(?:', close: `))${chars.STAR})` },
      '?': { type: 'qmark', open: '(?:', close: ')?' },
      '+': { type: 'plus', open: '(?:', close: ')+' },
      '*': { type: 'star', open: '(?:', close: ')*' },
      '@': { type: 'at', open: '(?:', close: ')' }
    };
  },

  /**
   * Create GLOB_CHARS
   */

  globChars(win32) {
    return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
  }
};


/***/ }),

/***/ "../../node_modules/picomatch/lib/parse.js":
/*!*************************************************!*\
  !*** ../../node_modules/picomatch/lib/parse.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const constants = __webpack_require__(/*! ./constants */ "../../node_modules/picomatch/lib/constants.js");
const utils = __webpack_require__(/*! ./utils */ "../../node_modules/picomatch/lib/utils.js");

/**
 * Constants
 */

const {
  MAX_LENGTH,
  POSIX_REGEX_SOURCE,
  REGEX_NON_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_BACKREF,
  REPLACEMENTS
} = constants;

/**
 * Helpers
 */

const expandRange = (args, options) => {
  if (typeof options.expandRange === 'function') {
    return options.expandRange(...args, options);
  }

  args.sort();
  const value = `[${args.join('-')}]`;

  try {
    /* eslint-disable-next-line no-new */
    new RegExp(value);
  } catch (ex) {
    return args.map(v => utils.escapeRegex(v)).join('..');
  }

  return value;
};

/**
 * Create the message for a syntax error
 */

const syntaxError = (type, char) => {
  return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
};

/**
 * Parse the given input string.
 * @param {String} input
 * @param {Object} options
 * @return {Object}
 */

const parse = (input, options) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected a string');
  }

  input = REPLACEMENTS[input] || input;

  const opts = { ...options };
  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;

  let len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }

  const bos = { type: 'bos', value: '', output: opts.prepend || '' };
  const tokens = [bos];

  const capture = opts.capture ? '' : '?:';
  const win32 = utils.isWindows(options);

  // create constants based on platform, for windows or posix
  const PLATFORM_CHARS = constants.globChars(win32);
  const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);

  const {
    DOT_LITERAL,
    PLUS_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOT_SLASH,
    NO_DOTS_SLASH,
    QMARK,
    QMARK_NO_DOT,
    STAR,
    START_ANCHOR
  } = PLATFORM_CHARS;

  const globstar = opts => {
    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
  };

  const nodot = opts.dot ? '' : NO_DOT;
  const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
  let star = opts.bash === true ? globstar(opts) : STAR;

  if (opts.capture) {
    star = `(${star})`;
  }

  // minimatch options support
  if (typeof opts.noext === 'boolean') {
    opts.noextglob = opts.noext;
  }

  const state = {
    input,
    index: -1,
    start: 0,
    dot: opts.dot === true,
    consumed: '',
    output: '',
    prefix: '',
    backtrack: false,
    negated: false,
    brackets: 0,
    braces: 0,
    parens: 0,
    quotes: 0,
    globstar: false,
    tokens
  };

  input = utils.removePrefix(input, state);
  len = input.length;

  const extglobs = [];
  const braces = [];
  const stack = [];
  let prev = bos;
  let value;

  /**
   * Tokenizing helpers
   */

  const eos = () => state.index === len - 1;
  const peek = state.peek = (n = 1) => input[state.index + n];
  const advance = state.advance = () => input[++state.index] || '';
  const remaining = () => input.slice(state.index + 1);
  const consume = (value = '', num = 0) => {
    state.consumed += value;
    state.index += num;
  };

  const append = token => {
    state.output += token.output != null ? token.output : token.value;
    consume(token.value);
  };

  const negate = () => {
    let count = 1;

    while (peek() === '!' && (peek(2) !== '(' || peek(3) === '?')) {
      advance();
      state.start++;
      count++;
    }

    if (count % 2 === 0) {
      return false;
    }

    state.negated = true;
    state.start++;
    return true;
  };

  const increment = type => {
    state[type]++;
    stack.push(type);
  };

  const decrement = type => {
    state[type]--;
    stack.pop();
  };

  /**
   * Push tokens onto the tokens array. This helper speeds up
   * tokenizing by 1) helping us avoid backtracking as much as possible,
   * and 2) helping us avoid creating extra tokens when consecutive
   * characters are plain text. This improves performance and simplifies
   * lookbehinds.
   */

  const push = tok => {
    if (prev.type === 'globstar') {
      const isBrace = state.braces > 0 && (tok.type === 'comma' || tok.type === 'brace');
      const isExtglob = tok.extglob === true || (extglobs.length && (tok.type === 'pipe' || tok.type === 'paren'));

      if (tok.type !== 'slash' && tok.type !== 'paren' && !isBrace && !isExtglob) {
        state.output = state.output.slice(0, -prev.output.length);
        prev.type = 'star';
        prev.value = '*';
        prev.output = star;
        state.output += prev.output;
      }
    }

    if (extglobs.length && tok.type !== 'paren') {
      extglobs[extglobs.length - 1].inner += tok.value;
    }

    if (tok.value || tok.output) append(tok);
    if (prev && prev.type === 'text' && tok.type === 'text') {
      prev.value += tok.value;
      prev.output = (prev.output || '') + tok.value;
      return;
    }

    tok.prev = prev;
    tokens.push(tok);
    prev = tok;
  };

  const extglobOpen = (type, value) => {
    const token = { ...EXTGLOB_CHARS[value], conditions: 1, inner: '' };

    token.prev = prev;
    token.parens = state.parens;
    token.output = state.output;
    const output = (opts.capture ? '(' : '') + token.open;

    increment('parens');
    push({ type, value, output: state.output ? '' : ONE_CHAR });
    push({ type: 'paren', extglob: true, value: advance(), output });
    extglobs.push(token);
  };

  const extglobClose = token => {
    let output = token.close + (opts.capture ? ')' : '');
    let rest;

    if (token.type === 'negate') {
      let extglobStar = star;

      if (token.inner && token.inner.length > 1 && token.inner.includes('/')) {
        extglobStar = globstar(opts);
      }

      if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
        output = token.close = `)$))${extglobStar}`;
      }

      if (token.inner.includes('*') && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
        // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.
        // In this case, we need to parse the string and use it in the output of the original pattern.
        // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.
        //
        // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.
        const expression = parse(rest, { ...options, fastpaths: false }).output;

        output = token.close = `)${expression})${extglobStar})`;
      }

      if (token.prev.type === 'bos') {
        state.negatedExtglob = true;
      }
    }

    push({ type: 'paren', extglob: true, value, output });
    decrement('parens');
  };

  /**
   * Fast paths
   */

  if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
    let backslashes = false;

    let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
      if (first === '\\') {
        backslashes = true;
        return m;
      }

      if (first === '?') {
        if (esc) {
          return esc + first + (rest ? QMARK.repeat(rest.length) : '');
        }
        if (index === 0) {
          return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : '');
        }
        return QMARK.repeat(chars.length);
      }

      if (first === '.') {
        return DOT_LITERAL.repeat(chars.length);
      }

      if (first === '*') {
        if (esc) {
          return esc + first + (rest ? star : '');
        }
        return star;
      }
      return esc ? m : `\\${m}`;
    });

    if (backslashes === true) {
      if (opts.unescape === true) {
        output = output.replace(/\\/g, '');
      } else {
        output = output.replace(/\\+/g, m => {
          return m.length % 2 === 0 ? '\\\\' : (m ? '\\' : '');
        });
      }
    }

    if (output === input && opts.contains === true) {
      state.output = input;
      return state;
    }

    state.output = utils.wrapOutput(output, state, options);
    return state;
  }

  /**
   * Tokenize input until we reach end-of-string
   */

  while (!eos()) {
    value = advance();

    if (value === '\u0000') {
      continue;
    }

    /**
     * Escaped characters
     */

    if (value === '\\') {
      const next = peek();

      if (next === '/' && opts.bash !== true) {
        continue;
      }

      if (next === '.' || next === ';') {
        continue;
      }

      if (!next) {
        value += '\\';
        push({ type: 'text', value });
        continue;
      }

      // collapse slashes to reduce potential for exploits
      const match = /^\\+/.exec(remaining());
      let slashes = 0;

      if (match && match[0].length > 2) {
        slashes = match[0].length;
        state.index += slashes;
        if (slashes % 2 !== 0) {
          value += '\\';
        }
      }

      if (opts.unescape === true) {
        value = advance();
      } else {
        value += advance();
      }

      if (state.brackets === 0) {
        push({ type: 'text', value });
        continue;
      }
    }

    /**
     * If we're inside a regex character class, continue
     * until we reach the closing bracket.
     */

    if (state.brackets > 0 && (value !== ']' || prev.value === '[' || prev.value === '[^')) {
      if (opts.posix !== false && value === ':') {
        const inner = prev.value.slice(1);
        if (inner.includes('[')) {
          prev.posix = true;

          if (inner.includes(':')) {
            const idx = prev.value.lastIndexOf('[');
            const pre = prev.value.slice(0, idx);
            const rest = prev.value.slice(idx + 2);
            const posix = POSIX_REGEX_SOURCE[rest];
            if (posix) {
              prev.value = pre + posix;
              state.backtrack = true;
              advance();

              if (!bos.output && tokens.indexOf(prev) === 1) {
                bos.output = ONE_CHAR;
              }
              continue;
            }
          }
        }
      }

      if ((value === '[' && peek() !== ':') || (value === '-' && peek() === ']')) {
        value = `\\${value}`;
      }

      if (value === ']' && (prev.value === '[' || prev.value === '[^')) {
        value = `\\${value}`;
      }

      if (opts.posix === true && value === '!' && prev.value === '[') {
        value = '^';
      }

      prev.value += value;
      append({ value });
      continue;
    }

    /**
     * If we're inside a quoted string, continue
     * until we reach the closing double quote.
     */

    if (state.quotes === 1 && value !== '"') {
      value = utils.escapeRegex(value);
      prev.value += value;
      append({ value });
      continue;
    }

    /**
     * Double quotes
     */

    if (value === '"') {
      state.quotes = state.quotes === 1 ? 0 : 1;
      if (opts.keepQuotes === true) {
        push({ type: 'text', value });
      }
      continue;
    }

    /**
     * Parentheses
     */

    if (value === '(') {
      increment('parens');
      push({ type: 'paren', value });
      continue;
    }

    if (value === ')') {
      if (state.parens === 0 && opts.strictBrackets === true) {
        throw new SyntaxError(syntaxError('opening', '('));
      }

      const extglob = extglobs[extglobs.length - 1];
      if (extglob && state.parens === extglob.parens + 1) {
        extglobClose(extglobs.pop());
        continue;
      }

      push({ type: 'paren', value, output: state.parens ? ')' : '\\)' });
      decrement('parens');
      continue;
    }

    /**
     * Square brackets
     */

    if (value === '[') {
      if (opts.nobracket === true || !remaining().includes(']')) {
        if (opts.nobracket !== true && opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError('closing', ']'));
        }

        value = `\\${value}`;
      } else {
        increment('brackets');
      }

      push({ type: 'bracket', value });
      continue;
    }

    if (value === ']') {
      if (opts.nobracket === true || (prev && prev.type === 'bracket' && prev.value.length === 1)) {
        push({ type: 'text', value, output: `\\${value}` });
        continue;
      }

      if (state.brackets === 0) {
        if (opts.strictBrackets === true) {
          throw new SyntaxError(syntaxError('opening', '['));
        }

        push({ type: 'text', value, output: `\\${value}` });
        continue;
      }

      decrement('brackets');

      const prevValue = prev.value.slice(1);
      if (prev.posix !== true && prevValue[0] === '^' && !prevValue.includes('/')) {
        value = `/${value}`;
      }

      prev.value += value;
      append({ value });

      // when literal brackets are explicitly disabled
      // assume we should match with a regex character class
      if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
        continue;
      }

      const escaped = utils.escapeRegex(prev.value);
      state.output = state.output.slice(0, -prev.value.length);

      // when literal brackets are explicitly enabled
      // assume we should escape the brackets to match literal characters
      if (opts.literalBrackets === true) {
        state.output += escaped;
        prev.value = escaped;
        continue;
      }

      // when the user specifies nothing, try to match both
      prev.value = `(${capture}${escaped}|${prev.value})`;
      state.output += prev.value;
      continue;
    }

    /**
     * Braces
     */

    if (value === '{' && opts.nobrace !== true) {
      increment('braces');

      const open = {
        type: 'brace',
        value,
        output: '(',
        outputIndex: state.output.length,
        tokensIndex: state.tokens.length
      };

      braces.push(open);
      push(open);
      continue;
    }

    if (value === '}') {
      const brace = braces[braces.length - 1];

      if (opts.nobrace === true || !brace) {
        push({ type: 'text', value, output: value });
        continue;
      }

      let output = ')';

      if (brace.dots === true) {
        const arr = tokens.slice();
        const range = [];

        for (let i = arr.length - 1; i >= 0; i--) {
          tokens.pop();
          if (arr[i].type === 'brace') {
            break;
          }
          if (arr[i].type !== 'dots') {
            range.unshift(arr[i].value);
          }
        }

        output = expandRange(range, opts);
        state.backtrack = true;
      }

      if (brace.comma !== true && brace.dots !== true) {
        const out = state.output.slice(0, brace.outputIndex);
        const toks = state.tokens.slice(brace.tokensIndex);
        brace.value = brace.output = '\\{';
        value = output = '\\}';
        state.output = out;
        for (const t of toks) {
          state.output += (t.output || t.value);
        }
      }

      push({ type: 'brace', value, output });
      decrement('braces');
      braces.pop();
      continue;
    }

    /**
     * Pipes
     */

    if (value === '|') {
      if (extglobs.length > 0) {
        extglobs[extglobs.length - 1].conditions++;
      }
      push({ type: 'text', value });
      continue;
    }

    /**
     * Commas
     */

    if (value === ',') {
      let output = value;

      const brace = braces[braces.length - 1];
      if (brace && stack[stack.length - 1] === 'braces') {
        brace.comma = true;
        output = '|';
      }

      push({ type: 'comma', value, output });
      continue;
    }

    /**
     * Slashes
     */

    if (value === '/') {
      // if the beginning of the glob is "./", advance the start
      // to the current index, and don't add the "./" characters
      // to the state. This greatly simplifies lookbehinds when
      // checking for BOS characters like "!" and "." (not "./")
      if (prev.type === 'dot' && state.index === state.start + 1) {
        state.start = state.index + 1;
        state.consumed = '';
        state.output = '';
        tokens.pop();
        prev = bos; // reset "prev" to the first token
        continue;
      }

      push({ type: 'slash', value, output: SLASH_LITERAL });
      continue;
    }

    /**
     * Dots
     */

    if (value === '.') {
      if (state.braces > 0 && prev.type === 'dot') {
        if (prev.value === '.') prev.output = DOT_LITERAL;
        const brace = braces[braces.length - 1];
        prev.type = 'dots';
        prev.output += value;
        prev.value += value;
        brace.dots = true;
        continue;
      }

      if ((state.braces + state.parens) === 0 && prev.type !== 'bos' && prev.type !== 'slash') {
        push({ type: 'text', value, output: DOT_LITERAL });
        continue;
      }

      push({ type: 'dot', value, output: DOT_LITERAL });
      continue;
    }

    /**
     * Question marks
     */

    if (value === '?') {
      const isGroup = prev && prev.value === '(';
      if (!isGroup && opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        extglobOpen('qmark', value);
        continue;
      }

      if (prev && prev.type === 'paren') {
        const next = peek();
        let output = value;

        if (next === '<' && !utils.supportsLookbehinds()) {
          throw new Error('Node.js v10 or higher is required for regex lookbehinds');
        }

        if ((prev.value === '(' && !/[!=<:]/.test(next)) || (next === '<' && !/<([!=]|\w+>)/.test(remaining()))) {
          output = `\\${value}`;
        }

        push({ type: 'text', value, output });
        continue;
      }

      if (opts.dot !== true && (prev.type === 'slash' || prev.type === 'bos')) {
        push({ type: 'qmark', value, output: QMARK_NO_DOT });
        continue;
      }

      push({ type: 'qmark', value, output: QMARK });
      continue;
    }

    /**
     * Exclamation
     */

    if (value === '!') {
      if (opts.noextglob !== true && peek() === '(') {
        if (peek(2) !== '?' || !/[!=<:]/.test(peek(3))) {
          extglobOpen('negate', value);
          continue;
        }
      }

      if (opts.nonegate !== true && state.index === 0) {
        negate();
        continue;
      }
    }

    /**
     * Plus
     */

    if (value === '+') {
      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        extglobOpen('plus', value);
        continue;
      }

      if ((prev && prev.value === '(') || opts.regex === false) {
        push({ type: 'plus', value, output: PLUS_LITERAL });
        continue;
      }

      if ((prev && (prev.type === 'bracket' || prev.type === 'paren' || prev.type === 'brace')) || state.parens > 0) {
        push({ type: 'plus', value });
        continue;
      }

      push({ type: 'plus', value: PLUS_LITERAL });
      continue;
    }

    /**
     * Plain text
     */

    if (value === '@') {
      if (opts.noextglob !== true && peek() === '(' && peek(2) !== '?') {
        push({ type: 'at', extglob: true, value, output: '' });
        continue;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Plain text
     */

    if (value !== '*') {
      if (value === '$' || value === '^') {
        value = `\\${value}`;
      }

      const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
      if (match) {
        value += match[0];
        state.index += match[0].length;
      }

      push({ type: 'text', value });
      continue;
    }

    /**
     * Stars
     */

    if (prev && (prev.type === 'globstar' || prev.star === true)) {
      prev.type = 'star';
      prev.star = true;
      prev.value += value;
      prev.output = star;
      state.backtrack = true;
      state.globstar = true;
      consume(value);
      continue;
    }

    let rest = remaining();
    if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
      extglobOpen('star', value);
      continue;
    }

    if (prev.type === 'star') {
      if (opts.noglobstar === true) {
        consume(value);
        continue;
      }

      const prior = prev.prev;
      const before = prior.prev;
      const isStart = prior.type === 'slash' || prior.type === 'bos';
      const afterStar = before && (before.type === 'star' || before.type === 'globstar');

      if (opts.bash === true && (!isStart || (rest[0] && rest[0] !== '/'))) {
        push({ type: 'star', value, output: '' });
        continue;
      }

      const isBrace = state.braces > 0 && (prior.type === 'comma' || prior.type === 'brace');
      const isExtglob = extglobs.length && (prior.type === 'pipe' || prior.type === 'paren');
      if (!isStart && prior.type !== 'paren' && !isBrace && !isExtglob) {
        push({ type: 'star', value, output: '' });
        continue;
      }

      // strip consecutive `/**/`
      while (rest.slice(0, 3) === '/**') {
        const after = input[state.index + 4];
        if (after && after !== '/') {
          break;
        }
        rest = rest.slice(3);
        consume('/**', 3);
      }

      if (prior.type === 'bos' && eos()) {
        prev.type = 'globstar';
        prev.value += value;
        prev.output = globstar(opts);
        state.output = prev.output;
        state.globstar = true;
        consume(value);
        continue;
      }

      if (prior.type === 'slash' && prior.prev.type !== 'bos' && !afterStar && eos()) {
        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;

        prev.type = 'globstar';
        prev.output = globstar(opts) + (opts.strictSlashes ? ')' : '|$)');
        prev.value += value;
        state.globstar = true;
        state.output += prior.output + prev.output;
        consume(value);
        continue;
      }

      if (prior.type === 'slash' && prior.prev.type !== 'bos' && rest[0] === '/') {
        const end = rest[1] !== void 0 ? '|$' : '';

        state.output = state.output.slice(0, -(prior.output + prev.output).length);
        prior.output = `(?:${prior.output}`;

        prev.type = 'globstar';
        prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
        prev.value += value;

        state.output += prior.output + prev.output;
        state.globstar = true;

        consume(value + advance());

        push({ type: 'slash', value: '/', output: '' });
        continue;
      }

      if (prior.type === 'bos' && rest[0] === '/') {
        prev.type = 'globstar';
        prev.value += value;
        prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
        state.output = prev.output;
        state.globstar = true;
        consume(value + advance());
        push({ type: 'slash', value: '/', output: '' });
        continue;
      }

      // remove single star from output
      state.output = state.output.slice(0, -prev.output.length);

      // reset previous token to globstar
      prev.type = 'globstar';
      prev.output = globstar(opts);
      prev.value += value;

      // reset output with globstar
      state.output += prev.output;
      state.globstar = true;
      consume(value);
      continue;
    }

    const token = { type: 'star', value, output: star };

    if (opts.bash === true) {
      token.output = '.*?';
      if (prev.type === 'bos' || prev.type === 'slash') {
        token.output = nodot + token.output;
      }
      push(token);
      continue;
    }

    if (prev && (prev.type === 'bracket' || prev.type === 'paren') && opts.regex === true) {
      token.output = value;
      push(token);
      continue;
    }

    if (state.index === state.start || prev.type === 'slash' || prev.type === 'dot') {
      if (prev.type === 'dot') {
        state.output += NO_DOT_SLASH;
        prev.output += NO_DOT_SLASH;

      } else if (opts.dot === true) {
        state.output += NO_DOTS_SLASH;
        prev.output += NO_DOTS_SLASH;

      } else {
        state.output += nodot;
        prev.output += nodot;
      }

      if (peek() !== '*') {
        state.output += ONE_CHAR;
        prev.output += ONE_CHAR;
      }
    }

    push(token);
  }

  while (state.brackets > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ']'));
    state.output = utils.escapeLast(state.output, '[');
    decrement('brackets');
  }

  while (state.parens > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', ')'));
    state.output = utils.escapeLast(state.output, '(');
    decrement('parens');
  }

  while (state.braces > 0) {
    if (opts.strictBrackets === true) throw new SyntaxError(syntaxError('closing', '}'));
    state.output = utils.escapeLast(state.output, '{');
    decrement('braces');
  }

  if (opts.strictSlashes !== true && (prev.type === 'star' || prev.type === 'bracket')) {
    push({ type: 'maybe_slash', value: '', output: `${SLASH_LITERAL}?` });
  }

  // rebuild the output if we had to backtrack at any point
  if (state.backtrack === true) {
    state.output = '';

    for (const token of state.tokens) {
      state.output += token.output != null ? token.output : token.value;

      if (token.suffix) {
        state.output += token.suffix;
      }
    }
  }

  return state;
};

/**
 * Fast paths for creating regular expressions for common glob patterns.
 * This can significantly speed up processing and has very little downside
 * impact when none of the fast paths match.
 */

parse.fastpaths = (input, options) => {
  const opts = { ...options };
  const max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
  const len = input.length;
  if (len > max) {
    throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
  }

  input = REPLACEMENTS[input] || input;
  const win32 = utils.isWindows(options);

  // create constants based on platform, for windows or posix
  const {
    DOT_LITERAL,
    SLASH_LITERAL,
    ONE_CHAR,
    DOTS_SLASH,
    NO_DOT,
    NO_DOTS,
    NO_DOTS_SLASH,
    STAR,
    START_ANCHOR
  } = constants.globChars(win32);

  const nodot = opts.dot ? NO_DOTS : NO_DOT;
  const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
  const capture = opts.capture ? '' : '?:';
  const state = { negated: false, prefix: '' };
  let star = opts.bash === true ? '.*?' : STAR;

  if (opts.capture) {
    star = `(${star})`;
  }

  const globstar = opts => {
    if (opts.noglobstar === true) return star;
    return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
  };

  const create = str => {
    switch (str) {
      case '*':
        return `${nodot}${ONE_CHAR}${star}`;

      case '.*':
        return `${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '*.*':
        return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '*/*':
        return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;

      case '**':
        return nodot + globstar(opts);

      case '**/*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;

      case '**/*.*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;

      case '**/.*':
        return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;

      default: {
        const match = /^(.*?)\.(\w+)$/.exec(str);
        if (!match) return;

        const source = create(match[1]);
        if (!source) return;

        return source + DOT_LITERAL + match[2];
      }
    }
  };

  const output = utils.removePrefix(input, state);
  let source = create(output);

  if (source && opts.strictSlashes !== true) {
    source += `${SLASH_LITERAL}?`;
  }

  return source;
};

module.exports = parse;


/***/ }),

/***/ "../../node_modules/picomatch/lib/picomatch.js":
/*!*****************************************************!*\
  !*** ../../node_modules/picomatch/lib/picomatch.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const path = __webpack_require__(/*! path */ "path");
const scan = __webpack_require__(/*! ./scan */ "../../node_modules/picomatch/lib/scan.js");
const parse = __webpack_require__(/*! ./parse */ "../../node_modules/picomatch/lib/parse.js");
const utils = __webpack_require__(/*! ./utils */ "../../node_modules/picomatch/lib/utils.js");
const constants = __webpack_require__(/*! ./constants */ "../../node_modules/picomatch/lib/constants.js");
const isObject = val => val && typeof val === 'object' && !Array.isArray(val);

/**
 * Creates a matcher function from one or more glob patterns. The
 * returned function takes a string to match as its first argument,
 * and returns true if the string is a match. The returned matcher
 * function also takes a boolean as the second argument that, when true,
 * returns an object with additional information.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch(glob[, options]);
 *
 * const isMatch = picomatch('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @name picomatch
 * @param {String|Array} `globs` One or more glob patterns.
 * @param {Object=} `options`
 * @return {Function=} Returns a matcher function.
 * @api public
 */

const picomatch = (glob, options, returnState = false) => {
  if (Array.isArray(glob)) {
    const fns = glob.map(input => picomatch(input, options, returnState));
    const arrayMatcher = str => {
      for (const isMatch of fns) {
        const state = isMatch(str);
        if (state) return state;
      }
      return false;
    };
    return arrayMatcher;
  }

  const isState = isObject(glob) && glob.tokens && glob.input;

  if (glob === '' || (typeof glob !== 'string' && !isState)) {
    throw new TypeError('Expected pattern to be a non-empty string');
  }

  const opts = options || {};
  const posix = utils.isWindows(options);
  const regex = isState
    ? picomatch.compileRe(glob, options)
    : picomatch.makeRe(glob, options, false, true);

  const state = regex.state;
  delete regex.state;

  let isIgnored = () => false;
  if (opts.ignore) {
    const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
    isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
  }

  const matcher = (input, returnObject = false) => {
    const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
    const result = { glob, state, regex, posix, input, output, match, isMatch };

    if (typeof opts.onResult === 'function') {
      opts.onResult(result);
    }

    if (isMatch === false) {
      result.isMatch = false;
      return returnObject ? result : false;
    }

    if (isIgnored(input)) {
      if (typeof opts.onIgnore === 'function') {
        opts.onIgnore(result);
      }
      result.isMatch = false;
      return returnObject ? result : false;
    }

    if (typeof opts.onMatch === 'function') {
      opts.onMatch(result);
    }
    return returnObject ? result : true;
  };

  if (returnState) {
    matcher.state = state;
  }

  return matcher;
};

/**
 * Test `input` with the given `regex`. This is used by the main
 * `picomatch()` function to test the input string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.test(input, regex[, options]);
 *
 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp} `regex`
 * @return {Object} Returns an object with matching info.
 * @api public
 */

picomatch.test = (input, regex, options, { glob, posix } = {}) => {
  if (typeof input !== 'string') {
    throw new TypeError('Expected input to be a string');
  }

  if (input === '') {
    return { isMatch: false, output: '' };
  }

  const opts = options || {};
  const format = opts.format || (posix ? utils.toPosixSlashes : null);
  let match = input === glob;
  let output = (match && format) ? format(input) : input;

  if (match === false) {
    output = format ? format(input) : input;
    match = output === glob;
  }

  if (match === false || opts.capture === true) {
    if (opts.matchBase === true || opts.basename === true) {
      match = picomatch.matchBase(input, regex, options, posix);
    } else {
      match = regex.exec(output);
    }
  }

  return { isMatch: Boolean(match), match, output };
};

/**
 * Match the basename of a filepath.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.matchBase(input, glob[, options]);
 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
 * @return {Boolean}
 * @api public
 */

picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
  const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
  return regex.test(path.basename(input));
};

/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.isMatch(string, patterns[, options]);
 *
 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String|Array} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */

picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);

/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const result = picomatch.parse(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
 * @api public
 */

picomatch.parse = (pattern, options) => {
  if (Array.isArray(pattern)) return pattern.map(p => picomatch.parse(p, options));
  return parse(pattern, { ...options, fastpaths: false });
};

/**
 * Scan a glob pattern to separate the pattern into segments.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.scan(input[, options]);
 *
 * const result = picomatch.scan('!./foo/*.js');
 * console.log(result);
 * { prefix: '!./',
 *   input: '!./foo/*.js',
 *   start: 3,
 *   base: 'foo',
 *   glob: '*.js',
 *   isBrace: false,
 *   isBracket: false,
 *   isGlob: true,
 *   isExtglob: false,
 *   isGlobstar: false,
 *   negated: true }
 * ```
 * @param {String} `input` Glob pattern to scan.
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */

picomatch.scan = (input, options) => scan(input, options);

/**
 * Compile a regular expression from the `state` object returned by the
 * [parse()](#parse) method.
 *
 * @param {Object} `state`
 * @param {Object} `options`
 * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.
 * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.
 * @return {RegExp}
 * @api public
 */

picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
  if (returnOutput === true) {
    return state.output;
  }

  const opts = options || {};
  const prepend = opts.contains ? '' : '^';
  const append = opts.contains ? '' : '$';

  let source = `${prepend}(?:${state.output})${append}`;
  if (state && state.negated === true) {
    source = `^(?!${source}).*$`;
  }

  const regex = picomatch.toRegex(source, options);
  if (returnState === true) {
    regex.state = state;
  }

  return regex;
};

/**
 * Create a regular expression from a parsed glob pattern.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const state = picomatch.parse('*.js');
 * // picomatch.compileRe(state[, options]);
 *
 * console.log(picomatch.compileRe(state));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `state` The object returned from the `.parse` method.
 * @param {Object} `options`
 * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.
 * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */

picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
  if (!input || typeof input !== 'string') {
    throw new TypeError('Expected a non-empty string');
  }

  let parsed = { negated: false, fastpaths: true };

  if (options.fastpaths !== false && (input[0] === '.' || input[0] === '*')) {
    parsed.output = parse.fastpaths(input, options);
  }

  if (!parsed.output) {
    parsed = parse(input, options);
  }

  return picomatch.compileRe(parsed, options, returnOutput, returnState);
};

/**
 * Create a regular expression from the given regex source string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.toRegex(source[, options]);
 *
 * const { output } = picomatch.parse('*.js');
 * console.log(picomatch.toRegex(output));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `source` Regular expression source string.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */

picomatch.toRegex = (source, options) => {
  try {
    const opts = options || {};
    return new RegExp(source, opts.flags || (opts.nocase ? 'i' : ''));
  } catch (err) {
    if (options && options.debug === true) throw err;
    return /$^/;
  }
};

/**
 * Picomatch constants.
 * @return {Object}
 */

picomatch.constants = constants;

/**
 * Expose "picomatch"
 */

module.exports = picomatch;


/***/ }),

/***/ "../../node_modules/picomatch/lib/scan.js":
/*!************************************************!*\
  !*** ../../node_modules/picomatch/lib/scan.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


const utils = __webpack_require__(/*! ./utils */ "../../node_modules/picomatch/lib/utils.js");
const {
  CHAR_ASTERISK,             /* * */
  CHAR_AT,                   /* @ */
  CHAR_BACKWARD_SLASH,       /* \ */
  CHAR_COMMA,                /* , */
  CHAR_DOT,                  /* . */
  CHAR_EXCLAMATION_MARK,     /* ! */
  CHAR_FORWARD_SLASH,        /* / */
  CHAR_LEFT_CURLY_BRACE,     /* { */
  CHAR_LEFT_PARENTHESES,     /* ( */
  CHAR_LEFT_SQUARE_BRACKET,  /* [ */
  CHAR_PLUS,                 /* + */
  CHAR_QUESTION_MARK,        /* ? */
  CHAR_RIGHT_CURLY_BRACE,    /* } */
  CHAR_RIGHT_PARENTHESES,    /* ) */
  CHAR_RIGHT_SQUARE_BRACKET  /* ] */
} = __webpack_require__(/*! ./constants */ "../../node_modules/picomatch/lib/constants.js");

const isPathSeparator = code => {
  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
};

const depth = token => {
  if (token.isPrefix !== true) {
    token.depth = token.isGlobstar ? Infinity : 1;
  }
};

/**
 * Quickly scans a glob pattern and returns an object with a handful of
 * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
 * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not
 * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).
 *
 * ```js
 * const pm = require('picomatch');
 * console.log(pm.scan('foo/bar/*.js'));
 * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {Object} Returns an object with tokens and regex source string.
 * @api public
 */

const scan = (input, options) => {
  const opts = options || {};

  const length = input.length - 1;
  const scanToEnd = opts.parts === true || opts.scanToEnd === true;
  const slashes = [];
  const tokens = [];
  const parts = [];

  let str = input;
  let index = -1;
  let start = 0;
  let lastIndex = 0;
  let isBrace = false;
  let isBracket = false;
  let isGlob = false;
  let isExtglob = false;
  let isGlobstar = false;
  let braceEscaped = false;
  let backslashes = false;
  let negated = false;
  let negatedExtglob = false;
  let finished = false;
  let braces = 0;
  let prev;
  let code;
  let token = { value: '', depth: 0, isGlob: false };

  const eos = () => index >= length;
  const peek = () => str.charCodeAt(index + 1);
  const advance = () => {
    prev = code;
    return str.charCodeAt(++index);
  };

  while (index < length) {
    code = advance();
    let next;

    if (code === CHAR_BACKWARD_SLASH) {
      backslashes = token.backslashes = true;
      code = advance();

      if (code === CHAR_LEFT_CURLY_BRACE) {
        braceEscaped = true;
      }
      continue;
    }

    if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
      braces++;

      while (eos() !== true && (code = advance())) {
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }

        if (code === CHAR_LEFT_CURLY_BRACE) {
          braces++;
          continue;
        }

        if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
          isBrace = token.isBrace = true;
          isGlob = token.isGlob = true;
          finished = true;

          if (scanToEnd === true) {
            continue;
          }

          break;
        }

        if (braceEscaped !== true && code === CHAR_COMMA) {
          isBrace = token.isBrace = true;
          isGlob = token.isGlob = true;
          finished = true;

          if (scanToEnd === true) {
            continue;
          }

          break;
        }

        if (code === CHAR_RIGHT_CURLY_BRACE) {
          braces--;

          if (braces === 0) {
            braceEscaped = false;
            isBrace = token.isBrace = true;
            finished = true;
            break;
          }
        }
      }

      if (scanToEnd === true) {
        continue;
      }

      break;
    }

    if (code === CHAR_FORWARD_SLASH) {
      slashes.push(index);
      tokens.push(token);
      token = { value: '', depth: 0, isGlob: false };

      if (finished === true) continue;
      if (prev === CHAR_DOT && index === (start + 1)) {
        start += 2;
        continue;
      }

      lastIndex = index + 1;
      continue;
    }

    if (opts.noext !== true) {
      const isExtglobChar = code === CHAR_PLUS
        || code === CHAR_AT
        || code === CHAR_ASTERISK
        || code === CHAR_QUESTION_MARK
        || code === CHAR_EXCLAMATION_MARK;

      if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
        isGlob = token.isGlob = true;
        isExtglob = token.isExtglob = true;
        finished = true;
        if (code === CHAR_EXCLAMATION_MARK && index === start) {
          negatedExtglob = true;
        }

        if (scanToEnd === true) {
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              code = advance();
              continue;
            }

            if (code === CHAR_RIGHT_PARENTHESES) {
              isGlob = token.isGlob = true;
              finished = true;
              break;
            }
          }
          continue;
        }
        break;
      }
    }

    if (code === CHAR_ASTERISK) {
      if (prev === CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
      isGlob = token.isGlob = true;
      finished = true;

      if (scanToEnd === true) {
        continue;
      }
      break;
    }

    if (code === CHAR_QUESTION_MARK) {
      isGlob = token.isGlob = true;
      finished = true;

      if (scanToEnd === true) {
        continue;
      }
      break;
    }

    if (code === CHAR_LEFT_SQUARE_BRACKET) {
      while (eos() !== true && (next = advance())) {
        if (next === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          advance();
          continue;
        }

        if (next === CHAR_RIGHT_SQUARE_BRACKET) {
          isBracket = token.isBracket = true;
          isGlob = token.isGlob = true;
          finished = true;
          break;
        }
      }

      if (scanToEnd === true) {
        continue;
      }

      break;
    }

    if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
      negated = token.negated = true;
      start++;
      continue;
    }

    if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
      isGlob = token.isGlob = true;

      if (scanToEnd === true) {
        while (eos() !== true && (code = advance())) {
          if (code === CHAR_LEFT_PARENTHESES) {
            backslashes = token.backslashes = true;
            code = advance();
            continue;
          }

          if (code === CHAR_RIGHT_PARENTHESES) {
            finished = true;
            break;
          }
        }
        continue;
      }
      break;
    }

    if (isGlob === true) {
      finished = true;

      if (scanToEnd === true) {
        continue;
      }

      break;
    }
  }

  if (opts.noext === true) {
    isExtglob = false;
    isGlob = false;
  }

  let base = str;
  let prefix = '';
  let glob = '';

  if (start > 0) {
    prefix = str.slice(0, start);
    str = str.slice(start);
    lastIndex -= start;
  }

  if (base && isGlob === true && lastIndex > 0) {
    base = str.slice(0, lastIndex);
    glob = str.slice(lastIndex);
  } else if (isGlob === true) {
    base = '';
    glob = str;
  } else {
    base = str;
  }

  if (base && base !== '' && base !== '/' && base !== str) {
    if (isPathSeparator(base.charCodeAt(base.length - 1))) {
      base = base.slice(0, -1);
    }
  }

  if (opts.unescape === true) {
    if (glob) glob = utils.removeBackslashes(glob);

    if (base && backslashes === true) {
      base = utils.removeBackslashes(base);
    }
  }

  const state = {
    prefix,
    input,
    start,
    base,
    glob,
    isBrace,
    isBracket,
    isGlob,
    isExtglob,
    isGlobstar,
    negated,
    negatedExtglob
  };

  if (opts.tokens === true) {
    state.maxDepth = 0;
    if (!isPathSeparator(code)) {
      tokens.push(token);
    }
    state.tokens = tokens;
  }

  if (opts.parts === true || opts.tokens === true) {
    let prevIndex;

    for (let idx = 0; idx < slashes.length; idx++) {
      const n = prevIndex ? prevIndex + 1 : start;
      const i = slashes[idx];
      const value = input.slice(n, i);
      if (opts.tokens) {
        if (idx === 0 && start !== 0) {
          tokens[idx].isPrefix = true;
          tokens[idx].value = prefix;
        } else {
          tokens[idx].value = value;
        }
        depth(tokens[idx]);
        state.maxDepth += tokens[idx].depth;
      }
      if (idx !== 0 || value !== '') {
        parts.push(value);
      }
      prevIndex = i;
    }

    if (prevIndex && prevIndex + 1 < input.length) {
      const value = input.slice(prevIndex + 1);
      parts.push(value);

      if (opts.tokens) {
        tokens[tokens.length - 1].value = value;
        depth(tokens[tokens.length - 1]);
        state.maxDepth += tokens[tokens.length - 1].depth;
      }
    }

    state.slashes = slashes;
    state.parts = parts;
  }

  return state;
};

module.exports = scan;


/***/ }),

/***/ "../../node_modules/picomatch/lib/utils.js":
/*!*************************************************!*\
  !*** ../../node_modules/picomatch/lib/utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";


const path = __webpack_require__(/*! path */ "path");
const win32 = process.platform === 'win32';
const {
  REGEX_BACKSLASH,
  REGEX_REMOVE_BACKSLASH,
  REGEX_SPECIAL_CHARS,
  REGEX_SPECIAL_CHARS_GLOBAL
} = __webpack_require__(/*! ./constants */ "../../node_modules/picomatch/lib/constants.js");

exports.isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);
exports.hasRegexChars = str => REGEX_SPECIAL_CHARS.test(str);
exports.isRegexChar = str => str.length === 1 && exports.hasRegexChars(str);
exports.escapeRegex = str => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, '\\$1');
exports.toPosixSlashes = str => str.replace(REGEX_BACKSLASH, '/');

exports.removeBackslashes = str => {
  return str.replace(REGEX_REMOVE_BACKSLASH, match => {
    return match === '\\' ? '' : match;
  });
};

exports.supportsLookbehinds = () => {
  const segs = process.version.slice(1).split('.').map(Number);
  if (segs.length === 3 && segs[0] >= 9 || (segs[0] === 8 && segs[1] >= 10)) {
    return true;
  }
  return false;
};

exports.isWindows = options => {
  if (options && typeof options.windows === 'boolean') {
    return options.windows;
  }
  return win32 === true || path.sep === '\\';
};

exports.escapeLast = (input, char, lastIdx) => {
  const idx = input.lastIndexOf(char, lastIdx);
  if (idx === -1) return input;
  if (input[idx - 1] === '\\') return exports.escapeLast(input, char, idx - 1);
  return `${input.slice(0, idx)}\\${input.slice(idx)}`;
};

exports.removePrefix = (input, state = {}) => {
  let output = input;
  if (output.startsWith('./')) {
    output = output.slice(2);
    state.prefix = './';
  }
  return output;
};

exports.wrapOutput = (input, state = {}, options = {}) => {
  const prepend = options.contains ? '' : '^';
  const append = options.contains ? '' : '$';

  let output = `${prepend}(?:${input})${append}`;
  if (state.negated === true) {
    output = `(?:^(?!${output}).*$)`;
  }
  return output;
};


/***/ }),

/***/ "../../node_modules/queue-microtask/index.js":
/*!***************************************************!*\
  !*** ../../node_modules/queue-microtask/index.js ***!
  \***************************************************/
/***/ ((module) => {

/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
let promise

module.exports = typeof queueMicrotask === 'function'
  ? queueMicrotask.bind(typeof window !== 'undefined' ? window : global)
  // reuse resolved promise, and allocate it lazily
  : cb => (promise || (promise = Promise.resolve()))
    .then(cb)
    .catch(err => setTimeout(() => { throw err }, 0))


/***/ }),

/***/ "../../node_modules/reusify/reusify.js":
/*!*********************************************!*\
  !*** ../../node_modules/reusify/reusify.js ***!
  \*********************************************/
/***/ ((module) => {

"use strict";


function reusify (Constructor) {
  var head = new Constructor()
  var tail = head

  function get () {
    var current = head

    if (current.next) {
      head = current.next
    } else {
      head = new Constructor()
      tail = head
    }

    current.next = null

    return current
  }

  function release (obj) {
    tail.next = obj
    tail = obj
  }

  return {
    get: get,
    release: release
  }
}

module.exports = reusify


/***/ }),

/***/ "../../node_modules/run-parallel/index.js":
/*!************************************************!*\
  !*** ../../node_modules/run-parallel/index.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
module.exports = runParallel

const queueMicrotask = __webpack_require__(/*! queue-microtask */ "../../node_modules/queue-microtask/index.js")

function runParallel (tasks, cb) {
  let results, pending, keys
  let isSync = true

  if (Array.isArray(tasks)) {
    results = []
    pending = tasks.length
  } else {
    keys = Object.keys(tasks)
    results = {}
    pending = keys.length
  }

  function done (err) {
    function end () {
      if (cb) cb(err, results)
      cb = null
    }
    if (isSync) queueMicrotask(end)
    else end()
  }

  function each (i, err, result) {
    results[i] = result
    if (--pending === 0 || err) {
      done(err)
    }
  }

  if (!pending) {
    // empty
    done(null)
  } else if (keys) {
    // object
    keys.forEach(function (key) {
      tasks[key](function (err, result) { each(key, err, result) })
    })
  } else {
    // array
    tasks.forEach(function (task, i) {
      task(function (err, result) { each(i, err, result) })
    })
  }

  isSync = false
}


/***/ }),

/***/ "../../node_modules/scss-comment-parser/index.js":
/*!*******************************************************!*\
  !*** ../../node_modules/scss-comment-parser/index.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var CDocParser = __webpack_require__(/*! cdocparser */ "../../node_modules/cdocparser/index.js")

/**
 * Extract the code following `offset` in `code` buffer,
 * delimited by braces.
 *
 * `offset` should be set to the position of the opening brace. If not,
 * the function will jump to the next opening brace.
 *
 * @param {String} code Code buffer.
 * @param {Number} offset Index of the opening brace.
 * @return {String} Extracted code between braces.
 */
var extractCode = function (code, offset) {
  offset = offset || 0

  if (code[offset] !== '{') {
    // The position is not valid, jump to next opening brace
    offset = code.indexOf('{', offset)
  }

  var start = offset + 1 // Ignore the opening brace
  var cursor = start
  var depth = 1 // The opening brace is consumed
  var length = code.length

  var inString = false
  var openChar = ''

  // In block comment (line comments are instantly consumed)
  var inComment = false

  while (cursor < length && depth > 0) {
    var cb = code[cursor - 1] // Char before
    var c = code[cursor] // Char
    var cn = code[cursor + 1] // Char next

    if (!inString) {
      if (c === '/' && cn === '/' && !inComment) {
        // Swallow line comment
        cursor = Math.min(
          Math.max(code.indexOf('\r', cursor), code.indexOf('\n', cursor)),
          length
        )
        continue
      } else if (c === '/' && cn === '*') {
        // Block comment: begin
        cursor += 2 // Swallow opening
        inComment = true
        continue
      } else if (c === '*' && cn === '/') {
        // Block comment: end
        cursor += 2 // Swallow closing
        inComment = false
        continue
      }
    }

    if (!inComment) {
      if ((c === '"' || c === '\'') && cb !== '\\') {
        if (!inString) {
          // String: begin
          openChar = c
          inString = true
          cursor++
          continue
        } else if (openChar === c) {
          // String: end
          inString = false
          cursor++
          continue
        }
      }
    }

    if (!(inString || inComment)) {
      if (c === '{') {
        depth++
      } else if (c === '}') {
        depth--
      }
    }

    cursor++
  }

  if (depth > 0) {
    return ''
  }

  // Ignore the closing brace
  cursor--

  return code.substring(start, cursor)
}

var findCodeStart = function (ctxCode, lastMatch) {
  var codeStart = ctxCode.indexOf('{', lastMatch)

  if (codeStart < 0 || ctxCode[codeStart - 1] !== '#') {
    return codeStart
  }

  return findCodeStart(ctxCode, codeStart + 1)
}

var addCodeToContext = function (context, ctxCode, match) {
  var codeStart = findCodeStart(ctxCode, match.index)

  if (codeStart >= 0) {
    context.code = extractCode(ctxCode, codeStart)
    return codeStart + context.code.length + 1 // Add closing brace!
  }
}

/**
 * SCSS Context Parser
 */
var scssContextParser = (function () {
  var ctxRegEx = /^(@|%|\$)([\w-_]+)*(?:\s+([\w-_]+)|[\s\S]*?:([\s\S]*?)(?:\s!(\w+))?;[ \t]*?(?=\/\/|\n|$))?/
  var parser = function (ctxCode, lineNumberFor) {
    var match = ctxRegEx.exec(ctxCode.trim())
    var startIndex, endIndex

    var context = {
      type: 'unknown'
    }

    if (match) {
      var wsOffset = Math.min(ctxCode.match(/\s*/).length - 1, 0)
      startIndex = wsOffset + match.index
      endIndex = startIndex + match[0].length

      if (match[1] === '@' && (match[2] === 'function' || match[2] === 'mixin')) {
        context.type = match[2]
        context.name = match[3]
        endIndex = addCodeToContext(context, ctxCode, match)
      } else if (match[1] === '%') {
        context.type = 'placeholder'
        context.name = match[2]
        endIndex = addCodeToContext(context, ctxCode, match)
      } else if (match[1] === '$') {
        context.type = 'variable'
        context.name = match[2]
        context.value = match[4].trim()
        context.scope = match[5] || 'private'
      }
    } else {
      startIndex = findCodeStart(ctxCode, 0)
      endIndex = ctxCode.length - 1

      if (startIndex > 0) {
        context.type = 'css'
        context.name = ctxCode.slice(0, startIndex).trim()
        context.value = extractCode(ctxCode, startIndex).trim()
      }
    }

    if (lineNumberFor !== undefined && startIndex !== undefined) {
      context.line = {
        start: lineNumberFor(startIndex) + 1,
        end: lineNumberFor(endIndex) + 1
      }
    }

    return context
  }

  return parser
})()

var filterAndGroup = function (lines) {
  var nLines = []
  var group = false

  lines.forEach(function (line) {
    var isAnnotation = line.indexOf('@') === 0

    if (line.trim().indexOf('---') !== 0) { // Ignore lines that start with "---"
      if (group) {
        if (isAnnotation) {
          nLines.push(line)
        } else {
          nLines[nLines.length - 1] += '\n' + line
        }
      } else if (isAnnotation) {
        group = true
        nLines.push(line)
      } else {
        nLines.push(line)
      }
    }
  })

  return nLines
}

var extractor = new CDocParser.CommentExtractor(scssContextParser, {
  blockComment: false
})

var Parser = function (annotations, config) {
  this.commentParser = new CDocParser.CommentParser(annotations, config)
}

Parser.prototype.parse = function (code, id) {
  var comments = extractor.extract(code)

  comments.forEach(function (comment) {
    comment.lines = filterAndGroup(comment.lines)
  })

  return this.commentParser.parse(comments, id)
}

Parser.prototype.contextParser = scssContextParser
Parser.prototype.extractCode = extractCode

module.exports = Parser


/***/ }),

/***/ "../../node_modules/scss-symbols-parser/out/index.js":
/*!***********************************************************!*\
  !*** ../../node_modules/scss-symbols-parser/out/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
var tokenizer_1 = __webpack_require__(/*! ./tokenizer */ "../../node_modules/scss-symbols-parser/out/tokenizer.js");
exports.tokenizer = tokenizer_1.default;
var IMPORT_PATH_SEPARATOR_RE = /,\s*/;
var IMPORT_PATH_RE = /['"](.*)['"]/;
var DYNAMIC_IMPORT_RE = /\/\/|[#{}\*]/;
var CSS_IMPORT_RE = /\.css$/;
var PARAMETER_SEPARATOR_RE = /([,;]\s*)(?=\$)/;
var PARAMETER_RE = /([\n\t\r\s]*)(\$[\w-]+)(?:\s*:\s*(.*))?/;
function makeMixinParameters(text, offset) {
    var variables = [];
    if (!text || text === '()') {
        return variables;
    }
    // Remove parenthesis
    text = text.slice(1, text.length - 1);
    var params = text.split(PARAMETER_SEPARATOR_RE);
    // Skip `(`
    offset += 1;
    for (var i = 0; i < params.length; i = i + 2) {
        var token = params[i];
        var match = token.match(PARAMETER_RE);
        offset += match[1].length || 0;
        variables.push({
            name: match[2],
            value: match[3] ? match[3].trim() : null,
            offset: offset
        });
        offset += token.trim().length + (params[i + 1] ? params[i + 1].length : 0);
    }
    return variables;
}
function skipRulesets(tokens, token, pos) {
    var ruleset = 1;
    while (pos < tokens.length) {
        token = tokens[pos];
        if (ruleset === 0) {
            break;
        }
        else if (token[0] === '{') {
            ruleset++;
        }
        else if (token[0] === '}') {
            ruleset--;
        }
        pos++;
    }
    return {
        token: token,
        pos: pos
    };
}
function parseSymbols(text) {
    var tokens = tokenizer_1.default(text);
    var variables = [];
    var mixins = [];
    var functions = [];
    var imports = [];
    var token;
    var nextToken;
    var pos = 0;
    var offset = 0;
    var length = tokens.length;
    while (pos < length) {
        token = tokens[pos];
        if (token[0] === 'at-word' && token[1] === '@import') { // Import's
            pos++;
            var str = '';
            while (pos < length) {
                token = tokens[pos];
                if (token[0] === ';') {
                    break;
                }
                str += token[1];
                pos++;
            }
            str.split(IMPORT_PATH_SEPARATOR_RE).forEach(function (x) {
                var match = x.match(IMPORT_PATH_RE);
                if (!match) {
                    return;
                }
                imports.push({
                    filepath: match[1],
                    dynamic: DYNAMIC_IMPORT_RE.test(match[1]),
                    css: CSS_IMPORT_RE.test(match[1])
                });
            });
        }
        else if (token[0] === 'at-word') { // Mixins or Functions
            if (token[1] !== '@mixin' && token[1] !== '@function') {
                pos++;
                while (pos < length) {
                    token = tokens[pos];
                    nextToken = tokens[pos + 1] || [];
                    if (token[0] === '{') {
                        break;
                    }
                    else if (token[0] === ')' && nextToken[0] === ';') {
                        pos++;
                        break;
                    }
                    pos++;
                }
                continue;
            }
            var entity = token[1] === '@mixin' ? mixins : functions;
            offset = token[2];
            pos++;
            var name_1 = '';
            while (pos < length) {
                token = tokens[pos];
                if (token[0] === 'brackets' || token[0] === '(' || token[0] === '{') {
                    break;
                }
                name_1 += token[1];
                pos++;
            }
            var paramsOffset = offset;
            var params = '';
            if (token[0] === 'brackets') {
                paramsOffset = token[2];
                params = token[1];
            }
            else if (token[0] === '(') {
                paramsOffset = token[2];
                pos++;
                while (pos < length) {
                    token = tokens[pos];
                    if (token[0] === ')') {
                        break;
                    }
                    params += token[1];
                    pos++;
                }
                params = "(" + params + ")";
            }
            if (token[0] === '{') {
                var info = skipRulesets(tokens, token, ++pos);
                token = info.token;
                pos = info.pos;
            }
            if (name_1) {
                entity.push({
                    name: name_1.trim(),
                    parameters: makeMixinParameters(params, paramsOffset),
                    offset: offset
                });
            }
            else {
                pos--;
            }
        }
        else if (token[0] === 'word' && token[1].startsWith('$')) { // Variables
            offset = token[2];
            pos++;
            var name_2 = token[1];
            var value = '';
            while (pos < length) {
                token = tokens[pos];
                if (token[0] === ';') {
                    break;
                }
                else if (token[0] === 'word' || token[0] === 'at-word' || token[0] === 'string' || token[0] === 'space' || token[0] === 'brackets') {
                    value += token[1];
                }
                pos++;
            }
            if (pos === length && token[0] !== ';') {
                continue;
            }
            variables.push({
                name: name_2,
                value: value.trim(),
                offset: offset
            });
        }
        else if (token[0] === '{') { // Ruleset
            var info = skipRulesets(tokens, token, ++pos);
            token = info.token;
            pos = info.pos;
        }
        pos++;
    }
    return {
        variables: variables,
        mixins: mixins,
        functions: functions,
        imports: imports
    };
}
exports.parseSymbols = parseSymbols;


/***/ }),

/***/ "../../node_modules/scss-symbols-parser/out/tokenizer.js":
/*!***************************************************************!*\
  !*** ../../node_modules/scss-symbols-parser/out/tokenizer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

Object.defineProperty(exports, "__esModule", ({ value: true }));
// The MIT License (MIT)
// Copyright 2013 Andrey Sitnik <andrey@sitnik.ru>
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
// ## CHANGES
//   * `//` - comment
//   * Remove `options.ignore`
//   * Simplify tokens: returns only position without details
var SINGLE_QUOTE = '\''.charCodeAt(0);
var DOUBLE_QUOTE = '"'.charCodeAt(0);
var BACKSLASH = '\\'.charCodeAt(0);
var SLASH = '/'.charCodeAt(0);
var NEWLINE = '\n'.charCodeAt(0);
var SPACE = ' '.charCodeAt(0);
var FEED = '\f'.charCodeAt(0);
var TAB = '\t'.charCodeAt(0);
var CR = '\r'.charCodeAt(0);
var OPEN_SQUARE = '['.charCodeAt(0);
var CLOSE_SQUARE = ']'.charCodeAt(0);
var OPEN_PARENTHESES = '('.charCodeAt(0);
var CLOSE_PARENTHESES = ')'.charCodeAt(0);
var OPEN_CURLY = '{'.charCodeAt(0);
var CLOSE_CURLY = '}'.charCodeAt(0);
var SEMICOLON = ';'.charCodeAt(0);
var ASTERISK = '*'.charCodeAt(0);
var COLON = ':'.charCodeAt(0);
var AT = '@'.charCodeAt(0);
var RE_AT_END = /[ \n\t\r\f\{\(\)'"\\;/\[\]#]/g;
var RE_WORD_END = /[ \n\t\r\f\(\)\{\}:;@!'"\\\]\[#]|\/(?=\*)/g;
var RE_BAD_BRACKET = /.[\\\/\("'\n]/;
function tokenizer(text) {
    var tokens = [];
    var code, next, quote, lines, last, content, escape, nextLine, nextOffset, escaped, escapePos, prev, n;
    var length = text.length;
    var offset = -1;
    var line = 1;
    var pos = 0;
    while (pos < length) {
        code = text.charCodeAt(pos);
        if (code === NEWLINE || code === FEED ||
            code === CR && text.charCodeAt(pos + 1) !== NEWLINE) {
            offset = pos;
            line += 1;
        }
        switch (code) {
            case NEWLINE:
            case SPACE:
            case TAB:
            case CR:
            case FEED:
                next = pos;
                do {
                    next += 1;
                    code = text.charCodeAt(next);
                    if (code === NEWLINE) {
                        offset = next;
                        line += 1;
                    }
                } while (code === SPACE ||
                    code === NEWLINE ||
                    code === TAB ||
                    code === CR ||
                    code === FEED);
                tokens.push(['space', text.slice(pos, next)]);
                pos = next - 1;
                break;
            case OPEN_SQUARE:
                tokens.push(['[', '[', pos]);
                break;
            case CLOSE_SQUARE:
                tokens.push([']', ']', pos]);
                break;
            case OPEN_CURLY:
                tokens.push(['{', '{', pos]);
                break;
            case CLOSE_CURLY:
                tokens.push(['}', '}', pos]);
                break;
            case COLON:
                tokens.push([':', ':', pos]);
                break;
            case SEMICOLON:
                tokens.push([';', ';', pos]);
                break;
            case OPEN_PARENTHESES:
                prev = tokens.length ? tokens[tokens.length - 1][1] : '';
                n = text.charCodeAt(pos + 1);
                if (prev === 'url' && n !== SINGLE_QUOTE && n !== DOUBLE_QUOTE &&
                    n !== SPACE && n !== NEWLINE && n !== TAB &&
                    n !== FEED && n !== CR) {
                    next = pos;
                    do {
                        escaped = false;
                        next = text.indexOf(')', next + 1);
                        if (next === -1) {
                            next = pos;
                            break;
                        }
                        escapePos = next;
                        while (text.charCodeAt(escapePos - 1) === BACKSLASH) {
                            escapePos -= 1;
                            escaped = !escaped;
                        }
                    } while (escaped);
                    tokens.push(['brackets', text.slice(pos, next + 1), pos]);
                    pos = next;
                }
                else {
                    next = text.indexOf(')', pos + 1);
                    content = text.slice(pos, next + 1);
                    if (next === -1 || RE_BAD_BRACKET.test(content)) {
                        tokens.push(['(', '(', pos]);
                    }
                    else {
                        tokens.push(['brackets', content, pos]);
                        pos = next;
                    }
                }
                break;
            case CLOSE_PARENTHESES:
                tokens.push([')', ')', pos]);
                break;
            case SINGLE_QUOTE:
            case DOUBLE_QUOTE:
                quote = code === SINGLE_QUOTE ? '\'' : '"';
                next = pos;
                do {
                    escaped = false;
                    next = text.indexOf(quote, next + 1);
                    if (next === -1) {
                        next = pos + 1;
                        break;
                    }
                    escapePos = next;
                    while (text.charCodeAt(escapePos - 1) === BACKSLASH) {
                        escapePos -= 1;
                        escaped = !escaped;
                    }
                } while (escaped);
                content = text.slice(pos, next + 1);
                lines = content.split('\n');
                last = lines.length - 1;
                if (last > 0) {
                    nextLine = line + last;
                    nextOffset = next - lines[last].length;
                }
                else {
                    nextLine = line;
                    nextOffset = offset;
                }
                tokens.push(['string', text.slice(pos, next + 1), pos]);
                offset = nextOffset;
                line = nextLine;
                pos = next;
                break;
            case AT:
                RE_AT_END.lastIndex = pos + 1;
                RE_AT_END.test(text);
                if (RE_AT_END.lastIndex === 0) {
                    next = text.length - 1;
                }
                else {
                    next = RE_AT_END.lastIndex - 2;
                }
                tokens.push(['at-word', text.slice(pos, next + 1), pos]);
                pos = next;
                break;
            case BACKSLASH:
                next = pos;
                escape = true;
                while (text.charCodeAt(next + 1) === BACKSLASH) {
                    next += 1;
                    escape = !escape;
                }
                code = text.charCodeAt(next + 1);
                if (escape && (code !== SLASH &&
                    code !== SPACE &&
                    code !== NEWLINE &&
                    code !== TAB &&
                    code !== CR &&
                    code !== FEED)) {
                    next += 1;
                }
                tokens.push(['word', text.slice(pos, next + 1), pos]);
                pos = next;
                break;
            default:
                var isLessComent = code === SLASH && text.charCodeAt(pos + 1) === SLASH;
                if (isLessComent || text.charCodeAt(pos + 1) === ASTERISK) {
                    if (isLessComent) {
                        next = pos;
                        while (text.charCodeAt(next) !== NEWLINE && next < length) {
                            next++;
                        }
                    }
                    else {
                        next = text.indexOf('*/', pos + 2) + 1;
                    }
                    if (next === 0 || next === length) {
                        next = length;
                    }
                    content = text.slice(pos, next + 1);
                    lines = content.split('\n');
                    last = lines.length - 1;
                    if (last > 0) {
                        nextLine = line + last;
                        nextOffset = next - lines[last].length;
                    }
                    else {
                        nextLine = line;
                        nextOffset = offset;
                    }
                    tokens.push(['comment', content, pos]);
                    offset = nextOffset;
                    line = nextLine;
                    pos = next;
                }
                else {
                    RE_WORD_END.lastIndex = pos + 1;
                    RE_WORD_END.test(text);
                    if (RE_WORD_END.lastIndex === 0) {
                        next = text.length - 1;
                    }
                    else {
                        next = RE_WORD_END.lastIndex - 2;
                    }
                    tokens.push(['word', text.slice(pos, next + 1), pos]);
                    pos = next;
                }
                break;
        }
        pos++;
    }
    return tokens;
}
exports["default"] = tokenizer;


/***/ }),

/***/ "../../node_modules/to-regex-range/index.js":
/*!**************************************************!*\
  !*** ../../node_modules/to-regex-range/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */



const isNumber = __webpack_require__(/*! is-number */ "../../node_modules/is-number/index.js");

const toRegexRange = (min, max, options) => {
  if (isNumber(min) === false) {
    throw new TypeError('toRegexRange: expected the first argument to be a number');
  }

  if (max === void 0 || min === max) {
    return String(min);
  }

  if (isNumber(max) === false) {
    throw new TypeError('toRegexRange: expected the second argument to be a number.');
  }

  let opts = { relaxZeros: true, ...options };
  if (typeof opts.strictZeros === 'boolean') {
    opts.relaxZeros = opts.strictZeros === false;
  }

  let relax = String(opts.relaxZeros);
  let shorthand = String(opts.shorthand);
  let capture = String(opts.capture);
  let wrap = String(opts.wrap);
  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;

  if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
    return toRegexRange.cache[cacheKey].result;
  }

  let a = Math.min(min, max);
  let b = Math.max(min, max);

  if (Math.abs(a - b) === 1) {
    let result = min + '|' + max;
    if (opts.capture) {
      return `(${result})`;
    }
    if (opts.wrap === false) {
      return result;
    }
    return `(?:${result})`;
  }

  let isPadded = hasPadding(min) || hasPadding(max);
  let state = { min, max, a, b };
  let positives = [];
  let negatives = [];

  if (isPadded) {
    state.isPadded = isPadded;
    state.maxLen = String(state.max).length;
  }

  if (a < 0) {
    let newMin = b < 0 ? Math.abs(b) : 1;
    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
    a = state.a = 0;
  }

  if (b >= 0) {
    positives = splitToPatterns(a, b, state, opts);
  }

  state.negatives = negatives;
  state.positives = positives;
  state.result = collatePatterns(negatives, positives, opts);

  if (opts.capture === true) {
    state.result = `(${state.result})`;
  } else if (opts.wrap !== false && (positives.length + negatives.length) > 1) {
    state.result = `(?:${state.result})`;
  }

  toRegexRange.cache[cacheKey] = state;
  return state.result;
};

function collatePatterns(neg, pos, options) {
  let onlyNegative = filterPatterns(neg, pos, '-', false, options) || [];
  let onlyPositive = filterPatterns(pos, neg, '', false, options) || [];
  let intersected = filterPatterns(neg, pos, '-?', true, options) || [];
  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
  return subpatterns.join('|');
}

function splitToRanges(min, max) {
  let nines = 1;
  let zeros = 1;

  let stop = countNines(min, nines);
  let stops = new Set([max]);

  while (min <= stop && stop <= max) {
    stops.add(stop);
    nines += 1;
    stop = countNines(min, nines);
  }

  stop = countZeros(max + 1, zeros) - 1;

  while (min < stop && stop <= max) {
    stops.add(stop);
    zeros += 1;
    stop = countZeros(max + 1, zeros) - 1;
  }

  stops = [...stops];
  stops.sort(compare);
  return stops;
}

/**
 * Convert a range to a regex pattern
 * @param {Number} `start`
 * @param {Number} `stop`
 * @return {String}
 */

function rangeToPattern(start, stop, options) {
  if (start === stop) {
    return { pattern: start, count: [], digits: 0 };
  }

  let zipped = zip(start, stop);
  let digits = zipped.length;
  let pattern = '';
  let count = 0;

  for (let i = 0; i < digits; i++) {
    let [startDigit, stopDigit] = zipped[i];

    if (startDigit === stopDigit) {
      pattern += startDigit;

    } else if (startDigit !== '0' || stopDigit !== '9') {
      pattern += toCharacterClass(startDigit, stopDigit, options);

    } else {
      count++;
    }
  }

  if (count) {
    pattern += options.shorthand === true ? '\\d' : '[0-9]';
  }

  return { pattern, count: [count], digits };
}

function splitToPatterns(min, max, tok, options) {
  let ranges = splitToRanges(min, max);
  let tokens = [];
  let start = min;
  let prev;

  for (let i = 0; i < ranges.length; i++) {
    let max = ranges[i];
    let obj = rangeToPattern(String(start), String(max), options);
    let zeros = '';

    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
      if (prev.count.length > 1) {
        prev.count.pop();
      }

      prev.count.push(obj.count[0]);
      prev.string = prev.pattern + toQuantifier(prev.count);
      start = max + 1;
      continue;
    }

    if (tok.isPadded) {
      zeros = padZeros(max, tok, options);
    }

    obj.string = zeros + obj.pattern + toQuantifier(obj.count);
    tokens.push(obj);
    start = max + 1;
    prev = obj;
  }

  return tokens;
}

function filterPatterns(arr, comparison, prefix, intersection, options) {
  let result = [];

  for (let ele of arr) {
    let { string } = ele;

    // only push if _both_ are negative...
    if (!intersection && !contains(comparison, 'string', string)) {
      result.push(prefix + string);
    }

    // or _both_ are positive
    if (intersection && contains(comparison, 'string', string)) {
      result.push(prefix + string);
    }
  }
  return result;
}

/**
 * Zip strings
 */

function zip(a, b) {
  let arr = [];
  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);
  return arr;
}

function compare(a, b) {
  return a > b ? 1 : b > a ? -1 : 0;
}

function contains(arr, key, val) {
  return arr.some(ele => ele[key] === val);
}

function countNines(min, len) {
  return Number(String(min).slice(0, -len) + '9'.repeat(len));
}

function countZeros(integer, zeros) {
  return integer - (integer % Math.pow(10, zeros));
}

function toQuantifier(digits) {
  let [start = 0, stop = ''] = digits;
  if (stop || start > 1) {
    return `{${start + (stop ? ',' + stop : '')}}`;
  }
  return '';
}

function toCharacterClass(a, b, options) {
  return `[${a}${(b - a === 1) ? '' : '-'}${b}]`;
}

function hasPadding(str) {
  return /^-?(0+)\d/.test(str);
}

function padZeros(value, tok, options) {
  if (!tok.isPadded) {
    return value;
  }

  let diff = Math.abs(tok.maxLen - String(value).length);
  let relax = options.relaxZeros !== false;

  switch (diff) {
    case 0:
      return '';
    case 1:
      return relax ? '0?' : '0';
    case 2:
      return relax ? '0{0,2}' : '00';
    default: {
      return relax ? `0{0,${diff}}` : `0{${diff}}`;
    }
  }
}

/**
 * Cache
 */

toRegexRange.cache = {};
toRegexRange.clearCache = () => (toRegexRange.cache = {});

/**
 * Expose `toRegexRange`
 */

module.exports = toRegexRange;


/***/ }),

/***/ "./src/constants.ts":
/*!**************************!*\
  !*** ./src/constants.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   EXTENSION_ID: () => (/* binding */ EXTENSION_ID),
/* harmony export */   EXTENSION_NAME: () => (/* binding */ EXTENSION_NAME),
/* harmony export */   REQUEST_FS_FIND_FILES: () => (/* binding */ REQUEST_FS_FIND_FILES),
/* harmony export */   REQUEST_FS_READ_DIRECTORY: () => (/* binding */ REQUEST_FS_READ_DIRECTORY),
/* harmony export */   REQUEST_FS_READ_FILE: () => (/* binding */ REQUEST_FS_READ_FILE),
/* harmony export */   REQUEST_FS_STAT: () => (/* binding */ REQUEST_FS_STAT)
/* harmony export */ });
const EXTENSION_ID = "some-sass";
const EXTENSION_NAME = "Some Sass";
const REQUEST_FS_STAT = `${EXTENSION_ID}/stat`;
const REQUEST_FS_FIND_FILES = `${EXTENSION_ID}/find-files`;
const REQUEST_FS_READ_FILE = `${EXTENSION_ID}/read-file`;
const REQUEST_FS_READ_DIRECTORY = `${EXTENSION_ID}/read-directory`;


/***/ }),

/***/ "./src/context-provider.ts":
/*!*********************************!*\
  !*** ./src/context-provider.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   changeConfiguration: () => (/* binding */ changeConfiguration),
/* harmony export */   createContext: () => (/* binding */ createContext),
/* harmony export */   useContext: () => (/* binding */ useContext)
/* harmony export */ });
let context;
const createContext = (ctx) => {
    context = ctx;
};
const changeConfiguration = (settings) => {
    if (!context) {
        return;
    }
    context.settings = settings;
};
const useContext = () => context;


/***/ }),

/***/ "./src/features/code-actions/extract-provider.ts":
/*!*******************************************************!*\
  !*** ./src/features/code-actions/extract-provider.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtractProvider: () => (/* binding */ ExtractProvider)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/string */ "./src/utils/string.ts");


class ExtractProvider {
    constructor(settings) {
        this._settings = settings;
    }
    async provideCodeActions(document, range) {
        if (!this.hasSelection(range)) {
            return [];
        }
        return [
            this.provideExtractVariableAction(document, range),
            this.provideExtractMixinAction(document, range),
            this.provideExtractFunctionAction(document, range),
        ];
    }
    hasSelection(range) {
        const lineDiff = range.start.line - range.end.line;
        const charDiff = range.start.character - range.end.character;
        return lineDiff !== 0 || charDiff !== 0;
    }
    provideExtractFunctionAction(document, range) {
        const selectedText = document.getText(range);
        const preceedingOnLine = document.getText(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.start.line, 0), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.start.line, range.start.character)));
        const onlyNonWhitespace = preceedingOnLine.trimStart();
        const lastIndent = preceedingOnLine.length - onlyNonWhitespace.length;
        const indent = preceedingOnLine.substring(0, lastIndent);
        const lines = (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.getLinesFromText)(selectedText);
        const eol = lines.length > 1 ? (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.getEOL)(selectedText) : (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.getEOL)(document.getText());
        const newLines = [
            `${indent}@function _function() {`,
            `${indent}${(0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.indentText)(`@return ${lines
                .map((line, index) => index === 0 ? line : (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.indentText)(line, this._settings))
                .join(eol)}`, this._settings)}${selectedText.endsWith(";") ? "" : ";"}`,
            `${indent}}`,
            `${indent}${onlyNonWhitespace}_function()${selectedText.endsWith(";") ? ";" : ""}`,
        ].join(eol);
        const workspaceEdit = {
            documentChanges: [
                vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextDocumentEdit.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.VersionedTextDocumentIdentifier.create(document.uri, document.version), [
                    vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.start.line, 0), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.end.line, range.end.character)), newLines),
                ]),
            ],
        };
        const action = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeAction.create("Extract function", workspaceEdit, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeActionKind.RefactorExtract + ".function");
        return action;
    }
    provideExtractMixinAction(document, range) {
        const selectedText = document.getText(range);
        const preceedingOnLine = document.getText(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.start.line, 0), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.start.line, range.start.character)));
        const onlyNonWhitespace = preceedingOnLine.trimStart();
        const lastIndent = preceedingOnLine.length - onlyNonWhitespace.length;
        const indent = preceedingOnLine.substring(0, lastIndent);
        const lines = (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.getLinesFromText)(selectedText);
        const eol = lines.length > 1 ? (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.getEOL)(selectedText) : (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.getEOL)(document.getText());
        const newLines = [
            "@mixin _mixin {",
            ...lines.map((line, index) => line
                ? (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.indentText)(index === 0 ? `${indent}${line}` : line, this._settings)
                : line),
            `${indent}}`,
            `${indent}@include _mixin;`,
        ].join(eol);
        const workspaceEdit = {
            documentChanges: [
                vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextDocumentEdit.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.VersionedTextDocumentIdentifier.create(document.uri, document.version), [vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, newLines)]),
            ],
        };
        const action = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeAction.create("Extract mixin", workspaceEdit, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeActionKind.RefactorExtract);
        return action;
    }
    provideExtractVariableAction(document, range) {
        const selectedText = document.getText(range);
        const preceedingOnLine = document.getText(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.start.line, 0), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.start.line, range.start.character)));
        const onlyNonWhitespace = preceedingOnLine.trimStart();
        const lastIndent = preceedingOnLine.length - onlyNonWhitespace.length;
        const indent = preceedingOnLine.substring(0, lastIndent);
        const eol = (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.getEOL)(document.getText());
        const newLines = `${indent}$_variable: ${selectedText.endsWith(";") ? selectedText : `${selectedText};`}${eol}${indent}${onlyNonWhitespace}${selectedText.endsWith(";") ? "$_variable;" : "$_variable"}`;
        const workspaceEdit = {
            documentChanges: [
                vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextDocumentEdit.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.VersionedTextDocumentIdentifier.create(document.uri, document.version), [
                    vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.start.line, 0), vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.end.line, range.end.character)), newLines),
                ]),
            ],
        };
        const action = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeAction.create("Extract variable", workspaceEdit, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeActionKind.RefactorExtract + ".constant");
        return action;
    }
}


/***/ }),

/***/ "./src/features/code-actions/index.ts":
/*!********************************************!*\
  !*** ./src/features/code-actions/index.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ExtractProvider: () => (/* reexport safe */ _extract_provider__WEBPACK_IMPORTED_MODULE_0__.ExtractProvider)
/* harmony export */ });
/* harmony import */ var _extract_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extract-provider */ "./src/features/code-actions/extract-provider.ts");



/***/ }),

/***/ "./src/features/completion/color-completion.ts":
/*!*****************************************************!*\
  !*** ./src/features/completion/color-completion.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isColor: () => (/* binding */ isColor)
/* harmony export */ });
/* harmony import */ var colorjs_io__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! colorjs.io */ "../../node_modules/colorjs.io/dist/color.js");

function isColor(value) {
    try {
        colorjs_io__WEBPACK_IMPORTED_MODULE_0__["default"].parse(value);
        // Yup, it's color.
        return value;
    }
    catch (e) {
        return null;
    }
    return null;
}


/***/ }),

/***/ "./src/features/completion/completion-context.ts":
/*!*******************************************************!*\
  !*** ./src/features/completion/completion-context.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createCompletionContext: () => (/* binding */ createCompletionContext)
/* harmony export */ });
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/string */ "./src/utils/string.ts");

const reReturn = /^.*@return/;
const rePropertyValue = /.*:\s*/;
const reEmptyPropertyValue = /.*:\s*$/;
const reQuotedValueInString = /["'](?:[^"'\\]|\\.)*["']/g;
const reMixinReference = /.*@include\s+(.*)/;
const reComment = /^(.*\/\/|.*\/\*|\s*\*)/;
const reSassDoc = /^[\\s]*\/{3}.*$/;
const reQuotes = /["']/;
const rePlaceholder = /@extend\s+%/;
const rePartialModuleAtRule = /@(?:use|forward|import) ["']/;
/**
 * Check context for Variables suggestions.
 */
function checkVariableContext(word, isInterpolation, isPropertyValue, isEmptyValue, isQuotes, isReturn, isNamespace) {
    if ((isReturn || isPropertyValue) && !isEmptyValue && !isQuotes) {
        if (isNamespace && word.endsWith(".")) {
            return true;
        }
        return word.includes("$");
    }
    if (isQuotes) {
        return isInterpolation;
    }
    return word.startsWith("$") || isInterpolation || isEmptyValue;
}
/**
 * Check context for Mixins suggestions.
 */
function checkMixinContext(textBeforeWord, isPropertyValue) {
    return !isPropertyValue && reMixinReference.test(textBeforeWord);
}
/**
 * Check context for Function suggestions.
 */
function checkFunctionContext(textBeforeWord, isInterpolation, isPropertyValue, isEmptyValue, isQuotes, isReturn, isNamespace, settings) {
    if ((isReturn || isPropertyValue) && !isEmptyValue && !isQuotes) {
        if (isNamespace) {
            return true;
        }
        const lastChar = textBeforeWord.slice(-2, -2 + 1);
        return settings.suggestFunctionsInStringContextAfterSymbols.includes(lastChar);
    }
    if (isQuotes) {
        return isInterpolation;
    }
    return false;
}
function isCommentContext(text) {
    return reComment.test(text.trim());
}
function isSassDocContext(text) {
    return reSassDoc.test(text);
}
function isInterpolationContext(text) {
    return text.includes("#{");
}
function checkNamespaceContext(currentWord, isInterpolation) {
    if (currentWord.length === 0 || !currentWord.includes(".")) {
        return null;
    }
    // Skip #{ if this is interpolation
    return currentWord.substring(isInterpolation ? currentWord.indexOf("{") + 1 : 0, currentWord.indexOf("."));
}
function createCompletionContext(document, text, offset, settings) {
    const word = (0,_utils_string__WEBPACK_IMPORTED_MODULE_0__.getCurrentWord)(text, offset);
    const textBeforeWord = (0,_utils_string__WEBPACK_IMPORTED_MODULE_0__.getTextBeforePosition)(text, offset);
    const lastDot = document.uri.lastIndexOf(".");
    const originalExtension = document.uri.slice(Math.max(0, lastDot + 1));
    const result = {
        word,
        textBeforeWord,
        originalExtension,
        comment: false,
        sassDoc: false,
        namespace: null,
        import: false,
        variable: false,
        function: false,
        mixin: false,
        placeholder: false,
        placeholderDeclaration: false,
    };
    result.import = rePartialModuleAtRule.test(textBeforeWord);
    if (result.import) {
        return result;
    }
    result.comment = isCommentContext(textBeforeWord);
    result.sassDoc = isSassDocContext(textBeforeWord);
    if (result.comment || result.sassDoc) {
        return result;
    }
    // Is "#{INTERPOLATION}"
    const isInterpolation = isInterpolationContext(word);
    // Is namespace, e.g. `namespace.$var` or `@include namespace.mixin` or `namespace.func()`
    result.namespace = checkNamespaceContext(word, isInterpolation);
    // Information about current position
    const isReturn = reReturn.test(textBeforeWord);
    const isPropertyValue = rePropertyValue.test(textBeforeWord);
    const isEmptyValue = reEmptyPropertyValue.test(textBeforeWord);
    const isQuotes = reQuotes.test(textBeforeWord.replace(reQuotedValueInString, ""));
    result.variable = checkVariableContext(word, isInterpolation, isPropertyValue, isEmptyValue, isQuotes, isReturn, Boolean(result.namespace));
    result.function = checkFunctionContext(textBeforeWord, isInterpolation, isPropertyValue, isEmptyValue, isQuotes, isReturn, Boolean(result.namespace), settings);
    result.mixin = checkMixinContext(textBeforeWord, isPropertyValue);
    if (result.variable || result.function || result.mixin) {
        return result;
    }
    // Is placeholder, e.g. `@extend %placeholder`
    result.placeholder = rePlaceholder.test(textBeforeWord);
    if (result.placeholder) {
        return result;
    }
    result.placeholderDeclaration =
        !result.placeholder &&
            (/\s+%/.test(textBeforeWord) || /^%/.test(textBeforeWord));
    if (result.placeholderDeclaration) {
        return result;
    }
    return result;
}


/***/ }),

/***/ "./src/features/completion/completion-utils.ts":
/*!*****************************************************!*\
  !*** ./src/features/completion/completion-utils.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   makeFunctionDocumentation: () => (/* binding */ makeFunctionDocumentation),
/* harmony export */   makeMixinDocumentation: () => (/* binding */ makeMixinDocumentation),
/* harmony export */   mapParameterSignature: () => (/* binding */ mapParameterSignature),
/* harmony export */   mapParameterSnippet: () => (/* binding */ mapParameterSnippet),
/* harmony export */   parseStringLiteralChoices: () => (/* binding */ parseStringLiteralChoices),
/* harmony export */   rePrivate: () => (/* binding */ rePrivate)
/* harmony export */ });
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils_sassdoc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/sassdoc */ "./src/utils/sassdoc.ts");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/string */ "./src/utils/string.ts");



const rePrivate = /^\$?[_-].*$/;
function makeMixinDocumentation(mixin, sourceDocument) {
    const args = mixin.parameters
        .map((item) => `${item.name}: ${item.value}`)
        .join(", ");
    const result = {
        kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown,
        value: ["```scss", `@mixin ${mixin.name}(${args})`, "```"].join("\n"),
    };
    const sassdoc = (0,_utils_sassdoc__WEBPACK_IMPORTED_MODULE_1__.applySassDoc)(mixin);
    if (sassdoc) {
        result.value += `\n____\n${sassdoc}`;
    }
    result.value += `\n____\nMixin declared in ${sourceDocument.fileName}`;
    return result;
}
function makeFunctionDocumentation(func, sourceDocument) {
    const args = func.parameters
        .map((item) => `${item.name}: ${item.value}`)
        .join(", ");
    const result = {
        kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown,
        value: ["```scss", `@function ${func.name}(${args})`, "```"].join("\n"),
    };
    const sassdoc = (0,_utils_sassdoc__WEBPACK_IMPORTED_MODULE_1__.applySassDoc)(func);
    if (sassdoc) {
        result.value += `\n____\n${sassdoc}`;
    }
    result.value += `\n____\nFunction declared in ${sourceDocument.fileName}`;
    return result;
}
/**
 * Use the SnippetString syntax to provide smart completions of parameter names.
 */
function mapParameterSnippet(p, index) {
    if (p.sassdoc?.type?.length) {
        const choices = parseStringLiteralChoices(p.sassdoc.type);
        if (choices.length > 0) {
            return `\${${index + 1}|${choices.join(",")}|}`;
        }
    }
    return `\${${index + 1}:${(0,_utils_string__WEBPACK_IMPORTED_MODULE_2__.asDollarlessVariable)(p.name)}}`;
}
function mapParameterSignature(p) {
    return p.value ? `${p.name}: ${p.value}` : p.name;
}
const reStringLiteral = /^["'].+["']$/; // Yes, this will match 'foo", but let the parser deal with yelling about that.
/**
 * @param docstring A TypeScript-like string of accepted string literal values, for example `"standard" | "entrance" | "exit"`.
 */
function parseStringLiteralChoices(docstring) {
    const docstrings = typeof docstring === "string" ? [docstring] : docstring;
    const result = [];
    for (const doc of docstrings) {
        const parts = doc.split("|");
        if (parts.length === 1) {
            // This may be a docstring to indicate only a single valid string literal option.
            const trimmed = doc.trim();
            if (reStringLiteral.test(trimmed)) {
                result.push(trimmed);
            }
        }
        else {
            for (const part of parts) {
                const trimmed = part.trim();
                if (reStringLiteral.test(trimmed)) {
                    result.push(trimmed);
                }
            }
        }
    }
    return result;
}


/***/ }),

/***/ "./src/features/completion/completion.ts":
/*!***********************************************!*\
  !*** ./src/features/completion/completion.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doCompletion: () => (/* binding */ doCompletion)
/* harmony export */ });
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _sass_built_in_modules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../sass-built-in-modules */ "./src/features/sass-built-in-modules.ts");
/* harmony import */ var _completion_context__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./completion-context */ "./src/features/completion/completion-context.ts");
/* harmony import */ var _function_completion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./function-completion */ "./src/features/completion/function-completion.ts");
/* harmony import */ var _import_completion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./import-completion */ "./src/features/completion/import-completion.ts");
/* harmony import */ var _mixin_completion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mixin-completion */ "./src/features/completion/mixin-completion.ts");
/* harmony import */ var _placeholder_completion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./placeholder-completion */ "./src/features/completion/placeholder-completion.ts");
/* harmony import */ var _sassdoc_completion__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./sassdoc-completion */ "./src/features/completion/sassdoc-completion.ts");
/* harmony import */ var _variable_completion__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./variable-completion */ "./src/features/completion/variable-completion.ts");










async function doCompletion(document, offset) {
    let completions = vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionList.create([], false);
    const text = document.getText();
    const { storage, settings } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const context = (0,_completion_context__WEBPACK_IMPORTED_MODULE_3__.createCompletionContext)(document, text, offset, settings);
    if (context.sassDoc) {
        return (0,_sassdoc_completion__WEBPACK_IMPORTED_MODULE_8__.doSassDocCompletion)(text, offset, context);
    }
    // Drop suggestions inside `//` and `/* */` comments
    if (context.comment) {
        return completions;
    }
    if (context.import) {
        return await (0,_import_completion__WEBPACK_IMPORTED_MODULE_5__.doImportCompletion)(document, context);
    }
    if (context.namespace) {
        completions = doNamespacedCompletion(document, context);
    }
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        // Don't know how this would happen, but ¯\_(ツ)_/¯
        return completions;
    }
    const wildcardNamespaces = [];
    for (const use of scssDocument.uses.values()) {
        if (use.namespace === "*" && use.link.target) {
            wildcardNamespaces.push(use);
        }
    }
    if (wildcardNamespaces.length > 0) {
        const accumulator = new Map();
        for (const use of wildcardNamespaces) {
            if (!use.link.target) {
                continue;
            }
            const namespaceRootDocument = storage.get(use.link.target);
            if (!namespaceRootDocument) {
                continue;
            }
            const wildcardContext = {
                ...context,
                namespace: "*",
            };
            traverseTree(document, wildcardContext, accumulator, namespaceRootDocument);
        }
        completions.items = completions.items.concat([...accumulator.values()].flat());
    }
    // If at this point we're not in a namespace context,
    // but the user only wants suggestions from namespaces
    // (we consider `*` a namespace), we should return an empty list.
    // An exception is if the user is typing a placeholder.
    // These are not prefixed with their namespace, even with @use.
    if (settings.suggestFromUseOnly &&
        !context.placeholder &&
        !context.placeholderDeclaration) {
        return completions;
    }
    if (context.placeholderDeclaration) {
        const usages = (0,_placeholder_completion__WEBPACK_IMPORTED_MODULE_7__.createPlaceholderDeclarationCompletionItems)();
        completions.items = completions.items.concat(usages);
        return completions;
    }
    for (const scssDocument of storage.values()) {
        if (!settings.suggestAllFromOpenDocument &&
            scssDocument.uri === document.uri) {
            continue;
        }
        if (context.placeholder) {
            const placeholders = (0,_placeholder_completion__WEBPACK_IMPORTED_MODULE_7__.createPlaceholderCompletionItems)(scssDocument);
            completions.items = completions.items.concat(placeholders);
        }
        if (context.variable) {
            const variables = (0,_variable_completion__WEBPACK_IMPORTED_MODULE_9__.createVariableCompletionItems)(scssDocument, document, context);
            completions.items = completions.items.concat(variables);
        }
        if (context.mixin) {
            const mixins = (0,_mixin_completion__WEBPACK_IMPORTED_MODULE_6__.createMixinCompletionItems)(scssDocument, document, context);
            completions.items = completions.items.concat(mixins);
        }
        if (context.function) {
            const functions = (0,_function_completion__WEBPACK_IMPORTED_MODULE_4__.createFunctionCompletionItems)(scssDocument, document, context);
            completions.items = completions.items.concat(functions);
        }
    }
    return completions;
}
function doNamespacedCompletion(document, context) {
    const completions = vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionList.create([], false);
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return completions;
    }
    const namespace = context.namespace;
    let use = null;
    for (const candidate of scssDocument.uses.values()) {
        if (candidate.namespace === namespace ||
            candidate.namespace === `_${namespace}`) {
            use = candidate;
            break;
        }
    }
    if (!use || !use.link.target) {
        // No match in either custom or built-in namespace, return an empty list
        return completions;
    }
    const namespaceRootDocument = storage.get(use.link.target);
    if (!namespaceRootDocument) {
        // Look for matches in built-in namespaces, which do not appear in storage
        for (const [builtIn, module] of Object.entries(_sass_built_in_modules__WEBPACK_IMPORTED_MODULE_2__.sassBuiltInModules)) {
            if (builtIn === use.link.target) {
                doBuiltInCompletion(completions, context, module);
                return completions;
            }
        }
        // No matches, return an empty list
        return completions;
    }
    const accumulator = new Map();
    traverseTree(document, context, accumulator, namespaceRootDocument);
    completions.items = [...accumulator.values()].flat();
    return completions;
}
function doBuiltInCompletion(completions, context, module) {
    completions.items = Object.entries(module.exports).map(([name, { description, signature, parameterSnippet, returns }]) => {
        // Client needs the namespace as part of the text that is matched,
        const filterText = `${context.namespace}.${name}`;
        // Inserted text needs to include the `.` which will otherwise
        // be replaced (except when we're embedded in Vue, Svelte or Astro).
        // Example result: .floor(${1:number})
        const isEmbedded = context.originalExtension !== "scss";
        const insertText = context.word.includes(".")
            ? `${isEmbedded ? "" : "."}${name}${signature ? `(${parameterSnippet})` : ""}`
            : name;
        return {
            label: name,
            filterText,
            insertText,
            insertTextFormat: parameterSnippet
                ? vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet
                : vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.PlainText,
            labelDetails: {
                detail: signature && returns ? `${signature} => ${returns}` : signature,
            },
            documentation: {
                kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown,
                value: `${description}\n\n[Sass reference](${module.reference}#${name})`,
            },
        };
    });
}
function traverseTree(document, context, accumulator, leaf, hiddenSymbols = [], shownSymbols = [], accumulatedPrefix = "") {
    if (accumulator.has(leaf.uri)) {
        return;
    }
    const { storage, settings } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const scssDocument = storage.get(leaf.uri);
    if (!scssDocument) {
        return;
    }
    let completionItems = [];
    if (settings.suggestAllFromOpenDocument ||
        scssDocument.uri !== document.uri) {
        if (context.variable) {
            const variables = (0,_variable_completion__WEBPACK_IMPORTED_MODULE_9__.createVariableCompletionItems)(scssDocument, document, context, hiddenSymbols, shownSymbols, accumulatedPrefix);
            completionItems = completionItems.concat(variables);
        }
        if (context.mixin) {
            const mixins = (0,_mixin_completion__WEBPACK_IMPORTED_MODULE_6__.createMixinCompletionItems)(scssDocument, document, context, hiddenSymbols, shownSymbols, accumulatedPrefix);
            completionItems = completionItems.concat(mixins);
        }
        if (context.function) {
            const functions = (0,_function_completion__WEBPACK_IMPORTED_MODULE_4__.createFunctionCompletionItems)(scssDocument, document, context, hiddenSymbols, shownSymbols, accumulatedPrefix);
            completionItems = completionItems.concat(functions);
        }
        if (context.placeholder) {
            const placeholders = (0,_placeholder_completion__WEBPACK_IMPORTED_MODULE_7__.createPlaceholderCompletionItems)(scssDocument, hiddenSymbols, shownSymbols);
            completionItems = completionItems.concat(placeholders);
        }
        accumulator.set(leaf.uri, completionItems);
        // Check to see if we have to go deeper
        // Don't follow uses, since we start with the document behind the first use, and symbols from further uses aren't available to us
        // Don't follow imports, since the whole point here is to use the new module system
        for (const child of leaf.getLinks({ uses: false, imports: false })) {
            if (!child.link.target || child.link.target === scssDocument.uri) {
                continue;
            }
            const childDocument = storage.get(child.link.target);
            if (!childDocument) {
                continue;
            }
            let hidden = hiddenSymbols;
            let shown = shownSymbols;
            if (child.hide &&
                child.hide.length > 0) {
                hidden = hidden.concat(child.hide);
            }
            if (child.show &&
                child.show.length > 0) {
                shown = shown.concat(child.show);
            }
            let prefix = accumulatedPrefix;
            if (child.prefix) {
                prefix += child.prefix;
            }
            traverseTree(document, context, accumulator, childDocument, hidden, shown, prefix);
        }
    }
}


/***/ }),

/***/ "./src/features/completion/function-completion.ts":
/*!********************************************************!*\
  !*** ./src/features/completion/function-completion.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createFunctionCompletionItems: () => (/* binding */ createFunctionCompletionItems)
/* harmony export */ });
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _completion_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./completion-utils */ "./src/features/completion/completion-utils.ts");


function createFunctionCompletionItems(scssDocument, currentDocument, context, hiddenSymbols = [], shownSymbols = [], prefix = "") {
    const completions = [];
    for (const func of scssDocument.functions.values()) {
        const isPrivate = func.name.match(_completion_utils__WEBPACK_IMPORTED_MODULE_1__.rePrivate);
        const isFromCurrentDocument = scssDocument.uri === currentDocument.uri;
        if (isPrivate && !isFromCurrentDocument) {
            // Don't suggest private functions from other files
            continue;
        }
        if (hiddenSymbols.includes(func.name)) {
            continue;
        }
        if (shownSymbols.length > 0 && !shownSymbols.includes(func.name)) {
            continue;
        }
        // Client needs the namespace as part of the text that is matched,
        // and inserted text needs to include the `.` which will otherwise
        // be replaced (except when we're embedded in Vue, Svelte or Astro).
        const label = context.namespace ? `${prefix}${func.name}` : func.name;
        const filterText = context.namespace
            ? `${context.namespace !== "*" ? context.namespace : ""}.${prefix}${func.name}`
            : func.name;
        const isEmbedded = context.originalExtension !== "scss";
        const insertText = context.namespace
            ? context.namespace !== "*" && !isEmbedded
                ? `.${prefix}${func.name}`
                : `${prefix}${func.name}`
            : func.name;
        const sortText = isPrivate ? label.replace(/^$[_-]/, "") : undefined;
        const documentation = (0,_completion_utils__WEBPACK_IMPORTED_MODULE_1__.makeFunctionDocumentation)(func, scssDocument);
        const requiredParameters = func.parameters.filter((p) => !p.value);
        const parametersSnippet = requiredParameters
            .map(_completion_utils__WEBPACK_IMPORTED_MODULE_1__.mapParameterSnippet)
            .join(", ");
        const functionSignature = requiredParameters
            .map(_completion_utils__WEBPACK_IMPORTED_MODULE_1__.mapParameterSignature)
            .join(", ");
        completions.push(makeFunctionCompletion(label, {
            detail: `(${functionSignature})`,
        }, filterText, sortText, `${insertText}(${parametersSnippet})`, func, documentation));
        if (requiredParameters.length !== func.parameters.length) {
            const parametersSnippet = func.parameters
                .map(_completion_utils__WEBPACK_IMPORTED_MODULE_1__.mapParameterSnippet)
                .join(", ");
            const functionSignature = func.parameters
                .map(_completion_utils__WEBPACK_IMPORTED_MODULE_1__.mapParameterSignature)
                .join(", ");
            completions.push(makeFunctionCompletion(label, {
                detail: `(${functionSignature})`,
            }, filterText, sortText, `${insertText}(${parametersSnippet})`, func, documentation));
        }
    }
    return completions;
}
function makeFunctionCompletion(label, labelDetails, filterText, sortText, insertText, func, documentation) {
    return {
        label,
        labelDetails,
        filterText,
        sortText,
        kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Function,
        insertTextFormat: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
        insertText,
        tags: func.sassdoc?.deprecated ? [vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionItemTag.Deprecated] : [],
        documentation,
    };
}


/***/ }),

/***/ "./src/features/completion/import-completion.ts":
/*!******************************************************!*\
  !*** ./src/features/completion/import-completion.ts ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doImportCompletion: () => (/* binding */ doImportCompletion),
/* harmony export */   rePartialUse: () => (/* binding */ rePartialUse)
/* harmony export */ });
/* harmony import */ var vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-css-languageservice */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageService.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _sass_built_in_modules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sass-built-in-modules */ "./src/features/sass-built-in-modules.ts");





const rePartialUse = /@use ["'|](?<url>.*)["'|]?/;
async function doImportCompletion(document, context) {
    const completions = vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.CompletionList.create([], false);
    if (!rePartialUse.test(context.textBeforeWord)) {
        return completions;
    }
    const match = rePartialUse.exec(context.textBeforeWord);
    if (!match) {
        // Empty URL, provide suggestions for built-ins
        createSassBuiltInCompletionItems(completions.items);
        return completions;
    }
    const [, url] = match;
    const isPathImport = url.startsWith(".") || url.includes("/") || url.includes("@");
    if (!isPathImport) {
        // Don't pollute path imports with built-ins
        createSassBuiltInCompletionItems(completions.items);
    }
    const { workspaceRoot, fs } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_2__.useContext)();
    // Need file system access for import completions
    if (document.uri.startsWith("file://")) {
        const moduleName = getModuleNameFromPath(url);
        if (moduleName && moduleName !== "." && moduleName !== "..") {
            const rootFolderUri = vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.joinPath(workspaceRoot, "/").toString(true);
            const documentFolderUri = vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.dirname(vscode_uri__WEBPACK_IMPORTED_MODULE_4__.URI.parse(document.uri)).toString(true);
            const modulePath = await resolvePathToModule(moduleName, documentFolderUri, rootFolderUri);
            if (modulePath) {
                const pathWithinModule = url.substring(moduleName.length + 1);
                const pathInsideModule = vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.joinPath(vscode_uri__WEBPACK_IMPORTED_MODULE_4__.URI.parse(modulePath), pathWithinModule);
                const filesInModulePath = await fs.readDirectory(pathInsideModule.fsPath);
                for (const [file, fileType] of filesInModulePath) {
                    if (fileType === vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_0__.FileType.File && file.endsWith(".scss")) {
                        let insertText = file.slice(0, -5);
                        if (insertText.startsWith("_")) {
                            insertText = insertText.slice(1);
                        }
                        completions.items.push({
                            label: escapePath(file),
                            insertText: escapePath(insertText),
                            kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.CompletionItemKind.File,
                        });
                    }
                    else if (fileType === vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_0__.FileType.Directory) {
                        completions.items.push({
                            label: `${escapePath(file)}/`,
                            kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.CompletionItemKind.Folder,
                            insertText: `${escapePath(file)}/`,
                            command: {
                                title: "Suggest",
                                command: "editor.action.triggerSuggest",
                            },
                        });
                    }
                }
            }
        }
    }
    return completions;
}
function createSassBuiltInCompletionItems(completions) {
    for (const [moduleName, { summary, reference }] of Object.entries(_sass_built_in_modules__WEBPACK_IMPORTED_MODULE_3__.sassBuiltInModules)) {
        completions.push({
            label: moduleName,
            documentation: {
                kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.MarkupKind.Markdown,
                value: `${summary}\n\n[Sass reference](${reference})`,
            },
        });
    }
}
function getModuleNameFromPath(modulePath) {
    let path = modulePath;
    // Slice away deprecated tilde import
    if (path.startsWith("~")) {
        path = path.slice(1);
    }
    const firstSlash = path.indexOf("/");
    if (firstSlash === -1) {
        return "";
    }
    // If a scoped module (starts with @) then get up until second instance of '/', or to the end of the string for root-level imports.
    if (path[0] === "@") {
        const secondSlash = path.indexOf("/", firstSlash + 1);
        if (secondSlash === -1) {
            return path;
        }
        return path.substring(0, secondSlash);
    }
    // Otherwise get until first instance of '/'
    return path.substring(0, firstSlash);
}
// Escape https://www.w3.org/TR/CSS1/#url
function escapePath(p) {
    return p.replace(/(\s|\(|\)|,|"|')/g, "\\$1");
}
async function resolvePathToModule(_moduleName, documentFolderUri, rootFolderUri) {
    // resolve the module relative to the document. We can't use `require` here as the code is webpacked.
    const packPath = vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.joinPath(vscode_uri__WEBPACK_IMPORTED_MODULE_4__.URI.parse(documentFolderUri), "node_modules", _moduleName, "package.json");
    if (await fileExists(packPath.fsPath)) {
        return vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.dirname(packPath).toString(true);
    }
    else if (rootFolderUri &&
        documentFolderUri.startsWith(rootFolderUri) &&
        documentFolderUri.length !== rootFolderUri.length) {
        return resolvePathToModule(_moduleName, vscode_uri__WEBPACK_IMPORTED_MODULE_4__.Utils.dirname(vscode_uri__WEBPACK_IMPORTED_MODULE_4__.URI.parse(documentFolderUri)).toString(true), rootFolderUri);
    }
    return undefined;
}
async function fileExists(uri) {
    const { fs } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_2__.useContext)();
    try {
        const stat = await fs.stat(vscode_uri__WEBPACK_IMPORTED_MODULE_4__.URI.parse(uri));
        if (stat.type === vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_0__.FileType.Unknown && stat.size === -1) {
            return false;
        }
        return true;
    }
    catch (err) {
        return false;
    }
}


/***/ }),

/***/ "./src/features/completion/index.ts":
/*!******************************************!*\
  !*** ./src/features/completion/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doCompletion: () => (/* reexport safe */ _completion__WEBPACK_IMPORTED_MODULE_0__.doCompletion)
/* harmony export */ });
/* harmony import */ var _completion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./completion */ "./src/features/completion/completion.ts");



/***/ }),

/***/ "./src/features/completion/mixin-completion.ts":
/*!*****************************************************!*\
  !*** ./src/features/completion/mixin-completion.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createMixinCompletionItems: () => (/* binding */ createMixinCompletionItems)
/* harmony export */ });
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _completion_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./completion-utils */ "./src/features/completion/completion-utils.ts");



function createMixinCompletionItems(scssDocument, currentDocument, context, hiddenSymbols = [], shownSymbols = [], prefix = "") {
    const completions = [];
    for (const mixin of scssDocument.mixins.values()) {
        const isPrivate = mixin.name.match(_completion_utils__WEBPACK_IMPORTED_MODULE_2__.rePrivate);
        const isFromCurrentDocument = scssDocument.uri === currentDocument.uri;
        if (isPrivate && !isFromCurrentDocument) {
            // Don't suggest private mixins from other files
            continue;
        }
        if (hiddenSymbols.includes(mixin.name)) {
            continue;
        }
        if (shownSymbols.length > 0 && !shownSymbols.includes(mixin.name)) {
            continue;
        }
        const documentation = (0,_completion_utils__WEBPACK_IMPORTED_MODULE_2__.makeMixinDocumentation)(mixin, scssDocument);
        // Client needs the namespace as part of the text that is matched,
        // and inserted text needs to include the `.` which will otherwise
        // be replaced (except when we're embedded in Vue, Svelte or Astro).
        const label = context.namespace ? `${prefix}${mixin.name}` : mixin.name;
        const filterText = context.namespace
            ? context.namespace !== "*"
                ? `${context.namespace}.${prefix}${mixin.name}`
                : `${prefix}${mixin.name}`
            : mixin.name;
        const isEmbedded = context.originalExtension !== "scss";
        const insertText = context.namespace
            ? context.namespace !== "*" && !isEmbedded
                ? `.${prefix}${mixin.name}`
                : `${prefix}${mixin.name}`
            : mixin.name;
        const sortText = isPrivate ? label.replace(/^$[_-]/, "") : undefined;
        // Use the SnippetString syntax to provide smart completions of parameter names
        const labelDetails = undefined;
        const requiredParameters = mixin.parameters.filter((p) => !p.value);
        if (requiredParameters.length === 0) {
            makeMixinCompletion(completions, label, labelDetails, filterText, sortText, insertText, mixin, documentation);
        }
        if (requiredParameters.length > 0) {
            const parametersSnippet = requiredParameters
                .map(_completion_utils__WEBPACK_IMPORTED_MODULE_2__.mapParameterSnippet)
                .join(", ");
            const functionSignature = requiredParameters
                .map(_completion_utils__WEBPACK_IMPORTED_MODULE_2__.mapParameterSignature)
                .join(", ");
            makeMixinCompletion(completions, label, {
                detail: `(${functionSignature})`,
            }, filterText, sortText, `${insertText}(${parametersSnippet})`, mixin, documentation);
        }
        if (mixin.parameters.length !== requiredParameters.length) {
            const parametersSnippet = mixin.parameters
                .map(_completion_utils__WEBPACK_IMPORTED_MODULE_2__.mapParameterSnippet)
                .join(", ");
            const functionSignature = mixin.parameters
                .map(_completion_utils__WEBPACK_IMPORTED_MODULE_2__.mapParameterSignature)
                .join(", ");
            makeMixinCompletion(completions, label, {
                detail: `(${functionSignature})`,
            }, filterText, sortText, `${insertText}(${parametersSnippet})`, mixin, documentation);
        }
    }
    return completions;
}
function makeMixinCompletion(completions, label, labelDetails, filterText, sortText, insertText, mixin, documentation) {
    const context = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    if (context?.settings?.suggestionStyle !== "bracket") {
        completions.push({
            label,
            labelDetails,
            filterText,
            sortText,
            kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Snippet,
            insertTextFormat: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
            insertText,
            tags: mixin.sassdoc?.deprecated ? [vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionItemTag.Deprecated] : [],
            documentation,
        });
    }
    // Not all mixins have @content, but when they do, be smart about adding brackets
    // and move the cursor to be ready to add said contents.
    // Include as separate suggestion since content may not always be needed or wanted.
    if (mixin.sassdoc?.content &&
        context?.settings?.suggestionStyle !== "nobracket") {
        const details = { ...labelDetails };
        details.detail = details.detail ? `${details.detail} { }` : " { }";
        completions.push({
            label,
            labelDetails: details,
            filterText,
            sortText,
            kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Snippet,
            insertTextFormat: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
            insertText: (insertText += " {\n\t$0\n}"),
            tags: mixin.sassdoc.deprecated ? [vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionItemTag.Deprecated] : [],
            documentation,
        });
    }
}


/***/ }),

/***/ "./src/features/completion/placeholder-completion.ts":
/*!***********************************************************!*\
  !*** ./src/features/completion/placeholder-completion.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createPlaceholderCompletionItems: () => (/* binding */ createPlaceholderCompletionItems),
/* harmony export */   createPlaceholderDeclarationCompletionItems: () => (/* binding */ createPlaceholderDeclarationCompletionItems)
/* harmony export */ });
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _utils_sassdoc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/sassdoc */ "./src/utils/sassdoc.ts");



function createPlaceholderCompletionItems(scssDocument, hiddenSymbols = [], shownSymbols = []) {
    const completions = [];
    for (const placeholder of scssDocument.placeholders.values()) {
        if (hiddenSymbols.includes(placeholder.name)) {
            continue;
        }
        if (shownSymbols.length > 0 && !shownSymbols.includes(placeholder.name)) {
            continue;
        }
        const label = placeholder.name;
        const filterText = placeholder.name.substring(1);
        let documentation = placeholder.name;
        const sassdoc = (0,_utils_sassdoc__WEBPACK_IMPORTED_MODULE_2__.applySassDoc)(placeholder);
        if (sassdoc) {
            documentation += `\n____\n${sassdoc}`;
        }
        const detail = `Placeholder declared in ${scssDocument.fileName}`;
        completions.push({
            label,
            kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Class,
            detail,
            filterText,
            insertText: filterText,
            insertTextFormat: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
            tags: placeholder.sassdoc?.deprecated
                ? [vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionItemTag.Deprecated]
                : undefined,
            documentation: {
                kind: "markdown",
                value: documentation,
            },
        });
    }
    return completions;
}
function createPlaceholderDeclarationCompletionItems() {
    const uniquePlaceholders = new Map();
    const { storage, settings } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    for (const document of storage.values()) {
        for (const usage of document.placeholderUsages.values()) {
            const label = usage.name;
            if (uniquePlaceholders.has(label)) {
                continue;
            }
            const filterText = usage.name.substring(1);
            uniquePlaceholders.set(label, [
                settings.suggestionStyle !== "bracket"
                    ? {
                        label,
                        kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Class,
                        filterText,
                        insertText: filterText,
                        insertTextFormat: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
                    }
                    : undefined,
                settings.suggestionStyle !== "nobracket"
                    ? {
                        label,
                        labelDetails: { detail: " { }" },
                        kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Class,
                        filterText,
                        insertText: filterText + " {\n\t$0\n}",
                        insertTextFormat: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
                    }
                    : undefined,
            ]);
        }
    }
    return [...uniquePlaceholders.values()]
        .flat()
        .filter((p) => typeof p !== "undefined");
}


/***/ }),

/***/ "./src/features/completion/sassdoc-completion.ts":
/*!*******************************************************!*\
  !*** ./src/features/completion/sassdoc-completion.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doSassDocCompletion: () => (/* binding */ doSassDocCompletion)
/* harmony export */ });
/* harmony import */ var scss_symbols_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! scss-symbols-parser */ "../../node_modules/scss-symbols-parser/out/index.js");
/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/string */ "./src/utils/string.ts");
/* harmony import */ var _sassdoc_annotations__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../sassdoc-annotations */ "./src/features/sassdoc-annotations.ts");




function doSassDocCompletion(text, offset, context) {
    if (!context.word) {
        const textAfterCursor = text.slice(Math.max(0, offset));
        const isCursorAboveFunction = /^(?:\r\n|\r|\n)\s*@function/.exec(textAfterCursor);
        const isCursorAboveMixin = /^(?:\r\n|\r|\n)\s*@mixin/.exec(textAfterCursor);
        if (isCursorAboveFunction || isCursorAboveMixin) {
            const textBeforeCursor = text.slice(0, Math.max(0, offset));
            const linesBeforeCursor = (0,_utils_string__WEBPACK_IMPORTED_MODULE_2__.getLinesFromText)(textBeforeCursor);
            const isCursorBelowSassDocLine = linesBeforeCursor[linesBeforeCursor.length - 2]?.startsWith("///");
            if (!isCursorBelowSassDocLine) {
                return doSassDocParameterCompletion(textAfterCursor, isCursorAboveFunction ? "function" : "mixin");
            }
        }
    }
    return doSassDocAnnotationCompletion(context);
}
function doSassDocAnnotationCompletion({ textBeforeWord, }) {
    const completions = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_1__.CompletionList.create([], true);
    if (textBeforeWord.includes("@example ")) {
        completions.items.push({
            label: "scss",
            sortText: "-",
            kind: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_1__.CompletionItemKind.Value,
        });
        completions.items.push({
            label: "css",
            kind: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_1__.CompletionItemKind.Value,
        });
        completions.items.push({
            label: "markup",
            kind: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_1__.CompletionItemKind.Value,
        });
        completions.items.push({
            label: "javascript",
            sortText: "y",
            kind: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_1__.CompletionItemKind.Value,
        });
        return completions;
    }
    for (const { annotation, aliases, insertText, insertTextFormat, } of _sassdoc_annotations__WEBPACK_IMPORTED_MODULE_3__.sassDocAnnotations) {
        const item = {
            label: annotation,
            kind: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_1__.CompletionItemKind.Keyword,
            insertText,
            insertTextFormat,
            sortText: "-", // Push ourselves to the head of the list
        };
        completions.items.push(item);
        if (aliases) {
            for (const alias of aliases) {
                completions.items.push({
                    ...item,
                    label: alias,
                    insertText: insertText
                        ? insertText.replace(annotation, alias)
                        : insertText,
                });
            }
        }
    }
    return completions;
}
function doSassDocParameterCompletion(textAfterCursor, context) {
    const completions = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_1__.CompletionList.create([], true);
    const tokens = (0,scss_symbols_parser__WEBPACK_IMPORTED_MODULE_0__.tokenizer)(textAfterCursor);
    const isCursorAboveMixinWithParameters = /^(?:\r\n|\r|\n)\s*@mixin .+\(.+\)/.exec(textAfterCursor);
    if (context === "mixin" && !isCursorAboveMixinWithParameters) {
        // If this is a mixin without parameters we don't have many options for clever suggestions.
        // Look for a @content, but otherwise just suggest an @output and a description.
        let hasContentDirective = false;
        let bracketCount = 0;
        const openBracket = tokens.findIndex((t) => t[0] === "{");
        for (let i = openBracket; i < tokens.length; i++) {
            const token = tokens[i];
            if (token[0] === "{") {
                bracketCount++;
            }
            else if (token[0] === "}") {
                bracketCount--;
                if (bracketCount === 0) {
                    break;
                }
            }
            if (token[1] === "@content") {
                hasContentDirective = true;
                break;
            }
        }
        const contentSnippet = hasContentDirective ? "\n/// @content ${1}" : "";
        const snippet = ` \${0}${contentSnippet}\n/// @output \${2}`;
        completions.items.push({
            label: "SassDoc block",
            insertText: snippet,
            insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_1__.InsertTextFormat.Snippet,
            sortText: "-",
        });
        return completions;
    }
    const [, text] = tokens.find((t) => t[0] === "brackets");
    const ppl = 2; // Number of placeholders in the /// @param snippet below
    const parameters = text.replace(/[()]/g, "").split(",");
    const parameterSnippet = parameters
        .map((p, i) => {
        const [parameterName, defaultValue] = p
            .split(":")
            .map((nd) => nd.trim());
        let typeSnippet = "type";
        let defaultValueSnippet = "";
        if (defaultValue) {
            defaultValueSnippet = ` [${defaultValue}]`;
            // Try to give a sensible default type if we can
            try {
                if (defaultValue === "true" || defaultValue === "false") {
                    typeSnippet = "Boolean";
                }
                else if (/^["']/.exec(defaultValue)) {
                    typeSnippet = "String";
                }
                else if (defaultValue.startsWith("#") ||
                    defaultValue.startsWith("rgb") ||
                    defaultValue.startsWith("hsl")) {
                    typeSnippet = "Color";
                }
                else {
                    const maybeNumber = Number.parseFloat(defaultValue);
                    if (!Number.isNaN(maybeNumber)) {
                        typeSnippet = "Number";
                    }
                }
            }
            catch {
                // Oops! Carry on with a generic suggestion.
            }
        }
        return `/// @param {\${${i * ppl + 1}:${typeSnippet}}} \\${parameterName}${defaultValueSnippet} \${${i * ppl + 2}:-}`;
    })
        .join("\n");
    const isFunc = context === "function";
    const returnSnippet = `\n/// @${isFunc ? `return {\${${ppl * parameters.length + 1}:type}}` : "output"} \${${ppl * parameters.length + 2}:-}`;
    const snippet = ` \${0}\n${parameterSnippet}${returnSnippet}`;
    completions.items.push({
        label: "SassDoc block",
        insertText: snippet,
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_1__.InsertTextFormat.Snippet,
        sortText: "-",
    });
    return completions;
}


/***/ }),

/***/ "./src/features/completion/variable-completion.ts":
/*!********************************************************!*\
  !*** ./src/features/completion/variable-completion.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createVariableCompletionItems: () => (/* binding */ createVariableCompletionItems)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
/* harmony import */ var _utils_sassdoc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/sassdoc */ "./src/utils/sassdoc.ts");
/* harmony import */ var _utils_scss__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/scss */ "./src/utils/scss.ts");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/string */ "./src/utils/string.ts");
/* harmony import */ var _color_completion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./color-completion */ "./src/features/completion/color-completion.ts");
/* harmony import */ var _completion_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./completion-utils */ "./src/features/completion/completion-utils.ts");






function createVariableCompletionItems(scssDocument, currentDocument, context, hiddenSymbols = [], shownSymbols = [], prefix = "") {
    const completions = [];
    for (const variable of scssDocument.variables.values()) {
        let value = variable.value;
        if ((0,_utils_scss__WEBPACK_IMPORTED_MODULE_2__.isReferencingVariable)(variable)) {
            value = (0,_utils_scss__WEBPACK_IMPORTED_MODULE_2__.getBaseValueFrom)(variable, scssDocument).value;
        }
        const color = value ? (0,_color_completion__WEBPACK_IMPORTED_MODULE_4__.isColor)(value) : null;
        const completionKind = color
            ? vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Color
            : vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Variable;
        let documentation = color ||
            [
                "```scss",
                `${variable.name}: ${value};${value !== variable.value ? ` // via ${variable.value}` : ""}`,
                "```",
            ].join("\n") ||
            "";
        let detail = undefined;
        let label = variable.name;
        let sortText;
        let filterText;
        let insertText;
        if (variable.mixin) {
            // Add 'argument from MIXIN_NAME' suffix if Variable is Mixin argument
            detail = `Argument from ${variable.mixin}`;
        }
        else {
            const isPrivate = variable.name.match(_completion_utils__WEBPACK_IMPORTED_MODULE_5__.rePrivate);
            const isFromCurrentDocument = scssDocument.uri === currentDocument.uri;
            if (isPrivate && !isFromCurrentDocument) {
                continue;
            }
            if (hiddenSymbols.includes(variable.name)) {
                continue;
            }
            if (shownSymbols.length > 0 && !shownSymbols.includes(variable.name)) {
                continue;
            }
            if (isPrivate) {
                sortText = label.replace(/^$[_-]/, "");
            }
            const sassdoc = (0,_utils_sassdoc__WEBPACK_IMPORTED_MODULE_1__.applySassDoc)(variable);
            if (sassdoc) {
                documentation += `\n____\n${sassdoc}`;
            }
        }
        documentation += `\n____\nVariable declared in ${scssDocument.fileName}`;
        const isEmbedded = context.originalExtension !== "scss";
        if (context.namespace) {
            // Avoid ending up with namespace.prefix-$variable
            label = `$${prefix}${(0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.asDollarlessVariable)(variable.name)}`;
            // The `.` in the namespace gets replaced unless we have a $ character after it.
            // Except when we're embedded in Vue, Svelte or Astro, where the . is not replaced.
            // Also, in embedded scenarios where we don't use a namespace, the existing $ sign is not replaced.
            insertText = context.word.endsWith(".")
                ? `${isEmbedded ? "" : "."}${label}`
                : isEmbedded
                    ? (0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.asDollarlessVariable)(label)
                    : label;
            filterText = context.word.endsWith(".")
                ? `${context.namespace}.${label}`
                : label;
        }
        else if (context.originalExtension === "vue" ||
            context.originalExtension === "astro") {
            // In Vue and Astro files, the $ does not get replaced by the suggestion,
            // so exclude it from the insertText.
            insertText = (0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.asDollarlessVariable)(label);
        }
        completions.push({
            label,
            filterText,
            insertText,
            sortText,
            commitCharacters: [";", ","],
            kind: completionKind,
            detail,
            tags: variable.sassdoc?.deprecated ? [vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionItemTag.Deprecated] : [],
            documentation: completionKind === vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Color
                ? documentation
                : {
                    kind: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown,
                    value: documentation,
                },
        });
    }
    return completions;
}


/***/ }),

/***/ "./src/features/decorators/color-decorators.ts":
/*!*****************************************************!*\
  !*** ./src/features/decorators/color-decorators.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   findDocumentColors: () => (/* binding */ findDocumentColors)
/* harmony export */ });
/* harmony import */ var colorjs_io__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! colorjs.io */ "../../node_modules/colorjs.io/dist/color.js");
/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../parser */ "./src/parser/index.ts");
/* harmony import */ var _utils_scss__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/scss */ "./src/utils/scss.ts");
/* harmony import */ var _completion_color_completion__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../completion/color-completion */ "./src/features/completion/color-completion.ts");
/* harmony import */ var _go_definition__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../go-definition */ "./src/features/go-definition/index.ts");







function findDocumentColors(document) {
    const colorInformation = [];
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return colorInformation;
    }
    scssDocument.ast.accept((node) => {
        if (node.type !== _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.VariableName) {
            // continue
            return true;
        }
        const parent = node.getParent();
        if (parent.type !== _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.VariableDeclaration &&
            parent.type !== _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.FunctionParameter) {
            const identifier = {
                name: node.getName(),
                position: document.positionAt(node.offset),
                kind: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable,
            };
            const [symbol, sourceDocument] = (0,_go_definition__WEBPACK_IMPORTED_MODULE_5__.getDefinitionSymbol)(document, identifier);
            // Symbol is null if current node _is_ the definition. In that case, we
            // defer color decoration to the VS Code language server.
            if (!symbol) {
                // continue
                return true;
            }
            const variable = symbol;
            let value = variable.value;
            if (!value) {
                // continue
                return true;
            }
            if ((0,_utils_scss__WEBPACK_IMPORTED_MODULE_3__.isReferencingVariable)(variable)) {
                value = (0,_utils_scss__WEBPACK_IMPORTED_MODULE_3__.getBaseValueFrom)(variable, sourceDocument).value;
            }
            if (!value || !(0,_completion_color_completion__WEBPACK_IMPORTED_MODULE_4__.isColor)(value)) {
                // continue
                return true;
            }
            const srgbaColor = colorjs_io__WEBPACK_IMPORTED_MODULE_6__["default"].to(colorjs_io__WEBPACK_IMPORTED_MODULE_6__["default"].parse(value), "srgb");
            const color = {
                color: {
                    alpha: srgbaColor.alpha || 1,
                    red: srgbaColor.coords[0],
                    green: srgbaColor.coords[1],
                    blue: srgbaColor.coords[2],
                },
                range: {
                    start: document.positionAt(node.offset),
                    end: document.positionAt(node.offset + node.getName().length),
                },
            };
            colorInformation.push(color);
        }
        return true;
    });
    return colorInformation;
}
// Maybe we just don't provide any options?
// Clicking to see the other non-rgb options replaces the variable reference.
// The below works, but is less helpful than I'd like. Keep for reference, in case of user feedback.
// export function getColorPresentations(
// 	document: TextDocument,
// 	color: Color,
// 	range: Range,
// ): ColorPresentation[] {
// 	const ls = getLanguageService();
// 	const stylesheet = ls.parseStylesheet(document);
// 	return ls.getColorPresentations(document, stylesheet, color, range);
// }


/***/ }),

/***/ "./src/features/diagnostics/diagnostics.ts":
/*!*************************************************!*\
  !*** ./src/features/diagnostics/diagnostics.ts ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doDiagnostics: () => (/* binding */ doDiagnostics)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../constants */ "./src/constants.ts");
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../parser */ "./src/parser/index.ts");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/string */ "./src/utils/string.ts");





async function doDiagnostics(document) {
    const diagnostics = [];
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_2__.useContext)();
    const openDocument = storage.get(document.uri);
    if (!openDocument) {
        console.error("Tried to do diagnostics on a document that has not been scanned. This should never happen.");
        return diagnostics;
    }
    const references = getReferences(openDocument.ast);
    if (references.length === 0) {
        return diagnostics;
    }
    // Do traversal once, and then do diagnostics on the symbols for each reference
    const symbols = [];
    doSymbolHunting(openDocument, symbols);
    for (const node of references) {
        for (const symbol of symbols) {
            let nodeKind = null;
            switch (node.type) {
                case _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.Function:
                    nodeKind = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function;
                    break;
                case _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.MixinReference:
                    nodeKind = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method;
                    break;
                case _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.VariableName:
                    nodeKind = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable;
                    break;
                case _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.SimpleSelector:
                    nodeKind = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class;
                    break;
            }
            if (nodeKind === null) {
                continue;
            }
            const name = nodeKind === vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class ? node.getText() : node.getName();
            if (symbol.kind === nodeKind && name === symbol.name) {
                const diagnostic = createDiagnostic(openDocument, node, symbol);
                if (diagnostic) {
                    diagnostics.push(diagnostic);
                }
            }
        }
    }
    return diagnostics;
}
function getReferences(fromNode) {
    return fromNode.getChildren().flatMap((child) => {
        if (child.type === _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.VariableName) {
            const parent = child.getParent();
            if (parent.type !== _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.FunctionParameter &&
                parent.type !== _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.VariableDeclaration) {
                return [child];
            }
        }
        else if (child.type === _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.Identifier) {
            let i = 0;
            let node = child;
            while (node.type !== _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.MixinReference &&
                node.type !== _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.Function &&
                i !== 2) {
                node = node.getParent();
                i++;
            }
            if (node.type === _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.MixinReference ||
                node.type === _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.Function) {
                return [node];
            }
        }
        else if (child.type === _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.SimpleSelector) {
            let node = child;
            let i = 0;
            while (node.type !== _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.ExtendsReference && i !== 2) {
                node = node.getParent();
                i++;
            }
            if (node.type === _parser__WEBPACK_IMPORTED_MODULE_3__.NodeType.ExtendsReference) {
                return [child];
            }
        }
        return getReferences(child);
    });
}
function doSymbolHunting(openDocument, result) {
    traverseTree(openDocument, openDocument, result);
    return result;
}
function traverseTree(openDocument, childDocument, result, accumulatedPrefix = "", depth = 0) {
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_2__.useContext)();
    const scssDocument = storage.get(childDocument.uri);
    if (!scssDocument) {
        return result;
    }
    for (const symbol of scssDocument.getSymbols()) {
        // Placeholders are not namespaced the same way other symbols are
        if (symbol.kind === vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class) {
            result.push({
                ...symbol,
                name: symbol.name,
            });
            continue;
        }
        // The symbol may have a prefix in the open document, so we need to add it here
        // so we can compare apples to apples later on.
        let symbolName = `${accumulatedPrefix}${(0,_utils_string__WEBPACK_IMPORTED_MODULE_4__.asDollarlessVariable)(symbol.name)}`;
        if (symbol.kind === vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable) {
            symbolName = `$${symbolName}`;
        }
        result.push({
            ...symbol,
            name: symbolName,
        });
    }
    // Check to see if we have to go deeper
    // Don't follow uses beyond the first, since symbols from those aren't available to us anyway
    // Don't follow imports, since the whole point here is to use the new module system
    for (const child of scssDocument.getLinks({
        uses: depth === 0,
        imports: false,
    })) {
        if (!child.link.target || child.link.target === scssDocument.uri) {
            continue;
        }
        const childDocument = storage.get(child.link.target);
        if (!childDocument) {
            continue;
        }
        let prefix = accumulatedPrefix;
        if (child.prefix) {
            prefix += child.prefix;
        }
        traverseTree(openDocument, childDocument, result, prefix, depth + 1);
    }
    return result;
}
function createDiagnostic(openDocument, node, symbol) {
    if (typeof symbol.sassdoc?.deprecated !== "undefined") {
        return {
            message: symbol.sassdoc.deprecated || `${symbol.name} is deprecated`,
            range: openDocument.getNodeRange(node),
            source: _constants__WEBPACK_IMPORTED_MODULE_1__.EXTENSION_NAME,
            tags: [vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DiagnosticTag.Deprecated],
            severity: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DiagnosticSeverity.Hint,
        };
    }
    return null;
}


/***/ }),

/***/ "./src/features/go-definition/go-definition.ts":
/*!*****************************************************!*\
  !*** ./src/features/go-definition/go-definition.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDefinition: () => (/* binding */ getDefinition),
/* harmony export */   getDefinitionSymbol: () => (/* binding */ getDefinitionSymbol),
/* harmony export */   goDefinition: () => (/* binding */ goDefinition)
/* harmony export */ });
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../parser */ "./src/parser/index.ts");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/string */ "./src/utils/string.ts");




function samePosition(a, b) {
    if (a === undefined) {
        return false;
    }
    return a.line === b.line && a.character === b.character;
}
function goDefinition(document, offset) {
    const result = getDefinition(document, offset);
    if (!result) {
        return null;
    }
    const [definition, sourceDocument] = result;
    if (!definition || !sourceDocument) {
        return null;
    }
    const symbol = vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.Location.create(sourceDocument.uri, {
        start: definition.position,
        end: {
            line: definition.position.line,
            character: definition.position.character + definition.name.length,
        },
    });
    return symbol;
}
function getDefinition(document, offset) {
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const currentScssDocument = storage.get(document.uri);
    if (!currentScssDocument) {
        return null;
    }
    const hoverNode = currentScssDocument.getNodeAt(offset);
    if (!hoverNode || !hoverNode.type) {
        return null;
    }
    const identifier = getIdentifier(document, hoverNode);
    if (!identifier) {
        return null;
    }
    const [definition, sourceDocument] = getDefinitionSymbol(document, identifier);
    if (!definition || !sourceDocument) {
        return null;
    }
    return [definition, sourceDocument];
}
function getIdentifier(document, hoverNode) {
    if (hoverNode.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.VariableName) {
        const parent = hoverNode.getParent();
        const isFunctionParameter = parent.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.FunctionParameter;
        const isDeclaration = parent.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.VariableDeclaration;
        if (!isFunctionParameter && !isDeclaration) {
            return {
                name: hoverNode.getName(),
                position: document.positionAt(hoverNode.offset),
                kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable,
            };
        }
    }
    else if (hoverNode.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.Identifier) {
        if (hoverNode.getParent()?.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.ForwardVisibility) {
            // At this point the identifier can be both a function and a mixin.
            // To figure it out we need to look for the original definition as
            // both a function and a mixin.
            const candidateIdentifier = {
                name: hoverNode.getText(),
                position: document.positionAt(hoverNode.offset),
                kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method,
            };
            const [asMixin] = getDefinitionSymbol(document, candidateIdentifier);
            if (asMixin) {
                return candidateIdentifier;
            }
            candidateIdentifier.kind = vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function;
            const [asFunction] = getDefinitionSymbol(document, candidateIdentifier);
            if (asFunction) {
                return candidateIdentifier;
            }
            return null;
        }
        let i = 0;
        let node = hoverNode;
        let isMixin = false;
        let isFunction = false;
        while (!isMixin && !isFunction && i !== 2) {
            node = node.getParent();
            isMixin = node.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.MixinReference;
            isFunction = node.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.Function;
            i++;
        }
        if (node && (isMixin || isFunction)) {
            let kind = vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method;
            if (isFunction) {
                kind = vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function;
            }
            return {
                name: node.getName(),
                position: document.positionAt(node.offset),
                kind,
            };
        }
    }
    else if (hoverNode.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.SelectorPlaceholder) {
        return {
            name: hoverNode.getText(),
            position: document.positionAt(hoverNode.offset),
            kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class,
        };
    }
    return null;
}
function getDefinitionSymbol(document, identifier) {
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return [null, null];
    }
    for (const symbol of scssDocument.getSymbols()) {
        const symbolName = (0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.asDollarlessVariable)(symbol.name);
        const identifierName = (0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.asDollarlessVariable)(identifier.name);
        if (symbolName === identifierName && symbol.kind === identifier.kind) {
            return [symbol, scssDocument];
        }
    }
    // Don't follow forwards from the current document, since the current doc doesn't have access to its symbols
    for (const { link } of scssDocument.getLinks({ forwards: false })) {
        const scssDocument = storage.get(link.target);
        if (!scssDocument) {
            continue;
        }
        const [symbol, sourceDocument] = traverseTree(scssDocument, identifier, storage);
        if (symbol) {
            return [symbol, sourceDocument];
        }
    }
    // Fall back to the old way of doing things if we can't find the symbol via `@use`
    for (const scssDocument of storage.values()) {
        let symbols;
        if (identifier.kind === vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable) {
            symbols = scssDocument.variables.values();
        }
        else if (identifier.kind === vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class) {
            symbols = scssDocument.placeholders.values();
        }
        else if (identifier.kind === vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function) {
            symbols = scssDocument.functions.values();
        }
        else {
            symbols = scssDocument.mixins.values();
        }
        for (const symbol of symbols) {
            if (symbol.name === identifier.name &&
                !samePosition(symbol.position, identifier.position)) {
                return [symbol, scssDocument];
            }
        }
    }
    return [null, null];
}
function traverseTree(document, identifier, storage, accumulatedPrefix = "") {
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return [null, null];
    }
    for (const symbol of scssDocument.getSymbols()) {
        if (symbol.kind === vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class) {
            // Placeholders are not namespaced the same way other symbols are
            if (symbol.name === identifier.name && symbol.kind === identifier.kind) {
                return [symbol, scssDocument];
            }
            continue;
        }
        const symbolName = `${accumulatedPrefix}${(0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.asDollarlessVariable)(symbol.name)}`;
        const identifierName = (0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.asDollarlessVariable)(identifier.name);
        if (symbolName === identifierName && symbol.kind === identifier.kind) {
            return [symbol, scssDocument];
        }
    }
    // Check to see if we have to go deeper
    // Don't follow uses, since we start with the document behind the first use, and symbols from further uses aren't available to us
    // Don't follow imports, since the whole point here is to use the new module system
    for (const child of scssDocument.getLinks({
        uses: false,
        imports: false,
    })) {
        if (!child.link.target || child.link.target === scssDocument.uri) {
            continue;
        }
        const childDocument = storage.get(child.link.target);
        if (!childDocument) {
            continue;
        }
        let prefix = accumulatedPrefix;
        if (child.prefix) {
            prefix += child.prefix;
        }
        const [symbol, document] = traverseTree(childDocument, identifier, storage, prefix);
        if (symbol) {
            return [symbol, document];
        }
    }
    return [null, null];
}


/***/ }),

/***/ "./src/features/go-definition/index.ts":
/*!*********************************************!*\
  !*** ./src/features/go-definition/index.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getDefinition: () => (/* reexport safe */ _go_definition__WEBPACK_IMPORTED_MODULE_0__.getDefinition),
/* harmony export */   getDefinitionSymbol: () => (/* reexport safe */ _go_definition__WEBPACK_IMPORTED_MODULE_0__.getDefinitionSymbol),
/* harmony export */   goDefinition: () => (/* reexport safe */ _go_definition__WEBPACK_IMPORTED_MODULE_0__.goDefinition)
/* harmony export */ });
/* harmony import */ var _go_definition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./go-definition */ "./src/features/go-definition/go-definition.ts");



/***/ }),

/***/ "./src/features/hover/hover.ts":
/*!*************************************!*\
  !*** ./src/features/hover/hover.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doHover: () => (/* binding */ doHover)
/* harmony export */ });
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../parser */ "./src/parser/index.ts");
/* harmony import */ var _utils_sassdoc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/sassdoc */ "./src/utils/sassdoc.ts");
/* harmony import */ var _utils_scss__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/scss */ "./src/utils/scss.ts");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/string */ "./src/utils/string.ts");
/* harmony import */ var _completion_completion_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../completion/completion-utils */ "./src/features/completion/completion-utils.ts");
/* harmony import */ var _sass_built_in_modules__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../sass-built-in-modules */ "./src/features/sass-built-in-modules.ts");
/* harmony import */ var _sassdoc_annotations__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../sassdoc-annotations */ "./src/features/sassdoc-annotations.ts");









function formatVariableMarkupContent(variable, sourceDocument) {
    let value = variable.value;
    if ((0,_utils_scss__WEBPACK_IMPORTED_MODULE_4__.isReferencingVariable)(variable)) {
        value = (0,_utils_scss__WEBPACK_IMPORTED_MODULE_4__.getBaseValueFrom)(variable, sourceDocument).value;
    }
    value = value || "";
    const result = {
        kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown,
        value: [
            "```scss",
            `${variable.name}: ${value};${value !== variable.value ? ` // via ${variable.value}` : ""}`,
            "```",
        ].join("\n"),
    };
    const sassdoc = (0,_utils_sassdoc__WEBPACK_IMPORTED_MODULE_3__.applySassDoc)(variable);
    if (sassdoc) {
        result.value += `\n____\n${sassdoc}`;
    }
    result.value += `\n____\nVariable declared in ${sourceDocument.fileName}`;
    return result;
}
function formatPlaceholderMarkupContent(placeholder, sourceDocument) {
    const result = {
        kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown,
        value: ["```scss", placeholder.name, "```"].join("\n"),
    };
    const sassdoc = (0,_utils_sassdoc__WEBPACK_IMPORTED_MODULE_3__.applySassDoc)(placeholder);
    if (sassdoc) {
        result.value += `\n____\n${sassdoc}`;
    }
    result.value += `\n____\nPlaceholder declared in ${sourceDocument.fileName}`;
    return result;
}
function doHover(document, offset) {
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return null;
    }
    const hoverNode = scssDocument.getNodeAt(offset);
    if (!hoverNode || !hoverNode.type) {
        return null;
    }
    let identifier = null;
    switch (hoverNode.type) {
        case _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.VariableName: {
            const parent = hoverNode.getParent();
            if (parent.type !== _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.VariableDeclaration &&
                parent.type !== _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.FunctionParameter) {
                identifier = {
                    name: hoverNode.getName(),
                    kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable,
                };
            }
            break;
        }
        case _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.Identifier: {
            let node;
            let type = null;
            const parent = hoverNode.getParent();
            if (parent.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.Function) {
                node = parent;
                type = vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function;
            }
            else if (parent.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.MixinReference) {
                node = parent;
                type = vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method;
            }
            if (type === null) {
                return null;
            }
            if (node) {
                identifier = {
                    name: node.getName(),
                    kind: type,
                };
            }
            break;
        }
        case _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.MixinReference: {
            identifier = {
                name: hoverNode.getName(),
                kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method,
            };
            break;
        }
        case _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.SelectorPlaceholder: {
            identifier = {
                name: hoverNode.getText(),
                kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class,
            };
            break;
        }
        case _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.Stylesheet: {
            // Hover information for SassDoc.
            // SassDoc is considered a comment, which doesn't have its own NodeType.
            // Tokenize the document and look for the closest non-space token to offset.
            // If it's a comment, look for SassDoc annotations under the cursor.
            const tokens = (0,_parser__WEBPACK_IMPORTED_MODULE_2__.tokenizer)(document.getText());
            let hoverToken = null;
            for (const token of tokens) {
                const [type, text, tokenOffset] = token;
                if (typeof tokenOffset !== "number") {
                    continue;
                }
                if (tokenOffset > offset) {
                    break;
                }
                hoverToken = [type, text, tokenOffset];
            }
            if (hoverToken && hoverToken[0] === "comment") {
                const commentText = hoverToken[1];
                const candidate = _sassdoc_annotations__WEBPACK_IMPORTED_MODULE_8__.sassDocAnnotations.find(({ annotation, aliases }) => {
                    return (commentText.includes(annotation) ||
                        aliases?.some((alias) => commentText.includes(alias)));
                });
                if (candidate) {
                    const annotationPosition = commentText.indexOf(candidate.annotation);
                    const annotationOffset = (hoverToken[2] || 0) + annotationPosition;
                    if (offset < annotationOffset) {
                        // If offset is under the result of the above, we're hovering right before the annotation.
                        return null;
                    }
                    const annotationEnd = annotationOffset + candidate.annotation.length - 1;
                    if (annotationEnd < offset) {
                        // If offset is over the result of the above, we're hovering past the token.
                        return null;
                    }
                    return {
                        contents: {
                            kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown,
                            value: [
                                candidate.annotation,
                                "____",
                                `[SassDoc reference](http://sassdoc.com/annotations/#${candidate.annotation.slice(1)})`,
                            ].join("\n"),
                        },
                    };
                }
            }
            break;
        }
        // No default
    }
    if (!identifier) {
        return null;
    }
    const [symbol, sourceDocument] = doSymbolHunting(document, identifier);
    // Content for Hover popup
    let contents;
    if (symbol && sourceDocument) {
        switch (identifier.kind) {
            case vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable: {
                contents = formatVariableMarkupContent(symbol, sourceDocument);
                break;
            }
            case vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method: {
                contents = (0,_completion_completion_utils__WEBPACK_IMPORTED_MODULE_6__.makeMixinDocumentation)(symbol, sourceDocument);
                break;
            }
            case vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function: {
                contents = (0,_completion_completion_utils__WEBPACK_IMPORTED_MODULE_6__.makeFunctionDocumentation)(symbol, sourceDocument);
                break;
            }
            case vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class: {
                contents = formatPlaceholderMarkupContent(symbol, sourceDocument);
                break;
            }
            // No default
        }
    }
    if (contents === undefined) {
        // Look to see if this is a built-in, but only if we have no other content.
        // Folks may use the same names as built-ins in their modules.
        for (const { reference, exports } of Object.values(_sass_built_in_modules__WEBPACK_IMPORTED_MODULE_7__.sassBuiltInModules)) {
            for (const [name, { description }] of Object.entries(exports)) {
                if (name === identifier.name) {
                    // Make sure we're not just hovering over a CSS function.
                    // Confirm we are looking at something that is the child of a module.
                    const isModule = hoverNode.getParent().type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.Module ||
                        hoverNode.getParent().getParent().type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.Module;
                    if (isModule) {
                        return {
                            contents: {
                                kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown,
                                value: [
                                    description,
                                    "",
                                    `[Sass reference](${reference}#${name})`,
                                ].join("\n"),
                            },
                        };
                    }
                }
            }
        }
        return null;
    }
    return {
        contents,
    };
}
function doSymbolHunting(document, identifier) {
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return [null, null];
    }
    // Don't follow forwards from the current document, since the current doc doesn't have access to its symbols
    for (const { link } of scssDocument.getLinks({ forwards: false })) {
        const scssDocument = storage.get(link.target);
        if (!scssDocument) {
            continue;
        }
        const [symbol, sourceDocument] = traverseTree(scssDocument, identifier);
        if (symbol) {
            return [symbol, sourceDocument];
        }
    }
    // Fall back to the old way of doing things if we can't find the symbol via `@use`
    for (const document of storage.values()) {
        switch (identifier.kind) {
            case vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable: {
                const variable = document.variables.get(identifier.name);
                if (variable) {
                    return [variable, document];
                }
                break;
            }
            case vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method: {
                const mixin = document.mixins.get(identifier.name);
                if (mixin) {
                    return [mixin, document];
                }
                break;
            }
            case vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function: {
                const func = document.functions.get(identifier.name);
                if (func) {
                    return [func, document];
                }
                break;
            }
            case vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class: {
                const placeholder = document.placeholders.get(identifier.name);
                if (placeholder) {
                    return [placeholder, document];
                }
            }
            // No default
        }
    }
    return [null, null];
}
function traverseTree(document, identifier, accumulatedPrefix = "") {
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return [null, null];
    }
    for (const symbol of scssDocument.getSymbols()) {
        if (symbol.kind === vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class) {
            // Placeholders are not namespaced the same way other symbols are
            if (symbol.name === identifier.name && symbol.kind === identifier.kind) {
                return [symbol, scssDocument];
            }
            continue;
        }
        const symbolName = `${accumulatedPrefix}${(0,_utils_string__WEBPACK_IMPORTED_MODULE_5__.asDollarlessVariable)(symbol.name)}`;
        const identifierName = (0,_utils_string__WEBPACK_IMPORTED_MODULE_5__.asDollarlessVariable)(identifier.name);
        if (symbolName === identifierName && symbol.kind === identifier.kind) {
            return [symbol, scssDocument];
        }
    }
    // Check to see if we have to go deeper
    // Don't follow uses, since we start with the document behind the first use, and symbols from further uses aren't available to us
    // Don't follow imports, since the whole point here is to use the new module system
    for (const child of scssDocument.getLinks({
        uses: false,
        imports: false,
    })) {
        if (!child.link.target || child.link.target === scssDocument.uri) {
            continue;
        }
        const childDocument = storage.get(child.link.target);
        if (!childDocument) {
            continue;
        }
        let prefix = accumulatedPrefix;
        if (child.prefix) {
            prefix += child.prefix;
        }
        const [symbol, document] = traverseTree(childDocument, identifier, prefix);
        if (symbol) {
            return [symbol, document];
        }
    }
    return [null, null];
}


/***/ }),

/***/ "./src/features/references/index.ts":
/*!******************************************!*\
  !*** ./src/features/references/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   provideReferences: () => (/* reexport safe */ _references__WEBPACK_IMPORTED_MODULE_0__.provideReferences)
/* harmony export */ });
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./references */ "./src/features/references/references.ts");



/***/ }),

/***/ "./src/features/references/references.ts":
/*!***********************************************!*\
  !*** ./src/features/references/references.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   provideReferences: () => (/* binding */ provideReferences)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../parser */ "./src/parser/index.ts");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/string */ "./src/utils/string.ts");
/* harmony import */ var _go_definition_go_definition__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../go-definition/go-definition */ "./src/features/go-definition/go-definition.ts");
/* harmony import */ var _sass_built_in_modules__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sass-built-in-modules */ "./src/features/sass-built-in-modules.ts");






async function provideReferences(document, offset, context) {
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return null;
    }
    const referenceNode = scssDocument.getNodeAt(offset);
    if (!referenceNode || !referenceNode.type) {
        return null;
    }
    const referenceIdentifier = getIdentifier(document, referenceNode, context);
    if (!referenceIdentifier) {
        return null;
    }
    let definitionSymbol = null;
    let definitionDocument = null;
    // Check to see if the current document is the one declaring the symbol before we go looking through the project
    for (const symbol of scssDocument.getSymbols()) {
        const symbolName = (0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.asDollarlessVariable)(symbol.name);
        const identifierName = (0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.asDollarlessVariable)(referenceIdentifier.name);
        if (symbolName === identifierName &&
            symbol.kind === referenceIdentifier.kind) {
            definitionSymbol = symbol;
            definitionDocument = scssDocument;
        }
    }
    if (!definitionSymbol || !definitionDocument) {
        [definitionSymbol, definitionDocument] = (0,_go_definition_go_definition__WEBPACK_IMPORTED_MODULE_4__.getDefinitionSymbol)(document, referenceIdentifier);
    }
    let builtin = null;
    if (!definitionSymbol || !definitionDocument) {
        // If we don't have a definition anywhere we might be dealing with a built-in.
        // Check to see if that's the case.
        for (const [module, { exports }] of Object.entries(_sass_built_in_modules__WEBPACK_IMPORTED_MODULE_5__.sassBuiltInModules)) {
            for (const [name] of Object.entries(exports)) {
                if (name === referenceIdentifier.name) {
                    builtin = [module.split(":")[1], name];
                }
            }
        }
        if (!builtin) {
            return null;
        }
    }
    if (!builtin && !definitionDocument && !definitionSymbol) {
        return null;
    }
    const references = [];
    for (const scssDocument of storage.values()) {
        const text = scssDocument.getText();
        const tokens = (0,_parser__WEBPACK_IMPORTED_MODULE_2__.tokenizer)(text);
        for (const [tokenType, text, offset] of tokens) {
            if (tokenType !== "word" && tokenType !== "brackets") {
                continue;
            }
            const dollarlessDefinition = (0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.stripTrailingComma)(
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            (0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.asDollarlessVariable)(builtin ? builtin[1] : definitionSymbol.name));
            const isMatch = text.includes(dollarlessDefinition);
            if (isMatch) {
                // For type 'word' offset should always be defined, but default to 0 just in case
                let adjustedOffset = offset || 0;
                // Tokens from maps include their trailing comma.
                // Function parameters include their parentheses. Strip them both.
                let word = (0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.stripParentheses)((0,_utils_string__WEBPACK_IMPORTED_MODULE_3__.stripTrailingComma)(text));
                if (tokenType === "brackets") {
                    // Only include the parameter we're interested in
                    [word] = word
                        .split(",")
                        .filter((w) => w.includes(dollarlessDefinition));
                }
                let adjustedText = word;
                // The tokenizer treats the namespace and variable name as a single word.
                // We need the offset for the actual variable, so find its position in the word.
                if (adjustedText !== referenceIdentifier.name) {
                    adjustedText = adjustedText.split(".")[1] || adjustedText;
                    adjustedOffset += text.indexOf(adjustedText);
                }
                // Make sure we use the correct one.
                // We do this in case the same identifier name is used in more than one namespace.
                // foo.$var is not the same as bar.$var.
                const definition = getDefinition(scssDocument, adjustedOffset, storage, context);
                if (!definition || !definitionDocument || !definitionSymbol) {
                    // If we don't have a definition anywhere we might be dealing with a built-in.
                    // If that's the case, add the reference even without the definition.
                    if (builtin) {
                        const [module, exports] = builtin;
                        // Only support modern modules with this feature as well.
                        if (text === `${module}.${exports}`) {
                            const reference = createReference(scssDocument, adjustedOffset, adjustedText);
                            references.push({
                                isBuiltIn: true,
                                name: adjustedText,
                                location: reference,
                                kind: null,
                            });
                        }
                    }
                    continue;
                }
                // If the files and position matches between the definition of the current token
                // and the definition we found to begin with, we have a reference to report.
                const isSameFile = await isSameRealPath(definition.uri, definitionDocument, storage);
                if (isSameFile &&
                    isSamePosition(definitionSymbol.position, definition.range.start)) {
                    const reference = createReference(scssDocument, adjustedOffset, adjustedText);
                    references.push({
                        isBuiltIn: false,
                        location: reference,
                        name: adjustedText,
                        kind: definitionSymbol.kind,
                    });
                }
            }
        }
    }
    return {
        references,
        definition: definitionSymbol && definitionDocument
            ? {
                symbol: definitionSymbol,
                document: definitionDocument,
            }
            : null,
    };
}
function createReference(scssDocument, adjustedOffset, adjustedText) {
    const start = scssDocument.positionAt(adjustedOffset);
    const end = scssDocument.positionAt(adjustedOffset + adjustedText.length);
    const range = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end);
    const location = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Location.create(scssDocument.uri, range);
    return location;
}
function getIdentifier(document, hoverNode, context) {
    let identifier = null;
    if (hoverNode.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.VariableName) {
        if (!context.includeDeclaration) {
            const parent = hoverNode.getParent();
            if (parent.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.VariableDeclaration) {
                return null;
            }
        }
        return {
            name: hoverNode.getName(),
            position: document.positionAt(hoverNode.offset),
            kind: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable,
        };
    }
    else if (hoverNode.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.Identifier) {
        if (hoverNode.getParent()?.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.ForwardVisibility) {
            // At this point the identifier can be both a function and a mixin.
            // To figure it out we need to look for the original definition as
            // both a function and a mixin.
            const candidateIdentifier = {
                name: hoverNode.getText(),
                position: document.positionAt(hoverNode.offset),
                kind: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method,
            };
            const [asMixin] = (0,_go_definition_go_definition__WEBPACK_IMPORTED_MODULE_4__.getDefinitionSymbol)(document, candidateIdentifier);
            if (asMixin) {
                return candidateIdentifier;
            }
            candidateIdentifier.kind = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function;
            const [asFunction] = (0,_go_definition_go_definition__WEBPACK_IMPORTED_MODULE_4__.getDefinitionSymbol)(document, candidateIdentifier);
            if (asFunction) {
                return candidateIdentifier;
            }
            return null;
        }
        let i = 0;
        let node = hoverNode;
        let isMixin = false;
        let isFunction = false;
        while (!isMixin && !isFunction && i !== 2) {
            node = node.getParent();
            isMixin = node.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.MixinReference;
            isFunction = node.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.Function;
            if (context.includeDeclaration) {
                isMixin = isMixin || node.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.MixinDeclaration;
                isFunction = isFunction || node.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.FunctionDeclaration;
            }
            i++;
        }
        if (node && (isMixin || isFunction)) {
            let kind = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method;
            if (isFunction) {
                kind = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function;
            }
            identifier = {
                name: node.getName(),
                position: document.positionAt(node.offset),
                kind,
            };
        }
    }
    else if (hoverNode.type === _parser__WEBPACK_IMPORTED_MODULE_2__.NodeType.SelectorPlaceholder) {
        identifier = {
            name: hoverNode.getText(),
            position: document.positionAt(hoverNode.offset),
            kind: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class,
        };
    }
    if (!identifier) {
        return null;
    }
    return identifier;
}
function getDefinition(scssDocument, offset, storage, context) {
    const definitionNode = scssDocument.getNodeAt(offset);
    if (!definitionNode || !definitionNode.type) {
        return null;
    }
    const definitionIdentifier = getIdentifier(scssDocument, definitionNode, context);
    if (!definitionIdentifier) {
        return null;
    }
    const [definitionSymbol, definitionDocument] = (0,_go_definition_go_definition__WEBPACK_IMPORTED_MODULE_4__.getDefinitionSymbol)(scssDocument, definitionIdentifier);
    if (!definitionSymbol || !definitionDocument) {
        return null;
    }
    const definitionSymbolLocation = vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Location.create(definitionDocument.uri, {
        start: definitionSymbol.position,
        end: {
            line: definitionSymbol.position.line,
            character: definitionSymbol.position.character + definitionSymbol.name.length,
        },
    });
    return definitionSymbolLocation;
}
/**
 * In certain workpaces, like monorepos, you may have a local file symlinked
 * and referenced via node_modules. In those cases we want to compare the
 * original non-symlinked files on disk. If the filename is the same, try
 * to look up the _real_ path and compare that.
 *
 * @param link
 * @param referenced
 * @returns
 */
async function isSameRealPath(link, referenced, storage) {
    if (!link) {
        return false;
    }
    // Checking the file system is expensive, so do the optimistic thing first.
    // If the URIs match, we're good.
    if (link === referenced.uri) {
        return true;
    }
    if (link.includes(referenced.fileName)) {
        try {
            const linkedDocument = storage.get(link);
            if (!linkedDocument) {
                return false;
            }
            const realLinkFsPath = await linkedDocument.getRealPath();
            if (!realLinkFsPath) {
                return false;
            }
            const realReferencedPath = await referenced.getRealPath();
            if (!realReferencedPath) {
                return false;
            }
            if (realLinkFsPath === realReferencedPath) {
                return true;
            }
        }
        catch {
            // Guess it really doesn't exist
        }
    }
    return false;
}
function isSamePosition(a, b) {
    return a.character === b.character && a.line === b.line;
}


/***/ }),

/***/ "./src/features/rename/index.ts":
/*!**************************************!*\
  !*** ./src/features/rename/index.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doRename: () => (/* reexport safe */ _rename__WEBPACK_IMPORTED_MODULE_0__.doRename),
/* harmony export */   prepareRename: () => (/* reexport safe */ _rename__WEBPACK_IMPORTED_MODULE_0__.prepareRename)
/* harmony export */ });
/* harmony import */ var _rename__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rename */ "./src/features/rename/rename.ts");



/***/ }),

/***/ "./src/features/rename/rename.ts":
/*!***************************************!*\
  !*** ./src/features/rename/rename.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doRename: () => (/* binding */ doRename),
/* harmony export */   prepareRename: () => (/* binding */ prepareRename)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _completion_completion_context__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../completion/completion-context */ "./src/features/completion/completion-context.ts");
/* harmony import */ var _references__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../references */ "./src/features/references/index.ts");




const defaultBehavior = { defaultBehavior: true };
async function prepareRename(document, offset) {
    const { settings, storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return defaultBehavior;
    }
    const context = (0,_completion_completion_context__WEBPACK_IMPORTED_MODULE_2__.createCompletionContext)(scssDocument, scssDocument.getText(), offset, settings);
    const referenceNode = scssDocument.getNodeAt(offset);
    if (!referenceNode || !referenceNode.type) {
        return defaultBehavior;
    }
    const range = scssDocument.getNodeRange(referenceNode);
    const references = await (0,_references__WEBPACK_IMPORTED_MODULE_3__.provideReferences)(document, offset, {
        includeDeclaration: true,
    });
    if (!references) {
        if (context.import) {
            // No renaming prefixes since we can't find all the symbols.
            return null;
        }
        return defaultBehavior;
    }
    // Keep existing behavior for built-ins,
    // which is to rename each usage in the current document.
    if (references.references[0].isBuiltIn) {
        return defaultBehavior;
    }
    // Exclude the $ of the variable and % of the placeholder,
    // since they're required.
    if (references.references[0].kind === vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable ||
        references.references[0].kind === vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class) {
        range.start.character += 1;
    }
    // Exclude any forward-prefixes from the renaming.
    if (references.definition) {
        const renamingName = referenceNode.getText();
        const definitionName = references.definition.symbol.name;
        if (renamingName !== definitionName) {
            const diff = renamingName.length - definitionName.length;
            range.start.character += diff;
        }
    }
    return {
        range: range,
        placeholder: scssDocument.getText(range),
    };
}
async function doRename(document, offset, newName) {
    const references = await (0,_references__WEBPACK_IMPORTED_MODULE_3__.provideReferences)(document, offset, {
        includeDeclaration: true,
    });
    if (!references) {
        return null;
    }
    const edits = {
        changes: {},
    };
    for (const { location, kind, name } of references.references) {
        /* eslint-disable @typescript-eslint/no-non-null-assertion */
        if (!edits.changes[location.uri]) {
            edits.changes[location.uri] = [];
        }
        /* eslint-enable @typescript-eslint/no-non-null-assertion */
        const range = location.range;
        // Exclude the $ of the variable and % of the placeholder,
        // since they're required.
        if (kind === vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable || kind === vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class) {
            range.start.character = range.start.character + 1;
        }
        // Exclude any forward-prefixes from the renaming.
        if (references.definition) {
            const definitionName = references.definition.symbol.name;
            if (name !== definitionName) {
                const diff = name.length - definitionName.length;
                range.start.character += diff;
            }
        }
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        edits.changes[location.uri].push(vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, newName));
    }
    return edits;
}


/***/ }),

/***/ "./src/features/sass-built-in-modules.ts":
/*!***********************************************!*\
  !*** ./src/features/sass-built-in-modules.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sassBuiltInModuleNames: () => (/* binding */ sassBuiltInModuleNames),
/* harmony export */   sassBuiltInModules: () => (/* binding */ sassBuiltInModules)
/* harmony export */ });
/**
 * Copyright (c) 2006-2018 Hampton Catlin, Natalie Weizenbaum, Chris Eppstein, and Jina Anne
 * 2022 William Killerud
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
const sassBuiltInModules = Object.freeze({
    "sass:color": {
        summary: "Generate new colors based on existing ones",
        reference: "https://sass-lang.com/documentation/modules/color",
        exports: {
            adjust: {
                description: "Increases or decreases one or more properties of `$color` by fixed amounts. All optional arguments must be numbers.\n\nIt's an error to specify an RGB property at the same time as an HSL property, or either of those at the same time as an HWB property.",
                signature: "($color, $red: null, $green: null, $blue: null, $hue: null, $saturation: null, $lightness: null, $whiteness: null, $blackness: null, $alpha: null)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            alpha: {
                description: "Returns the alpha channel of `$color` as a number between **0** and **1**.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
            },
            blackness: {
                description: "Returns the HWB blackness of `$color` as a number between **0%** and **100%**.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
            },
            blue: {
                description: "Returns the blue channel of `$color` as a number between **0** and **255**.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
            },
            change: {
                description: "Sets one or more properties of `$color` to new values.\n\nIt's an error to specify an RGB property at the same time as an HSL property, or either of those at the same time as an HWB property.",
                signature: "($color, $red: null, $green: null, $blue: null, $hue: null, $saturation: null, $lightness: null, $whiteness: null, $blackness: null, $alpha: null)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            complement: {
                description: "Returns the RGB complement of $color",
            },
            grayscale: {
                description: "Returns a gray color with the same lightness as `$color`.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            green: {
                description: "Returns the green channel of `$color` as a number between **0** and **255**.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
            },
            hue: {
                description: "Returns the hue of `$color` as a number between **0deg** and **360deg**.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                return: "number",
            },
            hwb: {
                description: "Returns a color with the given hue, whiteness, and blackness and the given alpha channel.",
                signature: "($hue, $whiteness, $blackness, $alpha: 1)",
                returns: "color",
            },
            "ie-hex-str": {
                description: "Returns a string that represents `$color` in the #AARRGGBB format expected by -ms-filter.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "string",
            },
            invert: {
                description: "Returns the inverse of `$color`.",
                signature: "($color, $weight: 100)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            lightness: {
                description: "Returns the HSL lightness of `$color` as a number between **0%** and **100%**.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
            },
            mix: {
                description: "Returns a color that's a mixture of `$color1` and `$color2`.",
                signature: "($color1, $color2, $weight: 50%)",
                parameterSnippet: "${1:color}, ${2:color}",
                returns: "color",
            },
            red: {
                description: "Returns the red channel of `$color` as a number between **0** and **255**.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
            },
            saturation: {
                description: "Returns the HSL saturation of `$color` as a number between **0%** and **100%**.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
            },
            scale: {
                description: "Fluidly scales one or more properties of `$color`. Each keyword argument must be a number between **-100%** and **100%**.\n\nIt's an error to specify an RGB property at the same time as an HSL property, or either of those at the same time as an HWB property.",
                signature: "($color, $red: null, $green: null, $blue: null, $saturation: null, $lightness: null, $whiteness: null, $blackness: null, $alpha: null)",
                parameterSnippet: "${1:color}",
                returns: "color",
            },
            whiteness: {
                description: "Returns the HWB whiteness of `$color` as a number between **0%** and **100%**.",
                signature: "($color)",
                parameterSnippet: "${1:color}",
                returns: "number",
            },
        },
    },
    "sass:list": {
        summary: "Modifiy or read lists",
        reference: "https://sass-lang.com/documentation/modules/list",
        exports: {
            append: {
                description: "Returns a copy of `$list` with `$val` added to the end.",
                signature: "($list, $val, $separator: auto)",
                parameterSnippet: "${1:list}, ${2:value}",
                returns: "list",
            },
            index: {
                description: "Returns the index of `$value` in `$list`.\n\nNote that the index **1** indicates the first element of the list in Sass.",
                signature: "($list, $value)",
                parameterSnippet: "${1:list}, ${2:value}",
                returns: "number",
            },
            "is-bracketed": {
                description: "Returns whether `$list` has square brackets (`[]`).",
                signature: "($list)",
                parameterSnippet: "${1:list}",
                returns: "boolean",
            },
            join: {
                description: "Returns a new list containing the elements of `$list1` followed by the elements of `$list2`.",
                signature: "($list1, $list2, $separator: auto, $bracketed: auto)",
                parameterSnippet: "${1:list}, ${2:list}",
                returns: "list",
            },
            length: {
                description: "Returns the number of elements in `$list`. Can also return the number of pairs in a map.",
                signature: "($list, $value)",
                parameterSnippet: "${1:list}, ${2:value}",
                returns: "number",
            },
            separator: {
                description: "Returns the name of the separator used by `$list`, either **space**, **comma**, or **slash**. Returns **space** if `$list` doesn't have a separator.",
                signature: "($list)",
                parameterSnippet: "${1:list}",
                returns: "string",
            },
            nth: {
                description: "Returns the element of `$list` at index `$n`.\n\nIf `$n` is negative, it counts from the end of `$list`. Throws an error if there is no element at index `$n`.\n\nNote that the index **1** indicates the first element of the list in Sass.",
                signature: "($list, $n)",
                parameterSnippet: "${1:list}, ${2:number}",
            },
            "set-nth": {
                description: "Returns a copy of `$list` with the element at index `$n` replaced with `$value`.\n\nIf `$n` is negative, it counts from the end of `$list`. Throws an error if there is no existing element at index `$n`.\n\nNote that the index **1** indicates the first element of the list in Sass.",
                signature: "($list, $n, $value)",
                parameterSnippet: "${1:list}, ${2:number}, ${3:value}",
                returns: "list",
            },
            slash: {
                description: "Returns a slash-separated list that contains `$elements`.",
                signature: "($elements...)",
                parameterSnippet: "${1:elements}",
                returns: "list",
            },
            zip: {
                description: "Combines every list in $lists into a single list of sub-lists.\n\nEach element in the returned list contains all the elements at that position in $lists. The returned list is as long as the shortest list in $lists.\n\nThe returned list is always comma-separated and the sub-lists are always space-separated.",
                signature: "($lists...)",
                parameterSnippet: "${1:lists}",
                returns: "list",
            },
        },
    },
    "sass:map": {
        summary: "Modifiy or read maps",
        reference: "https://sass-lang.com/documentation/modules/map",
        exports: {
            "deep-merge": {
                description: "Identical to map.merge(), except that nested map values are also recursively merged.",
                signature: "($map1, $map2)",
                parameterSnippet: "${1:map}, ${2:map}",
                returns: "map",
            },
            "deep-remove": {
                description: "Returns a map without the right-most `$key`. Any keys to the left are treated as a path through the nested map, from left to right.",
                signature: "($map, $key, $keys...)",
                parameterSnippet: "${1:map}, ${2:key}",
                returns: "map",
            },
            get: {
                description: "Returns the value in `$map` associated with the right-most `$key`. Any keys to the left are treated as a path through the nested map, from left to right. Returns `null` if there is no `$key` in `$map`.",
                signature: "($map, $key, $keys...)",
                parameterSnippet: "${1:map}, ${2:key}",
            },
            "has-key": {
                description: "Returns true if `$map` has a value with the right-most `$key`. Any keys to the left are treated as a path through the nested map, from left to right.",
                signature: "($map, $key, $keys...)",
                parameterSnippet: "${1:map}, ${2:key}",
                returns: "boolean",
            },
            keys: {
                description: "Returns a comma-separated list of all the keys in `$map`.",
                signature: "($map)",
                parameterSnippet: "${1:map}",
                returns: "list",
            },
            merge: {
                description: "Merges the two maps at either side of the `$args` list. Between the two maps is an optional path to a nested map in `$map1` which will be merged, instead of the root map. The value from `$map2` will be used if both maps have the same key.",
                signature: "($map1, $args...)",
                parameterSnippet: "${1:map}, ${2:map}",
                returns: "map",
            },
            remove: {
                description: "Removes values in `$map` associated with any of the `$keys`.",
                signature: "($map, $keys...)",
                parameterSnippet: "${1:map}, ${2:key}",
            },
            set: {
                description: "Sets `$value` in `$map` at the location of the right-most `$key`. Any keys to the left are treated as a path through the nested map, from left to right. Creates nested maps at `$keys` if none exists.",
                signature: "($map, $keys..., $key, $value)",
                parameterSnippet: "${1:map}, ${2:key}, ${3:value}",
            },
            values: {
                description: "Returns a comma-separated list of all the values in `$map`.",
                signature: "($map)",
                parameterSnippet: "${1:map}",
                returns: "list",
            },
        },
    },
    "sass:math": {
        summary: "Work on numbers with functions like `calc` and `ceil`",
        reference: "https://sass-lang.com/documentation/modules/math",
        exports: {
            $e: {
                description: "The value of the mathematical constant **e**.",
            },
            $pi: {
                description: "The value of the mathematical constant **π**.",
            },
            ceil: {
                description: "Rounds up to the nearest whole number.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            clamp: {
                description: "Restricts $number to the range between `$min` and `$max`. If `$number` is less than `$min` this returns `$min`, and if it's greater than `$max` this returns `$max`.",
                signature: "($min, $number, $max)",
                parameterSnippet: "${1:min}, ${2:number}, ${3:max}",
                returns: "number",
            },
            floor: {
                description: "Rounds down to the nearest whole number.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            max: {
                description: "Returns the highest of two or more numbers.",
                signature: "($number...)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            min: {
                description: "Returns the lowest of two or more numbers.",
                signature: "($number...)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            round: {
                description: "Rounds to the nearest whole number.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            abs: {
                description: "Returns the absolute value of `$number`.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            hypot: {
                description: "Returns the length of the n-dimensional vector that has components equal to each $number. For example, for three numbers a, b, and c, this returns the square root of a² + b² + c².",
                signature: "($number...)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            log: {
                description: "Returns the logarithm of `$number` with respect to `$base`. If `$base` is `null`, the natural log is calculated.",
                signature: "($number, $base: null)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            pow: {
                description: "Raises `$base` to the power of `$exponent`. Both values must be unitless.",
                signature: "($base, $exponent)",
                parameterSnippet: "${1:base}, ${2:exponent}",
                returns: "number",
            },
            sqrt: {
                description: "Returns the square root of `$number`. `$number` must be unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            cos: {
                description: "Returns the cosine of `$number`. `$number` must be an angle or unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            sin: {
                description: "Returns the sine of `$number`. `$number` must be an angle or unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            tan: {
                description: "Returns the tangent of `$number`. `$number` must be an angle or unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            acos: {
                description: "Returns the arccosine of `$number` in deg. `$number` must be unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            asin: {
                description: "Returns the arcsine of `$number` in deg. `$number` must be unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            atan: {
                description: "Returns the arctangent of `$number` in deg. `$number` must be unitless.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            atan2: {
                description: "Returns the 2-argument arctangent of `$y` and `$x` in deg. `$y` and `$x` must have compatible units or be unitless.",
                signature: "($y, $x)",
                parameterSnippet: "${1:y}, ${2:x}",
                returns: "number",
            },
            compatible: {
                description: "Returns whether `$number1` and `$number2` have compatible units.",
                signature: "($number1, $number2)",
                parameterSnippet: "${1:number1}, ${2:number2}",
                returns: "boolean",
            },
            "is-unitless": {
                description: "Returns true if `$number` has no units.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "boolean",
            },
            unit: {
                description: "Returns a string representation of `$number`'s units.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "string",
            },
            div: {
                description: "Divides `$number1` by `$number2`.",
                signature: "($number1, $number2)",
                parameterSnippet: "${1:number1}, ${2:number2}",
                returns: "number",
            },
            percentage: {
                description: "Converts a unitless `$number` to a percentage.",
                signature: "($number)",
                parameterSnippet: "${1:number}",
                returns: "number",
            },
            random: {
                description: "Returns a random decimal number between **0** and **1**, or a random whole number between **1** and `$limit`.",
                signature: "($limit: null)",
                parameterSnippet: "${1:limit}",
                returns: "number",
            },
        },
    },
    "sass:meta": {
        summary: "Access to the inner workings of Sass",
        reference: "https://sass-lang.com/documentation/modules/meta",
        exports: {
            "load-css": {
                signature: "($url, $with: null)",
                parameterSnippet: "${1:url}",
                description: "Load the module at $url and include its CSS as if it were written as the contents of this mixin. The optional $with parameter configures the modules. It must be a map from variable names (without $) to the values of those variables.",
            },
            "calc-args": {
                signature: "($calc)",
                parameterSnippet: "${1:calc}",
                description: "Returns the arguments for the given calculation.",
                returns: "list",
            },
            "calc-name": {
                signature: "($calc)",
                parameterSnippet: "${1:calc}",
                description: "Returns the name of the given calculation.",
                returns: "string",
            },
            call: {
                signature: "($function, $args...)",
                parameterSnippet: "${1:function}, ${2:args}",
                description: "Invokes $function with $args and returns the result.\n\nThe $function should be a function returned by meta.get-function().",
            },
            "content-exists": {
                signature: "()",
                description: "Returns whether the current mixin was passed a @content block.\n\nThrows if called outside of a mixin.",
                returns: "boolean",
            },
            "feature-exists": {
                signature: "($feature)",
                parameterSnippet: "${1:feature}",
                description: "Returns whether the current Sass implementation supports the given feature.",
                returns: "boolean",
            },
            "function-exists": {
                signature: "($name)",
                parameterSnippet: "${1:name}",
                description: "Returns whether a function named $name is defined, either as a built-in function or a user-defined function.",
                returns: "boolean",
            },
            "get-function": {
                signature: "($name, $css: false, $module: null)",
                parameterSnippet: "${1:name}",
                description: "Returns the function named $name.\n\nIf $module is null, this returns the function named $name without a namespace. Otherwise, $module must be a string matching the namespace of a @use rule in the current file.\n\nBy default, this throws an error if $name doesn't refer to a Sass function. However, if $css is true, it instead returns a plain CSS function.\n\nThe returned function can be called using meta.call().",
                returns: "function",
            },
            "global-variable-exists": {
                signature: "($name, $module: null)",
                parameterSnippet: "${1:name}",
                description: "Returns whether a global variable named $name (without the $) exists.\n\nIf $module is null, this returns whether a variable named $name without a namespace exists. Otherwise, $module must be a string matching the namespace of a @use rule in the current file, in which case this returns whether that module has a variable named $name.",
                returns: "boolean",
            },
            inspect: {
                signature: "($value)",
                parameterSnippet: "${1:value}",
                description: "Returns a string representation of $value.\n\nThis function is intended for debugging.",
            },
            keywords: {
                signature: "($args)",
                parameterSnippet: "${1:args}",
                description: "Returns the keywords passed to a mixin or function that takes arbitrary arguments. The $args argument must be an argument list.\n\nThe keywords are returned as a map from argument names as unquoted strings (not including $) to the values of those arguments.",
                returns: "map",
            },
            "mixin-exists": {
                signature: "($name, $module: null)",
                parameterSnippet: "${1:name}",
                description: "Returns whether a mixin named $name exists.\n\nIf $module is null, this returns whether a mixin named $name without a namespace exists. Otherwise, $module must be a string matching the namespace of a @use rule in the current file, in which case this returns whether that module has a mixin named $name.",
                returns: "boolean",
            },
            "module-functions": {
                signature: "($module)",
                parameterSnippet: "${1:module}",
                description: "Returns all the functions defined in a module, as a map from function names to function values.\n\nThe $module parameter must be a string matching the namespace of a @use rule in the current file.",
                returns: "map",
            },
            "module-variables": {
                signature: "($module)",
                parameterSnippet: "${1:module}",
                description: "Returns all the variables defined in a module, as a map from variable names (without $) to the values of those variables.\n\nThe $module parameter must be a string matching the namespace of a @use rule in the current file.",
                returns: "map",
            },
            "type-of": {
                signature: "($value)",
                parameterSnippet: "${1:value}",
                description: "Returns the type of $value.",
                returns: "string",
            },
            "variable-exists": {
                signature: "($name)",
                parameterSnippet: "${1:name}",
                description: "Returns whether a variable named $name (without the $) exists in the current scope.",
                returns: "string",
            },
        },
    },
    "sass:selector": {
        summary: "Access to the Sass selector engine",
        reference: "https://sass-lang.com/documentation/modules/selector",
        exports: {
            "is-superselector": {
                description: "Returns whether the selector `$super` matches all the elements that the selector `$sub` matches.",
                signature: "($super, $sub)",
                parameterSnippet: "${1:super}, ${2:sub}",
                returns: "boolean",
            },
            append: {
                description: "Combines `$selectors` without descendant combinators — that is, without whitespace between them.\n\nIf any selector in `$selectors` is a selector list, each complex selector is combined separately.\n\nThe `$selectors` may contain placeholder selectors, but not parent selectors.",
                signature: "($selectors...)",
                parameterSnippet: "${1:selectors}",
                returns: "selector",
            },
            extend: {
                description: "Extends `$selector` as with the `@extend` rule.",
                signature: "($selector, $extendee, $extender)",
                parameterSnippet: "${1:selector}, ${2:extendee}, ${3:extender}",
                returns: "selector",
            },
            nest: {
                description: "Combines `$selectors` as though they were nested within one another in the stylesheet.",
                signature: "($selectors...)",
                parameterSnippet: "${1:selectors}",
                returns: "selector",
            },
            parse: {
                description: "Returns `$selector` in the selector value format.",
                signature: "($selector)",
                parameterSnippet: "${1:selector}",
                returns: "selector",
            },
            replace: {
                description: "Returns a copy of `$selector` with all instances of $original replaced by `$replacement`. Uses the same intelligent unification as `@extend`.",
                signature: "($selector, $original, $replacement)",
                parameterSnippet: "${1:selector}, ${2:original}, ${3:replacement}",
                returns: "selector",
            },
            unify: {
                description: "Returns a selector that matches only elements matched by both `$selector1` and `$selector2`, or `null` if there is no overlap.",
                signature: "($selector1, $selector2)",
                parameterSnippet: "${1:selector1}, ${2:selector2}",
                returns: "selector",
            },
            "simple-selectors": {
                description: "Returns a list of simple selectors in `$selector`.\n\n`$selector` must be a single string that contains a compound selector. This means it may not contain combinators (including spaces) or commas.\n\nThe returned list is comma-separated, and the simple selectors are unquoted strings.",
                signature: "($selector)",
                parameterSnippet: "${1:selector}",
                returns: "list",
            },
        },
    },
    "sass:string": {
        summary: "Combine, split and search strings",
        reference: "https://sass-lang.com/documentation/modules/string",
        exports: {
            quote: {
                description: "Returns `$string` as a quoted string.",
                signature: "($string)",
                parameterSnippet: "${1:string}",
                returns: "string",
            },
            index: {
                description: "Returns the first index of `$substring` in `$string`, or `null` if the substring is not found.\n\nNote that the index **1** indicates the first character of `$string` in Sass.",
                signature: "($string, $substring)",
                parameterSnippet: "${1:string}, ${2:substring}",
                returns: "number",
            },
            insert: {
                description: "Returns a copy of `$string` with `$insert` inserted at `$index`.\n\nNote that the index **1** indicates the first character of `$string` in Sass.",
                signature: "($string, $insert, $index)",
                parameterSnippet: "${1:string}, ${2:insert}, ${3:index}",
                returns: "string",
            },
            length: {
                description: "Returns the number of characters in `$string`.",
                signature: "($string)",
                parameterSnippet: "${1:string}",
                returns: "number",
            },
            slice: {
                description: "Returns the slice of `$string` starting at index `$start-at` and ending at index `$end-at` (both inclusive).\n\nNote that the index **1** indicates the first character of `$string` in Sass.",
                signature: "($string, $start-at, $end-at: -1)",
                parameterSnippet: "${1:string}, ${2:start-at}",
                returns: "string",
            },
            split: {
                description: "Returns a bracketed, comma-separated list of substrings of `$string` that are separated by `$separator`. The `$separator`s aren't included in these substrings.\n\nIf `$limit` is a number 1 or higher, this splits on at most that many `$separator`s (and so returns at most `$limit` + 1 strings). The last substring contains the rest of the string, including any remaining `$separator`s.",
                signature: "($string, $separator, $limit: null)",
                parameterSnippet: "${1:string}, ${2:separator}",
                returns: "list",
            },
            "to-upper-case": {
                description: "Returns a copy of `$string` with the ASCII letters converted to upper case.",
                signature: "($string)",
                parameterSnippet: "${1:string}",
                returns: "string",
            },
            "to-lower-case": {
                description: "Returns a copy of `$string` with the ASCII letters converted to lower case.",
                signature: "($string)",
                parameterSnippet: "${1:string}",
                returns: "string",
            },
            "unique-id": {
                description: "Returns a randomly-generated unquoted string that's guaranteed to be a valid CSS identifier and to be unique within the current Sass compilation.",
                signature: "()",
                returns: "string",
            },
            unquote: {
                description: "Returns `$string` as an unquoted string. This can produce strings that are _not_ valid CSS, so use with caution.",
                signature: "($string)",
                parameterSnippet: "${1:string}",
                returns: "string",
            },
        },
    },
});
const sassBuiltInModuleNames = new Set(Object.keys(sassBuiltInModules));


/***/ }),

/***/ "./src/features/sassdoc-annotations.ts":
/*!*********************************************!*\
  !*** ./src/features/sassdoc-annotations.ts ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   sassDocAnnotations: () => (/* binding */ sassDocAnnotations)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");

const sassDocAnnotations = [
    {
        annotation: "@access",
        insertText: "@access ${1|public,private|}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@alias",
        insertText: "@alias ${1:of-other-item}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@author",
        insertText: "@author ${1:name}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@content",
        insertText: "@content ${1:description}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@deprecated",
    },
    {
        annotation: "@example",
    },
    {
        annotation: "@group",
        insertText: "@group ${1:name}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@ignore",
        insertText: "@ignore ${1:message}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@link",
        insertText: "@link ${1:url}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@name",
        insertText: "@name ${1:custom-name}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@output",
        insertText: "@output ${1:description}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@param",
        insertText: "@param ",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.PlainText,
        aliases: ["@arg", "@argument", "@parameter"],
    },
    {
        annotation: "@property",
        aliases: ["@prop"],
        insertText: "@property ",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.PlainText,
    },
    {
        annotation: "@require",
        insertText: "@require ",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.PlainText,
    },
    {
        annotation: "@return",
        insertText: "@return ${1:description}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@see",
        insertText: "@see ${1:other-item}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@since",
        insertText: "@since ${1:version} ${2:description}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@throw",
        insertText: "@throw ${1:description}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@todo",
        insertText: "@todo ${1:description}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
    {
        annotation: "@type",
        insertText: "@type ${1:type}",
        insertTextFormat: vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat.Snippet,
    },
];


/***/ }),

/***/ "./src/features/signature-help/facts.ts":
/*!**********************************************!*\
  !*** ./src/features/signature-help/facts.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   builtInFunctions: () => (/* binding */ builtInFunctions),
/* harmony export */   colorProposals: () => (/* binding */ colorProposals),
/* harmony export */   hasInFacts: () => (/* binding */ hasInFacts),
/* harmony export */   selectorFunctions: () => (/* binding */ selectorFunctions)
/* harmony export */ });
const colorProposals = [
    "red",
    "green",
    "blue",
    "mix",
    "hue",
    "saturation",
    "lightness",
    "adjust-hue",
    "lighten",
    "darken",
    "saturate",
    "desaturate",
    "grayscale",
    "complement",
    "invert",
    "alpha",
    "opacity",
    "rgba",
    "opacify",
    "fade-in",
    "transparentize",
    "adjust-color",
    "scale-color",
    "change-color",
    "ie-hex-str",
];
const selectorFunctions = [
    "selector-nest",
    "selector-append",
    "selector-extend",
    "selector-replace",
    "selector-unify",
    "is-superselector",
    "simple-selectors",
    "selector-parse",
];
const builtInFunctions = [
    "unquote",
    "quote",
    "str-length",
    "str-insert",
    "str-index",
    "str-slice",
    "to-upper-case",
    "to-lower-case",
    "percentage",
    "round",
    "ceil",
    "floor",
    "abs",
    "min",
    "max",
    "random",
    "length",
    "nth",
    "set-nth",
    "join",
    "append",
    "zip",
    "index",
    "list-separator",
    "map-get",
    "map-merge",
    "map-remove",
    "map-keys",
    "map-values",
    "map-has-key",
    "keywords",
    "feature-exists",
    "variable-exists",
    "global-variable-exists",
    "function-exists",
    "mixin-exists",
    "inspect",
    "type-of",
    "unit",
    "unitless",
    "comparable",
    "call",
];
function hasInFacts(word) {
    return (colorProposals.includes(word) ||
        selectorFunctions.includes(word) ||
        builtInFunctions.includes(word));
}


/***/ }),

/***/ "./src/features/signature-help/signature-help.ts":
/*!*******************************************************!*\
  !*** ./src/features/signature-help/signature-help.ts ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   doSignatureHelp: () => (/* binding */ doSignatureHelp)
/* harmony export */ });
/* harmony import */ var scss_symbols_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! scss-symbols-parser */ "../../node_modules/scss-symbols-parser/out/index.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _utils_sassdoc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../utils/sassdoc */ "./src/utils/sassdoc.ts");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/string */ "./src/utils/string.ts");
/* harmony import */ var _sass_built_in_modules__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../sass-built-in-modules */ "./src/features/sass-built-in-modules.ts");
/* harmony import */ var _facts__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./facts */ "./src/features/signature-help/facts.ts");







// RegExp's
const reNestedParenthesis = /\(([\w-]+)\(/;
const reSymbolName = /[\w-]+$/;
/**
 * Returns name of last Mixin or Function in the string.
 */
function getSymbolName(text) {
    const tokens = (0,scss_symbols_parser__WEBPACK_IMPORTED_MODULE_0__.tokenizer)(text);
    let pos = tokens.length;
    let token;
    let parenthesisCount = 0;
    while (pos !== 0) {
        pos--;
        token = tokens[pos];
        // Return first `word` token before `(` because it's Symbols name
        if (token[0] === "(") {
            // Skip nested parenthesis
            parenthesisCount--;
            if (parenthesisCount > -1) {
                continue;
            }
            // String can be contains built-in Functions such as `rgba` or `map`
            while (pos !== 0) {
                pos--;
                token = tokens[pos];
                if (token[0] === "word" && !(0,_facts__WEBPACK_IMPORTED_MODULE_6__.hasInFacts)(token[1])) {
                    const match = reSymbolName.exec(token[1]);
                    return match ? match[0] : null;
                }
            }
        }
        else if (token[0] === ")") {
            parenthesisCount++;
        }
        else if (token[0] === "brackets" && reNestedParenthesis.test(token[1])) {
            // Tokens for nested string with correct positions
            const nestedTokens = (0,scss_symbols_parser__WEBPACK_IMPORTED_MODULE_0__.tokenizer)(token[1]).map((x) => {
                if (x.length === 3) {
                    x[2] += token[2];
                }
                return x;
            });
            // Replace the current token on a new collection
            tokens.splice(pos, 1, ...nestedTokens);
            // Revert position back on length of nested tokens
            pos += nestedTokens.length;
        }
    }
    return null;
}
/**
 * Returns Mixin name and its parameters from line.
 */
function parseArgumentsAtLine(text) {
    const indexOfOpenCurly = text.indexOf("{");
    if (indexOfOpenCurly !== -1) {
        text = text.slice(indexOfOpenCurly + 1, text.length);
    }
    text = text.trim();
    // Try to find name of Mixin or Function
    const name = getSymbolName(text);
    let paramsString = "";
    if (name) {
        const start = text.lastIndexOf(`${name}(`) + name.length;
        paramsString = text.slice(start, text.length);
    }
    let parameters = 0;
    if (paramsString.slice(1).length > 0) {
        const tokens = (0,scss_symbols_parser__WEBPACK_IMPORTED_MODULE_0__.tokenizer)(paramsString);
        if (tokens.length === 1 && tokens[0][0] === "brackets") {
            return {
                name: null,
                parameters,
            };
        }
        let pos = 0;
        let token;
        let parenthesis = -1;
        while (pos < tokens.length) {
            token = tokens[pos];
            if (token[1] === "," || token[1] === ";") {
                parameters++;
            }
            else if (token[0] === "word" &&
                token[1] !== "," &&
                token[1].includes(",") &&
                parenthesis === 0) {
                const words = token[1].split(/(,)/);
                let index = pos;
                words.forEach((word) => {
                    if (word === "") {
                        return;
                    }
                    tokens.splice(index, 1, word === "," ? [",", ",", 0] : ["word", word, 0]);
                    index++;
                });
            }
            else if (token[0] === "(") {
                parenthesis++;
            }
            else if (token[0] === ")") {
                parenthesis--;
            }
            pos++;
        }
    }
    return {
        name: name ? name : null,
        parameters,
    };
}
async function doSignatureHelp(document, offset) {
    const ret = {
        activeSignature: 0,
        activeParameter: 0,
        signatures: [],
    };
    // Skip suggestions if the text not include `(` or include `);`
    const textBeforeWord = (0,_utils_string__WEBPACK_IMPORTED_MODULE_4__.getTextBeforePosition)(document.getText(), offset);
    if (textBeforeWord.endsWith(");") || !textBeforeWord.includes("(")) {
        return ret;
    }
    const entry = parseArgumentsAtLine(textBeforeWord);
    if (!entry.name) {
        return ret;
    }
    ret.activeParameter = Math.max(0, entry.parameters);
    const symbolType = textBeforeWord.includes("@include") ? "mixin" : "function";
    const suggestions = doSymbolHunting(document, entry, symbolType);
    if (suggestions.length === 0) {
        // Look for built-ins
        for (const { reference, exports } of Object.values(_sass_built_in_modules__WEBPACK_IMPORTED_MODULE_5__.sassBuiltInModules)) {
            for (const [name, { signature, description }] of Object.entries(exports)) {
                if (name === entry.name) {
                    // Make sure we don't accidentaly match with CSS functions by checking
                    // for hints of a module name before the entry. Essentially look for ".".
                    // We could look for the module names, but that may be aliased away.
                    // Do an includes-check in case signature har more than one parameter.
                    const isNamespaced = textBeforeWord.includes(`.${name}(`);
                    if (!isNamespaced) {
                        continue;
                    }
                    const signatureInfo = vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.SignatureInformation.create(`${name} ${signature}`);
                    signatureInfo.documentation = {
                        kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.MarkupKind.Markdown,
                        value: `${description}\n\n[Sass reference](${reference}#${name})`,
                    };
                    if (signature) {
                        const params = signature
                            .replace(/:.+[$)]/g, "") // Remove default values
                            .replace(/[().]/g, "") // Remove parentheses and ... list indicator
                            .split(",");
                        signatureInfo.parameters = params.map((p) => ({ label: p }));
                    }
                    ret.signatures.push(signatureInfo);
                    break;
                }
            }
        }
        return ret;
    }
    for (const symbol of suggestions) {
        const paramsString = symbol.parameters
            .map((x) => `${x.name}: ${x.value}`)
            .join(", ");
        const signatureInfo = vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.SignatureInformation.create(`${symbol.name} (${paramsString})`);
        const sassdoc = (0,_utils_sassdoc__WEBPACK_IMPORTED_MODULE_3__.applySassDoc)(symbol);
        signatureInfo.documentation = {
            kind: vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.MarkupKind.Markdown,
            value: sassdoc,
        };
        symbol.parameters.forEach((param) => {
            signatureInfo.parameters?.push({
                label: param.name,
                documentation: "",
            });
        });
        ret.signatures.push(signatureInfo);
    }
    return ret;
}
function doSymbolHunting(document, entry, entryType) {
    const result = [];
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_2__.useContext)();
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return result;
    }
    // Don't follow forwards from the current document, since the current doc doesn't have access to its symbols
    for (const { link } of scssDocument.getLinks({ forwards: false })) {
        const scssDocument = storage.get(link.target);
        if (!scssDocument) {
            continue;
        }
        traverseTree(scssDocument, result, entry, entryType);
    }
    if (result.length === 0) {
        // If we didn't find any symbols with the modern method, fall back to the old way of searching
        for (const scssDocument of storage.values()) {
            const symbols = entryType === "mixin"
                ? scssDocument.mixins.values()
                : scssDocument.functions.values();
            for (const symbol of symbols) {
                if (entry.name === symbol.name &&
                    symbol.parameters.length >= entry.parameters) {
                    result.push(symbol);
                }
            }
        }
    }
    return result;
}
function traverseTree(document, result, entry, entryType, accumulatedPrefix = "") {
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_2__.useContext)();
    const scssDocument = storage.get(document.uri);
    if (!scssDocument) {
        return result;
    }
    const entryName = (0,_utils_string__WEBPACK_IMPORTED_MODULE_4__.asDollarlessVariable)(entry.name);
    const symbols = entryType === "mixin"
        ? scssDocument.mixins.values()
        : scssDocument.functions.values();
    for (const symbol of symbols) {
        const symbolName = `${accumulatedPrefix}${(0,_utils_string__WEBPACK_IMPORTED_MODULE_4__.asDollarlessVariable)(symbol.name)}`;
        if (symbolName === entryName &&
            symbol.parameters.length >= entry.parameters &&
            !result.find((x) => x.name === symbol.name)) {
            result.push(symbol);
        }
    }
    // Check to see if we have to go deeper
    // Don't follow uses, since we start with the document behind the first use, and symbols from further uses aren't available to us
    // Don't follow imports, since the whole point here is to use the new module system
    for (const child of scssDocument.getLinks({
        uses: false,
        imports: false,
    })) {
        if (!child.link.target || child.link.target === scssDocument.uri) {
            continue;
        }
        const childDocument = storage.get(child.link.target);
        if (!childDocument) {
            continue;
        }
        let prefix = accumulatedPrefix;
        if (child.prefix) {
            prefix += child.prefix;
        }
        traverseTree(childDocument, result, entry, entryType, prefix);
    }
    return result;
}


/***/ }),

/***/ "./src/features/workspace-symbols/workspace-symbol.ts":
/*!************************************************************!*\
  !*** ./src/features/workspace-symbols/workspace-symbol.ts ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   searchWorkspaceSymbol: () => (/* binding */ searchWorkspaceSymbol)
/* harmony export */ });
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../context-provider */ "./src/context-provider.ts");

async function searchWorkspaceSymbol(query, root) {
    const workspaceSymbols = [];
    const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_0__.useContext)();
    for (const scssDocument of storage.values()) {
        if (!scssDocument.uri.includes(root)) {
            continue;
        }
        for (const symbol of scssDocument.getSymbols()) {
            if (symbol.position === undefined || !symbol.name.includes(query)) {
                continue;
            }
            workspaceSymbols.push({
                name: symbol.name,
                kind: symbol.kind,
                location: {
                    uri: scssDocument.uri,
                    range: {
                        start: symbol.position,
                        end: {
                            line: symbol.position.line,
                            character: symbol.position.character + symbol.name.length,
                        },
                    },
                },
            });
        }
    }
    return workspaceSymbols;
}


/***/ }),

/***/ "./src/file-system-provider.ts":
/*!*************************************!*\
  !*** ./src/file-system-provider.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FsFindFilesRequest: () => (/* binding */ FsFindFilesRequest),
/* harmony export */   FsReadDirectoryRequest: () => (/* binding */ FsReadDirectoryRequest),
/* harmony export */   FsReadFileRequest: () => (/* binding */ FsReadFileRequest),
/* harmony export */   FsStatRequest: () => (/* binding */ FsStatRequest),
/* harmony export */   getFileSystemProvider: () => (/* binding */ getFileSystemProvider)
/* harmony export */ });
/* harmony import */ var vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-css-languageservice */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageService.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./constants */ "./src/constants.ts");




var FsFindFilesRequest;
(function (FsFindFilesRequest) {
    FsFindFilesRequest.type = new vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.RequestType(_constants__WEBPACK_IMPORTED_MODULE_2__.REQUEST_FS_FIND_FILES);
})(FsFindFilesRequest || (FsFindFilesRequest = {}));
var FsReadFileRequest;
(function (FsReadFileRequest) {
    FsReadFileRequest.type = new vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.RequestType(_constants__WEBPACK_IMPORTED_MODULE_2__.REQUEST_FS_READ_FILE);
})(FsReadFileRequest || (FsReadFileRequest = {}));
var FsReadDirectoryRequest;
(function (FsReadDirectoryRequest) {
    FsReadDirectoryRequest.type = new vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.RequestType(_constants__WEBPACK_IMPORTED_MODULE_2__.REQUEST_FS_READ_DIRECTORY);
})(FsReadDirectoryRequest || (FsReadDirectoryRequest = {}));
var FsStatRequest;
(function (FsStatRequest) {
    FsStatRequest.type = new vscode_languageserver__WEBPACK_IMPORTED_MODULE_1__.RequestType(_constants__WEBPACK_IMPORTED_MODULE_2__.REQUEST_FS_STAT);
})(FsStatRequest || (FsStatRequest = {}));
function getFileSystemProvider(connection, runtime) {
    return {
        async stat(uri) {
            const handler = runtime.file;
            if (handler) {
                return handler.stat(uri);
            }
            try {
                const params = uri.toString();
                const res = await connection.sendRequest(FsStatRequest.type, params);
                return res;
            }
            catch (e) {
                return {
                    type: vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_0__.FileType.Unknown,
                    mtime: -1,
                    ctime: -1,
                    size: -1,
                };
            }
        },
        async readFile(uri, encoding = "utf-8") {
            const handler = runtime.file;
            if (handler) {
                return await handler.readFile(uri);
            }
            const params = uri.toString();
            const res = await connection.sendRequest(FsReadFileRequest.type, {
                uri: params,
                encoding,
            });
            return res;
        },
        async readDirectory(uri) {
            const handler = runtime.file;
            if (handler) {
                return await handler.readDirectory(uri);
            }
            const res = await connection.sendRequest(FsReadDirectoryRequest.type, uri.toString());
            return res;
        },
        async findFiles(pattern, exclude) {
            const handler = runtime.file;
            if (handler) {
                return handler.findFiles(pattern, exclude);
            }
            try {
                const res = await connection.sendRequest(FsFindFilesRequest.type, {
                    pattern,
                    exclude,
                });
                return res.map((stringUri) => vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(stringUri));
            }
            catch (e) {
                console.error(e.message);
                return [];
            }
        },
        async exists(uri) {
            const handler = runtime.file;
            if (handler) {
                return handler.exists(uri);
            }
            try {
                const params = uri.toString();
                const res = await connection.sendRequest(FsStatRequest.type, params);
                const exists = res.type !== vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_0__.FileType.Unknown;
                return exists;
            }
            catch {
                return false;
            }
        },
        realPath(uri) {
            const handler = runtime.file;
            if (handler) {
                return handler.realPath(uri);
            }
            return Promise.resolve(uri);
        },
    };
}


/***/ }),

/***/ "./src/node-file-system.ts":
/*!*********************************!*\
  !*** ./src/node-file-system.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NodeFileSystem: () => (/* binding */ NodeFileSystem)
/* harmony export */ });
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fs */ "fs");
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var fast_glob__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fast-glob */ "../../node_modules/fast-glob/out/index.js");
/* harmony import */ var fast_glob__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(fast_glob__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode-css-languageservice */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageService.js");
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");




class NodeFileSystem {
    async findFiles(pattern, exclude) {
        const matches = await fast_glob__WEBPACK_IMPORTED_MODULE_1__(pattern, {
            absolute: true,
            dot: true,
            suppressErrors: true,
            ignore: exclude
                ? Array.isArray(exclude)
                    ? exclude
                    : [exclude]
                : undefined,
        });
        const result = matches.map((fsPath) => vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.file(fsPath));
        return result;
    }
    async exists(uri) {
        try {
            await fs__WEBPACK_IMPORTED_MODULE_0__.promises.access(uri.fsPath, fs__WEBPACK_IMPORTED_MODULE_0__.constants.R_OK | fs__WEBPACK_IMPORTED_MODULE_0__.constants.W_OK);
            return true;
        }
        catch {
            return false;
        }
    }
    existsSync(path) {
        return (0,fs__WEBPACK_IMPORTED_MODULE_0__.existsSync)(path);
    }
    readFile(uri, encoding = "utf-8") {
        return fs__WEBPACK_IMPORTED_MODULE_0__.promises.readFile(uri.fsPath, encoding);
    }
    async readDirectory(uri) {
        const dir = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.readdir(uri);
        const result = [];
        for (const file of dir) {
            try {
                const stats = await this.stat(vscode_uri__WEBPACK_IMPORTED_MODULE_3__.Utils.joinPath(vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(uri), file));
                result.push([file, stats.type]);
            }
            catch (e) {
                result.push([file, vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_2__.FileType.Unknown]);
            }
        }
        return result;
    }
    async realPath(uri) {
        const fsPath = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.realpath(uri.fsPath);
        return vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.file(fsPath);
    }
    async stat(uri) {
        try {
            const stats = await fs__WEBPACK_IMPORTED_MODULE_0__.promises.stat(uri.fsPath);
            let type = vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_2__.FileType.Unknown;
            if (stats.isFile()) {
                type = vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_2__.FileType.File;
            }
            else if (stats.isDirectory()) {
                type = vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_2__.FileType.Directory;
            }
            else if (stats.isSymbolicLink()) {
                type = vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_2__.FileType.SymbolicLink;
            }
            return {
                type,
                ctime: stats.ctime.getTime(),
                mtime: stats.mtime.getTime(),
                size: stats.size,
            };
        }
        catch (e) {
            return {
                type: vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_2__.FileType.Unknown,
                ctime: -1,
                mtime: -1,
                size: -1,
            };
        }
    }
}


/***/ }),

/***/ "./src/parser/ast.ts":
/*!***************************!*\
  !*** ./src/parser/ast.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getNodeAtOffset: () => (/* binding */ getNodeAtOffset),
/* harmony export */   getParentNodeByType: () => (/* binding */ getParentNodeByType)
/* harmony export */ });
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node */ "./src/parser/node.ts");

/**
 * Get Node by offset position.
 */
function getNodeAtOffset(parsedDocument, posOffset) {
    let candidate = null;
    parsedDocument.accept((node) => {
        if (node.offset === -1 && node.length === -1) {
            return true;
        }
        if (posOffset !== null &&
            node.offset <= posOffset &&
            node.end >= posOffset) {
            if (!candidate) {
                candidate = node;
            }
            else if (node.length <= candidate.length) {
                candidate = node;
            }
            return true;
        }
        return false;
    });
    return candidate;
}
/**
 * Returns the parent Node of the specified type.
 */
function getParentNodeByType(node, type) {
    if (node === null) {
        return null;
    }
    node = node.getParent();
    while (node.type !== type) {
        if (node.type === _node__WEBPACK_IMPORTED_MODULE_0__.NodeType.Stylesheet) {
            return null;
        }
        node = node.getParent();
    }
    return node;
}


/***/ }),

/***/ "./src/parser/document.ts":
/*!********************************!*\
  !*** ./src/parser/document.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   buildDocumentContext: () => (/* binding */ buildDocumentContext)
/* harmony export */ });
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");

function buildDocumentContext(documentUri, workspaceRoot) {
    function getRootFolder() {
        let folderURI = workspaceRoot.toString();
        if (!folderURI.endsWith("/")) {
            folderURI += "/";
        }
        if (documentUri.startsWith(folderURI)) {
            return folderURI;
        }
        return undefined;
    }
    return {
        resolveReference: (ref, base = documentUri) => {
            if (ref.startsWith("/") && // Resolve absolute path against the current workspace folder
                base.startsWith("file://") // Only support this extra custom resolving in a Node environment
            ) {
                const folderUri = getRootFolder();
                if (folderUri) {
                    return folderUri + ref.slice(1);
                }
            }
            base = base.substr(0, base.lastIndexOf("/") + 1);
            return vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.resolvePath(vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI.parse(base), ref).toString();
        },
    };
}


/***/ }),

/***/ "./src/parser/index.ts":
/*!*****************************!*\
  !*** ./src/parser/index.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NodeType: () => (/* reexport safe */ _node__WEBPACK_IMPORTED_MODULE_0__.NodeType),
/* harmony export */   ScssDocument: () => (/* reexport safe */ _scss_document__WEBPACK_IMPORTED_MODULE_2__.ScssDocument),
/* harmony export */   parseDocument: () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.parseDocument),
/* harmony export */   reForward: () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.reForward),
/* harmony export */   reImport: () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.reImport),
/* harmony export */   reModuleAtRule: () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.reModuleAtRule),
/* harmony export */   rePlaceholder: () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.rePlaceholder),
/* harmony export */   rePlaceholderUsage: () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.rePlaceholderUsage),
/* harmony export */   reUse: () => (/* reexport safe */ _parser__WEBPACK_IMPORTED_MODULE_1__.reUse),
/* harmony export */   tokenizer: () => (/* reexport safe */ _tokenizer__WEBPACK_IMPORTED_MODULE_4__.tokenizer)
/* harmony export */ });
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node */ "./src/parser/node.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parser */ "./src/parser/parser.ts");
/* harmony import */ var _scss_document__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scss-document */ "./src/parser/scss-document.ts");
/* harmony import */ var _scss_symbol__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scss-symbol */ "./src/parser/scss-symbol.ts");
/* harmony import */ var _tokenizer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tokenizer */ "./src/parser/tokenizer.ts");







/***/ }),

/***/ "./src/parser/language-service.ts":
/*!****************************************!*\
  !*** ./src/parser/language-service.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getLanguageService: () => (/* binding */ getLanguageService)
/* harmony export */ });
/* harmony import */ var vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-css-languageservice */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageService.js");
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../context-provider */ "./src/context-provider.ts");



let ls;
function getLanguageService() {
    if (ls) {
        return ls;
    }
    const { fs, clientCapabilities } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
    const fileSystemProvider = {
        readDirectory(uri) {
            return fs.readDirectory(uri);
        },
        async stat(uri) {
            try {
                return await fs.stat(vscode_uri__WEBPACK_IMPORTED_MODULE_2__.URI.parse(uri));
            }
            catch (error) {
                if (error.code !== "ENOENT") {
                    throw error;
                }
                return {
                    type: vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_0__.FileType.Unknown,
                    ctime: -1,
                    mtime: -1,
                    size: -1,
                };
            }
        },
    };
    ls = (0,vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_0__.getSCSSLanguageService)({ fileSystemProvider, clientCapabilities });
    ls.configure({
        validate: false,
    });
    return ls;
}


/***/ }),

/***/ "./src/parser/node.ts":
/*!****************************!*\
  !*** ./src/parser/node.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   NodeType: () => (/* binding */ NodeType)
/* harmony export */ });
/**
 * Must be synced with https://github.com/microsoft/vscode-css-languageservice/blob/main/src/parser/cssNodes.ts
 * when upgrading vscode-css-languageservice.
 */
var NodeType;
(function (NodeType) {
    NodeType[NodeType["Undefined"] = 0] = "Undefined";
    NodeType[NodeType["Identifier"] = 1] = "Identifier";
    NodeType[NodeType["Stylesheet"] = 2] = "Stylesheet";
    NodeType[NodeType["Ruleset"] = 3] = "Ruleset";
    NodeType[NodeType["Selector"] = 4] = "Selector";
    NodeType[NodeType["SimpleSelector"] = 5] = "SimpleSelector";
    NodeType[NodeType["SelectorInterpolation"] = 6] = "SelectorInterpolation";
    NodeType[NodeType["SelectorCombinator"] = 7] = "SelectorCombinator";
    NodeType[NodeType["SelectorCombinatorParent"] = 8] = "SelectorCombinatorParent";
    NodeType[NodeType["SelectorCombinatorSibling"] = 9] = "SelectorCombinatorSibling";
    NodeType[NodeType["SelectorCombinatorAllSiblings"] = 10] = "SelectorCombinatorAllSiblings";
    NodeType[NodeType["SelectorCombinatorShadowPiercingDescendant"] = 11] = "SelectorCombinatorShadowPiercingDescendant";
    NodeType[NodeType["Page"] = 12] = "Page";
    NodeType[NodeType["PageBoxMarginBox"] = 13] = "PageBoxMarginBox";
    NodeType[NodeType["ClassSelector"] = 14] = "ClassSelector";
    NodeType[NodeType["IdentifierSelector"] = 15] = "IdentifierSelector";
    NodeType[NodeType["ElementNameSelector"] = 16] = "ElementNameSelector";
    NodeType[NodeType["PseudoSelector"] = 17] = "PseudoSelector";
    NodeType[NodeType["AttributeSelector"] = 18] = "AttributeSelector";
    NodeType[NodeType["Declaration"] = 19] = "Declaration";
    NodeType[NodeType["Declarations"] = 20] = "Declarations";
    NodeType[NodeType["Property"] = 21] = "Property";
    NodeType[NodeType["Expression"] = 22] = "Expression";
    NodeType[NodeType["BinaryExpression"] = 23] = "BinaryExpression";
    NodeType[NodeType["Term"] = 24] = "Term";
    NodeType[NodeType["Operator"] = 25] = "Operator";
    NodeType[NodeType["Value"] = 26] = "Value";
    NodeType[NodeType["StringLiteral"] = 27] = "StringLiteral";
    NodeType[NodeType["URILiteral"] = 28] = "URILiteral";
    NodeType[NodeType["EscapedValue"] = 29] = "EscapedValue";
    NodeType[NodeType["Function"] = 30] = "Function";
    NodeType[NodeType["NumericValue"] = 31] = "NumericValue";
    NodeType[NodeType["HexColorValue"] = 32] = "HexColorValue";
    NodeType[NodeType["RatioValue"] = 33] = "RatioValue";
    NodeType[NodeType["MixinDeclaration"] = 34] = "MixinDeclaration";
    NodeType[NodeType["MixinReference"] = 35] = "MixinReference";
    NodeType[NodeType["VariableName"] = 36] = "VariableName";
    NodeType[NodeType["VariableDeclaration"] = 37] = "VariableDeclaration";
    NodeType[NodeType["Prio"] = 38] = "Prio";
    NodeType[NodeType["Interpolation"] = 39] = "Interpolation";
    NodeType[NodeType["NestedProperties"] = 40] = "NestedProperties";
    NodeType[NodeType["ExtendsReference"] = 41] = "ExtendsReference";
    NodeType[NodeType["SelectorPlaceholder"] = 42] = "SelectorPlaceholder";
    NodeType[NodeType["Debug"] = 43] = "Debug";
    NodeType[NodeType["If"] = 44] = "If";
    NodeType[NodeType["Else"] = 45] = "Else";
    NodeType[NodeType["For"] = 46] = "For";
    NodeType[NodeType["Each"] = 47] = "Each";
    NodeType[NodeType["While"] = 48] = "While";
    NodeType[NodeType["MixinContentReference"] = 49] = "MixinContentReference";
    NodeType[NodeType["MixinContentDeclaration"] = 50] = "MixinContentDeclaration";
    NodeType[NodeType["Media"] = 51] = "Media";
    NodeType[NodeType["Keyframe"] = 52] = "Keyframe";
    NodeType[NodeType["FontFace"] = 53] = "FontFace";
    NodeType[NodeType["Import"] = 54] = "Import";
    NodeType[NodeType["Namespace"] = 55] = "Namespace";
    NodeType[NodeType["Invocation"] = 56] = "Invocation";
    NodeType[NodeType["FunctionDeclaration"] = 57] = "FunctionDeclaration";
    NodeType[NodeType["ReturnStatement"] = 58] = "ReturnStatement";
    NodeType[NodeType["MediaQuery"] = 59] = "MediaQuery";
    NodeType[NodeType["MediaCondition"] = 60] = "MediaCondition";
    NodeType[NodeType["MediaFeature"] = 61] = "MediaFeature";
    NodeType[NodeType["FunctionParameter"] = 62] = "FunctionParameter";
    NodeType[NodeType["FunctionArgument"] = 63] = "FunctionArgument";
    NodeType[NodeType["KeyframeSelector"] = 64] = "KeyframeSelector";
    NodeType[NodeType["ViewPort"] = 65] = "ViewPort";
    NodeType[NodeType["Document"] = 66] = "Document";
    NodeType[NodeType["AtApplyRule"] = 67] = "AtApplyRule";
    NodeType[NodeType["CustomPropertyDeclaration"] = 68] = "CustomPropertyDeclaration";
    NodeType[NodeType["CustomPropertySet"] = 69] = "CustomPropertySet";
    NodeType[NodeType["ListEntry"] = 70] = "ListEntry";
    NodeType[NodeType["Supports"] = 71] = "Supports";
    NodeType[NodeType["SupportsCondition"] = 72] = "SupportsCondition";
    NodeType[NodeType["NamespacePrefix"] = 73] = "NamespacePrefix";
    NodeType[NodeType["GridLine"] = 74] = "GridLine";
    NodeType[NodeType["Plugin"] = 75] = "Plugin";
    NodeType[NodeType["UnknownAtRule"] = 76] = "UnknownAtRule";
    NodeType[NodeType["Use"] = 77] = "Use";
    NodeType[NodeType["ModuleConfiguration"] = 78] = "ModuleConfiguration";
    NodeType[NodeType["Forward"] = 79] = "Forward";
    NodeType[NodeType["ForwardVisibility"] = 80] = "ForwardVisibility";
    NodeType[NodeType["Module"] = 81] = "Module";
    NodeType[NodeType["UnicodeRange"] = 82] = "UnicodeRange";
    NodeType[NodeType["Layer"] = 83] = "Layer";
    NodeType[NodeType["LayerNameList"] = 84] = "LayerNameList";
    NodeType[NodeType["LayerName"] = 85] = "LayerName";
    NodeType[NodeType["PropertyAtRule"] = 86] = "PropertyAtRule";
    NodeType[NodeType["Container"] = 87] = "Container";
})(NodeType || (NodeType = {}));


/***/ }),

/***/ "./src/parser/parser.ts":
/*!******************************!*\
  !*** ./src/parser/parser.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parseDocument: () => (/* binding */ parseDocument),
/* harmony export */   reForward: () => (/* binding */ reForward),
/* harmony export */   reImport: () => (/* binding */ reImport),
/* harmony export */   reModuleAtRule: () => (/* binding */ reModuleAtRule),
/* harmony export */   rePlaceholder: () => (/* binding */ rePlaceholder),
/* harmony export */   rePlaceholderUsage: () => (/* binding */ rePlaceholderUsage),
/* harmony export */   reUse: () => (/* binding */ reUse)
/* harmony export */ });
/* harmony import */ var scss_sassdoc_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! scss-sassdoc-parser */ "../../node_modules/scss-sassdoc-parser/dist/esm/index.js");
/* harmony import */ var vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode-css-languageservice */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageService.js");
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context-provider */ "./src/context-provider.ts");
/* harmony import */ var _features_sass_built_in_modules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../features/sass-built-in-modules */ "./src/features/sass-built-in-modules.ts");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/string */ "./src/utils/string.ts");
/* harmony import */ var _ast__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ast */ "./src/parser/ast.ts");
/* harmony import */ var _document__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./document */ "./src/parser/document.ts");
/* harmony import */ var _language_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./language-service */ "./src/parser/language-service.ts");
/* harmony import */ var _node__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./node */ "./src/parser/node.ts");
/* harmony import */ var _scss_document__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./scss-document */ "./src/parser/scss-document.ts");











const reModuleAtRule = /@(?:use|forward|import)/;
const reUse = /@use ["'|](?<url>.+)["'|](?: as (?<namespace>\*|\w+))?;/;
const reForward = /@forward ["'|](?<url>.+)["'|](?: as (?<prefix>\w+-)\*)?(?: hide (?<hide>.+))?(?: show (?<show>.+))?;/;
const reImport = /@import ["'|](?<url>.+)["'|]/;
const rePlaceholder = /^\s*%(?<name>\w+)/;
const rePlaceholderUsage = /\s*@extend\s+(?<name>%[\w\d-_]+)/;
const reDynamicPath = /[#*{}]/;
async function parseDocument(document, workspaceRoot) {
    const { fs } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_2__.useContext)();
    const ls = (0,_language_service__WEBPACK_IMPORTED_MODULE_7__.getLanguageService)();
    const ast = ls.parseStylesheet(document);
    const symbols = await findDocumentSymbols(document, ast, workspaceRoot, fs, ls);
    return new _scss_document__WEBPACK_IMPORTED_MODULE_9__.ScssDocument(fs, document, symbols, ast);
}
async function findDocumentSymbols(document, ast, workspaceRoot, fs, ls) {
    const result = {
        functions: new Map(),
        mixins: new Map(),
        variables: new Map(),
        imports: new Map(),
        uses: new Map(),
        forwards: new Map(),
        placeholders: new Map(),
        placeholderUsages: new Map(),
    };
    const links = await ls.findDocumentLinks2(document, ast, (0,_document__WEBPACK_IMPORTED_MODULE_6__.buildDocumentContext)(document.uri, workspaceRoot));
    const text = document.getText();
    const lines = (0,_utils_string__WEBPACK_IMPORTED_MODULE_4__.getLinesFromText)(text);
    for (let lineNumber = 0; lineNumber < lines.length; lineNumber++) {
        const line = lines.at(lineNumber);
        if (typeof line === "undefined") {
            continue;
        }
        for (const link of links) {
            if (!link.target ||
                link.target.endsWith(".css") ||
                !reModuleAtRule.test(line)) {
                continue;
            }
            link.target = ensureScssExtension(link.target);
            const targetUri = vscode_uri__WEBPACK_IMPORTED_MODULE_10__.URI.parse(link.target);
            const targetExists = await fs.exists(targetUri);
            if (!targetExists) {
                // The target string may be a partial without its _ prefix,
                // so try looking for it by that name.
                const partial = ensurePartial(link.target);
                const partialUri = vscode_uri__WEBPACK_IMPORTED_MODULE_10__.URI.parse(partial);
                const partialExists = await fs.exists(partialUri);
                if (!partialExists) {
                    // We tried to resolve the file as a partial, but it doesn't exist.
                    // The target string may be a folder with an index file
                    // so try looking for it by that name.
                    const index = ensureIndex(link.target);
                    const indexUri = vscode_uri__WEBPACK_IMPORTED_MODULE_10__.URI.parse(index);
                    const indexExists = await fs.exists(indexUri);
                    if (!indexExists) {
                        const partialIndex = ensurePartial(ensureIndex(link.target));
                        const partialIndexUri = vscode_uri__WEBPACK_IMPORTED_MODULE_10__.URI.parse(partialIndex);
                        const partialIndexExists = await fs.exists(partialIndexUri);
                        if (!partialIndexExists) {
                            // We tried, this file doesn't exist
                            continue;
                        }
                        else {
                            link.target = partialIndexUri.toString();
                        }
                    }
                    else {
                        link.target = indexUri.toString();
                    }
                }
                else {
                    link.target = partialUri.toString();
                }
            }
            else {
                link.target = targetUri.toString();
            }
            const matchUse = reUse.exec(line);
            if (matchUse) {
                const url = matchUse.groups?.["url"];
                if (urlMatches(url, link.target)) {
                    const namespace = matchUse.groups?.["namespace"];
                    link.target = await toRealPath(link.target, fs);
                    result.uses.set(link.target, {
                        link,
                        namespace: namespace || getNamespaceFromLink(link),
                        isAliased: Boolean(namespace),
                    });
                }
                continue;
            }
            const matchForward = reForward.exec(line);
            if (matchForward) {
                const url = matchForward.groups?.["url"];
                if (urlMatches(url, link.target)) {
                    link.target = await toRealPath(link.target, fs);
                    result.forwards.set(link.target, {
                        link,
                        prefix: matchForward.groups?.["prefix"],
                        hide: matchForward.groups?.["hide"]
                            ? matchForward.groups["hide"].split(",").map((s) => s.trim())
                            : [],
                        show: matchForward.groups?.["show"]
                            ? matchForward.groups["show"].split(",").map((s) => s.trim())
                            : [],
                    });
                }
                continue;
            }
            const matchImport = reImport.exec(line);
            if (matchImport) {
                const url = matchImport.groups?.["url"];
                if (urlMatches(url, link.target)) {
                    link.target = await toRealPath(link.target, fs);
                    result.imports.set(link.target, {
                        link,
                        dynamic: reDynamicPath.test(link.target),
                        css: link.target.endsWith(".css"),
                    });
                }
            }
        }
        // Look for any usage of built-in modules like @use "sass:math";
        const matchUse = reUse.exec(line);
        if (matchUse) {
            const url = matchUse.groups?.["url"];
            if (!url) {
                continue;
            }
            const isBuiltIn = _features_sass_built_in_modules__WEBPACK_IMPORTED_MODULE_3__.sassBuiltInModuleNames.has(url);
            if (isBuiltIn) {
                const namespace = matchUse.groups?.["namespace"];
                result.uses.set(url, {
                    // Fake link with builtin as target
                    link: vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.DocumentLink.create(vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.Range.create(vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.Position.create(1, 1), vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.Position.create(1, 1)), url),
                    namespace: namespace || url.split(":")[1],
                    isAliased: Boolean(namespace),
                });
            }
            continue;
        }
        if (rePlaceholderUsage.test(line)) {
            const match = rePlaceholderUsage.exec(line);
            if (match) {
                const name = match.groups?.["name"];
                if (name) {
                    const position = vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.Position.create(lineNumber, line.indexOf(name));
                    result.placeholderUsages.set(name, {
                        name,
                        position,
                        offset: document.offsetAt(position),
                        kind: vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.SymbolKind.Class,
                    });
                }
            }
        }
    }
    let sassdoc = [];
    try {
        sassdoc = await (0,scss_sassdoc_parser__WEBPACK_IMPORTED_MODULE_0__.parse)(text);
    }
    catch (error) {
        console.error(error.message);
    }
    const symbols = ls.findDocumentSymbols2(document, ast);
    for (const symbol of symbols) {
        const position = symbol.range.start;
        const offset = document.offsetAt(symbol.range.start);
        switch (symbol.kind) {
            case vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.SymbolKind.Variable: {
                const dollarlessName = symbol.name.replace("$", "");
                const docs = sassdoc.find((v) => v.context.name === dollarlessName && v.context.type === "variable");
                result.variables.set(symbol.name, {
                    name: symbol.name,
                    kind: vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.SymbolKind.Variable,
                    offset,
                    position,
                    value: getVariableValue(ast, offset),
                    sassdoc: docs,
                });
                break;
            }
            case vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.SymbolKind.Method: {
                const docs = sassdoc.find((v) => v.context.name === symbol.name && v.context.type === "mixin");
                result.mixins.set(symbol.name, {
                    name: symbol.name,
                    kind: vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.SymbolKind.Method,
                    offset,
                    position,
                    parameters: getMethodParameters(ast, offset, docs),
                    sassdoc: docs,
                });
                break;
            }
            case vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.SymbolKind.Function: {
                const docs = sassdoc.find((v) => v.context.name === symbol.name && v.context.type === "function");
                result.functions.set(symbol.name, {
                    name: symbol.name,
                    kind: vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.SymbolKind.Function,
                    offset,
                    position,
                    parameters: getMethodParameters(ast, offset, docs),
                    sassdoc: docs,
                });
                break;
            }
            case vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.SymbolKind.Class: {
                if (symbol.name.startsWith("%")) {
                    const sansPercent = symbol.name.substring(1);
                    const docs = sassdoc.find((v) => v.context.name === sansPercent &&
                        v.context.type === "placeholder");
                    result.placeholders.set(symbol.name, {
                        name: symbol.name,
                        kind: vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.SymbolKind.Class,
                        offset,
                        position,
                        sassdoc: docs,
                    });
                }
                break;
            }
            // No default
        }
    }
    return result;
}
function getNamespaceFromLink(link) {
    if (!link.target) {
        return undefined;
    }
    const lastSlash = link.target.lastIndexOf("/");
    const extension = link.target.lastIndexOf(".");
    let candidate = link.target.substring(lastSlash + 1, extension);
    candidate = candidate.startsWith("_") ? candidate.slice(1) : candidate;
    if (candidate === "index") {
        // The link points to an index file. Use the folder name above as a namespace.
        const linkOmitIndex = link.target.slice(0, Math.max(0, lastSlash));
        const newLastSlash = linkOmitIndex.lastIndexOf("/");
        candidate = linkOmitIndex.slice(Math.max(0, newLastSlash + 1));
    }
    return candidate;
}
function ensureScssExtension(target) {
    if (target.endsWith(".scss")) {
        return target;
    }
    return `${target}.scss`;
}
function ensurePartial(target) {
    const lastSlash = target.lastIndexOf("/");
    const lastDot = target.lastIndexOf(".");
    const fileName = target.substring(lastSlash + 1, lastDot);
    if (fileName.startsWith("_")) {
        return target;
    }
    const path = target.slice(0, Math.max(0, lastSlash + 1));
    const extension = target.slice(Math.max(0, lastDot));
    return `${path}_${fileName}${extension}`;
}
function ensureIndex(target) {
    const lastSlash = target.lastIndexOf("/");
    const lastDot = target.lastIndexOf(".");
    const fileName = target.substring(lastSlash + 1, lastDot);
    if (fileName.includes("index")) {
        return target;
    }
    const path = target.slice(0, Math.max(0, lastSlash + 1));
    const extension = target.slice(Math.max(0, lastDot));
    return `${path}/${fileName}/index${extension}`;
}
function urlMatches(url, linkTarget) {
    let safeUrl = url;
    while (/^[./@~]/.exec(safeUrl)) {
        safeUrl = safeUrl.slice(1);
    }
    let match = linkTarget.includes(safeUrl);
    if (!match) {
        const lastSlash = safeUrl.lastIndexOf("/");
        const toLastSlash = safeUrl.slice(0, Math.max(0, lastSlash));
        const restOfUrl = safeUrl.slice(Math.max(0, lastSlash + 1));
        const partial = `${toLastSlash}/_${restOfUrl}`;
        match = linkTarget.includes(partial);
    }
    return match;
}
async function toRealPath(target, fs) {
    const linkUri = vscode_uri__WEBPACK_IMPORTED_MODULE_10__.URI.parse(target);
    const realPathUri = await fs.realPath(linkUri);
    return realPathUri.toString();
}
function getVariableValue(ast, offset) {
    const node = (0,_ast__WEBPACK_IMPORTED_MODULE_5__.getNodeAtOffset)(ast, offset);
    if (node === null) {
        return null;
    }
    const parent = (0,_ast__WEBPACK_IMPORTED_MODULE_5__.getParentNodeByType)(node, _node__WEBPACK_IMPORTED_MODULE_8__.NodeType.VariableDeclaration);
    return parent?.getValue()?.getText() || null;
}
function getMethodParameters(ast, offset, sassDoc) {
    const node = (0,_ast__WEBPACK_IMPORTED_MODULE_5__.getNodeAtOffset)(ast, offset);
    if (node === null) {
        return [];
    }
    return node
        .getParameters()
        .getChildren()
        .map((child) => {
        const defaultValueNode = child.getDefaultValue();
        const value = defaultValueNode === undefined ? null : defaultValueNode.getText();
        const name = child.getName();
        const dollarlessName = (0,_utils_string__WEBPACK_IMPORTED_MODULE_4__.asDollarlessVariable)(name);
        const docs = sassDoc
            ? sassDoc.parameter?.find((p) => p.name === dollarlessName)
            : undefined;
        return {
            name,
            offset: child.offset,
            value,
            kind: vscode_css_languageservice__WEBPACK_IMPORTED_MODULE_1__.SymbolKind.Variable,
            sassdoc: docs,
        };
    });
}


/***/ }),

/***/ "./src/parser/scss-document.ts":
/*!*************************************!*\
  !*** ./src/parser/scss-document.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ScssDocument: () => (/* binding */ ScssDocument)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* harmony import */ var _utils_string__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/string */ "./src/utils/string.ts");
/* harmony import */ var _ast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ast */ "./src/parser/ast.ts");




class ScssDocument {
    constructor(fs, document, symbols, ast) {
        this.imports = new Map();
        this.uses = new Map();
        this.forwards = new Map();
        this.variables = new Map();
        this.mixins = new Map();
        this.functions = new Map();
        this.placeholders = new Map();
        this.placeholderUsages = new Map();
        this.realPath = null;
        this.ast = ast;
        this.fs = fs;
        this.textDocument = document;
        this.uri = document.uri;
        this.imports = symbols.imports;
        this.uses = symbols.uses;
        this.forwards = symbols.forwards;
        this.variables = symbols.variables;
        this.mixins = symbols.mixins;
        this.functions = symbols.functions;
        this.placeholders = symbols.placeholders;
        this.placeholderUsages = symbols.placeholderUsages;
        this.fileName = this.getFileName();
    }
    async getRealPath() {
        if (this.realPath) {
            return this.realPath;
        }
        try {
            const path = await this.fs.realPath(vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(this.uri));
            this.realPath = path.fsPath;
        }
        catch {
            // Do nothing
        }
        return this.realPath;
    }
    getFileName() {
        const uri = this.textDocument.uri;
        const lastSlash = uri.lastIndexOf("/");
        return lastSlash === -1 ? uri : uri.slice(Math.max(0, lastSlash + 1));
    }
    get languageId() {
        return this.textDocument.languageId;
    }
    get version() {
        return this.textDocument.version;
    }
    getText(range) {
        return this.textDocument.getText(range);
    }
    getNodeAt(offset) {
        return (0,_ast__WEBPACK_IMPORTED_MODULE_2__.getNodeAtOffset)(this.ast, offset);
    }
    getNodeRange(node) {
        return vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range.create(this.textDocument.positionAt(node.offset), this.textDocument.positionAt(node.end));
    }
    positionAt(offset) {
        return this.textDocument.positionAt(offset);
    }
    offsetAt(position) {
        return this.textDocument.offsetAt(position);
    }
    get lineCount() {
        return this.textDocument.lineCount;
    }
    getLines() {
        return (0,_utils_string__WEBPACK_IMPORTED_MODULE_1__.getLinesFromText)(this.textDocument.getText());
    }
    getSymbols() {
        const symbols = [];
        for (const variable of this.variables.values()) {
            symbols.push(variable);
        }
        for (const mixin of this.mixins.values()) {
            symbols.push(mixin);
        }
        for (const func of this.functions.values()) {
            symbols.push(func);
        }
        for (const placeholder of this.placeholders.values()) {
            symbols.push(placeholder);
        }
        return symbols;
    }
    getLinks(opts = {}) {
        const options = { forwards: true, uses: true, imports: true, ...opts };
        const links = [];
        if (options.imports) {
            for (const imp of this.imports.values()) {
                links.push(imp);
            }
        }
        if (options.uses) {
            for (const use of this.uses.values()) {
                links.push(use);
            }
        }
        if (options.forwards) {
            for (const forward of this.forwards.values()) {
                links.push(forward);
            }
        }
        return links;
    }
}


/***/ }),

/***/ "./src/parser/scss-symbol.ts":
/*!***********************************!*\
  !*** ./src/parser/scss-symbol.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);



/***/ }),

/***/ "./src/parser/tokenizer.ts":
/*!*********************************!*\
  !*** ./src/parser/tokenizer.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   tokenizer: () => (/* binding */ tokenizer)
/* harmony export */ });
/* harmony import */ var scss_symbols_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! scss-symbols-parser */ "../../node_modules/scss-symbols-parser/out/index.js");

function tokenizer(string) {
    return (0,scss_symbols_parser__WEBPACK_IMPORTED_MODULE_0__.tokenizer)(string);
}


/***/ }),

/***/ "./src/scanner.ts":
/*!************************!*\
  !*** ./src/scanner.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ScannerService)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-textdocument */ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js");
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./context-provider */ "./src/context-provider.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parser */ "./src/parser/index.ts");
/* harmony import */ var _utils_embedded__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/embedded */ "./src/utils/embedded.ts");





class ScannerService {
    async scan(files, workspaceRoot) {
        const { settings } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
        await Promise.all(files.map((uri) => {
            const path = uri.path;
            if (settings.scanImportedFiles &&
                (path.includes("/_") || path.includes("\\_"))) {
                // If we scan imported files (which we do by default), don't include partials in the initial scan.
                // This way we can be reasonably sure that we scan whatever index files there are _before_ we scan
                // partials which may or may not have been forwarded with a prefix.
                return;
            }
            return this.parse(uri, workspaceRoot, 0);
        }));
    }
    async update(document, workspaceRoot) {
        const scssRegions = (0,_utils_embedded__WEBPACK_IMPORTED_MODULE_3__.getSCSSRegionsDocument)(document);
        if (!scssRegions.document) {
            return;
        }
        const scssDocument = await (0,_parser__WEBPACK_IMPORTED_MODULE_2__.parseDocument)(scssRegions.document, workspaceRoot);
        const { storage } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
        storage.set(scssDocument.uri, scssDocument);
    }
    async parse(uri, workspaceRoot, depth) {
        const { settings, storage, fs } = (0,_context_provider__WEBPACK_IMPORTED_MODULE_1__.useContext)();
        const isExistFile = await fs.exists(uri);
        if (!isExistFile) {
            storage.delete(uri);
            return;
        }
        const alreadyParsed = storage.has(uri);
        if (alreadyParsed) {
            // The same file may be referenced by multiple other files,
            // so skip doing the parsing work if it's already been done.
            // Changes to the file are handled by the `update` method.
            return;
        }
        try {
            const content = await fs.readFile(uri);
            const document = vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__.TextDocument.create(uri.toString(), "scss", 1, content);
            const scssRegions = (0,_utils_embedded__WEBPACK_IMPORTED_MODULE_3__.getSCSSRegionsDocument)(document);
            if (!scssRegions.document) {
                return;
            }
            const scssDocument = await (0,_parser__WEBPACK_IMPORTED_MODULE_2__.parseDocument)(scssRegions.document, workspaceRoot);
            storage.set(scssDocument.uri, scssDocument);
            const maxDepth = settings.scannerDepth ?? 30;
            if (depth > maxDepth || !settings.scanImportedFiles) {
                return;
            }
            for (const symbol of scssDocument.getLinks()) {
                if (!symbol.link.target ||
                    symbol.dynamic ||
                    symbol.css) {
                    continue;
                }
                try {
                    await this.parse(vscode_uri__WEBPACK_IMPORTED_MODULE_4__.URI.parse(symbol.link.target), workspaceRoot, depth + 1);
                }
                catch (error) {
                    console.error(error.message);
                }
            }
        }
        catch (error) {
            console.error(error.message);
            // Something went wrong parsing this file. Try to parse the others.
        }
    }
}


/***/ }),

/***/ "./src/server.ts":
/*!***********************!*\
  !*** ./src/server.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SomeSassServer: () => (/* binding */ SomeSassServer)
/* harmony export */ });
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver */ "../../node_modules/vscode-languageserver/lib/node/main.js");
/* harmony import */ var vscode_languageserver__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode-languageserver/node */ "../../node_modules/vscode-languageserver/node.js");
/* harmony import */ var vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vscode-languageserver-textdocument */ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js");
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* harmony import */ var _context_provider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./context-provider */ "./src/context-provider.ts");
/* harmony import */ var _features_code_actions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./features/code-actions */ "./src/features/code-actions/index.ts");
/* harmony import */ var _features_completion__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./features/completion */ "./src/features/completion/index.ts");
/* harmony import */ var _features_decorators_color_decorators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./features/decorators/color-decorators */ "./src/features/decorators/color-decorators.ts");
/* harmony import */ var _features_diagnostics_diagnostics__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./features/diagnostics/diagnostics */ "./src/features/diagnostics/diagnostics.ts");
/* harmony import */ var _features_go_definition_go_definition__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./features/go-definition/go-definition */ "./src/features/go-definition/go-definition.ts");
/* harmony import */ var _features_hover_hover__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./features/hover/hover */ "./src/features/hover/hover.ts");
/* harmony import */ var _features_references__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./features/references */ "./src/features/references/index.ts");
/* harmony import */ var _features_rename__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./features/rename */ "./src/features/rename/index.ts");
/* harmony import */ var _features_signature_help_signature_help__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./features/signature-help/signature-help */ "./src/features/signature-help/signature-help.ts");
/* harmony import */ var _features_workspace_symbols_workspace_symbol__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./features/workspace-symbols/workspace-symbol */ "./src/features/workspace-symbols/workspace-symbol.ts");
/* harmony import */ var _file_system_provider__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./file-system-provider */ "./src/file-system-provider.ts");
/* harmony import */ var _scanner__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./scanner */ "./src/scanner.ts");
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./storage */ "./src/storage.ts");
/* harmony import */ var _utils_embedded__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils/embedded */ "./src/utils/embedded.ts");



















class SomeSassServer {
    constructor(connection, runtime) {
        this.connection = connection;
        this.runtime = runtime;
    }
    listen() {
        let workspaceRoot;
        let scannerService;
        let fileSystemProvider;
        let clientCapabilities;
        // Create a simple text document manager. The text document manager
        // _supports full document sync only
        const documents = new vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_1__.TextDocuments(vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_2__.TextDocument);
        // Make the text document manager listen on the connection
        // _for open, change and close text document events
        documents.listen(this.connection);
        // After the server has started the client sends an initilize request. The server receives
        // _in the passed params the rootPath of the workspace plus the client capabilites
        this.connection.onInitialize(async (params) => {
            const options = params.initializationOptions;
            clientCapabilities = params.capabilities;
            fileSystemProvider = (0,_file_system_provider__WEBPACK_IMPORTED_MODULE_14__.getFileSystemProvider)(this.connection, this.runtime);
            workspaceRoot = vscode_uri__WEBPACK_IMPORTED_MODULE_18__.URI.parse(options.workspace);
            this.connection.console.log(`[Server(${process.pid}) ${workspaceRoot}] Started and initialize received`);
            return {
                capabilities: {
                    textDocumentSync: vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_1__.TextDocumentSyncKind.Incremental,
                    referencesProvider: true,
                    completionProvider: {
                        resolveProvider: false,
                        triggerCharacters: [
                            // For SassDoc annotation completion
                            "@",
                            "/",
                            // For @use completion
                            '"',
                            "'",
                            // For placeholder completion
                            "%",
                        ],
                    },
                    signatureHelpProvider: {
                        triggerCharacters: ["(", ",", ";"],
                    },
                    hoverProvider: true,
                    definitionProvider: true,
                    workspaceSymbolProvider: true,
                    codeActionProvider: {
                        codeActionKinds: [
                            vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CodeActionKind.RefactorExtract,
                            vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CodeActionKind.RefactorExtract + ".function",
                            vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CodeActionKind.RefactorExtract + ".constant",
                        ],
                        resolveProvider: false,
                    },
                    renameProvider: { prepareProvider: true },
                    colorProvider: {},
                },
            };
        });
        this.connection.onInitialized(async () => {
            const settings = await this.connection.workspace.getConfiguration("somesass");
            const editorSettings = await this.connection.workspace.getConfiguration("editor");
            const storageService = new _storage__WEBPACK_IMPORTED_MODULE_16__["default"]();
            (0,_context_provider__WEBPACK_IMPORTED_MODULE_3__.createContext)({
                clientCapabilities,
                fs: fileSystemProvider,
                settings,
                editorSettings,
                workspaceRoot,
                storage: storageService,
            });
            scannerService = new _scanner__WEBPACK_IMPORTED_MODULE_15__["default"]();
            const files = await fileSystemProvider.findFiles("**/*.{scss,svelte,astro,vue}", settings.scannerExclude);
            try {
                await scannerService.scan(files, workspaceRoot);
            }
            catch (error) {
                console.log(String(error));
            }
        });
        documents.onDidChangeContent(async (change) => {
            if (!scannerService) {
                return null;
            }
            try {
                await scannerService.update(change.document, workspaceRoot);
            }
            catch (error) {
                // Something went wrong trying to parse the changed document.
                console.error(error.message);
                return;
            }
            const diagnostics = await (0,_features_diagnostics_diagnostics__WEBPACK_IMPORTED_MODULE_7__.doDiagnostics)(change.document);
            // Check that no new version has been made while we waited
            const latestTextDocument = documents.get(change.document.uri);
            if (latestTextDocument &&
                latestTextDocument.version === change.document.version) {
                this.connection.sendDiagnostics({
                    uri: latestTextDocument.uri,
                    diagnostics,
                });
            }
        });
        this.connection.onDidChangeConfiguration((params) => {
            const settings = params.settings.somesass;
            (0,_context_provider__WEBPACK_IMPORTED_MODULE_3__.changeConfiguration)(settings);
        });
        this.connection.onDidChangeWatchedFiles(async (event) => {
            if (!scannerService) {
                return null;
            }
            const context = (0,_context_provider__WEBPACK_IMPORTED_MODULE_3__.useContext)();
            if (!context) {
                return;
            }
            const { storage } = context;
            const newFiles = [];
            for (const change of event.changes) {
                const uri = vscode_uri__WEBPACK_IMPORTED_MODULE_18__.URI.parse(change.uri);
                if (change.type === vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.FileChangeType.Deleted) {
                    storage.delete(uri);
                }
                else if (change.type === vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.FileChangeType.Changed) {
                    const document = storage.get(uri);
                    if (document) {
                        await scannerService.update(document, workspaceRoot);
                    }
                    else {
                        // New to us anyway
                        newFiles.push(uri);
                    }
                }
                else {
                    newFiles.push(uri);
                }
            }
            return scannerService.scan(newFiles, workspaceRoot);
        });
        this.connection.onCompletion(async (textDocumentPosition) => {
            const uri = documents.get(textDocumentPosition.textDocument.uri);
            if (uri === undefined) {
                return;
            }
            const { document, offset } = (0,_utils_embedded__WEBPACK_IMPORTED_MODULE_17__.getSCSSRegionsDocument)(uri, textDocumentPosition.position);
            if (!document) {
                return null;
            }
            const completions = await (0,_features_completion__WEBPACK_IMPORTED_MODULE_5__.doCompletion)(document, offset);
            return completions;
        });
        this.connection.onHover((textDocumentPosition) => {
            const uri = documents.get(textDocumentPosition.textDocument.uri);
            if (uri === undefined) {
                return;
            }
            const { document, offset } = (0,_utils_embedded__WEBPACK_IMPORTED_MODULE_17__.getSCSSRegionsDocument)(uri, textDocumentPosition.position);
            if (!document) {
                return null;
            }
            return (0,_features_hover_hover__WEBPACK_IMPORTED_MODULE_9__.doHover)(document, offset);
        });
        this.connection.onSignatureHelp((textDocumentPosition) => {
            const uri = documents.get(textDocumentPosition.textDocument.uri);
            if (uri === undefined) {
                return;
            }
            const { document, offset } = (0,_utils_embedded__WEBPACK_IMPORTED_MODULE_17__.getSCSSRegionsDocument)(uri, textDocumentPosition.position);
            if (!document) {
                return null;
            }
            return (0,_features_signature_help_signature_help__WEBPACK_IMPORTED_MODULE_12__.doSignatureHelp)(document, offset);
        });
        this.connection.onDefinition((textDocumentPosition) => {
            const uri = documents.get(textDocumentPosition.textDocument.uri);
            if (uri === undefined) {
                return;
            }
            const { document, offset } = (0,_utils_embedded__WEBPACK_IMPORTED_MODULE_17__.getSCSSRegionsDocument)(uri, textDocumentPosition.position);
            if (!document) {
                return null;
            }
            return (0,_features_go_definition_go_definition__WEBPACK_IMPORTED_MODULE_8__.goDefinition)(document, offset);
        });
        this.connection.onReferences(async (referenceParams) => {
            const uri = documents.get(referenceParams.textDocument.uri);
            if (uri === undefined) {
                return undefined;
            }
            const { document, offset } = (0,_utils_embedded__WEBPACK_IMPORTED_MODULE_17__.getSCSSRegionsDocument)(uri, referenceParams.position);
            if (!document) {
                return null;
            }
            const options = referenceParams.context;
            const references = await (0,_features_references__WEBPACK_IMPORTED_MODULE_10__.provideReferences)(document, offset, options);
            if (!references) {
                return null;
            }
            return references.references.map((r) => r.location);
        });
        this.connection.onWorkspaceSymbol((workspaceSymbolParams) => {
            return (0,_features_workspace_symbols_workspace_symbol__WEBPACK_IMPORTED_MODULE_13__.searchWorkspaceSymbol)(workspaceSymbolParams.query, workspaceRoot.toString());
        });
        this.connection.onCodeAction(async (params) => {
            const context = (0,_context_provider__WEBPACK_IMPORTED_MODULE_3__.useContext)();
            if (!context) {
                return;
            }
            const { editorSettings } = context;
            const codeActionProviders = [new _features_code_actions__WEBPACK_IMPORTED_MODULE_4__.ExtractProvider(editorSettings)];
            const document = documents.get(params.textDocument.uri);
            if (document === undefined) {
                return undefined;
            }
            const allActions = [];
            for (const provider of codeActionProviders) {
                const actions = await provider.provideCodeActions(document, params.range);
                if (provider instanceof _features_code_actions__WEBPACK_IMPORTED_MODULE_4__.ExtractProvider) {
                    for (const action of actions) {
                        const edit = action.edit
                            ?.documentChanges?.[0];
                        const command = vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.Command.create(action.title, "_somesass.applyExtractCodeAction", document.uri, document.version, edit && edit.edits[0]);
                        allActions.push(vscode_languageserver__WEBPACK_IMPORTED_MODULE_0__.CodeAction.create(action.title, command, action.kind));
                    }
                }
            }
            return allActions;
        });
        this.connection.onPrepareRename(async (params) => {
            const uri = documents.get(params.textDocument.uri);
            if (uri === undefined) {
                return null;
            }
            const { document, offset } = (0,_utils_embedded__WEBPACK_IMPORTED_MODULE_17__.getSCSSRegionsDocument)(uri, params.position);
            if (!document) {
                return null;
            }
            const preparations = await (0,_features_rename__WEBPACK_IMPORTED_MODULE_11__.prepareRename)(document, offset);
            return preparations;
        });
        this.connection.onRenameRequest(async (params) => {
            const uri = documents.get(params.textDocument.uri);
            if (uri === undefined) {
                return null;
            }
            const { document, offset } = (0,_utils_embedded__WEBPACK_IMPORTED_MODULE_17__.getSCSSRegionsDocument)(uri, params.position);
            if (!document) {
                return null;
            }
            const edits = await (0,_features_rename__WEBPACK_IMPORTED_MODULE_11__.doRename)(document, offset, params.newName);
            return edits;
        });
        this.connection.onDocumentColor(async (params) => {
            const uri = documents.get(params.textDocument.uri);
            if (uri === undefined) {
                return null;
            }
            const { document } = (0,_utils_embedded__WEBPACK_IMPORTED_MODULE_17__.getSCSSRegionsDocument)(uri);
            if (!document) {
                return null;
            }
            const context = (0,_context_provider__WEBPACK_IMPORTED_MODULE_3__.useContext)();
            if (!context) {
                return null;
            }
            const { storage } = context;
            const scssDocument = storage.get(document.uri);
            if (!scssDocument) {
                // For the first open document, we may have a race condition where the scanner
                // hasn't finished before the documentColor request is sent from the client.
                // In these cases, initiate a scan for the document and wait for it to finish,
                // to ensure we get color decorators without having to edit the file first.
                await scannerService.scan([vscode_uri__WEBPACK_IMPORTED_MODULE_18__.URI.parse(document.uri)], workspaceRoot);
            }
            const information = (0,_features_decorators_color_decorators__WEBPACK_IMPORTED_MODULE_6__.findDocumentColors)(document);
            return information;
        });
        this.connection.onColorPresentation(() => {
            // const uri = documents.get(params.textDocument.uri);
            // if (uri === undefined) {
            // 	return null;
            // }
            // const { document } = getSCSSRegionsDocument(uri);
            // if (!document) {
            // 	return null;
            // }
            // const presentations = getColorPresentations(document, params.color, params.range);
            // return presentations;
            return []; // Don't replace the variable reference with raw color values...
        });
        this.connection.onShutdown(() => {
            const context = (0,_context_provider__WEBPACK_IMPORTED_MODULE_3__.useContext)();
            if (context) {
                context.storage.clear();
            }
        });
        this.connection.listen();
    }
}


/***/ }),

/***/ "./src/storage.ts":
/*!************************!*\
  !*** ./src/storage.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ StorageService)
/* harmony export */ });
class StorageService {
    constructor() {
        this.storage = new Map();
    }
    get(key) {
        return this.storage.get(this.toKey(key));
    }
    has(key) {
        return this.storage.has(this.toKey(key));
    }
    set(key, value) {
        this.storage.set(this.toKey(key), value);
    }
    delete(key) {
        this.storage.delete(this.toKey(key));
    }
    clear() {
        this.storage.clear();
    }
    keys() {
        return this.storage.keys();
    }
    values() {
        return this.storage.values();
    }
    entries() {
        return this.storage.entries();
    }
    toKey(key) {
        return key.toString();
    }
}


/***/ }),

/***/ "./src/utils/embedded.ts":
/*!*******************************!*\
  !*** ./src/utils/embedded.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSCSSContent: () => (/* binding */ getSCSSContent),
/* harmony export */   getSCSSRegions: () => (/* binding */ getSCSSRegions),
/* harmony export */   getSCSSRegionsDocument: () => (/* binding */ getSCSSRegionsDocument),
/* harmony export */   isFileWhereScssCanBeEmbedded: () => (/* binding */ isFileWhereScssCanBeEmbedded)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-textdocument */ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js");

function isFileWhereScssCanBeEmbedded(path) {
    if (path.endsWith(".scss")) {
        return false;
    }
    return true;
}
function getSCSSRegions(content) {
    const regions = [];
    const startRe = /<style[\w\t\n "'=]+(lang|type)=["'](text\/)?scss["'][\w\t\n "'=]*>/g;
    const endRe = /<\/style>/g;
    let start;
    let end;
    while ((start = startRe.exec(content)) !== null &&
        (end = endRe.exec(content)) !== null) {
        if (start[0] !== undefined) {
            regions.push([start.index + start[0].length, end.index]);
        }
    }
    return regions;
}
function getSCSSContent(content, regions = getSCSSRegions(content)) {
    const oldContent = content;
    let newContent = oldContent
        .split("\n")
        .map((line) => " ".repeat(line.length))
        .join("\n");
    for (const r of regions) {
        newContent =
            newContent.slice(0, r[0]) +
                oldContent.slice(r[0], r[1]) +
                newContent.slice(r[1]);
    }
    return newContent;
}
function getSCSSRegionsDocument(document, position) {
    const offset = position ? document.offsetAt(position) : 0;
    if (!isFileWhereScssCanBeEmbedded(document.uri)) {
        return { document, offset };
    }
    const text = document.getText();
    const scssRegions = getSCSSRegions(text);
    if (typeof position === "undefined" ||
        scssRegions.some((region) => region[0] <= offset && region[1] >= offset)) {
        const uri = document.uri;
        const version = document.version;
        return {
            document: vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_0__.TextDocument.create(uri, "scss", version, getSCSSContent(text, scssRegions)),
            offset,
        };
    }
    return { document: null, offset };
}


/***/ }),

/***/ "./src/utils/sassdoc.ts":
/*!******************************!*\
  !*** ./src/utils/sassdoc.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   applySassDoc: () => (/* binding */ applySassDoc)
/* harmony export */ });
function applySassDoc(symbol) {
    if (!symbol.sassdoc) {
        return "";
    }
    let description = "";
    const doc = symbol.sassdoc;
    if (doc.description) {
        description += doc.description.trimStart();
    }
    // Make it visible early on if something is marked as deprecated
    if (doc.deprecated) {
        description += `\n\n@deprecated ${doc.deprecated}`;
    }
    if (doc.name && doc.name !== symbol.name) {
        description += `\n\n@name ${doc.name}`;
    }
    // Function and mixin parameters, listed one per line like JSDoc
    if (doc.parameter) {
        for (const parameter of doc.parameter) {
            description += "\n\n@param";
            if (parameter.type) {
                description += ` ${parameter.type}`;
            }
            description += `\`${parameter.name}\``;
            if (parameter.default) {
                description += ` [${parameter.default}]`;
            }
            if (parameter.description) {
                description += ` - ${parameter.description}`;
            }
        }
    }
    // Type is for standalone variable annotation
    // Type and Parameters is likely mutually exclusive
    if (doc.type) {
        description += `\n\n@type ${doc.type}`;
    }
    // Documents the properties of a map
    if (doc.property) {
        for (const prop of doc.property) {
            description += "\n\n@prop";
            if (prop.type) {
                description += ` {${prop.type}}`;
            }
            description += `\`${prop.path}\``;
            if (prop.default) {
                description += ` [${prop.default}]`;
            }
            if (prop.description) {
                description += ` - ${prop.description}`;
            }
        }
    }
    // For mixins that take @content
    if (doc.content) {
        description += `\n\n@content ${doc.content}`;
    }
    // Describes mixin output
    if (doc.output) {
        description += `\n\n@output ${doc.output}`;
    }
    // Describes function return values with a type and optional description
    if (doc.return) {
        description += `\n\n@return ${doc.return.type}${doc.return.description ? ` - ${doc.return.description}` : ""}`;
    }
    if (doc.throws) {
        for (const thrown of doc.throws) {
            description += `\n\n@throw ${thrown}`;
        }
    }
    if (doc.require && doc.require.length > 0) {
        for (const requirement of doc.require) {
            description += "\n\n@require";
            if (requirement.type) {
                description += ` {${requirement.type}}`;
            }
            description += `\`${requirement.name}\``;
            if (requirement.description) {
                description += ` - ${requirement.description}`;
            }
            if (requirement.url) {
                description += ` ${requirement.url}`;
            }
        }
    }
    if (doc.alias) {
        const aliases = typeof doc.alias === "string" ? [doc.alias] : doc.alias;
        for (const alias of aliases) {
            description += `\n\n@alias \`${alias}\``;
        }
    }
    // Hint to related variables, functions, or mixins
    if (doc.see) {
        for (const see of doc.see) {
            description += `\n\n@see \`${see.name}\``;
        }
    }
    if (doc.since) {
        for (const since of doc.since) {
            description += `\n\n@since ${since.version}`;
            if (since.description) {
                description += ` - ${since.description}`;
            }
        }
    }
    // Show credit to authors
    if (doc.author) {
        for (const author of doc.author) {
            description += `\n\n@author ${author}`;
        }
    }
    if (doc.link) {
        for (const link of doc.link) {
            description += link.caption
                ? `\n\n[${link.caption}](${link.url})`
                : `\n\n${link.url}`;
        }
    }
    if (doc.example) {
        for (const example of doc.example) {
            description += "\n\n@example";
            if (example.description) {
                description += ` ${example.description}`;
            }
            description += ["\n", "```scss", example.code, "```"].join("\n");
        }
    }
    if (doc.access === "private") {
        description += `\n\n@access private`;
    }
    const groups = doc.group?.filter((g) => g !== "undefined");
    if (groups && groups.length > 0) {
        description += `\n\n@group ${groups.join(", ")}`;
    }
    if (doc.todo) {
        description += `\n\n@todo ${doc.todo}`;
    }
    return description;
}


/***/ }),

/***/ "./src/utils/scss.ts":
/*!***************************!*\
  !*** ./src/utils/scss.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getBaseValueFrom: () => (/* binding */ getBaseValueFrom),
/* harmony export */   isReferencingVariable: () => (/* binding */ isReferencingVariable)
/* harmony export */ });
/* harmony import */ var _features_go_definition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../features/go-definition */ "./src/features/go-definition/index.ts");
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser */ "./src/parser/index.ts");
/* harmony import */ var _parser_ast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/ast */ "./src/parser/ast.ts");



function isReferencingVariable(variable) {
    if (!variable.value) {
        return false;
    }
    return variable.value.startsWith("$") || variable.value.includes(".$");
}
function getBaseValueFrom(variable, scssDocument, depth = 0) {
    if (depth > 10) {
        // Really?
        return variable;
    }
    const node = scssDocument.getNodeAt(variable.offset);
    if (!node) {
        return variable;
    }
    const declaration = (0,_parser_ast__WEBPACK_IMPORTED_MODULE_2__.getParentNodeByType)(node, _parser__WEBPACK_IMPORTED_MODULE_1__.NodeType.VariableDeclaration);
    if (!declaration) {
        return variable;
    }
    const value = declaration.getValue()?.getText();
    if (!value) {
        return variable;
    }
    const referenceOffset = variable.offset + variable.name.length + value.indexOf("$") + 2;
    const referenceNode = scssDocument.getNodeAt(referenceOffset);
    if (!referenceNode) {
        return variable;
    }
    const result = (0,_features_go_definition__WEBPACK_IMPORTED_MODULE_0__.getDefinition)(scssDocument.textDocument, referenceOffset);
    if (!result) {
        return variable;
    }
    const [definition, definitionDocument] = result;
    if (isReferencingVariable(definition)) {
        return getBaseValueFrom(definition, definitionDocument, (depth += 1));
    }
    return definition;
}


/***/ }),

/***/ "./src/utils/string.ts":
/*!*****************************!*\
  !*** ./src/utils/string.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   asDollarlessVariable: () => (/* binding */ asDollarlessVariable),
/* harmony export */   getCurrentWord: () => (/* binding */ getCurrentWord),
/* harmony export */   getEOL: () => (/* binding */ getEOL),
/* harmony export */   getLinesFromText: () => (/* binding */ getLinesFromText),
/* harmony export */   getTextAfterPosition: () => (/* binding */ getTextAfterPosition),
/* harmony export */   getTextBeforePosition: () => (/* binding */ getTextBeforePosition),
/* harmony export */   indentText: () => (/* binding */ indentText),
/* harmony export */   reNewline: () => (/* binding */ reNewline),
/* harmony export */   stripParentheses: () => (/* binding */ stripParentheses),
/* harmony export */   stripTrailingComma: () => (/* binding */ stripTrailingComma)
/* harmony export */ });
/**
 * Returns word by specified position.
 */
function getCurrentWord(text, offset) {
    let i = offset - 1;
    while (i >= 0 && !' \t\n\r":[()]}/,'.includes(text.charAt(i))) {
        i--;
    }
    return text.substring(i + 1, offset);
}
/**
 * Returns text before specified position.
 */
function getTextBeforePosition(text, offset) {
    let i = offset - 1;
    while (!"\n\r".includes(text.charAt(i))) {
        i--;
    }
    return text.substring(i + 1, offset);
}
/**
 * Returns text after specified position.
 */
function getTextAfterPosition(text, offset) {
    let i = offset + 1;
    while (!"\n\r".includes(text.charAt(i))) {
        i++;
    }
    return text.substring(i + 1, offset);
}
const reNewline = /\r\n|\r|\n/;
function getLinesFromText(text) {
    return text.split(reNewline);
}
const space = " ";
const tab = "	";
function indentText(text, settings) {
    if (settings.insertSpaces) {
        const numberOfSpaces = typeof settings.indentSize === "number"
            ? settings.indentSize
            : typeof settings.tabSize === "number"
                ? settings.tabSize
                : 2;
        return `${space.repeat(numberOfSpaces)}${text}`;
    }
    return `${tab}${text}`;
}
/** Strips the dollar prefix off a variable name */
function asDollarlessVariable(variable) {
    return variable.replace(/^\$/, "");
}
function stripTrailingComma(string) {
    return stripTrailingCharacter(string, ",");
}
function stripParentheses(string) {
    return string.replace(/[()]/g, "");
}
function stripTrailingCharacter(string, char) {
    return string.endsWith(char)
        ? string.slice(0, Math.max(0, string.length - char.length))
        : string;
}
/*---------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * MIT License
 *
 * Copyright (c) 2015 - present Microsoft Corporation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *--------------------------------------------------------------------------------------------*/
function getEOL(text) {
    for (let i = 0; i < text.length; i++) {
        const ch = text.charAt(i);
        if (ch === "\r") {
            if (i + 1 < text.length && text.charAt(i + 1) === "\n") {
                return "\r\n";
            }
            return "\r";
        }
        else if (ch === "\n") {
            return "\n";
        }
    }
    return "\n";
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/beautify/beautify-css.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/beautify/beautify-css.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   css_beautify: () => (/* binding */ css_beautify)
/* harmony export */ });
// copied from js-beautify/js/lib/beautify-css.js
// version: 1.14.11
/* AUTO-GENERATED. DO NOT MODIFY. */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.


 CSS Beautifier
---------------

    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)

    Based on code initially developed by: Einar Lielmanis, <einar@beautifier.io>
        https://beautifier.io/

    Usage:
        css_beautify(source_text);
        css_beautify(source_text, options);

    The options are (default in brackets):
        indent_size (4)                         — indentation size,
        indent_char (space)                     — character to indent with,
        selector_separator_newline (true)       - separate selectors with newline or
                                                  not (e.g. "a,\nbr" or "a, br")
        end_with_newline (false)                - end with a newline
        newline_between_rules (true)            - add a new line after every css rule
        space_around_selector_separator (false) - ensure space around selector separators:
                                                  '>', '+', '~' (e.g. "a>b" -> "a > b")
    e.g

    css_beautify(css_source_text, {
      'indent_size': 1,
      'indent_char': '\t',
      'selector_separator': ' ',
      'end_with_newline': false,
      'newline_between_rules': true,
      'space_around_selector_separator': true
    });
*/

// http://www.w3.org/TR/CSS21/syndata.html#tokenization
// http://www.w3.org/TR/css3-syntax/

var legacy_beautify_css;
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */,
/* 1 */,
/* 2 */
/***/ (function(module) {

/*jshint node:true */
/*
  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



function OutputLine(parent) {
  this.__parent = parent;
  this.__character_count = 0;
  // use indent_count as a marker for this.__lines that have preserved indentation
  this.__indent_count = -1;
  this.__alignment_count = 0;
  this.__wrap_point_index = 0;
  this.__wrap_point_character_count = 0;
  this.__wrap_point_indent_count = -1;
  this.__wrap_point_alignment_count = 0;

  this.__items = [];
}

OutputLine.prototype.clone_empty = function() {
  var line = new OutputLine(this.__parent);
  line.set_indent(this.__indent_count, this.__alignment_count);
  return line;
};

OutputLine.prototype.item = function(index) {
  if (index < 0) {
    return this.__items[this.__items.length + index];
  } else {
    return this.__items[index];
  }
};

OutputLine.prototype.has_match = function(pattern) {
  for (var lastCheckedOutput = this.__items.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {
    if (this.__items[lastCheckedOutput].match(pattern)) {
      return true;
    }
  }
  return false;
};

OutputLine.prototype.set_indent = function(indent, alignment) {
  if (this.is_empty()) {
    this.__indent_count = indent || 0;
    this.__alignment_count = alignment || 0;
    this.__character_count = this.__parent.get_indent_size(this.__indent_count, this.__alignment_count);
  }
};

OutputLine.prototype._set_wrap_point = function() {
  if (this.__parent.wrap_line_length) {
    this.__wrap_point_index = this.__items.length;
    this.__wrap_point_character_count = this.__character_count;
    this.__wrap_point_indent_count = this.__parent.next_line.__indent_count;
    this.__wrap_point_alignment_count = this.__parent.next_line.__alignment_count;
  }
};

OutputLine.prototype._should_wrap = function() {
  return this.__wrap_point_index &&
    this.__character_count > this.__parent.wrap_line_length &&
    this.__wrap_point_character_count > this.__parent.next_line.__character_count;
};

OutputLine.prototype._allow_wrap = function() {
  if (this._should_wrap()) {
    this.__parent.add_new_line();
    var next = this.__parent.current_line;
    next.set_indent(this.__wrap_point_indent_count, this.__wrap_point_alignment_count);
    next.__items = this.__items.slice(this.__wrap_point_index);
    this.__items = this.__items.slice(0, this.__wrap_point_index);

    next.__character_count += this.__character_count - this.__wrap_point_character_count;
    this.__character_count = this.__wrap_point_character_count;

    if (next.__items[0] === " ") {
      next.__items.splice(0, 1);
      next.__character_count -= 1;
    }
    return true;
  }
  return false;
};

OutputLine.prototype.is_empty = function() {
  return this.__items.length === 0;
};

OutputLine.prototype.last = function() {
  if (!this.is_empty()) {
    return this.__items[this.__items.length - 1];
  } else {
    return null;
  }
};

OutputLine.prototype.push = function(item) {
  this.__items.push(item);
  var last_newline_index = item.lastIndexOf('\n');
  if (last_newline_index !== -1) {
    this.__character_count = item.length - last_newline_index;
  } else {
    this.__character_count += item.length;
  }
};

OutputLine.prototype.pop = function() {
  var item = null;
  if (!this.is_empty()) {
    item = this.__items.pop();
    this.__character_count -= item.length;
  }
  return item;
};


OutputLine.prototype._remove_indent = function() {
  if (this.__indent_count > 0) {
    this.__indent_count -= 1;
    this.__character_count -= this.__parent.indent_size;
  }
};

OutputLine.prototype._remove_wrap_indent = function() {
  if (this.__wrap_point_indent_count > 0) {
    this.__wrap_point_indent_count -= 1;
  }
};
OutputLine.prototype.trim = function() {
  while (this.last() === ' ') {
    this.__items.pop();
    this.__character_count -= 1;
  }
};

OutputLine.prototype.toString = function() {
  var result = '';
  if (this.is_empty()) {
    if (this.__parent.indent_empty_lines) {
      result = this.__parent.get_indent_string(this.__indent_count);
    }
  } else {
    result = this.__parent.get_indent_string(this.__indent_count, this.__alignment_count);
    result += this.__items.join('');
  }
  return result;
};

function IndentStringCache(options, baseIndentString) {
  this.__cache = [''];
  this.__indent_size = options.indent_size;
  this.__indent_string = options.indent_char;
  if (!options.indent_with_tabs) {
    this.__indent_string = new Array(options.indent_size + 1).join(options.indent_char);
  }

  // Set to null to continue support for auto detection of base indent
  baseIndentString = baseIndentString || '';
  if (options.indent_level > 0) {
    baseIndentString = new Array(options.indent_level + 1).join(this.__indent_string);
  }

  this.__base_string = baseIndentString;
  this.__base_string_length = baseIndentString.length;
}

IndentStringCache.prototype.get_indent_size = function(indent, column) {
  var result = this.__base_string_length;
  column = column || 0;
  if (indent < 0) {
    result = 0;
  }
  result += indent * this.__indent_size;
  result += column;
  return result;
};

IndentStringCache.prototype.get_indent_string = function(indent_level, column) {
  var result = this.__base_string;
  column = column || 0;
  if (indent_level < 0) {
    indent_level = 0;
    result = '';
  }
  column += indent_level * this.__indent_size;
  this.__ensure_cache(column);
  result += this.__cache[column];
  return result;
};

IndentStringCache.prototype.__ensure_cache = function(column) {
  while (column >= this.__cache.length) {
    this.__add_column();
  }
};

IndentStringCache.prototype.__add_column = function() {
  var column = this.__cache.length;
  var indent = 0;
  var result = '';
  if (this.__indent_size && column >= this.__indent_size) {
    indent = Math.floor(column / this.__indent_size);
    column -= indent * this.__indent_size;
    result = new Array(indent + 1).join(this.__indent_string);
  }
  if (column) {
    result += new Array(column + 1).join(' ');
  }

  this.__cache.push(result);
};

function Output(options, baseIndentString) {
  this.__indent_cache = new IndentStringCache(options, baseIndentString);
  this.raw = false;
  this._end_with_newline = options.end_with_newline;
  this.indent_size = options.indent_size;
  this.wrap_line_length = options.wrap_line_length;
  this.indent_empty_lines = options.indent_empty_lines;
  this.__lines = [];
  this.previous_line = null;
  this.current_line = null;
  this.next_line = new OutputLine(this);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = false;
  // initialize
  this.__add_outputline();
}

Output.prototype.__add_outputline = function() {
  this.previous_line = this.current_line;
  this.current_line = this.next_line.clone_empty();
  this.__lines.push(this.current_line);
};

Output.prototype.get_line_number = function() {
  return this.__lines.length;
};

Output.prototype.get_indent_string = function(indent, column) {
  return this.__indent_cache.get_indent_string(indent, column);
};

Output.prototype.get_indent_size = function(indent, column) {
  return this.__indent_cache.get_indent_size(indent, column);
};

Output.prototype.is_empty = function() {
  return !this.previous_line && this.current_line.is_empty();
};

Output.prototype.add_new_line = function(force_newline) {
  // never newline at the start of file
  // otherwise, newline only if we didn't just add one or we're forced
  if (this.is_empty() ||
    (!force_newline && this.just_added_newline())) {
    return false;
  }

  // if raw output is enabled, don't print additional newlines,
  // but still return True as though you had
  if (!this.raw) {
    this.__add_outputline();
  }
  return true;
};

Output.prototype.get_code = function(eol) {
  this.trim(true);

  // handle some edge cases where the last tokens
  // has text that ends with newline(s)
  var last_item = this.current_line.pop();
  if (last_item) {
    if (last_item[last_item.length - 1] === '\n') {
      last_item = last_item.replace(/\n+$/g, '');
    }
    this.current_line.push(last_item);
  }

  if (this._end_with_newline) {
    this.__add_outputline();
  }

  var sweet_code = this.__lines.join('\n');

  if (eol !== '\n') {
    sweet_code = sweet_code.replace(/[\n]/g, eol);
  }
  return sweet_code;
};

Output.prototype.set_wrap_point = function() {
  this.current_line._set_wrap_point();
};

Output.prototype.set_indent = function(indent, alignment) {
  indent = indent || 0;
  alignment = alignment || 0;

  // Next line stores alignment values
  this.next_line.set_indent(indent, alignment);

  // Never indent your first output indent at the start of the file
  if (this.__lines.length > 1) {
    this.current_line.set_indent(indent, alignment);
    return true;
  }

  this.current_line.set_indent();
  return false;
};

Output.prototype.add_raw_token = function(token) {
  for (var x = 0; x < token.newlines; x++) {
    this.__add_outputline();
  }
  this.current_line.set_indent(-1);
  this.current_line.push(token.whitespace_before);
  this.current_line.push(token.text);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = false;
};

Output.prototype.add_token = function(printable_token) {
  this.__add_space_before_token();
  this.current_line.push(printable_token);
  this.space_before_token = false;
  this.non_breaking_space = false;
  this.previous_token_wrapped = this.current_line._allow_wrap();
};

Output.prototype.__add_space_before_token = function() {
  if (this.space_before_token && !this.just_added_newline()) {
    if (!this.non_breaking_space) {
      this.set_wrap_point();
    }
    this.current_line.push(' ');
  }
};

Output.prototype.remove_indent = function(index) {
  var output_length = this.__lines.length;
  while (index < output_length) {
    this.__lines[index]._remove_indent();
    index++;
  }
  this.current_line._remove_wrap_indent();
};

Output.prototype.trim = function(eat_newlines) {
  eat_newlines = (eat_newlines === undefined) ? false : eat_newlines;

  this.current_line.trim();

  while (eat_newlines && this.__lines.length > 1 &&
    this.current_line.is_empty()) {
    this.__lines.pop();
    this.current_line = this.__lines[this.__lines.length - 1];
    this.current_line.trim();
  }

  this.previous_line = this.__lines.length > 1 ?
    this.__lines[this.__lines.length - 2] : null;
};

Output.prototype.just_added_newline = function() {
  return this.current_line.is_empty();
};

Output.prototype.just_added_blankline = function() {
  return this.is_empty() ||
    (this.current_line.is_empty() && this.previous_line.is_empty());
};

Output.prototype.ensure_empty_line_above = function(starts_with, ends_with) {
  var index = this.__lines.length - 2;
  while (index >= 0) {
    var potentialEmptyLine = this.__lines[index];
    if (potentialEmptyLine.is_empty()) {
      break;
    } else if (potentialEmptyLine.item(0).indexOf(starts_with) !== 0 &&
      potentialEmptyLine.item(-1) !== ends_with) {
      this.__lines.splice(index + 1, 0, new OutputLine(this));
      this.previous_line = this.__lines[this.__lines.length - 2];
      break;
    }
    index--;
  }
};

module.exports.Output = Output;


/***/ }),
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */
/***/ (function(module) {

/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



function Options(options, merge_child_field) {
  this.raw_options = _mergeOpts(options, merge_child_field);

  // Support passing the source text back with no change
  this.disabled = this._get_boolean('disabled');

  this.eol = this._get_characters('eol', 'auto');
  this.end_with_newline = this._get_boolean('end_with_newline');
  this.indent_size = this._get_number('indent_size', 4);
  this.indent_char = this._get_characters('indent_char', ' ');
  this.indent_level = this._get_number('indent_level');

  this.preserve_newlines = this._get_boolean('preserve_newlines', true);
  this.max_preserve_newlines = this._get_number('max_preserve_newlines', 32786);
  if (!this.preserve_newlines) {
    this.max_preserve_newlines = 0;
  }

  this.indent_with_tabs = this._get_boolean('indent_with_tabs', this.indent_char === '\t');
  if (this.indent_with_tabs) {
    this.indent_char = '\t';

    // indent_size behavior changed after 1.8.6
    // It used to be that indent_size would be
    // set to 1 for indent_with_tabs. That is no longer needed and
    // actually doesn't make sense - why not use spaces? Further,
    // that might produce unexpected behavior - tabs being used
    // for single-column alignment. So, when indent_with_tabs is true
    // and indent_size is 1, reset indent_size to 4.
    if (this.indent_size === 1) {
      this.indent_size = 4;
    }
  }

  // Backwards compat with 1.3.x
  this.wrap_line_length = this._get_number('wrap_line_length', this._get_number('max_char'));

  this.indent_empty_lines = this._get_boolean('indent_empty_lines');

  // valid templating languages ['django', 'erb', 'handlebars', 'php', 'smarty']
  // For now, 'auto' = all off for javascript, all on for html (and inline javascript).
  // other values ignored
  this.templating = this._get_selection_list('templating', ['auto', 'none', 'django', 'erb', 'handlebars', 'php', 'smarty'], ['auto']);
}

Options.prototype._get_array = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = default_value || [];
  if (typeof option_value === 'object') {
    if (option_value !== null && typeof option_value.concat === 'function') {
      result = option_value.concat();
    }
  } else if (typeof option_value === 'string') {
    result = option_value.split(/[^a-zA-Z0-9_\/\-]+/);
  }
  return result;
};

Options.prototype._get_boolean = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = option_value === undefined ? !!default_value : !!option_value;
  return result;
};

Options.prototype._get_characters = function(name, default_value) {
  var option_value = this.raw_options[name];
  var result = default_value || '';
  if (typeof option_value === 'string') {
    result = option_value.replace(/\\r/, '\r').replace(/\\n/, '\n').replace(/\\t/, '\t');
  }
  return result;
};

Options.prototype._get_number = function(name, default_value) {
  var option_value = this.raw_options[name];
  default_value = parseInt(default_value, 10);
  if (isNaN(default_value)) {
    default_value = 0;
  }
  var result = parseInt(option_value, 10);
  if (isNaN(result)) {
    result = default_value;
  }
  return result;
};

Options.prototype._get_selection = function(name, selection_list, default_value) {
  var result = this._get_selection_list(name, selection_list, default_value);
  if (result.length !== 1) {
    throw new Error(
      "Invalid Option Value: The option '" + name + "' can only be one of the following values:\n" +
      selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
  }

  return result[0];
};


Options.prototype._get_selection_list = function(name, selection_list, default_value) {
  if (!selection_list || selection_list.length === 0) {
    throw new Error("Selection list cannot be empty.");
  }

  default_value = default_value || [selection_list[0]];
  if (!this._is_valid_selection(default_value, selection_list)) {
    throw new Error("Invalid Default Value!");
  }

  var result = this._get_array(name, default_value);
  if (!this._is_valid_selection(result, selection_list)) {
    throw new Error(
      "Invalid Option Value: The option '" + name + "' can contain only the following values:\n" +
      selection_list + "\nYou passed in: '" + this.raw_options[name] + "'");
  }

  return result;
};

Options.prototype._is_valid_selection = function(result, selection_list) {
  return result.length && selection_list.length &&
    !result.some(function(item) { return selection_list.indexOf(item) === -1; });
};


// merges child options up with the parent options object
// Example: obj = {a: 1, b: {a: 2}}
//          mergeOpts(obj, 'b')
//
//          Returns: {a: 2}
function _mergeOpts(allOptions, childFieldName) {
  var finalOpts = {};
  allOptions = _normalizeOpts(allOptions);
  var name;

  for (name in allOptions) {
    if (name !== childFieldName) {
      finalOpts[name] = allOptions[name];
    }
  }

  //merge in the per type settings for the childFieldName
  if (childFieldName && allOptions[childFieldName]) {
    for (name in allOptions[childFieldName]) {
      finalOpts[name] = allOptions[childFieldName][name];
    }
  }
  return finalOpts;
}

function _normalizeOpts(options) {
  var convertedOpts = {};
  var key;

  for (key in options) {
    var newKey = key.replace(/-/g, "_");
    convertedOpts[newKey] = options[key];
  }
  return convertedOpts;
}

module.exports.Options = Options;
module.exports.normalizeOpts = _normalizeOpts;
module.exports.mergeOpts = _mergeOpts;


/***/ }),
/* 7 */,
/* 8 */
/***/ (function(module) {

/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var regexp_has_sticky = RegExp.prototype.hasOwnProperty('sticky');

function InputScanner(input_string) {
  this.__input = input_string || '';
  this.__input_length = this.__input.length;
  this.__position = 0;
}

InputScanner.prototype.restart = function() {
  this.__position = 0;
};

InputScanner.prototype.back = function() {
  if (this.__position > 0) {
    this.__position -= 1;
  }
};

InputScanner.prototype.hasNext = function() {
  return this.__position < this.__input_length;
};

InputScanner.prototype.next = function() {
  var val = null;
  if (this.hasNext()) {
    val = this.__input.charAt(this.__position);
    this.__position += 1;
  }
  return val;
};

InputScanner.prototype.peek = function(index) {
  var val = null;
  index = index || 0;
  index += this.__position;
  if (index >= 0 && index < this.__input_length) {
    val = this.__input.charAt(index);
  }
  return val;
};

// This is a JavaScript only helper function (not in python)
// Javascript doesn't have a match method
// and not all implementation support "sticky" flag.
// If they do not support sticky then both this.match() and this.test() method
// must get the match and check the index of the match.
// If sticky is supported and set, this method will use it.
// Otherwise it will check that global is set, and fall back to the slower method.
InputScanner.prototype.__match = function(pattern, index) {
  pattern.lastIndex = index;
  var pattern_match = pattern.exec(this.__input);

  if (pattern_match && !(regexp_has_sticky && pattern.sticky)) {
    if (pattern_match.index !== index) {
      pattern_match = null;
    }
  }

  return pattern_match;
};

InputScanner.prototype.test = function(pattern, index) {
  index = index || 0;
  index += this.__position;

  if (index >= 0 && index < this.__input_length) {
    return !!this.__match(pattern, index);
  } else {
    return false;
  }
};

InputScanner.prototype.testChar = function(pattern, index) {
  // test one character regex match
  var val = this.peek(index);
  pattern.lastIndex = 0;
  return val !== null && pattern.test(val);
};

InputScanner.prototype.match = function(pattern) {
  var pattern_match = this.__match(pattern, this.__position);
  if (pattern_match) {
    this.__position += pattern_match[0].length;
  } else {
    pattern_match = null;
  }
  return pattern_match;
};

InputScanner.prototype.read = function(starting_pattern, until_pattern, until_after) {
  var val = '';
  var match;
  if (starting_pattern) {
    match = this.match(starting_pattern);
    if (match) {
      val += match[0];
    }
  }
  if (until_pattern && (match || !starting_pattern)) {
    val += this.readUntil(until_pattern, until_after);
  }
  return val;
};

InputScanner.prototype.readUntil = function(pattern, until_after) {
  var val = '';
  var match_index = this.__position;
  pattern.lastIndex = this.__position;
  var pattern_match = pattern.exec(this.__input);
  if (pattern_match) {
    match_index = pattern_match.index;
    if (until_after) {
      match_index += pattern_match[0].length;
    }
  } else {
    match_index = this.__input_length;
  }

  val = this.__input.substring(this.__position, match_index);
  this.__position = match_index;
  return val;
};

InputScanner.prototype.readUntilAfter = function(pattern) {
  return this.readUntil(pattern, true);
};

InputScanner.prototype.get_regexp = function(pattern, match_from) {
  var result = null;
  var flags = 'g';
  if (match_from && regexp_has_sticky) {
    flags = 'y';
  }
  // strings are converted to regexp
  if (typeof pattern === "string" && pattern !== '') {
    // result = new RegExp(pattern.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'), flags);
    result = new RegExp(pattern, flags);
  } else if (pattern) {
    result = new RegExp(pattern.source, flags);
  }
  return result;
};

InputScanner.prototype.get_literal_regexp = function(literal_string) {
  return RegExp(literal_string.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&'));
};

/* css beautifier legacy helpers */
InputScanner.prototype.peekUntilAfter = function(pattern) {
  var start = this.__position;
  var val = this.readUntilAfter(pattern);
  this.__position = start;
  return val;
};

InputScanner.prototype.lookBack = function(testVal) {
  var start = this.__position - 1;
  return start >= testVal.length && this.__input.substring(start - testVal.length, start)
    .toLowerCase() === testVal;
};

module.exports.InputScanner = InputScanner;


/***/ }),
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */
/***/ (function(module) {

/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



function Directives(start_block_pattern, end_block_pattern) {
  start_block_pattern = typeof start_block_pattern === 'string' ? start_block_pattern : start_block_pattern.source;
  end_block_pattern = typeof end_block_pattern === 'string' ? end_block_pattern : end_block_pattern.source;
  this.__directives_block_pattern = new RegExp(start_block_pattern + / beautify( \w+[:]\w+)+ /.source + end_block_pattern, 'g');
  this.__directive_pattern = / (\w+)[:](\w+)/g;

  this.__directives_end_ignore_pattern = new RegExp(start_block_pattern + /\sbeautify\signore:end\s/.source + end_block_pattern, 'g');
}

Directives.prototype.get_directives = function(text) {
  if (!text.match(this.__directives_block_pattern)) {
    return null;
  }

  var directives = {};
  this.__directive_pattern.lastIndex = 0;
  var directive_match = this.__directive_pattern.exec(text);

  while (directive_match) {
    directives[directive_match[1]] = directive_match[2];
    directive_match = this.__directive_pattern.exec(text);
  }

  return directives;
};

Directives.prototype.readIgnored = function(input) {
  return input.readUntilAfter(this.__directives_end_ignore_pattern);
};


module.exports.Directives = Directives;


/***/ }),
/* 14 */,
/* 15 */
/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_30152__) {

/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var Beautifier = (__nested_webpack_require_30152__(16).Beautifier),
  Options = (__nested_webpack_require_30152__(17).Options);

function css_beautify(source_text, options) {
  var beautifier = new Beautifier(source_text, options);
  return beautifier.beautify();
}

module.exports = css_beautify;
module.exports.defaultOptions = function() {
  return new Options();
};


/***/ }),
/* 16 */
/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_31780__) {

/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var Options = (__nested_webpack_require_31780__(17).Options);
var Output = (__nested_webpack_require_31780__(2).Output);
var InputScanner = (__nested_webpack_require_31780__(8).InputScanner);
var Directives = (__nested_webpack_require_31780__(13).Directives);

var directives_core = new Directives(/\/\*/, /\*\//);

var lineBreak = /\r\n|[\r\n]/;
var allLineBreaks = /\r\n|[\r\n]/g;

// tokenizer
var whitespaceChar = /\s/;
var whitespacePattern = /(?:\s|\n)+/g;
var block_comment_pattern = /\/\*(?:[\s\S]*?)((?:\*\/)|$)/g;
var comment_pattern = /\/\/(?:[^\n\r\u2028\u2029]*)/g;

function Beautifier(source_text, options) {
  this._source_text = source_text || '';
  // Allow the setting of language/file-type specific options
  // with inheritance of overall settings
  this._options = new Options(options);
  this._ch = null;
  this._input = null;

  // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
  this.NESTED_AT_RULE = {
    "page": true,
    "font-face": true,
    "keyframes": true,
    // also in CONDITIONAL_GROUP_RULE below
    "media": true,
    "supports": true,
    "document": true
  };
  this.CONDITIONAL_GROUP_RULE = {
    "media": true,
    "supports": true,
    "document": true
  };
  this.NON_SEMICOLON_NEWLINE_PROPERTY = [
    "grid-template-areas",
    "grid-template"
  ];

}

Beautifier.prototype.eatString = function(endChars) {
  var result = '';
  this._ch = this._input.next();
  while (this._ch) {
    result += this._ch;
    if (this._ch === "\\") {
      result += this._input.next();
    } else if (endChars.indexOf(this._ch) !== -1 || this._ch === "\n") {
      break;
    }
    this._ch = this._input.next();
  }
  return result;
};

// Skips any white space in the source text from the current position.
// When allowAtLeastOneNewLine is true, will output new lines for each
// newline character found; if the user has preserve_newlines off, only
// the first newline will be output
Beautifier.prototype.eatWhitespace = function(allowAtLeastOneNewLine) {
  var result = whitespaceChar.test(this._input.peek());
  var newline_count = 0;
  while (whitespaceChar.test(this._input.peek())) {
    this._ch = this._input.next();
    if (allowAtLeastOneNewLine && this._ch === '\n') {
      if (newline_count === 0 || newline_count < this._options.max_preserve_newlines) {
        newline_count++;
        this._output.add_new_line(true);
      }
    }
  }
  return result;
};

// Nested pseudo-class if we are insideRule
// and the next special character found opens
// a new block
Beautifier.prototype.foundNestedPseudoClass = function() {
  var openParen = 0;
  var i = 1;
  var ch = this._input.peek(i);
  while (ch) {
    if (ch === "{") {
      return true;
    } else if (ch === '(') {
      // pseudoclasses can contain ()
      openParen += 1;
    } else if (ch === ')') {
      if (openParen === 0) {
        return false;
      }
      openParen -= 1;
    } else if (ch === ";" || ch === "}") {
      return false;
    }
    i++;
    ch = this._input.peek(i);
  }
  return false;
};

Beautifier.prototype.print_string = function(output_string) {
  this._output.set_indent(this._indentLevel);
  this._output.non_breaking_space = true;
  this._output.add_token(output_string);
};

Beautifier.prototype.preserveSingleSpace = function(isAfterSpace) {
  if (isAfterSpace) {
    this._output.space_before_token = true;
  }
};

Beautifier.prototype.indent = function() {
  this._indentLevel++;
};

Beautifier.prototype.outdent = function() {
  if (this._indentLevel > 0) {
    this._indentLevel--;
  }
};

/*_____________________--------------------_____________________*/

Beautifier.prototype.beautify = function() {
  if (this._options.disabled) {
    return this._source_text;
  }

  var source_text = this._source_text;
  var eol = this._options.eol;
  if (eol === 'auto') {
    eol = '\n';
    if (source_text && lineBreak.test(source_text || '')) {
      eol = source_text.match(lineBreak)[0];
    }
  }


  // HACK: newline parsing inconsistent. This brute force normalizes the this._input.
  source_text = source_text.replace(allLineBreaks, '\n');

  // reset
  var baseIndentString = source_text.match(/^[\t ]*/)[0];

  this._output = new Output(this._options, baseIndentString);
  this._input = new InputScanner(source_text);
  this._indentLevel = 0;
  this._nestedLevel = 0;

  this._ch = null;
  var parenLevel = 0;

  var insideRule = false;
  // This is the value side of a property value pair (blue in the following ex)
  // label { content: blue }
  var insidePropertyValue = false;
  var enteringConditionalGroup = false;
  var insideNonNestedAtRule = false;
  var insideScssMap = false;
  var topCharacter = this._ch;
  var insideNonSemiColonValues = false;
  var whitespace;
  var isAfterSpace;
  var previous_ch;

  while (true) {
    whitespace = this._input.read(whitespacePattern);
    isAfterSpace = whitespace !== '';
    previous_ch = topCharacter;
    this._ch = this._input.next();
    if (this._ch === '\\' && this._input.hasNext()) {
      this._ch += this._input.next();
    }
    topCharacter = this._ch;

    if (!this._ch) {
      break;
    } else if (this._ch === '/' && this._input.peek() === '*') {
      // /* css comment */
      // Always start block comments on a new line.
      // This handles scenarios where a block comment immediately
      // follows a property definition on the same line or where
      // minified code is being beautified.
      this._output.add_new_line();
      this._input.back();

      var comment = this._input.read(block_comment_pattern);

      // Handle ignore directive
      var directives = directives_core.get_directives(comment);
      if (directives && directives.ignore === 'start') {
        comment += directives_core.readIgnored(this._input);
      }

      this.print_string(comment);

      // Ensures any new lines following the comment are preserved
      this.eatWhitespace(true);

      // Block comments are followed by a new line so they don't
      // share a line with other properties
      this._output.add_new_line();
    } else if (this._ch === '/' && this._input.peek() === '/') {
      // // single line comment
      // Preserves the space before a comment
      // on the same line as a rule
      this._output.space_before_token = true;
      this._input.back();
      this.print_string(this._input.read(comment_pattern));

      // Ensures any new lines following the comment are preserved
      this.eatWhitespace(true);
    } else if (this._ch === '$') {
      this.preserveSingleSpace(isAfterSpace);

      this.print_string(this._ch);

      // strip trailing space, if present, for hash property checks
      var variable = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);

      if (variable.match(/[ :]$/)) {
        // we have a variable or pseudo-class, add it and insert one space before continuing
        variable = this.eatString(": ").replace(/\s+$/, '');
        this.print_string(variable);
        this._output.space_before_token = true;
      }

      // might be sass variable
      if (parenLevel === 0 && variable.indexOf(':') !== -1) {
        insidePropertyValue = true;
        this.indent();
      }
    } else if (this._ch === '@') {
      this.preserveSingleSpace(isAfterSpace);

      // deal with less property mixins @{...}
      if (this._input.peek() === '{') {
        this.print_string(this._ch + this.eatString('}'));
      } else {
        this.print_string(this._ch);

        // strip trailing space, if present, for hash property checks
        var variableOrRule = this._input.peekUntilAfter(/[: ,;{}()[\]\/='"]/g);

        if (variableOrRule.match(/[ :]$/)) {
          // we have a variable or pseudo-class, add it and insert one space before continuing
          variableOrRule = this.eatString(": ").replace(/\s+$/, '');
          this.print_string(variableOrRule);
          this._output.space_before_token = true;
        }

        // might be less variable
        if (parenLevel === 0 && variableOrRule.indexOf(':') !== -1) {
          insidePropertyValue = true;
          this.indent();

          // might be a nesting at-rule
        } else if (variableOrRule in this.NESTED_AT_RULE) {
          this._nestedLevel += 1;
          if (variableOrRule in this.CONDITIONAL_GROUP_RULE) {
            enteringConditionalGroup = true;
          }

          // might be a non-nested at-rule
        } else if (parenLevel === 0 && !insidePropertyValue) {
          insideNonNestedAtRule = true;
        }
      }
    } else if (this._ch === '#' && this._input.peek() === '{') {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch + this.eatString('}'));
    } else if (this._ch === '{') {
      if (insidePropertyValue) {
        insidePropertyValue = false;
        this.outdent();
      }

      // non nested at rule becomes nested
      insideNonNestedAtRule = false;

      // when entering conditional groups, only rulesets are allowed
      if (enteringConditionalGroup) {
        enteringConditionalGroup = false;
        insideRule = (this._indentLevel >= this._nestedLevel);
      } else {
        // otherwise, declarations are also allowed
        insideRule = (this._indentLevel >= this._nestedLevel - 1);
      }
      if (this._options.newline_between_rules && insideRule) {
        if (this._output.previous_line && this._output.previous_line.item(-1) !== '{') {
          this._output.ensure_empty_line_above('/', ',');
        }
      }

      this._output.space_before_token = true;

      // The difference in print_string and indent order is necessary to indent the '{' correctly
      if (this._options.brace_style === 'expand') {
        this._output.add_new_line();
        this.print_string(this._ch);
        this.indent();
        this._output.set_indent(this._indentLevel);
      } else {
        // inside mixin and first param is object
        if (previous_ch === '(') {
          this._output.space_before_token = false;
        } else if (previous_ch !== ',') {
          this.indent();
        }
        this.print_string(this._ch);
      }

      this.eatWhitespace(true);
      this._output.add_new_line();
    } else if (this._ch === '}') {
      this.outdent();
      this._output.add_new_line();
      if (previous_ch === '{') {
        this._output.trim(true);
      }

      if (insidePropertyValue) {
        this.outdent();
        insidePropertyValue = false;
      }
      this.print_string(this._ch);
      insideRule = false;
      if (this._nestedLevel) {
        this._nestedLevel--;
      }

      this.eatWhitespace(true);
      this._output.add_new_line();

      if (this._options.newline_between_rules && !this._output.just_added_blankline()) {
        if (this._input.peek() !== '}') {
          this._output.add_new_line(true);
        }
      }
      if (this._input.peek() === ')') {
        this._output.trim(true);
        if (this._options.brace_style === "expand") {
          this._output.add_new_line(true);
        }
      }
    } else if (this._ch === ":") {

      for (var i = 0; i < this.NON_SEMICOLON_NEWLINE_PROPERTY.length; i++) {
        if (this._input.lookBack(this.NON_SEMICOLON_NEWLINE_PROPERTY[i])) {
          insideNonSemiColonValues = true;
          break;
        }
      }

      if ((insideRule || enteringConditionalGroup) && !(this._input.lookBack("&") || this.foundNestedPseudoClass()) && !this._input.lookBack("(") && !insideNonNestedAtRule && parenLevel === 0) {
        // 'property: value' delimiter
        // which could be in a conditional group query

        this.print_string(':');
        if (!insidePropertyValue) {
          insidePropertyValue = true;
          this._output.space_before_token = true;
          this.eatWhitespace(true);
          this.indent();
        }
      } else {
        // sass/less parent reference don't use a space
        // sass nested pseudo-class don't use a space

        // preserve space before pseudoclasses/pseudoelements, as it means "in any child"
        if (this._input.lookBack(" ")) {
          this._output.space_before_token = true;
        }
        if (this._input.peek() === ":") {
          // pseudo-element
          this._ch = this._input.next();
          this.print_string("::");
        } else {
          // pseudo-class
          this.print_string(':');
        }
      }
    } else if (this._ch === '"' || this._ch === '\'') {
      var preserveQuoteSpace = previous_ch === '"' || previous_ch === '\'';
      this.preserveSingleSpace(preserveQuoteSpace || isAfterSpace);
      this.print_string(this._ch + this.eatString(this._ch));
      this.eatWhitespace(true);
    } else if (this._ch === ';') {
      insideNonSemiColonValues = false;
      if (parenLevel === 0) {
        if (insidePropertyValue) {
          this.outdent();
          insidePropertyValue = false;
        }
        insideNonNestedAtRule = false;
        this.print_string(this._ch);
        this.eatWhitespace(true);

        // This maintains single line comments on the same
        // line. Block comments are also affected, but
        // a new line is always output before one inside
        // that section
        if (this._input.peek() !== '/') {
          this._output.add_new_line();
        }
      } else {
        this.print_string(this._ch);
        this.eatWhitespace(true);
        this._output.space_before_token = true;
      }
    } else if (this._ch === '(') { // may be a url
      if (this._input.lookBack("url")) {
        this.print_string(this._ch);
        this.eatWhitespace();
        parenLevel++;
        this.indent();
        this._ch = this._input.next();
        if (this._ch === ')' || this._ch === '"' || this._ch === '\'') {
          this._input.back();
        } else if (this._ch) {
          this.print_string(this._ch + this.eatString(')'));
          if (parenLevel) {
            parenLevel--;
            this.outdent();
          }
        }
      } else {
        var space_needed = false;
        if (this._input.lookBack("with")) {
          // look back is not an accurate solution, we need tokens to confirm without whitespaces
          space_needed = true;
        }
        this.preserveSingleSpace(isAfterSpace || space_needed);
        this.print_string(this._ch);

        // handle scss/sass map
        if (insidePropertyValue && previous_ch === "$" && this._options.selector_separator_newline) {
          this._output.add_new_line();
          insideScssMap = true;
        } else {
          this.eatWhitespace();
          parenLevel++;
          this.indent();
        }
      }
    } else if (this._ch === ')') {
      if (parenLevel) {
        parenLevel--;
        this.outdent();
      }
      if (insideScssMap && this._input.peek() === ";" && this._options.selector_separator_newline) {
        insideScssMap = false;
        this.outdent();
        this._output.add_new_line();
      }
      this.print_string(this._ch);
    } else if (this._ch === ',') {
      this.print_string(this._ch);
      this.eatWhitespace(true);
      if (this._options.selector_separator_newline && (!insidePropertyValue || insideScssMap) && parenLevel === 0 && !insideNonNestedAtRule) {
        this._output.add_new_line();
      } else {
        this._output.space_before_token = true;
      }
    } else if ((this._ch === '>' || this._ch === '+' || this._ch === '~') && !insidePropertyValue && parenLevel === 0) {
      //handle combinator spacing
      if (this._options.space_around_combinator) {
        this._output.space_before_token = true;
        this.print_string(this._ch);
        this._output.space_before_token = true;
      } else {
        this.print_string(this._ch);
        this.eatWhitespace();
        // squash extra whitespace
        if (this._ch && whitespaceChar.test(this._ch)) {
          this._ch = '';
        }
      }
    } else if (this._ch === ']') {
      this.print_string(this._ch);
    } else if (this._ch === '[') {
      this.preserveSingleSpace(isAfterSpace);
      this.print_string(this._ch);
    } else if (this._ch === '=') { // no whitespace before or after
      this.eatWhitespace();
      this.print_string('=');
      if (whitespaceChar.test(this._ch)) {
        this._ch = '';
      }
    } else if (this._ch === '!' && !this._input.lookBack("\\")) { // !important
      this._output.space_before_token = true;
      this.print_string(this._ch);
    } else {
      var preserveAfterSpace = previous_ch === '"' || previous_ch === '\'';
      this.preserveSingleSpace(preserveAfterSpace || isAfterSpace);
      this.print_string(this._ch);

      if (!this._output.just_added_newline() && this._input.peek() === '\n' && insideNonSemiColonValues) {
        this._output.add_new_line();
      }
    }
  }

  var sweetCode = this._output.get_code(eol);

  return sweetCode;
};

module.exports.Beautifier = Beautifier;


/***/ }),
/* 17 */
/***/ (function(module, __unused_webpack_exports, __nested_webpack_require_49890__) {

/*jshint node:true */
/*

  The MIT License (MIT)

  Copyright (c) 2007-2018 Einar Lielmanis, Liam Newman, and contributors.

  Permission is hereby granted, free of charge, to any person
  obtaining a copy of this software and associated documentation files
  (the "Software"), to deal in the Software without restriction,
  including without limitation the rights to use, copy, modify, merge,
  publish, distribute, sublicense, and/or sell copies of the Software,
  and to permit persons to whom the Software is furnished to do so,
  subject to the following conditions:

  The above copyright notice and this permission notice shall be
  included in all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  SOFTWARE.
*/



var BaseOptions = (__nested_webpack_require_49890__(6).Options);

function Options(options) {
  BaseOptions.call(this, options, 'css');

  this.selector_separator_newline = this._get_boolean('selector_separator_newline', true);
  this.newline_between_rules = this._get_boolean('newline_between_rules', true);
  var space_around_selector_separator = this._get_boolean('space_around_selector_separator');
  this.space_around_combinator = this._get_boolean('space_around_combinator') || space_around_selector_separator;

  var brace_style_split = this._get_selection_list('brace_style', ['collapse', 'expand', 'end-expand', 'none', 'preserve-inline']);
  this.brace_style = 'collapse';
  for (var bs = 0; bs < brace_style_split.length; bs++) {
    if (brace_style_split[bs] !== 'expand') {
      // default to collapse, as only collapse|expand is implemented for now
      this.brace_style = 'collapse';
    } else {
      this.brace_style = brace_style_split[bs];
    }
  }
}
Options.prototype = new BaseOptions();



module.exports.Options = Options;


/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nested_webpack_require_52370__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __nested_webpack_require_52370__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __nested_webpack_exports__ = __nested_webpack_require_52370__(15);
/******/ 	legacy_beautify_css = __nested_webpack_exports__;
/******/ 	
/******/ })()
;

var css_beautify = legacy_beautify_css;

/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageService.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageService.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClientCapabilities: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.ClientCapabilities),
/* harmony export */   CodeAction: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CodeAction),
/* harmony export */   CodeActionContext: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CodeActionContext),
/* harmony export */   CodeActionKind: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CodeActionKind),
/* harmony export */   Color: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Color),
/* harmony export */   ColorInformation: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.ColorInformation),
/* harmony export */   ColorPresentation: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.ColorPresentation),
/* harmony export */   Command: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Command),
/* harmony export */   CompletionItem: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CompletionItem),
/* harmony export */   CompletionItemKind: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CompletionItemKind),
/* harmony export */   CompletionItemTag: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CompletionItemTag),
/* harmony export */   CompletionList: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.CompletionList),
/* harmony export */   Diagnostic: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Diagnostic),
/* harmony export */   DiagnosticSeverity: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DiagnosticSeverity),
/* harmony export */   DocumentHighlight: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DocumentHighlight),
/* harmony export */   DocumentHighlightKind: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DocumentHighlightKind),
/* harmony export */   DocumentLink: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DocumentLink),
/* harmony export */   DocumentSymbol: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DocumentSymbol),
/* harmony export */   DocumentUri: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.DocumentUri),
/* harmony export */   FileType: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.FileType),
/* harmony export */   FoldingRange: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.FoldingRange),
/* harmony export */   FoldingRangeKind: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.FoldingRangeKind),
/* harmony export */   Hover: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Hover),
/* harmony export */   InsertTextFormat: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.InsertTextFormat),
/* harmony export */   Location: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Location),
/* harmony export */   MarkedString: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.MarkedString),
/* harmony export */   MarkupContent: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.MarkupContent),
/* harmony export */   MarkupKind: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.MarkupKind),
/* harmony export */   Position: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Position),
/* harmony export */   Range: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.Range),
/* harmony export */   SelectionRange: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.SelectionRange),
/* harmony export */   SymbolInformation: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.SymbolInformation),
/* harmony export */   SymbolKind: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.SymbolKind),
/* harmony export */   TextDocument: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.TextDocument),
/* harmony export */   TextDocumentEdit: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.TextDocumentEdit),
/* harmony export */   TextEdit: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.TextEdit),
/* harmony export */   VersionedTextDocumentIdentifier: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.VersionedTextDocumentIdentifier),
/* harmony export */   WorkspaceEdit: () => (/* reexport safe */ _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__.WorkspaceEdit),
/* harmony export */   getCSSLanguageService: () => (/* binding */ getCSSLanguageService),
/* harmony export */   getDefaultCSSDataProvider: () => (/* binding */ getDefaultCSSDataProvider),
/* harmony export */   getLESSLanguageService: () => (/* binding */ getLESSLanguageService),
/* harmony export */   getSCSSLanguageService: () => (/* binding */ getSCSSLanguageService),
/* harmony export */   newCSSDataProvider: () => (/* binding */ newCSSDataProvider)
/* harmony export */ });
/* harmony import */ var _parser_cssParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./parser/cssParser */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssParser.js");
/* harmony import */ var _services_cssCompletion__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./services/cssCompletion */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssCompletion.js");
/* harmony import */ var _services_cssHover__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./services/cssHover */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssHover.js");
/* harmony import */ var _services_cssNavigation__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/cssNavigation */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssNavigation.js");
/* harmony import */ var _services_cssCodeActions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/cssCodeActions */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssCodeActions.js");
/* harmony import */ var _services_cssValidation__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./services/cssValidation */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssValidation.js");
/* harmony import */ var _parser_scssParser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./parser/scssParser */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/scssParser.js");
/* harmony import */ var _services_scssCompletion__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./services/scssCompletion */ "../../node_modules/vscode-css-languageservice/lib/esm/services/scssCompletion.js");
/* harmony import */ var _parser_lessParser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./parser/lessParser */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/lessParser.js");
/* harmony import */ var _services_lessCompletion__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./services/lessCompletion */ "../../node_modules/vscode-css-languageservice/lib/esm/services/lessCompletion.js");
/* harmony import */ var _services_cssFolding__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./services/cssFolding */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssFolding.js");
/* harmony import */ var _services_cssFormatter__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./services/cssFormatter */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssFormatter.js");
/* harmony import */ var _languageFacts_dataManager__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./languageFacts/dataManager */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/dataManager.js");
/* harmony import */ var _languageFacts_dataProvider__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./languageFacts/dataProvider */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/dataProvider.js");
/* harmony import */ var _services_cssSelectionRange__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./services/cssSelectionRange */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssSelectionRange.js");
/* harmony import */ var _services_scssNavigation__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./services/scssNavigation */ "../../node_modules/vscode-css-languageservice/lib/esm/services/scssNavigation.js");
/* harmony import */ var _data_webCustomData__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./data/webCustomData */ "../../node_modules/vscode-css-languageservice/lib/esm/data/webCustomData.js");
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



















function getDefaultCSSDataProvider() {
    return newCSSDataProvider(_data_webCustomData__WEBPACK_IMPORTED_MODULE_16__.cssData);
}
function newCSSDataProvider(data) {
    return new _languageFacts_dataProvider__WEBPACK_IMPORTED_MODULE_13__.CSSDataProvider(data);
}
function createFacade(parser, completion, hover, navigation, codeActions, validation, cssDataManager) {
    return {
        configure: (settings) => {
            validation.configure(settings);
            completion.configure(settings?.completion);
            hover.configure(settings?.hover);
            navigation.configure(settings?.importAliases);
        },
        setDataProviders: cssDataManager.setDataProviders.bind(cssDataManager),
        doValidation: validation.doValidation.bind(validation),
        parseStylesheet: parser.parseStylesheet.bind(parser),
        doComplete: completion.doComplete.bind(completion),
        doComplete2: completion.doComplete2.bind(completion),
        setCompletionParticipants: completion.setCompletionParticipants.bind(completion),
        doHover: hover.doHover.bind(hover),
        format: _services_cssFormatter__WEBPACK_IMPORTED_MODULE_11__.format,
        findDefinition: navigation.findDefinition.bind(navigation),
        findReferences: navigation.findReferences.bind(navigation),
        findDocumentHighlights: navigation.findDocumentHighlights.bind(navigation),
        findDocumentLinks: navigation.findDocumentLinks.bind(navigation),
        findDocumentLinks2: navigation.findDocumentLinks2.bind(navigation),
        findDocumentSymbols: navigation.findSymbolInformations.bind(navigation),
        findDocumentSymbols2: navigation.findDocumentSymbols.bind(navigation),
        doCodeActions: codeActions.doCodeActions.bind(codeActions),
        doCodeActions2: codeActions.doCodeActions2.bind(codeActions),
        findDocumentColors: navigation.findDocumentColors.bind(navigation),
        getColorPresentations: navigation.getColorPresentations.bind(navigation),
        prepareRename: navigation.prepareRename.bind(navigation),
        doRename: navigation.doRename.bind(navigation),
        getFoldingRanges: _services_cssFolding__WEBPACK_IMPORTED_MODULE_10__.getFoldingRanges,
        getSelectionRanges: _services_cssSelectionRange__WEBPACK_IMPORTED_MODULE_14__.getSelectionRanges
    };
}
const defaultLanguageServiceOptions = {};
function getCSSLanguageService(options = defaultLanguageServiceOptions) {
    const cssDataManager = new _languageFacts_dataManager__WEBPACK_IMPORTED_MODULE_12__.CSSDataManager(options);
    return createFacade(new _parser_cssParser__WEBPACK_IMPORTED_MODULE_0__.Parser(), new _services_cssCompletion__WEBPACK_IMPORTED_MODULE_1__.CSSCompletion(null, options, cssDataManager), new _services_cssHover__WEBPACK_IMPORTED_MODULE_2__.CSSHover(options && options.clientCapabilities, cssDataManager), new _services_cssNavigation__WEBPACK_IMPORTED_MODULE_3__.CSSNavigation(options && options.fileSystemProvider, false), new _services_cssCodeActions__WEBPACK_IMPORTED_MODULE_4__.CSSCodeActions(cssDataManager), new _services_cssValidation__WEBPACK_IMPORTED_MODULE_5__.CSSValidation(cssDataManager), cssDataManager);
}
function getSCSSLanguageService(options = defaultLanguageServiceOptions) {
    const cssDataManager = new _languageFacts_dataManager__WEBPACK_IMPORTED_MODULE_12__.CSSDataManager(options);
    return createFacade(new _parser_scssParser__WEBPACK_IMPORTED_MODULE_6__.SCSSParser(), new _services_scssCompletion__WEBPACK_IMPORTED_MODULE_7__.SCSSCompletion(options, cssDataManager), new _services_cssHover__WEBPACK_IMPORTED_MODULE_2__.CSSHover(options && options.clientCapabilities, cssDataManager), new _services_scssNavigation__WEBPACK_IMPORTED_MODULE_15__.SCSSNavigation(options && options.fileSystemProvider), new _services_cssCodeActions__WEBPACK_IMPORTED_MODULE_4__.CSSCodeActions(cssDataManager), new _services_cssValidation__WEBPACK_IMPORTED_MODULE_5__.CSSValidation(cssDataManager), cssDataManager);
}
function getLESSLanguageService(options = defaultLanguageServiceOptions) {
    const cssDataManager = new _languageFacts_dataManager__WEBPACK_IMPORTED_MODULE_12__.CSSDataManager(options);
    return createFacade(new _parser_lessParser__WEBPACK_IMPORTED_MODULE_8__.LESSParser(), new _services_lessCompletion__WEBPACK_IMPORTED_MODULE_9__.LESSCompletion(options, cssDataManager), new _services_cssHover__WEBPACK_IMPORTED_MODULE_2__.CSSHover(options && options.clientCapabilities, cssDataManager), new _services_cssNavigation__WEBPACK_IMPORTED_MODULE_3__.CSSNavigation(options && options.fileSystemProvider, true), new _services_cssCodeActions__WEBPACK_IMPORTED_MODULE_4__.CSSCodeActions(cssDataManager), new _services_cssValidation__WEBPACK_IMPORTED_MODULE_5__.CSSValidation(cssDataManager), cssDataManager);
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ClientCapabilities: () => (/* binding */ ClientCapabilities),
/* harmony export */   CodeAction: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeAction),
/* harmony export */   CodeActionContext: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeActionContext),
/* harmony export */   CodeActionKind: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CodeActionKind),
/* harmony export */   Color: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Color),
/* harmony export */   ColorInformation: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.ColorInformation),
/* harmony export */   ColorPresentation: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.ColorPresentation),
/* harmony export */   Command: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Command),
/* harmony export */   CompletionItem: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionItem),
/* harmony export */   CompletionItemKind: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind),
/* harmony export */   CompletionItemTag: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionItemTag),
/* harmony export */   CompletionList: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.CompletionList),
/* harmony export */   Diagnostic: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Diagnostic),
/* harmony export */   DiagnosticSeverity: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DiagnosticSeverity),
/* harmony export */   DocumentHighlight: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlight),
/* harmony export */   DocumentHighlightKind: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind),
/* harmony export */   DocumentLink: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DocumentLink),
/* harmony export */   DocumentSymbol: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DocumentSymbol),
/* harmony export */   DocumentUri: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.DocumentUri),
/* harmony export */   FileType: () => (/* binding */ FileType),
/* harmony export */   FoldingRange: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.FoldingRange),
/* harmony export */   FoldingRangeKind: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.FoldingRangeKind),
/* harmony export */   Hover: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Hover),
/* harmony export */   InsertTextFormat: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.InsertTextFormat),
/* harmony export */   Location: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Location),
/* harmony export */   MarkedString: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkedString),
/* harmony export */   MarkupContent: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupContent),
/* harmony export */   MarkupKind: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind),
/* harmony export */   Position: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Position),
/* harmony export */   Range: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.Range),
/* harmony export */   SelectionRange: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SelectionRange),
/* harmony export */   SymbolInformation: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolInformation),
/* harmony export */   SymbolKind: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.SymbolKind),
/* harmony export */   TextDocument: () => (/* reexport safe */ vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__.TextDocument),
/* harmony export */   TextDocumentEdit: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextDocumentEdit),
/* harmony export */   TextEdit: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.TextEdit),
/* harmony export */   VersionedTextDocumentIdentifier: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.VersionedTextDocumentIdentifier),
/* harmony export */   WorkspaceEdit: () => (/* reexport safe */ vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.WorkspaceEdit)
/* harmony export */ });
/* harmony import */ var vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/esm/main.js");
/* harmony import */ var vscode_languageserver_textdocument__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vscode-languageserver-textdocument */ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




var ClientCapabilities;
(function (ClientCapabilities) {
    ClientCapabilities.LATEST = {
        textDocument: {
            completion: {
                completionItem: {
                    documentationFormat: [vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.PlainText]
                }
            },
            hover: {
                contentFormat: [vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown, vscode_languageserver_types__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.PlainText]
            }
        }
    };
})(ClientCapabilities || (ClientCapabilities = {}));
var FileType;
(function (FileType) {
    /**
     * The file type is unknown.
     */
    FileType[FileType["Unknown"] = 0] = "Unknown";
    /**
     * A regular file.
     */
    FileType[FileType["File"] = 1] = "File";
    /**
     * A directory.
     */
    FileType[FileType["Directory"] = 2] = "Directory";
    /**
     * A symbolic link to a file.
     */
    FileType[FileType["SymbolicLink"] = 64] = "SymbolicLink";
})(FileType || (FileType = {}));


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/data/webCustomData.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/data/webCustomData.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   cssData: () => (/* binding */ cssData)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
// file generated from @vscode/web-custom-data NPM package
const cssData = {
    "version": 1.1,
    "properties": [
        {
            "name": "additive-symbols",
            "browsers": [
                "FF33"
            ],
            "atRule": "@counter-style",
            "syntax": "[ <integer> && <symbol> ]#",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor. Needs to be specified if the counter system is 'additive'.",
            "restrictions": [
                "integer",
                "string",
                "image",
                "identifier"
            ]
        },
        {
            "name": "align-content",
            "browsers": [
                "E12",
                "FF28",
                "S9",
                "C29",
                "IE11",
                "O16"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Lines are packed toward the center of the flex container."
                },
                {
                    "name": "flex-end",
                    "description": "Lines are packed toward the end of the flex container."
                },
                {
                    "name": "flex-start",
                    "description": "Lines are packed toward the start of the flex container."
                },
                {
                    "name": "space-around",
                    "description": "Lines are evenly distributed in the flex container, with half-size spaces on either end."
                },
                {
                    "name": "space-between",
                    "description": "Lines are evenly distributed in the flex container."
                },
                {
                    "name": "stretch",
                    "description": "Lines stretch to take up the remaining space."
                },
                {
                    "name": "start"
                },
                {
                    "name": "end"
                },
                {
                    "name": "normal"
                },
                {
                    "name": "baseline"
                },
                {
                    "name": "first baseline"
                },
                {
                    "name": "last baseline"
                },
                {
                    "name": "space-around"
                },
                {
                    "name": "space-between"
                },
                {
                    "name": "space-evenly"
                },
                {
                    "name": "stretch"
                },
                {
                    "name": "safe"
                },
                {
                    "name": "unsafe"
                }
            ],
            "syntax": "normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>",
            "relevance": 66,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/align-content"
                }
            ],
            "description": "Aligns a flex container's lines within the flex container when there is extra space in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "align-items",
            "browsers": [
                "E12",
                "FF20",
                "S9",
                "C29",
                "IE11",
                "O16"
            ],
            "values": [
                {
                    "name": "baseline",
                    "description": "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
                },
                {
                    "name": "center",
                    "description": "The flex item's margin box is centered in the cross axis within the line."
                },
                {
                    "name": "flex-end",
                    "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
                },
                {
                    "name": "flex-start",
                    "description": "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
                },
                {
                    "name": "normal"
                },
                {
                    "name": "start"
                },
                {
                    "name": "end"
                },
                {
                    "name": "self-start"
                },
                {
                    "name": "self-end"
                },
                {
                    "name": "first baseline"
                },
                {
                    "name": "last baseline"
                },
                {
                    "name": "stretch"
                },
                {
                    "name": "safe"
                },
                {
                    "name": "unsafe"
                }
            ],
            "syntax": "normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]",
            "relevance": 87,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/align-items"
                }
            ],
            "description": "Aligns flex items along the cross axis of the current line of the flex container.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "justify-items",
            "browsers": [
                "E12",
                "FF20",
                "S9",
                "C52",
                "IE11",
                "O12.1"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "normal"
                },
                {
                    "name": "end"
                },
                {
                    "name": "start"
                },
                {
                    "name": "flex-end",
                    "description": "\"Flex items are packed toward the end of the line.\""
                },
                {
                    "name": "flex-start",
                    "description": "\"Flex items are packed toward the start of the line.\""
                },
                {
                    "name": "self-end",
                    "description": "The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis."
                },
                {
                    "name": "self-start",
                    "description": "The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis.."
                },
                {
                    "name": "center",
                    "description": "The items are packed flush to each other toward the center of the of the alignment container."
                },
                {
                    "name": "left"
                },
                {
                    "name": "right"
                },
                {
                    "name": "baseline"
                },
                {
                    "name": "first baseline"
                },
                {
                    "name": "last baseline"
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
                },
                {
                    "name": "safe"
                },
                {
                    "name": "unsafe"
                },
                {
                    "name": "legacy"
                }
            ],
            "syntax": "normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/justify-items"
                }
            ],
            "description": "Defines the default justify-self for all items of the box, giving them the default way of justifying each box along the appropriate axis",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "justify-self",
            "browsers": [
                "E16",
                "FF45",
                "S10.1",
                "C57",
                "IE10",
                "O44"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "normal"
                },
                {
                    "name": "end"
                },
                {
                    "name": "start"
                },
                {
                    "name": "flex-end",
                    "description": "\"Flex items are packed toward the end of the line.\""
                },
                {
                    "name": "flex-start",
                    "description": "\"Flex items are packed toward the start of the line.\""
                },
                {
                    "name": "self-end",
                    "description": "The item is packed flush to the edge of the alignment container of the end side of the item, in the appropriate axis."
                },
                {
                    "name": "self-start",
                    "description": "The item is packed flush to the edge of the alignment container of the start side of the item, in the appropriate axis.."
                },
                {
                    "name": "center",
                    "description": "The items are packed flush to each other toward the center of the of the alignment container."
                },
                {
                    "name": "left"
                },
                {
                    "name": "right"
                },
                {
                    "name": "baseline"
                },
                {
                    "name": "first baseline"
                },
                {
                    "name": "last baseline"
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
                },
                {
                    "name": "save"
                },
                {
                    "name": "unsave"
                }
            ],
            "syntax": "auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/justify-self"
                }
            ],
            "description": "Defines the way of justifying a box inside its container along the appropriate axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "align-self",
            "browsers": [
                "E12",
                "FF20",
                "S9",
                "C29",
                "IE10",
                "O12.1"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Computes to the value of 'align-items' on the element's parent, or 'stretch' if the element has no parent. On absolutely positioned elements, it computes to itself."
                },
                {
                    "name": "normal"
                },
                {
                    "name": "self-end"
                },
                {
                    "name": "self-start"
                },
                {
                    "name": "baseline",
                    "description": "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
                },
                {
                    "name": "center",
                    "description": "The flex item's margin box is centered in the cross axis within the line."
                },
                {
                    "name": "flex-end",
                    "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
                },
                {
                    "name": "flex-start",
                    "description": "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
                },
                {
                    "name": "baseline"
                },
                {
                    "name": "first baseline"
                },
                {
                    "name": "last baseline"
                },
                {
                    "name": "safe"
                },
                {
                    "name": "unsafe"
                }
            ],
            "syntax": "auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>",
            "relevance": 73,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/align-self"
                }
            ],
            "description": "Allows the default alignment along the cross axis to be overridden for individual flex items.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "all",
            "browsers": [
                "E79",
                "FF27",
                "S9.1",
                "C37",
                "O24"
            ],
            "values": [],
            "syntax": "initial | inherit | unset | revert | revert-layer",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/all"
                }
            ],
            "description": "Shorthand that resets all properties except 'direction' and 'unicode-bidi'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "alt",
            "browsers": [
                "S9"
            ],
            "values": [],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/alt"
                }
            ],
            "description": "Provides alternative text for assistive technology to replace the generated content of a ::before or ::after element.",
            "restrictions": [
                "string",
                "enum"
            ]
        },
        {
            "name": "animation",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C43",
                "IE10",
                "O30"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                },
                {
                    "name": "none",
                    "description": "No animation is performed"
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "syntax": "<single-animation>#",
            "relevance": 82,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation"
                }
            ],
            "description": "Shorthand property combines six of the animation properties into a single property.",
            "restrictions": [
                "time",
                "timing-function",
                "enum",
                "identifier",
                "number"
            ]
        },
        {
            "name": "animation-delay",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C43",
                "IE10",
                "O30"
            ],
            "syntax": "<time>#",
            "relevance": 66,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-delay"
                }
            ],
            "description": "Defines when the animation will start.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "animation-direction",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C43",
                "IE10",
                "O30"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "syntax": "<single-animation-direction>#",
            "relevance": 58,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-direction"
                }
            ],
            "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "animation-duration",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C43",
                "IE10",
                "O30"
            ],
            "syntax": "<time>#",
            "relevance": 72,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-duration"
                }
            ],
            "description": "Defines the length of time that an animation takes to complete one cycle.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "animation-fill-mode",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C43",
                "IE10",
                "O30"
            ],
            "values": [
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "none",
                    "description": "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."
                }
            ],
            "syntax": "<single-animation-fill-mode>#",
            "relevance": 65,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode"
                }
            ],
            "description": "Defines what values are applied by the animation outside the time it is executing.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "animation-iteration-count",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C43",
                "IE10",
                "O30"
            ],
            "values": [
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                }
            ],
            "syntax": "<single-animation-iteration-count>#",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count"
                }
            ],
            "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            "restrictions": [
                "number",
                "enum"
            ]
        },
        {
            "name": "animation-name",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C43",
                "IE10",
                "O30"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No animation is performed"
                }
            ],
            "syntax": "[ none | <keyframes-name> ]#",
            "relevance": 72,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-name"
                }
            ],
            "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            "restrictions": [
                "identifier",
                "enum"
            ]
        },
        {
            "name": "animation-play-state",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C43",
                "IE10",
                "O30"
            ],
            "values": [
                {
                    "name": "paused",
                    "description": "A running animation will be paused."
                },
                {
                    "name": "running",
                    "description": "Resume playback of a paused animation."
                }
            ],
            "syntax": "<single-animation-play-state>#",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-play-state"
                }
            ],
            "description": "Defines whether the animation is running or paused.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "animation-timing-function",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C43",
                "IE10",
                "O30"
            ],
            "syntax": "<easing-function>#",
            "relevance": 71,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-timing-function"
                }
            ],
            "description": "Describes how the animation will progress over one cycle of its duration.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "backface-visibility",
            "browsers": [
                "E12",
                "FF16",
                "S15.4",
                "C36",
                "IE10",
                "O23"
            ],
            "values": [
                {
                    "name": "hidden",
                    "description": "Back side is hidden."
                },
                {
                    "name": "visible",
                    "description": "Back side is visible."
                }
            ],
            "syntax": "visible | hidden",
            "relevance": 60,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/backface-visibility"
                }
            ],
            "description": "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "background",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [
                {
                    "name": "fixed",
                    "description": "The background is fixed with regard to the viewport. In paged media where there is no viewport, a 'fixed' background is fixed with respect to the page box and therefore replicated on every page."
                },
                {
                    "name": "local",
                    "description": "The background is fixed with regard to the element's contents: if the element has a scrolling mechanism, the background scrolls with the element's contents."
                },
                {
                    "name": "none",
                    "description": "A value of 'none' counts as an image layer but draws nothing."
                },
                {
                    "name": "scroll",
                    "description": "The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element's border.)"
                }
            ],
            "syntax": "[ <bg-layer> , ]* <final-bg-layer>",
            "relevance": 93,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background"
                }
            ],
            "description": "Shorthand property for setting most background properties at the same place in the style sheet.",
            "restrictions": [
                "enum",
                "image",
                "color",
                "position",
                "length",
                "repeat",
                "percentage",
                "box"
            ]
        },
        {
            "name": "background-attachment",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [
                {
                    "name": "fixed",
                    "description": "The background is fixed with regard to the viewport. In paged media where there is no viewport, a 'fixed' background is fixed with respect to the page box and therefore replicated on every page."
                },
                {
                    "name": "local",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O3.5"
                    ],
                    "description": "The background is fixed with regard to the element's contents: if the element has a scrolling mechanism, the background scrolls with the element's contents."
                },
                {
                    "name": "scroll",
                    "description": "The background is fixed with regard to the element itself and does not scroll with its contents. (It is effectively attached to the element's border.)"
                }
            ],
            "syntax": "<attachment>#",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-attachment"
                }
            ],
            "description": "Specifies whether the background images are fixed with regard to the viewport ('fixed') or scroll along with the element ('scroll') or its contents ('local').",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "background-blend-mode",
            "browsers": [
                "E79",
                "FF30",
                "S8",
                "C35",
                "O22"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "Default attribute which specifies no blending"
                },
                {
                    "name": "multiply",
                    "description": "The source color is multiplied by the destination color and replaces the destination."
                },
                {
                    "name": "screen",
                    "description": "Multiplies the complements of the backdrop and source color values, then complements the result."
                },
                {
                    "name": "overlay",
                    "description": "Multiplies or screens the colors, depending on the backdrop color value."
                },
                {
                    "name": "darken",
                    "description": "Selects the darker of the backdrop and source colors."
                },
                {
                    "name": "lighten",
                    "description": "Selects the lighter of the backdrop and source colors."
                },
                {
                    "name": "color-dodge",
                    "description": "Brightens the backdrop color to reflect the source color."
                },
                {
                    "name": "color-burn",
                    "description": "Darkens the backdrop color to reflect the source color."
                },
                {
                    "name": "hard-light",
                    "description": "Multiplies or screens the colors, depending on the source color value."
                },
                {
                    "name": "soft-light",
                    "description": "Darkens or lightens the colors, depending on the source color value."
                },
                {
                    "name": "difference",
                    "description": "Subtracts the darker of the two constituent colors from the lighter color.."
                },
                {
                    "name": "exclusion",
                    "description": "Produces an effect similar to that of the Difference mode but lower in contrast."
                },
                {
                    "name": "hue",
                    "browsers": [
                        "E79",
                        "FF30",
                        "S8",
                        "C35",
                        "O22"
                    ],
                    "description": "Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color."
                },
                {
                    "name": "saturation",
                    "browsers": [
                        "E79",
                        "FF30",
                        "S8",
                        "C35",
                        "O22"
                    ],
                    "description": "Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color."
                },
                {
                    "name": "color",
                    "browsers": [
                        "E79",
                        "FF30",
                        "S8",
                        "C35",
                        "O22"
                    ],
                    "description": "Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color."
                },
                {
                    "name": "luminosity",
                    "browsers": [
                        "E79",
                        "FF30",
                        "S8",
                        "C35",
                        "O22"
                    ],
                    "description": "Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color."
                }
            ],
            "syntax": "<blend-mode>#",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-blend-mode"
                }
            ],
            "description": "Defines the blending mode of each background layer.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "background-clip",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C1",
                "IE9",
                "O10.5"
            ],
            "syntax": "<box>#",
            "relevance": 69,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-clip"
                }
            ],
            "description": "Determines the background painting area.",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "background-color",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<color>",
            "relevance": 94,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-color"
                }
            ],
            "description": "Sets the background color of an element.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "background-image",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Counts as an image layer but draws nothing."
                }
            ],
            "syntax": "<bg-image>#",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-image"
                }
            ],
            "description": "Sets the background image(s) of an element.",
            "restrictions": [
                "image",
                "enum"
            ]
        },
        {
            "name": "background-origin",
            "browsers": [
                "E12",
                "FF4",
                "S3",
                "C1",
                "IE9",
                "O10.5"
            ],
            "syntax": "<box>#",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-origin"
                }
            ],
            "description": "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "background-position",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<bg-position>#",
            "relevance": 87,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-position"
                }
            ],
            "description": "Specifies the initial position of the background image(s) (after any resizing) within their corresponding background positioning area.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "background-position-x",
            "browsers": [
                "E12",
                "FF49",
                "S1",
                "C1",
                "IE6",
                "O15"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Equivalent to '50%' ('left 50%') for the horizontal position if the horizontal position is not otherwise specified, or '50%' ('top 50%') for the vertical position if it is."
                },
                {
                    "name": "left",
                    "description": "Equivalent to '0%' for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset."
                },
                {
                    "name": "right",
                    "description": "Equivalent to '100%' for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset."
                }
            ],
            "syntax": "[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-position-x"
                }
            ],
            "description": "If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "background-position-y",
            "browsers": [
                "E12",
                "FF49",
                "S1",
                "C1",
                "IE6",
                "O15"
            ],
            "values": [
                {
                    "name": "bottom",
                    "description": "Equivalent to '100%' for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset."
                },
                {
                    "name": "center",
                    "description": "Equivalent to '50%' ('left 50%') for the horizontal position if the horizontal position is not otherwise specified, or '50%' ('top 50%') for the vertical position if it is."
                },
                {
                    "name": "top",
                    "description": "Equivalent to '0%' for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset."
                }
            ],
            "syntax": "[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-position-y"
                }
            ],
            "description": "If background images have been specified, this property specifies their initial position (after any resizing) within their corresponding background positioning area.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "background-repeat",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [],
            "syntax": "<repeat-style>#",
            "relevance": 85,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-repeat"
                }
            ],
            "description": "Specifies how background images are tiled after they have been sized and positioned.",
            "restrictions": [
                "repeat"
            ]
        },
        {
            "name": "background-size",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C3",
                "IE9",
                "O10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Resolved by using the image's intrinsic ratio and the size of the other dimension, or failing that, using the image's intrinsic size, or failing that, treating it as 100%."
                },
                {
                    "name": "contain",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."
                },
                {
                    "name": "cover",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."
                }
            ],
            "syntax": "<bg-size>#",
            "relevance": 85,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/background-size"
                }
            ],
            "description": "Specifies the size of the background images.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "behavior",
            "browsers": [
                "IE6"
            ],
            "relevance": 50,
            "description": "IE only. Used to extend behaviors of the browser.",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "block-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Depends on the values of other properties."
                }
            ],
            "syntax": "<'width'>",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/block-size"
                }
            ],
            "description": "Size of an element in the direction opposite that of the direction specified by 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<line-width> || <line-style> || <color>",
            "relevance": 95,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border"
                }
            ],
            "description": "Shorthand property for setting border width, style, and color.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-block-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end"
                }
            ],
            "description": "Logical 'border-bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-block-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start"
                }
            ],
            "description": "Logical 'border-top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-block-end-color",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end-color"
                }
            ],
            "description": "Logical 'border-bottom-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-block-start-color",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start-color"
                }
            ],
            "description": "Logical 'border-top-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-block-end-style",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end-style"
                }
            ],
            "description": "Logical 'border-bottom-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-block-start-style",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start-style"
                }
            ],
            "description": "Logical 'border-top-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-block-end-width",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-end-width"
                }
            ],
            "description": "Logical 'border-bottom-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-block-start-width",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-start-width"
                }
            ],
            "description": "Logical 'border-top-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-bottom",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<line-width> || <line-style> || <color>",
            "relevance": 87,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom"
                }
            ],
            "description": "Shorthand property for setting border width, style and color.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-bottom-color",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<'border-top-color'>",
            "relevance": 70,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-color"
                }
            ],
            "description": "Sets the color of the bottom border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-bottom-left-radius",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C4",
                "IE9",
                "O10.5"
            ],
            "syntax": "<length-percentage>{1,2}",
            "relevance": 74,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius"
                }
            ],
            "description": "Defines the radii of the bottom left outer border edge.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border-bottom-right-radius",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C4",
                "IE9",
                "O10.5"
            ],
            "syntax": "<length-percentage>{1,2}",
            "relevance": 74,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius"
                }
            ],
            "description": "Defines the radii of the bottom right outer border edge.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border-bottom-style",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5.5",
                "O9.2"
            ],
            "syntax": "<line-style>",
            "relevance": 60,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-style"
                }
            ],
            "description": "Sets the style of the bottom border.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-bottom-width",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<line-width>",
            "relevance": 65,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-bottom-width"
                }
            ],
            "description": "Sets the thickness of the bottom border.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-collapse",
            "browsers": [
                "E12",
                "FF1",
                "S1.2",
                "C1",
                "IE5",
                "O4"
            ],
            "values": [
                {
                    "name": "collapse",
                    "description": "Selects the collapsing borders model."
                },
                {
                    "name": "separate",
                    "description": "Selects the separated borders border model."
                }
            ],
            "syntax": "collapse | separate",
            "relevance": 71,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-collapse"
                }
            ],
            "description": "Selects a table's border model.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "border-color",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [],
            "syntax": "<color>{1,4}",
            "relevance": 86,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-color"
                }
            ],
            "description": "The color of the border around all four edges of an element.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-image",
            "browsers": [
                "E12",
                "FF15",
                "S6",
                "C16",
                "IE11",
                "O11"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
                },
                {
                    "name": "fill",
                    "description": "Causes the middle part of the border-image to be preserved."
                },
                {
                    "name": "none",
                    "description": "Use the border styles."
                },
                {
                    "name": "repeat",
                    "description": "The image is tiled (repeated) to fill the area."
                },
                {
                    "name": "round",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
                },
                {
                    "name": "space",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
                },
                {
                    "name": "stretch",
                    "description": "The image is stretched to fill the area."
                },
                {
                    "name": "url()"
                }
            ],
            "syntax": "<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image"
                }
            ],
            "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "percentage",
                "number",
                "url",
                "enum"
            ]
        },
        {
            "name": "border-image-outset",
            "browsers": [
                "E12",
                "FF15",
                "S6",
                "C15",
                "IE11",
                "O15"
            ],
            "syntax": "[ <length> | <number> ]{1,4}",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-outset"
                }
            ],
            "description": "The values specify the amount by which the border image area extends beyond the border box on the top, right, bottom, and left sides respectively. If the fourth value is absent, it is the same as the second. If the third one is also absent, it is the same as the first. If the second one is also absent, it is the same as the first. Numbers represent multiples of the corresponding border-width.",
            "restrictions": [
                "length",
                "number"
            ]
        },
        {
            "name": "border-image-repeat",
            "browsers": [
                "E12",
                "FF15",
                "S6",
                "C15",
                "IE11",
                "O15"
            ],
            "values": [
                {
                    "name": "repeat",
                    "description": "The image is tiled (repeated) to fill the area."
                },
                {
                    "name": "round",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
                },
                {
                    "name": "space",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
                },
                {
                    "name": "stretch",
                    "description": "The image is stretched to fill the area."
                }
            ],
            "syntax": "[ stretch | repeat | round | space ]{1,2}",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-repeat"
                }
            ],
            "description": "Specifies how the images for the sides and the middle part of the border image are scaled and tiled. If the second keyword is absent, it is assumed to be the same as the first.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "border-image-slice",
            "browsers": [
                "E12",
                "FF15",
                "S6",
                "C15",
                "IE11",
                "O15"
            ],
            "values": [
                {
                    "name": "fill",
                    "description": "Causes the middle part of the border-image to be preserved."
                }
            ],
            "syntax": "<number-percentage>{1,4} && fill?",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-slice"
                }
            ],
            "description": "Specifies inward offsets from the top, right, bottom, and left edges of the image, dividing it into nine regions: four corners, four edges and a middle.",
            "restrictions": [
                "number",
                "percentage"
            ]
        },
        {
            "name": "border-image-source",
            "browsers": [
                "E12",
                "FF15",
                "S6",
                "C15",
                "IE11",
                "O15"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Use the border styles."
                }
            ],
            "syntax": "none | <image>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-source"
                }
            ],
            "description": "Specifies an image to use instead of the border styles given by the 'border-style' properties and as an additional background layer for the element. If the value is 'none' or if the image cannot be displayed, the border styles will be used.",
            "restrictions": [
                "image"
            ]
        },
        {
            "name": "border-image-width",
            "browsers": [
                "E12",
                "FF13",
                "S6",
                "C15",
                "IE11",
                "O15"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
                }
            ],
            "syntax": "[ <length-percentage> | <number> | auto ]{1,4}",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-image-width"
                }
            ],
            "description": "The four values of 'border-image-width' specify offsets that are used to divide the border image area into nine parts. They represent inward distances from the top, right, bottom, and left sides of the area, respectively.",
            "restrictions": [
                "length",
                "percentage",
                "number"
            ]
        },
        {
            "name": "border-inline-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end"
                }
            ],
            "description": "Logical 'border-right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-inline-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start"
                }
            ],
            "description": "Logical 'border-left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-inline-end-color",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color"
                }
            ],
            "description": "Logical 'border-right-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-inline-start-color",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-color'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color"
                }
            ],
            "description": "Logical 'border-left-color'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-inline-end-style",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style"
                }
            ],
            "description": "Logical 'border-right-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-inline-start-style",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style"
                }
            ],
            "description": "Logical 'border-left-style'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-inline-end-width",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width"
                }
            ],
            "description": "Logical 'border-right-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-inline-start-width",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width"
                }
            ],
            "description": "Logical 'border-left-width'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-left",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<line-width> || <line-style> || <color>",
            "relevance": 81,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-left"
                }
            ],
            "description": "Shorthand property for setting border width, style and color",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-left-color",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<color>",
            "relevance": 67,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-left-color"
                }
            ],
            "description": "Sets the color of the left border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-left-style",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5.5",
                "O9.2"
            ],
            "syntax": "<line-style>",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-left-style"
                }
            ],
            "description": "Sets the style of the left border.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-left-width",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<line-width>",
            "relevance": 63,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-left-width"
                }
            ],
            "description": "Sets the thickness of the left border.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-radius",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C4",
                "IE9",
                "O10.5"
            ],
            "syntax": "<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?",
            "relevance": 92,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-radius"
                }
            ],
            "description": "Defines the radii of the outer border edge.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border-right",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5.5",
                "O9.2"
            ],
            "syntax": "<line-width> || <line-style> || <color>",
            "relevance": 80,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-right"
                }
            ],
            "description": "Shorthand property for setting border width, style and color",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-right-color",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<color>",
            "relevance": 66,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-right-color"
                }
            ],
            "description": "Sets the color of the right border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-right-style",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5.5",
                "O9.2"
            ],
            "syntax": "<line-style>",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-right-style"
                }
            ],
            "description": "Sets the style of the right border.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-right-width",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<line-width>",
            "relevance": 63,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-right-width"
                }
            ],
            "description": "Sets the thickness of the right border.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-spacing",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE8",
                "O4"
            ],
            "syntax": "<length> <length>?",
            "relevance": 67,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-spacing"
                }
            ],
            "description": "The lengths specify the distance that separates adjoining cell borders. If one length is specified, it gives both the horizontal and vertical spacing. If two are specified, the first gives the horizontal spacing and the second the vertical spacing. Lengths may not be negative.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "border-style",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [],
            "syntax": "<line-style>{1,4}",
            "relevance": 79,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-style"
                }
            ],
            "description": "The style of the border around edges of an element.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-top",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<line-width> || <line-style> || <color>",
            "relevance": 86,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top"
                }
            ],
            "description": "Shorthand property for setting border width, style and color",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "border-top-color",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<color>",
            "relevance": 71,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-color"
                }
            ],
            "description": "Sets the color of the top border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "border-top-left-radius",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C4",
                "IE9",
                "O10.5"
            ],
            "syntax": "<length-percentage>{1,2}",
            "relevance": 75,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius"
                }
            ],
            "description": "Defines the radii of the top left outer border edge.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border-top-right-radius",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C4",
                "IE9",
                "O10.5"
            ],
            "syntax": "<length-percentage>{1,2}",
            "relevance": 75,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius"
                }
            ],
            "description": "Defines the radii of the top right outer border edge.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "border-top-style",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5.5",
                "O9.2"
            ],
            "syntax": "<line-style>",
            "relevance": 58,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-style"
                }
            ],
            "description": "Sets the style of the top border.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "border-top-width",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<line-width>",
            "relevance": 61,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-top-width"
                }
            ],
            "description": "Sets the thickness of the top border.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "border-width",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [],
            "syntax": "<line-width>{1,4}",
            "relevance": 82,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-width"
                }
            ],
            "description": "Shorthand that sets the four 'border-*-width' properties. If it has four values, they set top, right, bottom and left in that order. If left is missing, it is the same as right; if bottom is missing, it is the same as top; if right is missing, it is the same as top.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "bottom",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5",
                "O6"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 90,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/bottom"
                }
            ],
            "description": "Specifies how far an absolutely positioned box's bottom margin edge is offset above the bottom edge of the box's 'containing block'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "box-decoration-break",
            "browsers": [
                "E79",
                "FF32",
                "S7",
                "C22",
                "O15"
            ],
            "values": [
                {
                    "name": "clone",
                    "description": "Each box is independently wrapped with the border and padding."
                },
                {
                    "name": "slice",
                    "description": "The effect is as though the element were rendered with no breaks present, and then sliced by the breaks afterward."
                }
            ],
            "syntax": "slice | clone",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-decoration-break"
                }
            ],
            "description": "Specifies whether individual boxes are treated as broken pieces of one continuous box, or whether each box is individually wrapped with the border and padding.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "box-shadow",
            "browsers": [
                "E12",
                "FF4",
                "S5.1",
                "C10",
                "IE9",
                "O10.5"
            ],
            "values": [
                {
                    "name": "inset",
                    "description": "Changes the drop shadow from an outer shadow (one that shadows the box onto the canvas, as if it were lifted above the canvas) to an inner shadow (one that shadows the canvas onto the box, as if the box were cut out of the canvas and shifted behind it)."
                },
                {
                    "name": "none",
                    "description": "No shadow."
                }
            ],
            "syntax": "none | <shadow>#",
            "relevance": 90,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-shadow"
                }
            ],
            "description": "Attaches one or more drop-shadows to the box. The property is a comma-separated list of shadows, each specified by 2-4 length values, an optional color, and an optional 'inset' keyword. Omitted lengths are 0; omitted colors are a user agent chosen color.",
            "restrictions": [
                "length",
                "color",
                "enum"
            ]
        },
        {
            "name": "box-sizing",
            "browsers": [
                "E12",
                "FF29",
                "S5.1",
                "C10",
                "IE8",
                "O7"
            ],
            "values": [
                {
                    "name": "border-box",
                    "description": "The specified width and height (and respective min/max properties) on this element determine the border box of the element."
                },
                {
                    "name": "content-box",
                    "description": "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element."
                }
            ],
            "syntax": "content-box | border-box",
            "relevance": 92,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-sizing"
                }
            ],
            "description": "Specifies the behavior of the 'width' and 'height' properties.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "break-after",
            "browsers": [
                "E12",
                "FF65",
                "S10",
                "C50",
                "IE10",
                "O37"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the principal box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a break before/after the principal box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the principal box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the principal box."
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the principal box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the principal box."
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "syntax": "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/break-after"
                }
            ],
            "description": "Describes the page/column/region break behavior after the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "break-before",
            "browsers": [
                "E12",
                "FF65",
                "S10",
                "C50",
                "IE10",
                "O37"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the principal box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a break before/after the principal box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the principal box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the principal box."
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the principal box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the principal box."
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "syntax": "auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/break-before"
                }
            ],
            "description": "Describes the page/column/region break behavior before the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "break-inside",
            "browsers": [
                "E12",
                "FF65",
                "S10",
                "C50",
                "IE10",
                "O37"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Impose no additional breaking constraints within the box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid breaks within the box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break within the box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break within the box."
                }
            ],
            "syntax": "auto | avoid | avoid-page | avoid-column | avoid-region",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/break-inside"
                }
            ],
            "description": "Describes the page/column/region break behavior inside the principal box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "caption-side",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE8",
                "O4"
            ],
            "values": [
                {
                    "name": "bottom",
                    "description": "Positions the caption box below the table box."
                },
                {
                    "name": "top",
                    "description": "Positions the caption box above the table box."
                }
            ],
            "syntax": "top | bottom | block-start | block-end | inline-start | inline-end",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/caption-side"
                }
            ],
            "description": "Specifies the position of the caption box with respect to the table box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "caret-color",
            "browsers": [
                "E79",
                "FF53",
                "S11.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent selects an appropriate color for the caret. This is generally currentcolor, but the user agent may choose a different color to ensure good visibility and contrast with the surrounding content, taking into account the value of currentcolor, the background, shadows, and other factors."
                }
            ],
            "syntax": "auto | <color>",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/caret-color"
                }
            ],
            "description": "Controls the color of the text insertion indicator.",
            "restrictions": [
                "color",
                "enum"
            ]
        },
        {
            "name": "clear",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [
                {
                    "name": "both",
                    "description": "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating and left-floating boxes that resulted from elements earlier in the source document."
                },
                {
                    "name": "left",
                    "description": "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any left-floating boxes that resulted from elements earlier in the source document."
                },
                {
                    "name": "none",
                    "description": "No constraint on the box's position with respect to floats."
                },
                {
                    "name": "right",
                    "description": "The clearance of the generated box is set to the amount necessary to place the top border edge below the bottom outer edge of any right-floating boxes that resulted from elements earlier in the source document."
                }
            ],
            "syntax": "none | left | right | both | inline-start | inline-end",
            "relevance": 83,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/clear"
                }
            ],
            "description": "Indicates which sides of an element's box(es) may not be adjacent to an earlier floating box. The 'clear' property does not consider floats inside the element itself or in other block formatting contexts.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "clip",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The element does not clip."
                },
                {
                    "name": "rect()",
                    "description": "Specifies offsets from the edges of the border box."
                }
            ],
            "syntax": "<shape> | auto",
            "relevance": 74,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/clip"
                }
            ],
            "description": "Deprecated. Use the 'clip-path' property when support allows. Defines the visible portion of an element's box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "clip-path",
            "browsers": [
                "E79",
                "FF3.5",
                "S9.1",
                "C55",
                "IE10",
                "O42"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No clipping path gets created."
                },
                {
                    "name": "url()",
                    "description": "References a <clipPath> element to create a clipping path."
                }
            ],
            "syntax": "<clip-source> | [ <basic-shape> || <geometry-box> ] | none",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/clip-path"
                }
            ],
            "description": "Specifies a clipping path where everything inside the path is visible and everything outside is clipped out.",
            "restrictions": [
                "url",
                "shape",
                "geometry-box",
                "enum"
            ]
        },
        {
            "name": "clip-rule",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "evenodd",
                    "description": "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses."
                },
                {
                    "name": "nonzero",
                    "description": "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray."
                }
            ],
            "relevance": 50,
            "description": "Indicates the algorithm which is to be used to determine what parts of the canvas are included inside the shape.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "color",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "syntax": "<color>",
            "relevance": 94,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/color"
                }
            ],
            "description": "Sets the color of an element's text",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "color-interpolation-filters",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Color operations are not required to occur in a particular color space."
                },
                {
                    "name": "linearRGB",
                    "description": "Color operations should occur in the linearized RGB color space."
                },
                {
                    "name": "sRGB",
                    "description": "Color operations should occur in the sRGB color space."
                }
            ],
            "relevance": 50,
            "description": "Specifies the color space for imaging operations performed via filter effects.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "column-count",
            "browsers": [
                "E12",
                "FF52",
                "S9",
                "C50",
                "IE10",
                "O11.1"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Determines the number of columns by the 'column-width' property and the element width."
                }
            ],
            "syntax": "<integer> | auto",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-count"
                }
            ],
            "description": "Describes the optimal number of columns into which the content of the element will be flowed.",
            "restrictions": [
                "integer",
                "enum"
            ]
        },
        {
            "name": "column-fill",
            "browsers": [
                "E12",
                "FF52",
                "S9",
                "C50",
                "IE10",
                "O37"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Fills columns sequentially."
                },
                {
                    "name": "balance",
                    "description": "Balance content equally between columns, if possible."
                }
            ],
            "syntax": "auto | balance | balance-all",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-fill"
                }
            ],
            "description": "In continuous media, this property will only be consulted if the length of columns has been constrained. Otherwise, columns will automatically be balanced.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "column-gap",
            "browsers": [
                "E12",
                "FF1.5",
                "S3",
                "C1",
                "IE10",
                "O11.1"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "User agent specific and typically equivalent to 1em."
                }
            ],
            "syntax": "normal | <length-percentage>",
            "relevance": 60,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-gap"
                }
            ],
            "description": "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
            "restrictions": [
                "length",
                "enum"
            ]
        },
        {
            "name": "column-rule",
            "browsers": [
                "E12",
                "FF52",
                "S9",
                "C50",
                "IE10",
                "O11.1"
            ],
            "syntax": "<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule"
                }
            ],
            "description": "Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "column-rule-color",
            "browsers": [
                "E12",
                "FF52",
                "S9",
                "C50",
                "IE10",
                "O11.1"
            ],
            "syntax": "<color>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule-color"
                }
            ],
            "description": "Sets the color of the column rule",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "column-rule-style",
            "browsers": [
                "E12",
                "FF52",
                "S9",
                "C50",
                "IE10",
                "O11.1"
            ],
            "syntax": "<'border-style'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule-style"
                }
            ],
            "description": "Sets the style of the rule between columns of an element.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "column-rule-width",
            "browsers": [
                "E12",
                "FF52",
                "S9",
                "C50",
                "IE10",
                "O11.1"
            ],
            "syntax": "<'border-width'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-rule-width"
                }
            ],
            "description": "Sets the width of the rule between columns. Negative values are not allowed.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "columns",
            "browsers": [
                "E12",
                "FF52",
                "S9",
                "C50",
                "IE10",
                "O11.1"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "syntax": "<'column-width'> || <'column-count'>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/columns"
                }
            ],
            "description": "A shorthand property which sets both 'column-width' and 'column-count'.",
            "restrictions": [
                "length",
                "integer",
                "enum"
            ]
        },
        {
            "name": "column-span",
            "browsers": [
                "E12",
                "FF71",
                "S9",
                "C50",
                "IE10",
                "O11.1"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear."
                },
                {
                    "name": "none",
                    "description": "The element does not span multiple columns."
                }
            ],
            "syntax": "none | all",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-span"
                }
            ],
            "description": "Describes the page/column break behavior after the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "column-width",
            "browsers": [
                "E12",
                "FF50",
                "S9",
                "C50",
                "IE10",
                "O11.1"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "syntax": "<length> | auto",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/column-width"
                }
            ],
            "description": "Describes the width of columns in multicol elements.",
            "restrictions": [
                "length",
                "enum"
            ]
        },
        {
            "name": "contain",
            "browsers": [
                "E79",
                "FF69",
                "S15.4",
                "C52",
                "O39"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that the property has no effect."
                },
                {
                    "name": "strict",
                    "description": "Turns on all forms of containment for the element."
                },
                {
                    "name": "content",
                    "description": "All containment rules except size are applied to the element."
                },
                {
                    "name": "size",
                    "description": "For properties that can have effects on more than just an element and its descendants, those effects don't escape the containing element."
                },
                {
                    "name": "layout",
                    "description": "Turns on layout containment for the element."
                },
                {
                    "name": "style",
                    "description": "Turns on style containment for the element."
                },
                {
                    "name": "paint",
                    "description": "Turns on paint containment for the element."
                }
            ],
            "syntax": "none | strict | content | [ [ size || inline-size ] || layout || style || paint ]",
            "relevance": 58,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/contain"
                }
            ],
            "description": "Indicates that an element and its contents are, as much as possible, independent of the rest of the document tree.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "content",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE8",
                "O4"
            ],
            "values": [
                {
                    "name": "attr()",
                    "description": "The attr(n) function returns as a string the value of attribute n for the subject of the selector."
                },
                {
                    "name": "counter(name)",
                    "description": "Counters are denoted by identifiers (see the 'counter-increment' and 'counter-reset' properties)."
                },
                {
                    "name": "icon",
                    "description": "The (pseudo-)element is replaced in its entirety by the resource referenced by its 'icon' property, and treated as a replaced element."
                },
                {
                    "name": "none",
                    "description": "On elements, this inhibits the children of the element from being rendered as children of this element, as if the element was empty. On pseudo-elements it causes the pseudo-element to have no content."
                },
                {
                    "name": "normal",
                    "description": "See http://www.w3.org/TR/css3-content/#content for computation rules."
                },
                {
                    "name": "url()"
                }
            ],
            "syntax": "normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/content"
                }
            ],
            "description": "Determines which page-based occurrence of a given element is applied to a counter or string value.",
            "restrictions": [
                "string",
                "url"
            ]
        },
        {
            "name": "counter-increment",
            "browsers": [
                "E12",
                "FF1",
                "S3",
                "C2",
                "IE8",
                "O9.2"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "This element does not alter the value of any counters."
                }
            ],
            "syntax": "[ <counter-name> <integer>? ]+ | none",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/counter-increment"
                }
            ],
            "description": "Manipulate the value of existing counters.",
            "restrictions": [
                "identifier",
                "integer"
            ]
        },
        {
            "name": "counter-reset",
            "browsers": [
                "E12",
                "FF1",
                "S3",
                "C2",
                "IE8",
                "O9.2"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The counter is not modified."
                }
            ],
            "syntax": "[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/counter-reset"
                }
            ],
            "description": "Property accepts one or more names of counters (identifiers), each one optionally followed by an integer. The integer gives the value that the counter is set to on each occurrence of the element.",
            "restrictions": [
                "identifier",
                "integer"
            ]
        },
        {
            "name": "cursor",
            "browsers": [
                "E12",
                "FF1",
                "S1.2",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "alias",
                    "description": "Indicates an alias of/shortcut to something is to be created. Often rendered as an arrow with a small curved arrow next to it."
                },
                {
                    "name": "all-scroll",
                    "description": "Indicates that the something can be scrolled in any direction. Often rendered as arrows pointing up, down, left, and right with a dot in the middle."
                },
                {
                    "name": "auto",
                    "description": "The UA determines the cursor to display based on the current context."
                },
                {
                    "name": "cell",
                    "description": "Indicates that a cell or set of cells may be selected. Often rendered as a thick plus-sign with a dot in the middle."
                },
                {
                    "name": "col-resize",
                    "description": "Indicates that the item/column can be resized horizontally. Often rendered as arrows pointing left and right with a vertical bar separating them."
                },
                {
                    "name": "context-menu",
                    "description": "A context menu is available for the object under the cursor. Often rendered as an arrow with a small menu-like graphic next to it."
                },
                {
                    "name": "copy",
                    "description": "Indicates something is to be copied. Often rendered as an arrow with a small plus sign next to it."
                },
                {
                    "name": "crosshair",
                    "description": "A simple crosshair (e.g., short line segments resembling a '+' sign). Often used to indicate a two dimensional bitmap selection mode."
                },
                {
                    "name": "default",
                    "description": "The platform-dependent default cursor. Often rendered as an arrow."
                },
                {
                    "name": "e-resize",
                    "description": "Indicates that east edge is to be moved."
                },
                {
                    "name": "ew-resize",
                    "description": "Indicates a bidirectional east-west resize cursor."
                },
                {
                    "name": "grab",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something can be grabbed."
                },
                {
                    "name": "grabbing",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something is being grabbed."
                },
                {
                    "name": "help",
                    "description": "Help is available for the object under the cursor. Often rendered as a question mark or a balloon."
                },
                {
                    "name": "move",
                    "description": "Indicates something is to be moved."
                },
                {
                    "name": "-moz-grab",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something can be grabbed."
                },
                {
                    "name": "-moz-grabbing",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something is being grabbed."
                },
                {
                    "name": "-moz-zoom-in",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something can be zoomed (magnified) in."
                },
                {
                    "name": "-moz-zoom-out",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something can be zoomed (magnified) out."
                },
                {
                    "name": "ne-resize",
                    "description": "Indicates that movement starts from north-east corner."
                },
                {
                    "name": "nesw-resize",
                    "description": "Indicates a bidirectional north-east/south-west cursor."
                },
                {
                    "name": "no-drop",
                    "description": "Indicates that the dragged item cannot be dropped at the current cursor location. Often rendered as a hand or pointer with a small circle with a line through it."
                },
                {
                    "name": "none",
                    "description": "No cursor is rendered for the element."
                },
                {
                    "name": "not-allowed",
                    "description": "Indicates that the requested action will not be carried out. Often rendered as a circle with a line through it."
                },
                {
                    "name": "n-resize",
                    "description": "Indicates that north edge is to be moved."
                },
                {
                    "name": "ns-resize",
                    "description": "Indicates a bidirectional north-south cursor."
                },
                {
                    "name": "nw-resize",
                    "description": "Indicates that movement starts from north-west corner."
                },
                {
                    "name": "nwse-resize",
                    "description": "Indicates a bidirectional north-west/south-east cursor."
                },
                {
                    "name": "pointer",
                    "description": "The cursor is a pointer that indicates a link."
                },
                {
                    "name": "progress",
                    "description": "A progress indicator. The program is performing some processing, but is different from 'wait' in that the user may still interact with the program. Often rendered as a spinning beach ball, or an arrow with a watch or hourglass."
                },
                {
                    "name": "row-resize",
                    "description": "Indicates that the item/row can be resized vertically. Often rendered as arrows pointing up and down with a horizontal bar separating them."
                },
                {
                    "name": "se-resize",
                    "description": "Indicates that movement starts from south-east corner."
                },
                {
                    "name": "s-resize",
                    "description": "Indicates that south edge is to be moved."
                },
                {
                    "name": "sw-resize",
                    "description": "Indicates that movement starts from south-west corner."
                },
                {
                    "name": "text",
                    "description": "Indicates text that may be selected. Often rendered as a vertical I-beam."
                },
                {
                    "name": "vertical-text",
                    "description": "Indicates vertical-text that may be selected. Often rendered as a horizontal I-beam."
                },
                {
                    "name": "wait",
                    "description": "Indicates that the program is busy and the user should wait. Often rendered as a watch or hourglass."
                },
                {
                    "name": "-webkit-grab",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something can be grabbed."
                },
                {
                    "name": "-webkit-grabbing",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something is being grabbed."
                },
                {
                    "name": "-webkit-zoom-in",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something can be zoomed (magnified) in."
                },
                {
                    "name": "-webkit-zoom-out",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something can be zoomed (magnified) out."
                },
                {
                    "name": "w-resize",
                    "description": "Indicates that west edge is to be moved."
                },
                {
                    "name": "zoom-in",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something can be zoomed (magnified) in."
                },
                {
                    "name": "zoom-out",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Indicates that something can be zoomed (magnified) out."
                }
            ],
            "syntax": "[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/cursor"
                }
            ],
            "description": "Allows control over cursor appearance in an element",
            "restrictions": [
                "url",
                "number",
                "enum"
            ]
        },
        {
            "name": "direction",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C2",
                "IE5.5",
                "O9.2"
            ],
            "values": [
                {
                    "name": "ltr",
                    "description": "Left-to-right direction."
                },
                {
                    "name": "rtl",
                    "description": "Right-to-left direction."
                }
            ],
            "syntax": "ltr | rtl",
            "relevance": 71,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/direction"
                }
            ],
            "description": "Specifies the inline base direction or directionality of any bidi paragraph, embedding, isolate, or override established by the box. Note: for HTML content use the 'dir' attribute and 'bdo' element rather than this property.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "display",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "block",
                    "description": "The element generates a block-level box"
                },
                {
                    "name": "contents",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element itself does not generate any boxes, but its children and pseudo-elements still generate boxes as normal."
                },
                {
                    "name": "flex",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element generates a principal flex container box and establishes a flex formatting context."
                },
                {
                    "name": "flexbox",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
                },
                {
                    "name": "flow-root",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element generates a block container box, and lays out its contents using flow layout."
                },
                {
                    "name": "grid",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element generates a principal grid container box, and establishes a grid formatting context."
                },
                {
                    "name": "inline",
                    "description": "The element generates an inline-level box."
                },
                {
                    "name": "inline-block",
                    "description": "A block box, which itself is flowed as a single inline box, similar to a replaced element. The inside of an inline-block is formatted as a block box, and the box itself is formatted as an inline box."
                },
                {
                    "name": "inline-flex",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Inline-level flex container."
                },
                {
                    "name": "inline-flexbox",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Inline-level flex container. Standardized as 'inline-flex'"
                },
                {
                    "name": "inline-table",
                    "description": "Inline-level table wrapper box containing table box."
                },
                {
                    "name": "list-item",
                    "description": "One or more block boxes and one marker box."
                },
                {
                    "name": "-moz-box",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
                },
                {
                    "name": "-moz-deck",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ]
                },
                {
                    "name": "-moz-grid",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ]
                },
                {
                    "name": "-moz-grid-group",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ]
                },
                {
                    "name": "-moz-grid-line",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ]
                },
                {
                    "name": "-moz-groupbox",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ]
                },
                {
                    "name": "-moz-inline-box",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Inline-level flex container. Standardized as 'inline-flex'"
                },
                {
                    "name": "-moz-inline-grid",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ]
                },
                {
                    "name": "-moz-inline-stack",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ]
                },
                {
                    "name": "-moz-marker",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ]
                },
                {
                    "name": "-moz-popup",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ]
                },
                {
                    "name": "-moz-stack",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ]
                },
                {
                    "name": "-ms-flexbox",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
                },
                {
                    "name": "-ms-grid",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element generates a principal grid container box, and establishes a grid formatting context."
                },
                {
                    "name": "-ms-inline-flexbox",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Inline-level flex container. Standardized as 'inline-flex'"
                },
                {
                    "name": "-ms-inline-grid",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Inline-level grid container."
                },
                {
                    "name": "none",
                    "description": "The element and its descendants generates no boxes."
                },
                {
                    "name": "ruby",
                    "description": "The element generates a principal ruby container box, and establishes a ruby formatting context."
                },
                {
                    "name": "ruby-base"
                },
                {
                    "name": "ruby-base-container"
                },
                {
                    "name": "ruby-text"
                },
                {
                    "name": "ruby-text-container"
                },
                {
                    "name": "run-in",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element generates a run-in box. Run-in elements act like inlines or blocks, depending on the surrounding elements."
                },
                {
                    "name": "table",
                    "description": "The element generates a principal table wrapper box containing an additionally-generated table box, and establishes a table formatting context."
                },
                {
                    "name": "table-caption"
                },
                {
                    "name": "table-cell"
                },
                {
                    "name": "table-column"
                },
                {
                    "name": "table-column-group"
                },
                {
                    "name": "table-footer-group"
                },
                {
                    "name": "table-header-group"
                },
                {
                    "name": "table-row"
                },
                {
                    "name": "table-row-group"
                },
                {
                    "name": "-webkit-box",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element lays out its contents using flow layout (block-and-inline layout). Standardized as 'flex'."
                },
                {
                    "name": "-webkit-flex",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "The element lays out its contents using flow layout (block-and-inline layout)."
                },
                {
                    "name": "-webkit-inline-box",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Inline-level flex container. Standardized as 'inline-flex'"
                },
                {
                    "name": "-webkit-inline-flex",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Inline-level flex container."
                }
            ],
            "syntax": "[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>",
            "relevance": 96,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/display"
                }
            ],
            "description": "In combination with 'float' and 'position', determines the type of box or boxes that are generated for an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "empty-cells",
            "browsers": [
                "E12",
                "FF1",
                "S1.2",
                "C1",
                "IE8",
                "O4"
            ],
            "values": [
                {
                    "name": "hide",
                    "description": "No borders or backgrounds are drawn around/behind empty cells."
                },
                {
                    "name": "-moz-show-background",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.2",
                        "C1",
                        "IE8",
                        "O4"
                    ]
                },
                {
                    "name": "show",
                    "description": "Borders and backgrounds are drawn around/behind empty cells (like normal cells)."
                }
            ],
            "syntax": "show | hide",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/empty-cells"
                }
            ],
            "description": "In the separated borders model, this property controls the rendering of borders and backgrounds around cells that have no visible content.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "enable-background",
            "values": [
                {
                    "name": "accumulate",
                    "description": "If the ancestor container element has a property of new, then all graphics elements within the current container are rendered both on the parent's background image and onto the target."
                },
                {
                    "name": "new",
                    "description": "Create a new background image canvas. All children of the current container element can access the background, and they will be rendered onto both the parent's background image canvas in addition to the target device."
                }
            ],
            "relevance": 50,
            "description": "Deprecated. Use 'isolation' property instead when support allows. Specifies how the accumulation of the background image is managed.",
            "restrictions": [
                "integer",
                "length",
                "percentage",
                "enum"
            ]
        },
        {
            "name": "fallback",
            "browsers": [
                "FF33"
            ],
            "atRule": "@counter-style",
            "syntax": "<counter-style-name>",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies a fallback counter style to be used when the current counter style can't create a representation for a given counter value.",
            "restrictions": [
                "identifier"
            ]
        },
        {
            "name": "fill",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "url()",
                    "description": "A URL reference to a paint server element, which is an element that defines a paint server: 'hatch', 'linearGradient', 'mesh', 'pattern', 'radialGradient' and 'solidcolor'."
                },
                {
                    "name": "none",
                    "description": "No paint is applied in this layer."
                }
            ],
            "relevance": 77,
            "description": "Paints the interior of the given graphical element.",
            "restrictions": [
                "color",
                "enum",
                "url"
            ]
        },
        {
            "name": "fill-opacity",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "relevance": 52,
            "description": "Specifies the opacity of the painting operation used to paint the interior the current object.",
            "restrictions": [
                "number(0-1)"
            ]
        },
        {
            "name": "fill-rule",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "evenodd",
                    "description": "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and counting the number of path segments from the given shape that the ray crosses."
                },
                {
                    "name": "nonzero",
                    "description": "Determines the 'insideness' of a point on the canvas by drawing a ray from that point to infinity in any direction and then examining the places where a segment of the shape crosses the ray."
                }
            ],
            "relevance": 51,
            "description": "Indicates the algorithm (or winding rule) which is to be used to determine what parts of the canvas are included inside the shape.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "filter",
            "browsers": [
                "E12",
                "FF35",
                "S9.1",
                "C53",
                "O40"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No filter effects are applied."
                },
                {
                    "name": "blur()",
                    "description": "Applies a Gaussian blur to the input image."
                },
                {
                    "name": "brightness()",
                    "description": "Applies a linear multiplier to input image, making it appear more or less bright."
                },
                {
                    "name": "contrast()",
                    "description": "Adjusts the contrast of the input."
                },
                {
                    "name": "drop-shadow()",
                    "description": "Applies a drop shadow effect to the input image."
                },
                {
                    "name": "grayscale()",
                    "description": "Converts the input image to grayscale."
                },
                {
                    "name": "hue-rotate()",
                    "description": "Applies a hue rotation on the input image. "
                },
                {
                    "name": "invert()",
                    "description": "Inverts the samples in the input image."
                },
                {
                    "name": "opacity()",
                    "description": "Applies transparency to the samples in the input image."
                },
                {
                    "name": "saturate()",
                    "description": "Saturates the input image."
                },
                {
                    "name": "sepia()",
                    "description": "Converts the input image to sepia."
                },
                {
                    "name": "url()",
                    "browsers": [
                        "E12",
                        "FF35",
                        "S9.1",
                        "C53",
                        "O40"
                    ],
                    "description": "A filter reference to a <filter> element."
                }
            ],
            "syntax": "none | <filter-function-list>",
            "relevance": 70,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/filter"
                }
            ],
            "description": "Processes an element's rendering before it is displayed in the document, by applying one or more filter effects.",
            "restrictions": [
                "enum",
                "url"
            ]
        },
        {
            "name": "flex",
            "browsers": [
                "E12",
                "FF20",
                "S9",
                "C29",
                "IE11",
                "O12.1"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Retrieves the value of the main size property as the used 'flex-basis'."
                },
                {
                    "name": "content",
                    "browsers": [
                        "E12",
                        "FF20",
                        "S9",
                        "C29",
                        "IE11",
                        "O12.1"
                    ],
                    "description": "Indicates automatic sizing, based on the flex item's content."
                },
                {
                    "name": "none",
                    "description": "Expands to '0 0 auto'."
                }
            ],
            "syntax": "none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]",
            "relevance": 81,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex"
                }
            ],
            "description": "Specifies the components of a flexible length: the flex grow factor and flex shrink factor, and the flex basis.",
            "restrictions": [
                "length",
                "number",
                "percentage"
            ]
        },
        {
            "name": "flex-basis",
            "browsers": [
                "E12",
                "FF22",
                "S9",
                "C29",
                "IE11",
                "O12.1"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Retrieves the value of the main size property as the used 'flex-basis'."
                },
                {
                    "name": "content",
                    "browsers": [
                        "E12",
                        "FF22",
                        "S9",
                        "C29",
                        "IE11",
                        "O12.1"
                    ],
                    "description": "Indicates automatic sizing, based on the flex item's content."
                }
            ],
            "syntax": "content | <'width'>",
            "relevance": 70,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-basis"
                }
            ],
            "description": "Sets the flex basis.",
            "restrictions": [
                "length",
                "number",
                "percentage"
            ]
        },
        {
            "name": "flex-direction",
            "browsers": [
                "E12",
                "FF81",
                "S9",
                "C29",
                "IE11",
                "O12.1"
            ],
            "values": [
                {
                    "name": "column",
                    "description": "The flex container's main axis has the same orientation as the block axis of the current writing mode."
                },
                {
                    "name": "column-reverse",
                    "description": "Same as 'column', except the main-start and main-end directions are swapped."
                },
                {
                    "name": "row",
                    "description": "The flex container's main axis has the same orientation as the inline axis of the current writing mode."
                },
                {
                    "name": "row-reverse",
                    "description": "Same as 'row', except the main-start and main-end directions are swapped."
                }
            ],
            "syntax": "row | row-reverse | column | column-reverse",
            "relevance": 84,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-direction"
                }
            ],
            "description": "Specifies how flex items are placed in the flex container, by setting the direction of the flex container's main axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "flex-flow",
            "browsers": [
                "E12",
                "FF28",
                "S9",
                "C29",
                "IE11",
                "O12.1"
            ],
            "values": [
                {
                    "name": "column",
                    "description": "The flex container's main axis has the same orientation as the block axis of the current writing mode."
                },
                {
                    "name": "column-reverse",
                    "description": "Same as 'column', except the main-start and main-end directions are swapped."
                },
                {
                    "name": "nowrap",
                    "description": "The flex container is single-line."
                },
                {
                    "name": "row",
                    "description": "The flex container's main axis has the same orientation as the inline axis of the current writing mode."
                },
                {
                    "name": "row-reverse",
                    "description": "Same as 'row', except the main-start and main-end directions are swapped."
                },
                {
                    "name": "wrap",
                    "description": "The flexbox is multi-line."
                },
                {
                    "name": "wrap-reverse",
                    "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
                }
            ],
            "syntax": "<'flex-direction'> || <'flex-wrap'>",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-flow"
                }
            ],
            "description": "Specifies how flexbox items are placed in the flexbox.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "flex-grow",
            "browsers": [
                "E12",
                "FF20",
                "S9",
                "C29",
                "IE11",
                "O12.1"
            ],
            "syntax": "<number>",
            "relevance": 77,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-grow"
                }
            ],
            "description": "Sets the flex grow factor. Negative numbers are invalid.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "flex-shrink",
            "browsers": [
                "E12",
                "FF20",
                "S9",
                "C29",
                "IE10",
                "O12.1"
            ],
            "syntax": "<number>",
            "relevance": 76,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-shrink"
                }
            ],
            "description": "Sets the flex shrink factor. Negative numbers are invalid.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "flex-wrap",
            "browsers": [
                "E12",
                "FF28",
                "S9",
                "C29",
                "IE11",
                "O17"
            ],
            "values": [
                {
                    "name": "nowrap",
                    "description": "The flex container is single-line."
                },
                {
                    "name": "wrap",
                    "description": "The flexbox is multi-line."
                },
                {
                    "name": "wrap-reverse",
                    "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
                }
            ],
            "syntax": "nowrap | wrap | wrap-reverse",
            "relevance": 82,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/flex-wrap"
                }
            ],
            "description": "Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "float",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "inline-end",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "A keyword indicating that the element must float on the end side of its containing block. That is the right side with ltr scripts, and the left side with rtl scripts."
                },
                {
                    "name": "inline-start",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "A keyword indicating that the element must float on the start side of its containing block. That is the left side with ltr scripts, and the right side with rtl scripts."
                },
                {
                    "name": "left",
                    "description": "The element generates a block box that is floated to the left. Content flows on the right side of the box, starting at the top (subject to the 'clear' property)."
                },
                {
                    "name": "none",
                    "description": "The box is not floated."
                },
                {
                    "name": "right",
                    "description": "Similar to 'left', except the box is floated to the right, and content flows on the left side of the box, starting at the top."
                }
            ],
            "syntax": "left | right | none | inline-start | inline-end",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/float"
                }
            ],
            "description": "Specifies how a box should be floated. It may be set for any element, but only applies to elements that generate boxes that are not absolutely positioned.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "flood-color",
            "browsers": [
                "E12",
                "FF3",
                "S6",
                "C5",
                "IE",
                "O15"
            ],
            "relevance": 50,
            "description": "Indicates what color to use to flood the current filter primitive subregion.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "flood-opacity",
            "browsers": [
                "E12",
                "FF3",
                "S6",
                "C5",
                "IE",
                "O15"
            ],
            "relevance": 50,
            "description": "Indicates what opacity to use to flood the current filter primitive subregion.",
            "restrictions": [
                "number(0-1)",
                "percentage"
            ]
        },
        {
            "name": "font",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "values": [
                {
                    "name": "100",
                    "description": "Thin"
                },
                {
                    "name": "200",
                    "description": "Extra Light (Ultra Light)"
                },
                {
                    "name": "300",
                    "description": "Light"
                },
                {
                    "name": "400",
                    "description": "Normal"
                },
                {
                    "name": "500",
                    "description": "Medium"
                },
                {
                    "name": "600",
                    "description": "Semi Bold (Demi Bold)"
                },
                {
                    "name": "700",
                    "description": "Bold"
                },
                {
                    "name": "800",
                    "description": "Extra Bold (Ultra Bold)"
                },
                {
                    "name": "900",
                    "description": "Black (Heavy)"
                },
                {
                    "name": "bold",
                    "description": "Same as 700"
                },
                {
                    "name": "bolder",
                    "description": "Specifies the weight of the face bolder than the inherited value."
                },
                {
                    "name": "caption",
                    "description": "The font used for captioned controls (e.g., buttons, drop-downs, etc.)."
                },
                {
                    "name": "icon",
                    "description": "The font used to label icons."
                },
                {
                    "name": "italic",
                    "description": "Selects a font that is labeled 'italic', or, if that is not available, one labeled 'oblique'."
                },
                {
                    "name": "large"
                },
                {
                    "name": "larger"
                },
                {
                    "name": "lighter",
                    "description": "Specifies the weight of the face lighter than the inherited value."
                },
                {
                    "name": "medium"
                },
                {
                    "name": "menu",
                    "description": "The font used in menus (e.g., dropdown menus and menu lists)."
                },
                {
                    "name": "message-box",
                    "description": "The font used in dialog boxes."
                },
                {
                    "name": "normal",
                    "description": "Specifies a face that is not labeled as a small-caps font."
                },
                {
                    "name": "oblique",
                    "description": "Selects a font that is labeled 'oblique'."
                },
                {
                    "name": "small"
                },
                {
                    "name": "small-caps",
                    "description": "Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font."
                },
                {
                    "name": "small-caption",
                    "description": "The font used for labeling small controls."
                },
                {
                    "name": "smaller"
                },
                {
                    "name": "status-bar",
                    "description": "The font used in window status bars."
                },
                {
                    "name": "x-large"
                },
                {
                    "name": "x-small"
                },
                {
                    "name": "xx-large"
                },
                {
                    "name": "xx-small"
                }
            ],
            "syntax": "[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar",
            "relevance": 83,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font"
                }
            ],
            "description": "Shorthand property for setting 'font-style', 'font-variant', 'font-weight', 'font-size', 'line-height', and 'font-family', at the same place in the style sheet. The syntax of this property is based on a traditional typographical shorthand notation to set multiple properties related to fonts.",
            "restrictions": [
                "font"
            ]
        },
        {
            "name": "font-family",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "values": [
                {
                    "name": "system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif"
                },
                {
                    "name": "Arial, Helvetica, sans-serif"
                },
                {
                    "name": "Cambria, Cochin, Georgia, Times, 'Times New Roman', serif"
                },
                {
                    "name": "'Courier New', Courier, monospace"
                },
                {
                    "name": "cursive"
                },
                {
                    "name": "fantasy"
                },
                {
                    "name": "'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif"
                },
                {
                    "name": "Georgia, 'Times New Roman', Times, serif"
                },
                {
                    "name": "'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif"
                },
                {
                    "name": "Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif"
                },
                {
                    "name": "'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif"
                },
                {
                    "name": "monospace"
                },
                {
                    "name": "sans-serif"
                },
                {
                    "name": "'Segoe UI', Tahoma, Geneva, Verdana, sans-serif"
                },
                {
                    "name": "serif"
                },
                {
                    "name": "'Times New Roman', Times, serif"
                },
                {
                    "name": "'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif"
                },
                {
                    "name": "Verdana, Geneva, Tahoma, sans-serif"
                }
            ],
            "atRule": "@font-face",
            "syntax": "<family-name>",
            "relevance": 93,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-family"
                }
            ],
            "description": "Specifies a prioritized list of font family names or generic family names. A user agent iterates through the list of family names until it matches an available font that contains a glyph for the character to be rendered.",
            "restrictions": [
                "font"
            ]
        },
        {
            "name": "font-feature-settings",
            "browsers": [
                "E15",
                "FF34",
                "S9.1",
                "C48",
                "IE10",
                "O35"
            ],
            "values": [
                {
                    "name": "\"aalt\"",
                    "description": "Access All Alternates."
                },
                {
                    "name": "\"abvf\"",
                    "description": "Above-base Forms. Required in Khmer script."
                },
                {
                    "name": "\"abvm\"",
                    "description": "Above-base Mark Positioning. Required in Indic scripts."
                },
                {
                    "name": "\"abvs\"",
                    "description": "Above-base Substitutions. Required in Indic scripts."
                },
                {
                    "name": "\"afrc\"",
                    "description": "Alternative Fractions."
                },
                {
                    "name": "\"akhn\"",
                    "description": "Akhand. Required in most Indic scripts."
                },
                {
                    "name": "\"blwf\"",
                    "description": "Below-base Form. Required in a number of Indic scripts."
                },
                {
                    "name": "\"blwm\"",
                    "description": "Below-base Mark Positioning. Required in Indic scripts."
                },
                {
                    "name": "\"blws\"",
                    "description": "Below-base Substitutions. Required in Indic scripts."
                },
                {
                    "name": "\"calt\"",
                    "description": "Contextual Alternates."
                },
                {
                    "name": "\"case\"",
                    "description": "Case-Sensitive Forms. Applies only to European scripts; particularly prominent in Spanish-language setting."
                },
                {
                    "name": "\"ccmp\"",
                    "description": "Glyph Composition/Decomposition."
                },
                {
                    "name": "\"cfar\"",
                    "description": "Conjunct Form After Ro. Required in Khmer scripts."
                },
                {
                    "name": "\"cjct\"",
                    "description": "Conjunct Forms. Required in Indic scripts that show similarity to Devanagari."
                },
                {
                    "name": "\"clig\"",
                    "description": "Contextual Ligatures."
                },
                {
                    "name": "\"cpct\"",
                    "description": "Centered CJK Punctuation. Used primarily in Chinese fonts."
                },
                {
                    "name": "\"cpsp\"",
                    "description": "Capital Spacing. Should not be used in connecting scripts (e.g. most Arabic)."
                },
                {
                    "name": "\"cswh\"",
                    "description": "Contextual Swash."
                },
                {
                    "name": "\"curs\"",
                    "description": "Cursive Positioning. Can be used in any cursive script."
                },
                {
                    "name": "\"c2pc\"",
                    "description": "Petite Capitals From Capitals. Applies only to bicameral scripts."
                },
                {
                    "name": "\"c2sc\"",
                    "description": "Small Capitals From Capitals. Applies only to bicameral scripts."
                },
                {
                    "name": "\"dist\"",
                    "description": "Distances. Required in Indic scripts."
                },
                {
                    "name": "\"dlig\"",
                    "description": "Discretionary ligatures."
                },
                {
                    "name": "\"dnom\"",
                    "description": "Denominators."
                },
                {
                    "name": "\"dtls\"",
                    "description": "Dotless Forms. Applied to math formula layout."
                },
                {
                    "name": "\"expt\"",
                    "description": "Expert Forms. Applies only to Japanese."
                },
                {
                    "name": "\"falt\"",
                    "description": "Final Glyph on Line Alternates. Can be used in any cursive script."
                },
                {
                    "name": "\"fin2\"",
                    "description": "Terminal Form #2. Used only with the Syriac script."
                },
                {
                    "name": "\"fin3\"",
                    "description": "Terminal Form #3. Used only with the Syriac script."
                },
                {
                    "name": "\"fina\"",
                    "description": "Terminal Forms. Can be used in any alphabetic script."
                },
                {
                    "name": "\"flac\"",
                    "description": "Flattened ascent forms. Applied to math formula layout."
                },
                {
                    "name": "\"frac\"",
                    "description": "Fractions."
                },
                {
                    "name": "\"fwid\"",
                    "description": "Full Widths. Applies to any script which can use monospaced forms."
                },
                {
                    "name": "\"half\"",
                    "description": "Half Forms. Required in Indic scripts that show similarity to Devanagari."
                },
                {
                    "name": "\"haln\"",
                    "description": "Halant Forms. Required in Indic scripts."
                },
                {
                    "name": "\"halt\"",
                    "description": "Alternate Half Widths. Used only in CJKV fonts."
                },
                {
                    "name": "\"hist\"",
                    "description": "Historical Forms."
                },
                {
                    "name": "\"hkna\"",
                    "description": "Horizontal Kana Alternates. Applies only to fonts that support kana (hiragana and katakana)."
                },
                {
                    "name": "\"hlig\"",
                    "description": "Historical Ligatures."
                },
                {
                    "name": "\"hngl\"",
                    "description": "Hangul. Korean only."
                },
                {
                    "name": "\"hojo\"",
                    "description": "Hojo Kanji Forms (JIS X 0212-1990 Kanji Forms). Used only with Kanji script."
                },
                {
                    "name": "\"hwid\"",
                    "description": "Half Widths. Generally used only in CJKV fonts."
                },
                {
                    "name": "\"init\"",
                    "description": "Initial Forms. Can be used in any alphabetic script."
                },
                {
                    "name": "\"isol\"",
                    "description": "Isolated Forms. Can be used in any cursive script."
                },
                {
                    "name": "\"ital\"",
                    "description": "Italics. Applies mostly to Latin; note that many non-Latin fonts contain Latin as well."
                },
                {
                    "name": "\"jalt\"",
                    "description": "Justification Alternates. Can be used in any cursive script."
                },
                {
                    "name": "\"jp78\"",
                    "description": "JIS78 Forms. Applies only to Japanese."
                },
                {
                    "name": "\"jp83\"",
                    "description": "JIS83 Forms. Applies only to Japanese."
                },
                {
                    "name": "\"jp90\"",
                    "description": "JIS90 Forms. Applies only to Japanese."
                },
                {
                    "name": "\"jp04\"",
                    "description": "JIS2004 Forms. Applies only to Japanese."
                },
                {
                    "name": "\"kern\"",
                    "description": "Kerning."
                },
                {
                    "name": "\"lfbd\"",
                    "description": "Left Bounds."
                },
                {
                    "name": "\"liga\"",
                    "description": "Standard Ligatures."
                },
                {
                    "name": "\"ljmo\"",
                    "description": "Leading Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported."
                },
                {
                    "name": "\"lnum\"",
                    "description": "Lining Figures."
                },
                {
                    "name": "\"locl\"",
                    "description": "Localized Forms."
                },
                {
                    "name": "\"ltra\"",
                    "description": "Left-to-right glyph alternates."
                },
                {
                    "name": "\"ltrm\"",
                    "description": "Left-to-right mirrored forms."
                },
                {
                    "name": "\"mark\"",
                    "description": "Mark Positioning."
                },
                {
                    "name": "\"med2\"",
                    "description": "Medial Form #2. Used only with the Syriac script."
                },
                {
                    "name": "\"medi\"",
                    "description": "Medial Forms."
                },
                {
                    "name": "\"mgrk\"",
                    "description": "Mathematical Greek."
                },
                {
                    "name": "\"mkmk\"",
                    "description": "Mark to Mark Positioning."
                },
                {
                    "name": "\"nalt\"",
                    "description": "Alternate Annotation Forms."
                },
                {
                    "name": "\"nlck\"",
                    "description": "NLC Kanji Forms. Used only with Kanji script."
                },
                {
                    "name": "\"nukt\"",
                    "description": "Nukta Forms. Required in Indic scripts.."
                },
                {
                    "name": "\"numr\"",
                    "description": "Numerators."
                },
                {
                    "name": "\"onum\"",
                    "description": "Oldstyle Figures."
                },
                {
                    "name": "\"opbd\"",
                    "description": "Optical Bounds."
                },
                {
                    "name": "\"ordn\"",
                    "description": "Ordinals. Applies mostly to Latin script."
                },
                {
                    "name": "\"ornm\"",
                    "description": "Ornaments."
                },
                {
                    "name": "\"palt\"",
                    "description": "Proportional Alternate Widths. Used mostly in CJKV fonts."
                },
                {
                    "name": "\"pcap\"",
                    "description": "Petite Capitals."
                },
                {
                    "name": "\"pkna\"",
                    "description": "Proportional Kana. Generally used only in Japanese fonts."
                },
                {
                    "name": "\"pnum\"",
                    "description": "Proportional Figures."
                },
                {
                    "name": "\"pref\"",
                    "description": "Pre-base Forms. Required in Khmer and Myanmar (Burmese) scripts and southern Indic scripts that may display a pre-base form of Ra."
                },
                {
                    "name": "\"pres\"",
                    "description": "Pre-base Substitutions. Required in Indic scripts."
                },
                {
                    "name": "\"pstf\"",
                    "description": "Post-base Forms. Required in scripts of south and southeast Asia that have post-base forms for consonants eg: Gurmukhi, Malayalam, Khmer."
                },
                {
                    "name": "\"psts\"",
                    "description": "Post-base Substitutions."
                },
                {
                    "name": "\"pwid\"",
                    "description": "Proportional Widths."
                },
                {
                    "name": "\"qwid\"",
                    "description": "Quarter Widths. Generally used only in CJKV fonts."
                },
                {
                    "name": "\"rand\"",
                    "description": "Randomize."
                },
                {
                    "name": "\"rclt\"",
                    "description": "Required Contextual Alternates. May apply to any script, but is especially important for many styles of Arabic."
                },
                {
                    "name": "\"rlig\"",
                    "description": "Required Ligatures. Applies to Arabic and Syriac. May apply to some other scripts."
                },
                {
                    "name": "\"rkrf\"",
                    "description": "Rakar Forms. Required in Devanagari and Gujarati scripts."
                },
                {
                    "name": "\"rphf\"",
                    "description": "Reph Form. Required in Indic scripts. E.g. Devanagari, Kannada."
                },
                {
                    "name": "\"rtbd\"",
                    "description": "Right Bounds."
                },
                {
                    "name": "\"rtla\"",
                    "description": "Right-to-left alternates."
                },
                {
                    "name": "\"rtlm\"",
                    "description": "Right-to-left mirrored forms."
                },
                {
                    "name": "\"ruby\"",
                    "description": "Ruby Notation Forms. Applies only to Japanese."
                },
                {
                    "name": "\"salt\"",
                    "description": "Stylistic Alternates."
                },
                {
                    "name": "\"sinf\"",
                    "description": "Scientific Inferiors."
                },
                {
                    "name": "\"size\"",
                    "description": "Optical size."
                },
                {
                    "name": "\"smcp\"",
                    "description": "Small Capitals. Applies only to bicameral scripts."
                },
                {
                    "name": "\"smpl\"",
                    "description": "Simplified Forms. Applies only to Chinese and Japanese."
                },
                {
                    "name": "\"ssty\"",
                    "description": "Math script style alternates."
                },
                {
                    "name": "\"stch\"",
                    "description": "Stretching Glyph Decomposition."
                },
                {
                    "name": "\"subs\"",
                    "description": "Subscript."
                },
                {
                    "name": "\"sups\"",
                    "description": "Superscript."
                },
                {
                    "name": "\"swsh\"",
                    "description": "Swash. Does not apply to ideographic scripts."
                },
                {
                    "name": "\"titl\"",
                    "description": "Titling."
                },
                {
                    "name": "\"tjmo\"",
                    "description": "Trailing Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported."
                },
                {
                    "name": "\"tnam\"",
                    "description": "Traditional Name Forms. Applies only to Japanese."
                },
                {
                    "name": "\"tnum\"",
                    "description": "Tabular Figures."
                },
                {
                    "name": "\"trad\"",
                    "description": "Traditional Forms. Applies only to Chinese and Japanese."
                },
                {
                    "name": "\"twid\"",
                    "description": "Third Widths. Generally used only in CJKV fonts."
                },
                {
                    "name": "\"unic\"",
                    "description": "Unicase."
                },
                {
                    "name": "\"valt\"",
                    "description": "Alternate Vertical Metrics. Applies only to scripts with vertical writing modes."
                },
                {
                    "name": "\"vatu\"",
                    "description": "Vattu Variants. Used for Indic scripts. E.g. Devanagari."
                },
                {
                    "name": "\"vert\"",
                    "description": "Vertical Alternates. Applies only to scripts with vertical writing modes."
                },
                {
                    "name": "\"vhal\"",
                    "description": "Alternate Vertical Half Metrics. Used only in CJKV fonts."
                },
                {
                    "name": "\"vjmo\"",
                    "description": "Vowel Jamo Forms. Required for Hangul script when Ancient Hangul writing system is supported."
                },
                {
                    "name": "\"vkna\"",
                    "description": "Vertical Kana Alternates. Applies only to fonts that support kana (hiragana and katakana)."
                },
                {
                    "name": "\"vkrn\"",
                    "description": "Vertical Kerning."
                },
                {
                    "name": "\"vpal\"",
                    "description": "Proportional Alternate Vertical Metrics. Used mostly in CJKV fonts."
                },
                {
                    "name": "\"vrt2\"",
                    "description": "Vertical Alternates and Rotation. Applies only to scripts with vertical writing modes."
                },
                {
                    "name": "\"zero\"",
                    "description": "Slashed Zero."
                },
                {
                    "name": "normal",
                    "description": "No change in glyph substitution or positioning occurs."
                },
                {
                    "name": "off",
                    "description": "Disable feature."
                },
                {
                    "name": "on",
                    "description": "Enable feature."
                }
            ],
            "atRule": "@font-face",
            "syntax": "normal | <feature-tag-value>#",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-feature-settings"
                }
            ],
            "description": "Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
            "restrictions": [
                "string",
                "integer"
            ]
        },
        {
            "name": "font-kerning",
            "browsers": [
                "E79",
                "FF32",
                "S9",
                "C33",
                "O20"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Specifies that kerning is applied at the discretion of the user agent."
                },
                {
                    "name": "none",
                    "description": "Specifies that kerning is not applied."
                },
                {
                    "name": "normal",
                    "description": "Specifies that kerning is applied."
                }
            ],
            "syntax": "auto | normal | none",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-kerning"
                }
            ],
            "description": "Kerning is the contextual adjustment of inter-glyph spacing. This property controls metric kerning, kerning that utilizes adjustment data contained in the font.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-language-override",
            "browsers": [
                "FF34"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "Implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering."
                }
            ],
            "syntax": "normal | <string>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-language-override"
                }
            ],
            "description": "The value of 'normal' implies that when rendering with OpenType fonts the language of the document is used to infer the OpenType language system, used to select language specific features when rendering.",
            "restrictions": [
                "string"
            ]
        },
        {
            "name": "font-size",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5.5",
                "O7"
            ],
            "values": [
                {
                    "name": "large"
                },
                {
                    "name": "larger"
                },
                {
                    "name": "medium"
                },
                {
                    "name": "small"
                },
                {
                    "name": "smaller"
                },
                {
                    "name": "x-large"
                },
                {
                    "name": "x-small"
                },
                {
                    "name": "xx-large"
                },
                {
                    "name": "xx-small"
                }
            ],
            "syntax": "<absolute-size> | <relative-size> | <length-percentage>",
            "relevance": 94,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-size"
                }
            ],
            "description": "Indicates the desired height of glyphs from the font. For scalable fonts, the font-size is a scale factor applied to the EM unit of the font. (Note that certain glyphs may bleed outside their EM box.) For non-scalable fonts, the font-size is converted into absolute units and matched against the declared font-size of the font, using the same absolute coordinate space for both of the matched values.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "font-size-adjust",
            "browsers": [
                "FF3",
                "S16.4"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Do not preserve the font's x-height."
                }
            ],
            "syntax": "none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-size-adjust"
                }
            ],
            "description": "Preserves the readability of text when font fallback occurs by adjusting the font-size so that the x-height is the same regardless of the font used.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "font-stretch",
            "browsers": [
                "E12",
                "FF9",
                "S11",
                "C60",
                "IE9",
                "O47"
            ],
            "values": [
                {
                    "name": "condensed"
                },
                {
                    "name": "expanded"
                },
                {
                    "name": "extra-condensed"
                },
                {
                    "name": "extra-expanded"
                },
                {
                    "name": "narrower",
                    "browsers": [
                        "E12",
                        "FF9",
                        "S11",
                        "C60",
                        "IE9",
                        "O47"
                    ],
                    "description": "Indicates a narrower value relative to the width of the parent element."
                },
                {
                    "name": "normal"
                },
                {
                    "name": "semi-condensed"
                },
                {
                    "name": "semi-expanded"
                },
                {
                    "name": "ultra-condensed"
                },
                {
                    "name": "ultra-expanded"
                },
                {
                    "name": "wider",
                    "browsers": [
                        "E12",
                        "FF9",
                        "S11",
                        "C60",
                        "IE9",
                        "O47"
                    ],
                    "description": "Indicates a wider value relative to the width of the parent element."
                }
            ],
            "atRule": "@font-face",
            "syntax": "<font-stretch-absolute>{1,2}",
            "relevance": 56,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-stretch"
                }
            ],
            "description": "Selects a normal, condensed, or expanded face from a font family.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-style",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "italic",
                    "description": "Selects a font that is labeled as an 'italic' face, or an 'oblique' face if one is not"
                },
                {
                    "name": "normal",
                    "description": "Selects a face that is classified as 'normal'."
                },
                {
                    "name": "oblique",
                    "description": "Selects a font that is labeled as an 'oblique' face, or an 'italic' face if one is not."
                }
            ],
            "atRule": "@font-face",
            "syntax": "normal | italic | oblique <angle>{0,2}",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-style"
                }
            ],
            "description": "Allows italic or oblique faces to be selected. Italic forms are generally cursive in nature while oblique faces are typically sloped versions of the regular face.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-synthesis",
            "browsers": [
                "E97",
                "FF34",
                "S9",
                "C97",
                "O83"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Disallow all synthetic faces."
                },
                {
                    "name": "style",
                    "description": "Allow synthetic italic faces."
                },
                {
                    "name": "weight",
                    "description": "Allow synthetic bold faces."
                }
            ],
            "syntax": "none | [ weight || style || small-caps || position]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-synthesis"
                }
            ],
            "description": "Controls whether user agents are allowed to synthesize bold or oblique font faces when a font family lacks bold or italic faces.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "Specifies a face that is not labeled as a small-caps font."
                },
                {
                    "name": "small-caps",
                    "description": "Specifies a font that is labeled as a small-caps font. If a genuine small-caps font is not available, user agents should simulate a small-caps font."
                }
            ],
            "syntax": "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant"
                }
            ],
            "description": "Specifies variant representations of the font",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-alternates",
            "browsers": [
                "E111",
                "FF34",
                "S9.1",
                "C111",
                "O97"
            ],
            "values": [
                {
                    "name": "annotation()",
                    "description": "Enables display of alternate annotation forms."
                },
                {
                    "name": "character-variant()",
                    "description": "Enables display of specific character variants."
                },
                {
                    "name": "historical-forms",
                    "description": "Enables display of historical forms."
                },
                {
                    "name": "normal",
                    "description": "None of the features are enabled."
                },
                {
                    "name": "ornaments()",
                    "description": "Enables replacement of default glyphs with ornaments, if provided in the font."
                },
                {
                    "name": "styleset()",
                    "description": "Enables display with stylistic sets."
                },
                {
                    "name": "stylistic()",
                    "description": "Enables display of stylistic alternates."
                },
                {
                    "name": "swash()",
                    "description": "Enables display of swash glyphs."
                }
            ],
            "syntax": "normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates"
                }
            ],
            "description": "For any given character, fonts can provide a variety of alternate glyphs in addition to the default glyph for that character. This property provides control over the selection of these alternate glyphs.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-caps",
            "browsers": [
                "E79",
                "FF34",
                "S9.1",
                "C52",
                "O39"
            ],
            "values": [
                {
                    "name": "all-petite-caps",
                    "description": "Enables display of petite capitals for both upper and lowercase letters."
                },
                {
                    "name": "all-small-caps",
                    "description": "Enables display of small capitals for both upper and lowercase letters."
                },
                {
                    "name": "normal",
                    "description": "None of the features are enabled."
                },
                {
                    "name": "petite-caps",
                    "description": "Enables display of petite capitals."
                },
                {
                    "name": "small-caps",
                    "description": "Enables display of small capitals. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters."
                },
                {
                    "name": "titling-caps",
                    "description": "Enables display of titling capitals."
                },
                {
                    "name": "unicase",
                    "description": "Enables display of mixture of small capitals for uppercase letters with normal lowercase letters."
                }
            ],
            "syntax": "normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-caps"
                }
            ],
            "description": "Specifies control over capitalized forms.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-east-asian",
            "browsers": [
                "E79",
                "FF34",
                "S9.1",
                "C63",
                "O50"
            ],
            "values": [
                {
                    "name": "full-width",
                    "description": "Enables rendering of full-width variants."
                },
                {
                    "name": "jis04",
                    "description": "Enables rendering of JIS04 forms."
                },
                {
                    "name": "jis78",
                    "description": "Enables rendering of JIS78 forms."
                },
                {
                    "name": "jis83",
                    "description": "Enables rendering of JIS83 forms."
                },
                {
                    "name": "jis90",
                    "description": "Enables rendering of JIS90 forms."
                },
                {
                    "name": "normal",
                    "description": "None of the features are enabled."
                },
                {
                    "name": "proportional-width",
                    "description": "Enables rendering of proportionally-spaced variants."
                },
                {
                    "name": "ruby",
                    "description": "Enables display of ruby variant glyphs."
                },
                {
                    "name": "simplified",
                    "description": "Enables rendering of simplified forms."
                },
                {
                    "name": "traditional",
                    "description": "Enables rendering of traditional forms."
                }
            ],
            "syntax": "normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian"
                }
            ],
            "description": "Allows control of glyph substitute and positioning in East Asian text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-ligatures",
            "browsers": [
                "E79",
                "FF34",
                "S9.1",
                "C34",
                "O21"
            ],
            "values": [
                {
                    "name": "additional-ligatures",
                    "description": "Enables display of additional ligatures."
                },
                {
                    "name": "common-ligatures",
                    "description": "Enables display of common ligatures."
                },
                {
                    "name": "contextual",
                    "browsers": [
                        "E79",
                        "FF34",
                        "S9.1",
                        "C34",
                        "O21"
                    ],
                    "description": "Enables display of contextual alternates."
                },
                {
                    "name": "discretionary-ligatures",
                    "description": "Enables display of discretionary ligatures."
                },
                {
                    "name": "historical-ligatures",
                    "description": "Enables display of historical ligatures."
                },
                {
                    "name": "no-additional-ligatures",
                    "description": "Disables display of additional ligatures."
                },
                {
                    "name": "no-common-ligatures",
                    "description": "Disables display of common ligatures."
                },
                {
                    "name": "no-contextual",
                    "browsers": [
                        "E79",
                        "FF34",
                        "S9.1",
                        "C34",
                        "O21"
                    ],
                    "description": "Disables display of contextual alternates."
                },
                {
                    "name": "no-discretionary-ligatures",
                    "description": "Disables display of discretionary ligatures."
                },
                {
                    "name": "no-historical-ligatures",
                    "description": "Disables display of historical ligatures."
                },
                {
                    "name": "none",
                    "browsers": [
                        "E79",
                        "FF34",
                        "S9.1",
                        "C34",
                        "O21"
                    ],
                    "description": "Disables all ligatures."
                },
                {
                    "name": "normal",
                    "description": "Implies that the defaults set by the font are used."
                }
            ],
            "syntax": "normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures"
                }
            ],
            "description": "Specifies control over which ligatures are enabled or disabled. A value of 'normal' implies that the defaults set by the font are used.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-numeric",
            "browsers": [
                "E79",
                "FF34",
                "S9.1",
                "C52",
                "O39"
            ],
            "values": [
                {
                    "name": "diagonal-fractions",
                    "description": "Enables display of lining diagonal fractions."
                },
                {
                    "name": "lining-nums",
                    "description": "Enables display of lining numerals."
                },
                {
                    "name": "normal",
                    "description": "None of the features are enabled."
                },
                {
                    "name": "oldstyle-nums",
                    "description": "Enables display of old-style numerals."
                },
                {
                    "name": "ordinal",
                    "description": "Enables display of letter forms used with ordinal numbers."
                },
                {
                    "name": "proportional-nums",
                    "description": "Enables display of proportional numerals."
                },
                {
                    "name": "slashed-zero",
                    "description": "Enables display of slashed zeros."
                },
                {
                    "name": "stacked-fractions",
                    "description": "Enables display of lining stacked fractions."
                },
                {
                    "name": "tabular-nums",
                    "description": "Enables display of tabular numerals."
                }
            ],
            "syntax": "normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric"
                }
            ],
            "description": "Specifies control over numerical forms.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-variant-position",
            "browsers": [
                "E117",
                "FF34",
                "S9.1",
                "C117",
                "O103"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "None of the features are enabled."
                },
                {
                    "name": "sub",
                    "description": "Enables display of subscript variants (OpenType feature: subs)."
                },
                {
                    "name": "super",
                    "description": "Enables display of superscript variants (OpenType feature: sups)."
                }
            ],
            "syntax": "normal | sub | super",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-position"
                }
            ],
            "description": "Specifies the vertical position",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "font-weight",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C2",
                "IE3",
                "O3.5"
            ],
            "values": [
                {
                    "name": "100",
                    "description": "Thin"
                },
                {
                    "name": "200",
                    "description": "Extra Light (Ultra Light)"
                },
                {
                    "name": "300",
                    "description": "Light"
                },
                {
                    "name": "400",
                    "description": "Normal"
                },
                {
                    "name": "500",
                    "description": "Medium"
                },
                {
                    "name": "600",
                    "description": "Semi Bold (Demi Bold)"
                },
                {
                    "name": "700",
                    "description": "Bold"
                },
                {
                    "name": "800",
                    "description": "Extra Bold (Ultra Bold)"
                },
                {
                    "name": "900",
                    "description": "Black (Heavy)"
                },
                {
                    "name": "bold",
                    "description": "Same as 700"
                },
                {
                    "name": "bolder",
                    "description": "Specifies the weight of the face bolder than the inherited value."
                },
                {
                    "name": "lighter",
                    "description": "Specifies the weight of the face lighter than the inherited value."
                },
                {
                    "name": "normal",
                    "description": "Same as 400"
                }
            ],
            "atRule": "@font-face",
            "syntax": "<font-weight-absolute>{1,2}",
            "relevance": 93,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-weight"
                }
            ],
            "description": "Specifies weight of glyphs in the font, their degree of blackness or stroke thickness.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "glyph-orientation-horizontal",
            "relevance": 50,
            "description": "Controls glyph orientation when the inline-progression-direction is horizontal.",
            "restrictions": [
                "angle",
                "number"
            ]
        },
        {
            "name": "glyph-orientation-vertical",
            "browsers": [
                "S13.1"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Sets the orientation based on the fullwidth or non-fullwidth characters and the most common orientation."
                }
            ],
            "relevance": 50,
            "description": "Controls glyph orientation when the inline-progression-direction is vertical.",
            "restrictions": [
                "angle",
                "number",
                "enum"
            ]
        },
        {
            "name": "grid-area",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line> [ / <grid-line> ]{0,3}",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-area"
                }
            ],
            "description": "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement. Shorthand for 'grid-row-start', 'grid-column-start', 'grid-row-end', and 'grid-column-end'.",
            "restrictions": [
                "identifier",
                "integer"
            ]
        },
        {
            "name": "grid",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "syntax": "<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid"
                }
            ],
            "description": "The grid CSS property is a shorthand property that sets all of the explicit grid properties ('grid-template-rows', 'grid-template-columns', and 'grid-template-areas'), and all the implicit grid properties ('grid-auto-rows', 'grid-auto-columns', and 'grid-auto-flow'), in a single declaration.",
            "restrictions": [
                "identifier",
                "length",
                "percentage",
                "string",
                "enum"
            ]
        },
        {
            "name": "grid-auto-columns",
            "browsers": [
                "E16",
                "FF70",
                "S10.1",
                "C57",
                "IE10",
                "O44"
            ],
            "values": [
                {
                    "name": "min-content",
                    "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "max-content",
                    "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "auto",
                    "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
                },
                {
                    "name": "minmax()",
                    "description": "Defines a size range greater than or equal to min and less than or equal to max."
                }
            ],
            "syntax": "<track-size>+",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns"
                }
            ],
            "description": "Specifies the size of implicitly created columns.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "grid-auto-flow",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "row",
                    "description": "The auto-placement algorithm places items by filling each row in turn, adding new rows as necessary."
                },
                {
                    "name": "column",
                    "description": "The auto-placement algorithm places items by filling each column in turn, adding new columns as necessary."
                },
                {
                    "name": "dense",
                    "description": "If specified, the auto-placement algorithm uses a \"dense\" packing algorithm, which attempts to fill in holes earlier in the grid if smaller items come up later."
                }
            ],
            "syntax": "[ row | column ] || dense",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow"
                }
            ],
            "description": "Controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "grid-auto-rows",
            "browsers": [
                "E16",
                "FF70",
                "S10.1",
                "C57",
                "IE10",
                "O44"
            ],
            "values": [
                {
                    "name": "min-content",
                    "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "max-content",
                    "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "auto",
                    "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
                },
                {
                    "name": "minmax()",
                    "description": "Defines a size range greater than or equal to min and less than or equal to max."
                }
            ],
            "syntax": "<track-size>+",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows"
                }
            ],
            "description": "Specifies the size of implicitly created rows.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "grid-column",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line> [ / <grid-line> ]?",
            "relevance": 56,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-column"
                }
            ],
            "description": "Shorthand for 'grid-column-start' and 'grid-column-end'.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-column-end",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-column-end"
                }
            ],
            "description": "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-column-gap",
            "browsers": [
                "FF52",
                "C57",
                "S10.1",
                "O44"
            ],
            "status": "obsolete",
            "syntax": "<length-percentage>",
            "relevance": 4,
            "description": "Specifies the gutters between grid columns. Replaced by 'column-gap' property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "grid-column-start",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-column-start"
                }
            ],
            "description": "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-gap",
            "browsers": [
                "FF52",
                "C57",
                "S10.1",
                "O44"
            ],
            "status": "obsolete",
            "syntax": "<'grid-row-gap'> <'grid-column-gap'>?",
            "relevance": 5,
            "description": "Shorthand that specifies the gutters between grid columns and grid rows in one declaration. Replaced by 'gap' property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "grid-row",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line> [ / <grid-line> ]?",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-row"
                }
            ],
            "description": "Shorthand for 'grid-row-start' and 'grid-row-end'.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-row-end",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-row-end"
                }
            ],
            "description": "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-row-gap",
            "browsers": [
                "FF52",
                "C57",
                "S10.1",
                "O44"
            ],
            "status": "obsolete",
            "syntax": "<length-percentage>",
            "relevance": 2,
            "description": "Specifies the gutters between grid rows. Replaced by 'row-gap' property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "grid-row-start",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The property contributes nothing to the grid item's placement, indicating auto-placement, an automatic span, or a default span of one."
                },
                {
                    "name": "span",
                    "description": "Contributes a grid span to the grid item's placement such that the corresponding edge of the grid item's grid area is N lines from its opposite edge."
                }
            ],
            "syntax": "<grid-line>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-row-start"
                }
            ],
            "description": "Determine a grid item's size and location within the grid by contributing a line, a span, or nothing (automatic) to its grid placement.",
            "restrictions": [
                "identifier",
                "integer",
                "enum"
            ]
        },
        {
            "name": "grid-template",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Sets all three properties to their initial values."
                },
                {
                    "name": "min-content",
                    "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "max-content",
                    "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "auto",
                    "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
                },
                {
                    "name": "subgrid",
                    "description": "Sets 'grid-template-rows' and 'grid-template-columns' to 'subgrid', and 'grid-template-areas' to its initial value."
                },
                {
                    "name": "minmax()",
                    "description": "Defines a size range greater than or equal to min and less than or equal to max."
                },
                {
                    "name": "repeat()",
                    "description": "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."
                }
            ],
            "syntax": "none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template"
                }
            ],
            "description": "Shorthand for setting grid-template-columns, grid-template-rows, and grid-template-areas in a single declaration.",
            "restrictions": [
                "identifier",
                "length",
                "percentage",
                "string",
                "enum"
            ]
        },
        {
            "name": "grid-template-areas",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The grid container doesn't define any named grid areas."
                }
            ],
            "syntax": "none | <string>+",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template-areas"
                }
            ],
            "description": "Specifies named grid areas, which are not associated with any particular grid item, but can be referenced from the grid-placement properties.",
            "restrictions": [
                "string"
            ]
        },
        {
            "name": "grid-template-columns",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "IE10",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "There is no explicit grid; any rows/columns will be implicitly generated."
                },
                {
                    "name": "min-content",
                    "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "max-content",
                    "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "auto",
                    "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
                },
                {
                    "name": "subgrid",
                    "description": "Indicates that the grid will align to its parent grid in that axis."
                },
                {
                    "name": "minmax()",
                    "description": "Defines a size range greater than or equal to min and less than or equal to max."
                },
                {
                    "name": "repeat()",
                    "description": "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."
                }
            ],
            "syntax": "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template-columns"
                }
            ],
            "description": "specifies, as a space-separated track list, the line names and track sizing functions of the grid.",
            "restrictions": [
                "identifier",
                "length",
                "percentage",
                "enum"
            ]
        },
        {
            "name": "grid-template-rows",
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "IE10",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "There is no explicit grid; any rows/columns will be implicitly generated."
                },
                {
                    "name": "min-content",
                    "description": "Represents the largest min-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "max-content",
                    "description": "Represents the largest max-content contribution of the grid items occupying the grid track."
                },
                {
                    "name": "auto",
                    "description": "As a maximum, identical to 'max-content'. As a minimum, represents the largest minimum size (as specified by min-width/min-height) of the grid items occupying the grid track."
                },
                {
                    "name": "subgrid",
                    "description": "Indicates that the grid will align to its parent grid in that axis."
                },
                {
                    "name": "minmax()",
                    "description": "Defines a size range greater than or equal to min and less than or equal to max."
                },
                {
                    "name": "repeat()",
                    "description": "Represents a repeated fragment of the track list, allowing a large number of columns or rows that exhibit a recurring pattern to be written in a more compact form."
                }
            ],
            "syntax": "none | <track-list> | <auto-track-list> | subgrid <line-name-list>?",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/grid-template-rows"
                }
            ],
            "description": "specifies, as a space-separated track list, the line names and track sizing functions of the grid.",
            "restrictions": [
                "identifier",
                "length",
                "percentage",
                "string",
                "enum"
            ]
        },
        {
            "name": "height",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The height depends on the values of other properties."
                },
                {
                    "name": "fit-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            "relevance": 96,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/height"
                }
            ],
            "description": "Specifies the height of the content area, padding area or border area (depending on 'box-sizing') of certain boxes.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "hyphens",
            "browsers": [
                "E79",
                "FF43",
                "S17",
                "C55",
                "IE10",
                "O42"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
                },
                {
                    "name": "manual",
                    "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
                },
                {
                    "name": "none",
                    "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
                }
            ],
            "syntax": "none | manual | auto",
            "relevance": 56,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/hyphens"
                }
            ],
            "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "image-orientation",
            "browsers": [
                "E81",
                "FF26",
                "S13.1",
                "C81",
                "O67"
            ],
            "values": [
                {
                    "name": "flip",
                    "description": "After rotating by the precededing angle, the image is flipped horizontally. Defaults to 0deg if the angle is ommitted."
                },
                {
                    "name": "from-image",
                    "description": "If the image has an orientation specified in its metadata, such as EXIF, this value computes to the angle that the metadata specifies is necessary to correctly orient the image."
                }
            ],
            "syntax": "from-image | <angle> | [ <angle>? flip ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/image-orientation"
                }
            ],
            "description": "Specifies an orthogonal rotation to be applied to an image before it is laid out.",
            "restrictions": [
                "angle"
            ]
        },
        {
            "name": "image-rendering",
            "browsers": [
                "E79",
                "FF3.6",
                "S6",
                "C13",
                "O15"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The image should be scaled with an algorithm that maximizes the appearance of the image."
                },
                {
                    "name": "crisp-edges",
                    "description": "The image must be scaled with an algorithm that preserves contrast and edges in the image, and which does not smooth colors or introduce blur to the image in the process."
                },
                {
                    "name": "-moz-crisp-edges",
                    "browsers": [
                        "E79",
                        "FF3.6",
                        "S6",
                        "C13",
                        "O15"
                    ]
                },
                {
                    "name": "optimizeQuality",
                    "description": "Deprecated."
                },
                {
                    "name": "optimizeSpeed",
                    "description": "Deprecated."
                },
                {
                    "name": "pixelated",
                    "description": "When scaling the image up, the 'nearest neighbor' or similar algorithm must be used, so that the image appears to be simply composed of very large pixels."
                }
            ],
            "syntax": "auto | crisp-edges | pixelated",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/image-rendering"
                }
            ],
            "description": "Provides a hint to the user-agent about what aspects of an image are most important to preserve when the image is scaled, to aid the user-agent in the choice of an appropriate scaling algorithm.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "ime-mode",
            "browsers": [
                "E12",
                "FF3",
                "IE5"
            ],
            "values": [
                {
                    "name": "active",
                    "description": "The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it."
                },
                {
                    "name": "auto",
                    "description": "No change is made to the current input method editor state. This is the default."
                },
                {
                    "name": "disabled",
                    "description": "The input method editor is disabled and may not be activated by the user."
                },
                {
                    "name": "inactive",
                    "description": "The input method editor is initially inactive, but the user may activate it if they wish."
                },
                {
                    "name": "normal",
                    "description": "The IME state should be normal; this value can be used in a user style sheet to override the page setting."
                }
            ],
            "status": "obsolete",
            "syntax": "auto | normal | active | inactive | disabled",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/ime-mode"
                }
            ],
            "description": "Controls the state of the input method editor for text fields.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "inline-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Depends on the values of other properties."
                }
            ],
            "syntax": "<'width'>",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inline-size"
                }
            ],
            "description": "Size of an element in the direction specified by 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "isolation",
            "browsers": [
                "E79",
                "FF36",
                "S8",
                "C41",
                "O30"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Elements are not isolated unless an operation is applied that causes the creation of a stacking context."
                },
                {
                    "name": "isolate",
                    "description": "In CSS will turn the element into a stacking context."
                }
            ],
            "syntax": "auto | isolate",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/isolation"
                }
            ],
            "description": "In CSS setting to 'isolate' will turn the element into a stacking context. In SVG, it defines whether an element is isolated or not.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "justify-content",
            "browsers": [
                "E12",
                "FF20",
                "S9",
                "C29",
                "IE11",
                "O12.1"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Flex items are packed toward the center of the line."
                },
                {
                    "name": "start",
                    "description": "The items are packed flush to each other toward the start edge of the alignment container in the main axis."
                },
                {
                    "name": "end",
                    "description": "The items are packed flush to each other toward the end edge of the alignment container in the main axis."
                },
                {
                    "name": "left",
                    "description": "The items are packed flush to each other toward the left edge of the alignment container in the main axis."
                },
                {
                    "name": "right",
                    "description": "The items are packed flush to each other toward the right edge of the alignment container in the main axis."
                },
                {
                    "name": "safe",
                    "description": "If the size of the item overflows the alignment container, the item is instead aligned as if the alignment mode were start."
                },
                {
                    "name": "unsafe",
                    "description": "Regardless of the relative sizes of the item and alignment container, the given alignment value is honored."
                },
                {
                    "name": "stretch",
                    "description": "If the combined size of the alignment subjects is less than the size of the alignment container, any auto-sized alignment subjects have their size increased equally (not proportionally), while still respecting the constraints imposed by max-height/max-width (or equivalent functionality), so that the combined size exactly fills the alignment container."
                },
                {
                    "name": "space-evenly",
                    "description": "The items are evenly distributed within the alignment container along the main axis."
                },
                {
                    "name": "flex-end",
                    "description": "Flex items are packed toward the end of the line."
                },
                {
                    "name": "flex-start",
                    "description": "Flex items are packed toward the start of the line."
                },
                {
                    "name": "space-around",
                    "description": "Flex items are evenly distributed in the line, with half-size spaces on either end."
                },
                {
                    "name": "space-between",
                    "description": "Flex items are evenly distributed in the line."
                },
                {
                    "name": "baseline",
                    "description": "Specifies participation in first-baseline alignment."
                },
                {
                    "name": "first baseline",
                    "description": "Specifies participation in first-baseline alignment."
                },
                {
                    "name": "last baseline",
                    "description": "Specifies participation in last-baseline alignment."
                }
            ],
            "syntax": "normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]",
            "relevance": 87,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/justify-content"
                }
            ],
            "description": "Aligns flex items along the main axis of the current line of the flex container.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "kerning",
            "values": [
                {
                    "name": "auto",
                    "description": "Indicates that the user agent should adjust inter-glyph spacing based on kerning tables that are included in the font that will be used."
                }
            ],
            "relevance": 50,
            "description": "Indicates whether the user agent should adjust inter-glyph spacing based on kerning tables that are included in the relevant font or instead disable auto-kerning and set inter-character spacing to a specific length.",
            "restrictions": [
                "length",
                "enum"
            ]
        },
        {
            "name": "left",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5.5",
                "O5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 94,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/left"
                }
            ],
            "description": "Specifies how far an absolutely positioned box's left margin edge is offset to the right of the left edge of the box's 'containing block'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "letter-spacing",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "The spacing is the normal spacing for the current font. It is typically zero-length."
                }
            ],
            "syntax": "normal | <length>",
            "relevance": 81,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/letter-spacing"
                }
            ],
            "description": "Specifies the minimum, maximum, and optimal spacing between grapheme clusters.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "lighting-color",
            "browsers": [
                "E12",
                "FF3",
                "S6",
                "C5",
                "IE",
                "O15"
            ],
            "relevance": 50,
            "description": "Defines the color of the light source for filter primitives 'feDiffuseLighting' and 'feSpecularLighting'.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "line-break",
            "browsers": [
                "E14",
                "FF69",
                "S11",
                "C58",
                "IE5.5",
                "O45"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines."
                },
                {
                    "name": "loose",
                    "description": "Breaks text using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers."
                },
                {
                    "name": "normal",
                    "description": "Breaks text using the most common set of line-breaking rules."
                },
                {
                    "name": "strict",
                    "description": "Breaks CJK scripts using a more restrictive set of line-breaking rules than 'normal'."
                },
                {
                    "name": "anywhere",
                    "description": "There is a soft wrap opportunity around every typographic character unit, including around any punctuation character or preserved white spaces, or in the middle of words, disregarding any prohibition against line breaks, even those introduced by characters with the GL, WJ, or ZWJ line breaking classes or mandated by the word-break property."
                }
            ],
            "syntax": "auto | loose | normal | strict | anywhere",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/line-break"
                }
            ],
            "description": "Specifies what set of line breaking restrictions are in effect within the element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "line-height",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "Tells user agents to set the computed value to a 'reasonable' value based on the font size of the element."
                }
            ],
            "syntax": "normal | <number> | <length> | <percentage>",
            "relevance": 92,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/line-height"
                }
            ],
            "description": "Determines the block-progression dimension of the text content area of an inline box.",
            "restrictions": [
                "number",
                "length",
                "percentage"
            ]
        },
        {
            "name": "list-style",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "armenian"
                },
                {
                    "name": "circle",
                    "description": "A hollow circle."
                },
                {
                    "name": "decimal"
                },
                {
                    "name": "decimal-leading-zero"
                },
                {
                    "name": "disc",
                    "description": "A filled circle."
                },
                {
                    "name": "georgian"
                },
                {
                    "name": "inside",
                    "description": "The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below."
                },
                {
                    "name": "lower-alpha"
                },
                {
                    "name": "lower-greek"
                },
                {
                    "name": "lower-latin"
                },
                {
                    "name": "lower-roman"
                },
                {
                    "name": "none"
                },
                {
                    "name": "outside",
                    "description": "The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element's content flows."
                },
                {
                    "name": "square",
                    "description": "A filled square."
                },
                {
                    "name": "symbols()",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Allows a counter style to be defined inline."
                },
                {
                    "name": "upper-alpha"
                },
                {
                    "name": "upper-latin"
                },
                {
                    "name": "upper-roman"
                },
                {
                    "name": "url()"
                }
            ],
            "syntax": "<'list-style-type'> || <'list-style-position'> || <'list-style-image'>",
            "relevance": 83,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/list-style"
                }
            ],
            "description": "Shorthand for setting 'list-style-type', 'list-style-position' and 'list-style-image'",
            "restrictions": [
                "image",
                "enum",
                "url"
            ]
        },
        {
            "name": "list-style-image",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The default contents of the of the list item's marker are given by 'list-style-type' instead."
                }
            ],
            "syntax": "<image> | none",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/list-style-image"
                }
            ],
            "description": "Sets the image that will be used as the list item marker. When the image is available, it will replace the marker set with the 'list-style-type' marker.",
            "restrictions": [
                "image"
            ]
        },
        {
            "name": "list-style-position",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [
                {
                    "name": "inside",
                    "description": "The marker box is outside the principal block box, as described in the section on the ::marker pseudo-element below."
                },
                {
                    "name": "outside",
                    "description": "The ::marker pseudo-element is an inline element placed immediately before all ::before pseudo-elements in the principal block box, after which the element's content flows."
                }
            ],
            "syntax": "inside | outside",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/list-style-position"
                }
            ],
            "description": "Specifies the position of the '::marker' pseudo-element's box in the list item.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "list-style-type",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [
                {
                    "name": "armenian",
                    "description": "Traditional uppercase Armenian numbering."
                },
                {
                    "name": "circle",
                    "description": "A hollow circle."
                },
                {
                    "name": "decimal",
                    "description": "Western decimal numbers."
                },
                {
                    "name": "decimal-leading-zero",
                    "description": "Decimal numbers padded by initial zeros."
                },
                {
                    "name": "disc",
                    "description": "A filled circle."
                },
                {
                    "name": "georgian",
                    "description": "Traditional Georgian numbering."
                },
                {
                    "name": "lower-alpha",
                    "description": "Lowercase ASCII letters."
                },
                {
                    "name": "lower-greek",
                    "description": "Lowercase classical Greek."
                },
                {
                    "name": "lower-latin",
                    "description": "Lowercase ASCII letters."
                },
                {
                    "name": "lower-roman",
                    "description": "Lowercase ASCII Roman numerals."
                },
                {
                    "name": "none",
                    "description": "No marker"
                },
                {
                    "name": "square",
                    "description": "A filled square."
                },
                {
                    "name": "symbols()",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O3.5"
                    ],
                    "description": "Allows a counter style to be defined inline."
                },
                {
                    "name": "upper-alpha",
                    "description": "Uppercase ASCII letters."
                },
                {
                    "name": "upper-latin",
                    "description": "Uppercase ASCII letters."
                },
                {
                    "name": "upper-roman",
                    "description": "Uppercase ASCII Roman numerals."
                }
            ],
            "syntax": "<counter-style> | <string> | none",
            "relevance": 73,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/list-style-type"
                }
            ],
            "description": "Used to construct the default contents of a list item's marker",
            "restrictions": [
                "enum",
                "string"
            ]
        },
        {
            "name": "margin",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "[ <length> | <percentage> | auto ]{1,4}",
            "relevance": 95,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin"
                }
            ],
            "description": "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-block-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<'margin-left'>",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-block-end"
                }
            ],
            "description": "Logical 'margin-bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-block-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<'margin-left'>",
            "relevance": 56,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-block-start"
                }
            ],
            "description": "Logical 'margin-top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-bottom",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-bottom"
                }
            ],
            "description": "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-inline-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<'margin-left'>",
            "relevance": 58,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-inline-end"
                }
            ],
            "description": "Logical 'margin-right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-inline-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<'margin-left'>",
            "relevance": 59,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-inline-start"
                }
            ],
            "description": "Logical 'margin-left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-left",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-left"
                }
            ],
            "description": "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-right",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-right"
                }
            ],
            "description": "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "margin-top",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 94,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-top"
                }
            ],
            "description": "Shorthand property to set values for the thickness of the margin area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. Negative values for margin properties are allowed, but there may be implementation-specific limits..",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "marker",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
                },
                {
                    "name": "url()",
                    "description": "Indicates that the <marker> element referenced will be used."
                }
            ],
            "relevance": 50,
            "description": "Specifies the marker symbol that shall be used for all points on the sets the value for all vertices on the given 'path' element or basic shape.",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "marker-end",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
                },
                {
                    "name": "url()",
                    "description": "Indicates that the <marker> element referenced will be used."
                }
            ],
            "relevance": 50,
            "description": "Specifies the marker that will be drawn at the last vertices of the given markable element.",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "marker-mid",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
                },
                {
                    "name": "url()",
                    "description": "Indicates that the <marker> element referenced will be used."
                }
            ],
            "relevance": 50,
            "description": "Specifies the marker that will be drawn at all vertices except the first and last.",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "marker-start",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that no marker symbol will be drawn at the given vertex or vertices."
                },
                {
                    "name": "url()",
                    "description": "Indicates that the <marker> element referenced will be used."
                }
            ],
            "relevance": 50,
            "description": "Specifies the marker that will be drawn at the first vertices of the given markable element.",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "mask-image",
            "browsers": [
                "E79",
                "FF53",
                "S15.4",
                "C120",
                "O15"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Counts as a transparent black image layer."
                },
                {
                    "name": "url()",
                    "description": "Reference to a <mask element or to a CSS image."
                }
            ],
            "syntax": "<mask-reference>#",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-image"
                }
            ],
            "description": "Sets the mask layer image of an element.",
            "restrictions": [
                "url",
                "image",
                "enum"
            ]
        },
        {
            "name": "mask-mode",
            "browsers": [
                "E120",
                "FF53",
                "S15.4",
                "C120",
                "O106"
            ],
            "values": [
                {
                    "name": "alpha",
                    "description": "Alpha values of the mask layer image should be used as the mask values."
                },
                {
                    "name": "auto",
                    "description": "Use alpha values if 'mask-image' is an image, luminance if a <mask> element or a CSS image."
                },
                {
                    "name": "luminance",
                    "description": "Luminance values of the mask layer image should be used as the mask values."
                }
            ],
            "syntax": "<masking-mode>#",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-mode"
                }
            ],
            "description": "Indicates whether the mask layer image is treated as luminance mask or alpha mask.",
            "restrictions": [
                "url",
                "image",
                "enum"
            ]
        },
        {
            "name": "mask-origin",
            "browsers": [
                "E120",
                "FF53",
                "S15.4",
                "C120",
                "O106"
            ],
            "syntax": "<geometry-box>#",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-origin"
                }
            ],
            "description": "Specifies the mask positioning area.",
            "restrictions": [
                "geometry-box",
                "enum"
            ]
        },
        {
            "name": "mask-position",
            "browsers": [
                "E79",
                "FF53",
                "S15.4",
                "C120",
                "O106"
            ],
            "syntax": "<position>#",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-position"
                }
            ],
            "description": "Specifies how mask layer images are positioned.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "mask-repeat",
            "browsers": [
                "E79",
                "FF53",
                "S15.4",
                "C120",
                "O106"
            ],
            "syntax": "<repeat-style>#",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-repeat"
                }
            ],
            "description": "Specifies how mask layer images are tiled after they have been sized and positioned.",
            "restrictions": [
                "repeat"
            ]
        },
        {
            "name": "mask-size",
            "browsers": [
                "E79",
                "FF53",
                "S15.4",
                "C120",
                "O106"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Resolved by using the image's intrinsic ratio and the size of the other dimension, or failing that, using the image's intrinsic size, or failing that, treating it as 100%."
                },
                {
                    "name": "contain",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."
                },
                {
                    "name": "cover",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."
                }
            ],
            "syntax": "<bg-size>#",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-size"
                }
            ],
            "description": "Specifies the size of the mask layer images.",
            "restrictions": [
                "length",
                "percentage",
                "enum"
            ]
        },
        {
            "name": "mask-type",
            "browsers": [
                "E79",
                "FF35",
                "S7",
                "C24",
                "O15"
            ],
            "values": [
                {
                    "name": "alpha",
                    "description": "Indicates that the alpha values of the mask should be used."
                },
                {
                    "name": "luminance",
                    "description": "Indicates that the luminance values of the mask should be used."
                }
            ],
            "syntax": "luminance | alpha",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-type"
                }
            ],
            "description": "Defines whether the content of the <mask> element is treated as as luminance mask or alpha mask.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "max-block-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No limit on the width of the box."
                }
            ],
            "syntax": "<'max-width'>",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/max-block-size"
                }
            ],
            "description": "Maximum size of an element in the direction opposite that of the direction specified by 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "max-height",
            "browsers": [
                "E12",
                "FF1",
                "S1.3",
                "C18",
                "IE7",
                "O7"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No limit on the height of the box."
                },
                {
                    "name": "fit-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.3",
                        "C18",
                        "IE7",
                        "O7"
                    ],
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.3",
                        "C18",
                        "IE7",
                        "O7"
                    ],
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.3",
                        "C18",
                        "IE7",
                        "O7"
                    ],
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            "relevance": 85,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/max-height"
                }
            ],
            "description": "Allows authors to constrain content height to a certain range.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "max-inline-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No limit on the height of the box."
                }
            ],
            "syntax": "<'max-width'>",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/max-inline-size"
                }
            ],
            "description": "Maximum size of an element in the direction specified by 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "max-width",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE7",
                "O4"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No limit on the width of the box."
                },
                {
                    "name": "fit-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE7",
                        "O4"
                    ],
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE7",
                        "O4"
                    ],
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE7",
                        "O4"
                    ],
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/max-width"
                }
            ],
            "description": "Allows authors to constrain content width to a certain range.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "min-block-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "syntax": "<'min-width'>",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/min-block-size"
                }
            ],
            "description": "Minimal size of an element in the direction opposite that of the direction specified by 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "min-height",
            "browsers": [
                "E12",
                "FF3",
                "S1.3",
                "C1",
                "IE7",
                "O4"
            ],
            "values": [
                {
                    "name": "auto",
                    "browsers": [
                        "E12",
                        "FF3",
                        "S1.3",
                        "C1",
                        "IE7",
                        "O4"
                    ]
                },
                {
                    "name": "fit-content",
                    "browsers": [
                        "E12",
                        "FF3",
                        "S1.3",
                        "C1",
                        "IE7",
                        "O4"
                    ],
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "browsers": [
                        "E12",
                        "FF3",
                        "S1.3",
                        "C1",
                        "IE7",
                        "O4"
                    ],
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "browsers": [
                        "E12",
                        "FF3",
                        "S1.3",
                        "C1",
                        "IE7",
                        "O4"
                    ],
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/min-height"
                }
            ],
            "description": "Allows authors to constrain content height to a certain range.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "min-inline-size",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C57",
                "O44"
            ],
            "syntax": "<'min-width'>",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/min-inline-size"
                }
            ],
            "description": "Minimal size of an element in the direction specified by 'writing-mode'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "min-width",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE7",
                "O4"
            ],
            "values": [
                {
                    "name": "auto",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE7",
                        "O4"
                    ]
                },
                {
                    "name": "fit-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE7",
                        "O4"
                    ],
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE7",
                        "O4"
                    ],
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE7",
                        "O4"
                    ],
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/min-width"
                }
            ],
            "description": "Allows authors to constrain content width to a certain range.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "mix-blend-mode",
            "browsers": [
                "E79",
                "FF32",
                "S8",
                "C41",
                "O28"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "Default attribute which specifies no blending"
                },
                {
                    "name": "multiply",
                    "description": "The source color is multiplied by the destination color and replaces the destination."
                },
                {
                    "name": "screen",
                    "description": "Multiplies the complements of the backdrop and source color values, then complements the result."
                },
                {
                    "name": "overlay",
                    "description": "Multiplies or screens the colors, depending on the backdrop color value."
                },
                {
                    "name": "darken",
                    "description": "Selects the darker of the backdrop and source colors."
                },
                {
                    "name": "lighten",
                    "description": "Selects the lighter of the backdrop and source colors."
                },
                {
                    "name": "color-dodge",
                    "description": "Brightens the backdrop color to reflect the source color."
                },
                {
                    "name": "color-burn",
                    "description": "Darkens the backdrop color to reflect the source color."
                },
                {
                    "name": "hard-light",
                    "description": "Multiplies or screens the colors, depending on the source color value."
                },
                {
                    "name": "soft-light",
                    "description": "Darkens or lightens the colors, depending on the source color value."
                },
                {
                    "name": "difference",
                    "description": "Subtracts the darker of the two constituent colors from the lighter color.."
                },
                {
                    "name": "exclusion",
                    "description": "Produces an effect similar to that of the Difference mode but lower in contrast."
                },
                {
                    "name": "hue",
                    "browsers": [
                        "E79",
                        "FF32",
                        "S8",
                        "C41",
                        "O28"
                    ],
                    "description": "Creates a color with the hue of the source color and the saturation and luminosity of the backdrop color."
                },
                {
                    "name": "saturation",
                    "browsers": [
                        "E79",
                        "FF32",
                        "S8",
                        "C41",
                        "O28"
                    ],
                    "description": "Creates a color with the saturation of the source color and the hue and luminosity of the backdrop color."
                },
                {
                    "name": "color",
                    "browsers": [
                        "E79",
                        "FF32",
                        "S8",
                        "C41",
                        "O28"
                    ],
                    "description": "Creates a color with the hue and saturation of the source color and the luminosity of the backdrop color."
                },
                {
                    "name": "luminosity",
                    "browsers": [
                        "E79",
                        "FF32",
                        "S8",
                        "C41",
                        "O28"
                    ],
                    "description": "Creates a color with the luminosity of the source color and the hue and saturation of the backdrop color."
                }
            ],
            "syntax": "<blend-mode> | plus-lighter",
            "relevance": 54,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode"
                }
            ],
            "description": "Defines the formula that must be used to mix the colors with the backdrop.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "motion",
            "browsers": [
                "C46",
                "O33"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No motion path gets created."
                },
                {
                    "name": "path()",
                    "description": "Defines an SVG path as a string, with optional 'fill-rule' as the first argument."
                },
                {
                    "name": "auto",
                    "description": "Indicates that the object is rotated by the angle of the direction of the motion path."
                },
                {
                    "name": "reverse",
                    "description": "Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property for setting 'motion-path', 'motion-offset' and 'motion-rotation'.",
            "restrictions": [
                "url",
                "length",
                "percentage",
                "angle",
                "shape",
                "geometry-box",
                "enum"
            ]
        },
        {
            "name": "motion-offset",
            "browsers": [
                "C46",
                "O33"
            ],
            "relevance": 50,
            "description": "A distance that describes the position along the specified motion path.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "motion-path",
            "browsers": [
                "C46",
                "O33"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No motion path gets created."
                },
                {
                    "name": "path()",
                    "description": "Defines an SVG path as a string, with optional 'fill-rule' as the first argument."
                }
            ],
            "relevance": 50,
            "description": "Specifies the motion path the element gets positioned at.",
            "restrictions": [
                "url",
                "shape",
                "geometry-box",
                "enum"
            ]
        },
        {
            "name": "motion-rotation",
            "browsers": [
                "C46",
                "O33"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Indicates that the object is rotated by the angle of the direction of the motion path."
                },
                {
                    "name": "reverse",
                    "description": "Indicates that the object is rotated by the angle of the direction of the motion path plus 180 degrees."
                }
            ],
            "relevance": 50,
            "description": "Defines the direction of the element while positioning along the motion path.",
            "restrictions": [
                "angle"
            ]
        },
        {
            "name": "-moz-animation",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                },
                {
                    "name": "none",
                    "description": "No animation is performed"
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines six of the animation properties into a single property.",
            "restrictions": [
                "time",
                "enum",
                "timing-function",
                "identifier",
                "number"
            ]
        },
        {
            "name": "-moz-animation-delay",
            "browsers": [
                "FF9"
            ],
            "relevance": 50,
            "description": "Defines when the animation will start.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-moz-animation-direction",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-animation-duration",
            "browsers": [
                "FF9"
            ],
            "relevance": 50,
            "description": "Defines the length of time that an animation takes to complete one cycle.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-moz-animation-iteration-count",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                }
            ],
            "relevance": 50,
            "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            "restrictions": [
                "number",
                "enum"
            ]
        },
        {
            "name": "-moz-animation-name",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No animation is performed"
                }
            ],
            "relevance": 50,
            "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            "restrictions": [
                "identifier",
                "enum"
            ]
        },
        {
            "name": "-moz-animation-play-state",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "paused",
                    "description": "A running animation will be paused."
                },
                {
                    "name": "running",
                    "description": "Resume playback of a paused animation."
                }
            ],
            "relevance": 50,
            "description": "Defines whether the animation is running or paused.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-animation-timing-function",
            "browsers": [
                "FF9"
            ],
            "relevance": 50,
            "description": "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "-moz-appearance",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "button"
                },
                {
                    "name": "button-arrow-down"
                },
                {
                    "name": "button-arrow-next"
                },
                {
                    "name": "button-arrow-previous"
                },
                {
                    "name": "button-arrow-up"
                },
                {
                    "name": "button-bevel"
                },
                {
                    "name": "checkbox"
                },
                {
                    "name": "checkbox-container"
                },
                {
                    "name": "checkbox-label"
                },
                {
                    "name": "dialog"
                },
                {
                    "name": "groupbox"
                },
                {
                    "name": "listbox"
                },
                {
                    "name": "menuarrow"
                },
                {
                    "name": "menuimage"
                },
                {
                    "name": "menuitem"
                },
                {
                    "name": "menuitemtext"
                },
                {
                    "name": "menulist"
                },
                {
                    "name": "menulist-button"
                },
                {
                    "name": "menulist-text"
                },
                {
                    "name": "menulist-textfield"
                },
                {
                    "name": "menupopup"
                },
                {
                    "name": "menuradio"
                },
                {
                    "name": "menuseparator"
                },
                {
                    "name": "-moz-mac-unified-toolbar"
                },
                {
                    "name": "-moz-win-borderless-glass"
                },
                {
                    "name": "-moz-win-browsertabbar-toolbox"
                },
                {
                    "name": "-moz-win-communications-toolbox"
                },
                {
                    "name": "-moz-win-glass"
                },
                {
                    "name": "-moz-win-media-toolbox"
                },
                {
                    "name": "none"
                },
                {
                    "name": "progressbar"
                },
                {
                    "name": "progresschunk"
                },
                {
                    "name": "radio"
                },
                {
                    "name": "radio-container"
                },
                {
                    "name": "radio-label"
                },
                {
                    "name": "radiomenuitem"
                },
                {
                    "name": "resizer"
                },
                {
                    "name": "resizerpanel"
                },
                {
                    "name": "scrollbarbutton-down"
                },
                {
                    "name": "scrollbarbutton-left"
                },
                {
                    "name": "scrollbarbutton-right"
                },
                {
                    "name": "scrollbarbutton-up"
                },
                {
                    "name": "scrollbar-small"
                },
                {
                    "name": "scrollbartrack-horizontal"
                },
                {
                    "name": "scrollbartrack-vertical"
                },
                {
                    "name": "separator"
                },
                {
                    "name": "spinner"
                },
                {
                    "name": "spinner-downbutton"
                },
                {
                    "name": "spinner-textfield"
                },
                {
                    "name": "spinner-upbutton"
                },
                {
                    "name": "statusbar"
                },
                {
                    "name": "statusbarpanel"
                },
                {
                    "name": "tab"
                },
                {
                    "name": "tabpanels"
                },
                {
                    "name": "tab-scroll-arrow-back"
                },
                {
                    "name": "tab-scroll-arrow-forward"
                },
                {
                    "name": "textfield"
                },
                {
                    "name": "textfield-multiline"
                },
                {
                    "name": "toolbar"
                },
                {
                    "name": "toolbox"
                },
                {
                    "name": "tooltip"
                },
                {
                    "name": "treeheadercell"
                },
                {
                    "name": "treeheadersortarrow"
                },
                {
                    "name": "treeitem"
                },
                {
                    "name": "treetwistyopen"
                },
                {
                    "name": "treeview"
                },
                {
                    "name": "treewisty"
                },
                {
                    "name": "window"
                }
            ],
            "status": "nonstandard",
            "syntax": "none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized",
            "relevance": 0,
            "description": "Used in Gecko (Firefox) to display an element using a platform-native styling based on the operating system's theme.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-backface-visibility",
            "browsers": [
                "FF10"
            ],
            "values": [
                {
                    "name": "hidden"
                },
                {
                    "name": "visible"
                }
            ],
            "relevance": 50,
            "description": "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-background-clip",
            "browsers": [
                "FF1-3.6"
            ],
            "values": [
                {
                    "name": "padding"
                }
            ],
            "relevance": 50,
            "description": "Determines the background painting area.",
            "restrictions": [
                "box",
                "enum"
            ]
        },
        {
            "name": "-moz-background-inline-policy",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "bounding-box"
                },
                {
                    "name": "continuous"
                },
                {
                    "name": "each-box"
                }
            ],
            "relevance": 50,
            "description": "In Gecko-based applications like Firefox, the -moz-background-inline-policy CSS property specifies how the background image of an inline element is determined when the content of the inline element wraps onto multiple lines. The choice of position has significant effects on repetition.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-background-origin",
            "browsers": [
                "FF1"
            ],
            "relevance": 50,
            "description": "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "-moz-border-bottom-colors",
            "browsers": [
                "FF1"
            ],
            "status": "nonstandard",
            "syntax": "<color>+ | none",
            "relevance": 0,
            "description": "Sets a list of colors for the bottom border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-border-image",
            "browsers": [
                "FF3.6"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
                },
                {
                    "name": "fill",
                    "description": "Causes the middle part of the border-image to be preserved."
                },
                {
                    "name": "none"
                },
                {
                    "name": "repeat",
                    "description": "The image is tiled (repeated) to fill the area."
                },
                {
                    "name": "round",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
                },
                {
                    "name": "space",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
                },
                {
                    "name": "stretch",
                    "description": "The image is stretched to fill the area."
                },
                {
                    "name": "url()"
                }
            ],
            "relevance": 50,
            "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "percentage",
                "number",
                "url",
                "enum"
            ]
        },
        {
            "name": "-moz-border-left-colors",
            "browsers": [
                "FF1"
            ],
            "status": "nonstandard",
            "syntax": "<color>+ | none",
            "relevance": 0,
            "description": "Sets a list of colors for the bottom border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-border-right-colors",
            "browsers": [
                "FF1"
            ],
            "status": "nonstandard",
            "syntax": "<color>+ | none",
            "relevance": 0,
            "description": "Sets a list of colors for the bottom border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-border-top-colors",
            "browsers": [
                "FF1"
            ],
            "status": "nonstandard",
            "syntax": "<color>+ | none",
            "relevance": 0,
            "description": "Ske Firefox, -moz-border-bottom-colors sets a list of colors for the bottom border.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-box-align",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "baseline",
                    "description": "If this box orientation is inline-axis or horizontal, all children are placed with their baselines aligned, and extra space placed before or after as necessary. For block flows, the baseline of the first non-empty line box located within the element is used. For tables, the baseline of the first cell is used."
                },
                {
                    "name": "center",
                    "description": "Any extra space is divided evenly, with half placed above the child and the other half placed after the child."
                },
                {
                    "name": "end",
                    "description": "For normal direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element. For reverse direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element."
                },
                {
                    "name": "start",
                    "description": "For normal direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element. For reverse direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element."
                },
                {
                    "name": "stretch",
                    "description": "The height of each child is adjusted to that of the containing block."
                }
            ],
            "relevance": 50,
            "description": "Specifies how a XUL box aligns its contents across (perpendicular to) the direction of its layout. The effect of this is only visible if there is extra space in the box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-box-direction",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "A box with a computed value of horizontal for box-orient displays its children from left to right. A box with a computed value of vertical displays its children from top to bottom."
                },
                {
                    "name": "reverse",
                    "description": "A box with a computed value of horizontal for box-orient displays its children from right to left. A box with a computed value of vertical displays its children from bottom to top."
                }
            ],
            "relevance": 50,
            "description": "Specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-box-flex",
            "browsers": [
                "FF1"
            ],
            "relevance": 50,
            "description": "Specifies how a box grows to fill the box that contains it, in the direction of the containing box's layout.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "-moz-box-flexgroup",
            "browsers": [
                "FF1"
            ],
            "relevance": 50,
            "description": "Flexible elements can be assigned to flex groups using the 'box-flex-group' property.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-moz-box-ordinal-group",
            "browsers": [
                "FF1"
            ],
            "relevance": 50,
            "description": "Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-moz-box-orient",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "block-axis",
                    "description": "Elements are oriented along the box's axis."
                },
                {
                    "name": "horizontal",
                    "description": "The box displays its children from left to right in a horizontal line."
                },
                {
                    "name": "inline-axis",
                    "description": "Elements are oriented vertically."
                },
                {
                    "name": "vertical",
                    "description": "The box displays its children from stacked from top to bottom vertically."
                }
            ],
            "relevance": 50,
            "description": "In Mozilla applications, -moz-box-orient specifies whether a box lays out its contents horizontally or vertically.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-box-pack",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "The extra space is divided evenly, with half placed before the first child and the other half placed after the last child."
                },
                {
                    "name": "end",
                    "description": "For normal direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child. For reverse direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child."
                },
                {
                    "name": "justify",
                    "description": "The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start."
                },
                {
                    "name": "start",
                    "description": "For normal direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child. For reverse direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child."
                }
            ],
            "relevance": 50,
            "description": "Specifies how a box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-box-sizing",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "border-box",
                    "description": "The specified width and height (and respective min/max properties) on this element determine the border box of the element."
                },
                {
                    "name": "content-box",
                    "description": "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element."
                },
                {
                    "name": "padding-box",
                    "description": "The specified width and height (and respective min/max properties) on this element determine the padding box of the element."
                }
            ],
            "relevance": 50,
            "description": "Box Model addition in CSS3.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-column-count",
            "browsers": [
                "FF3.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Determines the number of columns by the 'column-width' property and the element width."
                }
            ],
            "relevance": 50,
            "description": "Describes the optimal number of columns into which the content of the element will be flowed.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-moz-column-gap",
            "browsers": [
                "FF3.5"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "User agent specific and typically equivalent to 1em."
                }
            ],
            "relevance": 50,
            "description": "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-moz-column-rule",
            "browsers": [
                "FF3.5"
            ],
            "relevance": 50,
            "description": "Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "-moz-column-rule-color",
            "browsers": [
                "FF3.5"
            ],
            "relevance": 50,
            "description": "Sets the color of the column rule",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-column-rule-style",
            "browsers": [
                "FF3.5"
            ],
            "relevance": 50,
            "description": "Sets the style of the rule between columns of an element.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "-moz-column-rule-width",
            "browsers": [
                "FF3.5"
            ],
            "relevance": 50,
            "description": "Sets the width of the rule between columns. Negative values are not allowed.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "-moz-columns",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "relevance": 50,
            "description": "A shorthand property which sets both 'column-width' and 'column-count'.",
            "restrictions": [
                "length",
                "integer"
            ]
        },
        {
            "name": "-moz-column-width",
            "browsers": [
                "FF3.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "relevance": 50,
            "description": "This property describes the width of columns in multicol elements.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-moz-font-feature-settings",
            "browsers": [
                "FF4"
            ],
            "values": [
                {
                    "name": "\"c2cs\""
                },
                {
                    "name": "\"dlig\""
                },
                {
                    "name": "\"kern\""
                },
                {
                    "name": "\"liga\""
                },
                {
                    "name": "\"lnum\""
                },
                {
                    "name": "\"onum\""
                },
                {
                    "name": "\"smcp\""
                },
                {
                    "name": "\"swsh\""
                },
                {
                    "name": "\"tnum\""
                },
                {
                    "name": "normal",
                    "description": "No change in glyph substitution or positioning occurs."
                },
                {
                    "name": "off",
                    "browsers": [
                        "FF4"
                    ]
                },
                {
                    "name": "on",
                    "browsers": [
                        "FF4"
                    ]
                }
            ],
            "relevance": 50,
            "description": "Provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
            "restrictions": [
                "string",
                "integer"
            ]
        },
        {
            "name": "-moz-hyphens",
            "browsers": [
                "FF9"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
                },
                {
                    "name": "manual",
                    "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
                },
                {
                    "name": "none",
                    "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
                }
            ],
            "relevance": 50,
            "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-perspective",
            "browsers": [
                "FF10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No perspective transform is applied."
                }
            ],
            "relevance": 50,
            "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-moz-perspective-origin",
            "browsers": [
                "FF10"
            ],
            "relevance": 50,
            "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "-moz-text-align-last",
            "browsers": [
                "FF12"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "center",
                    "description": "The inline contents are centered within the line box."
                },
                {
                    "name": "justify",
                    "description": "The text is justified according to the method specified by the 'text-justify' property."
                },
                {
                    "name": "left",
                    "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
                },
                {
                    "name": "right",
                    "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
                }
            ],
            "relevance": 50,
            "description": "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-text-decoration-color",
            "browsers": [
                "FF6"
            ],
            "relevance": 50,
            "description": "Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-moz-text-decoration-line",
            "browsers": [
                "FF6"
            ],
            "values": [
                {
                    "name": "line-through",
                    "description": "Each line of text has a line through the middle."
                },
                {
                    "name": "none",
                    "description": "Neither produces nor inhibits text decoration."
                },
                {
                    "name": "overline",
                    "description": "Each line of text has a line above it."
                },
                {
                    "name": "underline",
                    "description": "Each line of text is underlined."
                }
            ],
            "relevance": 50,
            "description": "Specifies what line decorations, if any, are added to the element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-text-decoration-style",
            "browsers": [
                "FF6"
            ],
            "values": [
                {
                    "name": "dashed",
                    "description": "Produces a dashed line style."
                },
                {
                    "name": "dotted",
                    "description": "Produces a dotted line."
                },
                {
                    "name": "double",
                    "description": "Produces a double line."
                },
                {
                    "name": "none",
                    "description": "Produces no line."
                },
                {
                    "name": "solid",
                    "description": "Produces a solid line."
                },
                {
                    "name": "wavy",
                    "description": "Produces a wavy line."
                }
            ],
            "relevance": 50,
            "description": "Specifies the line style for underline, line-through and overline text decoration.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-text-size-adjust",
            "browsers": [
                "FF"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Renderers must use the default size adjustment when displaying on a small device."
                },
                {
                    "name": "none",
                    "description": "Renderers must not do size adjustment when displaying on a small device."
                }
            ],
            "relevance": 50,
            "description": "Specifies a size adjustment for displaying text content in mobile browsers.",
            "restrictions": [
                "enum",
                "percentage"
            ]
        },
        {
            "name": "-moz-transform",
            "browsers": [
                "FF3.5"
            ],
            "values": [
                {
                    "name": "matrix()",
                    "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
                },
                {
                    "name": "matrix3d()",
                    "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
                },
                {
                    "name": "none"
                },
                {
                    "name": "perspective",
                    "description": "Specifies a perspective projection matrix."
                },
                {
                    "name": "rotate()",
                    "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
                },
                {
                    "name": "rotate3d()",
                    "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
                },
                {
                    "name": "rotateX('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the X axis."
                },
                {
                    "name": "rotateY('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Y axis."
                },
                {
                    "name": "rotateZ('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Z axis."
                },
                {
                    "name": "scale()",
                    "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
                },
                {
                    "name": "scale3d()",
                    "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
                },
                {
                    "name": "scaleX()",
                    "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
                },
                {
                    "name": "scaleY()",
                    "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
                },
                {
                    "name": "scaleZ()",
                    "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
                },
                {
                    "name": "skew()",
                    "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
                },
                {
                    "name": "skewX()",
                    "description": "Specifies a skew transformation along the X axis by the given angle."
                },
                {
                    "name": "skewY()",
                    "description": "Specifies a skew transformation along the Y axis by the given angle."
                },
                {
                    "name": "translate()",
                    "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
                },
                {
                    "name": "translate3d()",
                    "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
                },
                {
                    "name": "translateX()",
                    "description": "Specifies a translation by the given amount in the X direction."
                },
                {
                    "name": "translateY()",
                    "description": "Specifies a translation by the given amount in the Y direction."
                },
                {
                    "name": "translateZ()",
                    "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
                }
            ],
            "relevance": 50,
            "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-moz-transform-origin",
            "browsers": [
                "FF3.5"
            ],
            "relevance": 50,
            "description": "Establishes the origin of transformation for an element.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-moz-transition",
            "browsers": [
                "FF4"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines four of the transition properties into a single property.",
            "restrictions": [
                "time",
                "property",
                "timing-function",
                "enum"
            ]
        },
        {
            "name": "-moz-transition-delay",
            "browsers": [
                "FF4"
            ],
            "relevance": 50,
            "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-moz-transition-duration",
            "browsers": [
                "FF4"
            ],
            "relevance": 50,
            "description": "Specifies how long the transition from the old value to the new value should take.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-moz-transition-property",
            "browsers": [
                "FF4"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Specifies the name of the CSS property to which the transition is applied.",
            "restrictions": [
                "property"
            ]
        },
        {
            "name": "-moz-transition-timing-function",
            "browsers": [
                "FF4"
            ],
            "relevance": 50,
            "description": "Describes how the intermediate values used during a transition will be calculated.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "-moz-user-focus",
            "browsers": [
                "FF1"
            ],
            "values": [
                {
                    "name": "ignore"
                },
                {
                    "name": "normal"
                }
            ],
            "status": "nonstandard",
            "syntax": "ignore | normal | select-after | select-before | select-menu | select-same | select-all | none",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-user-focus"
                }
            ],
            "description": "Used to indicate whether the element can have focus."
        },
        {
            "name": "-moz-user-select",
            "browsers": [
                "FF1.5"
            ],
            "values": [
                {
                    "name": "all"
                },
                {
                    "name": "element"
                },
                {
                    "name": "elements"
                },
                {
                    "name": "-moz-all"
                },
                {
                    "name": "-moz-none"
                },
                {
                    "name": "none"
                },
                {
                    "name": "text"
                },
                {
                    "name": "toggle"
                }
            ],
            "relevance": 50,
            "description": "Controls the appearance of selection.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-accelerator",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "false",
                    "description": "The element does not contain an accelerator key sequence."
                },
                {
                    "name": "true",
                    "description": "The element contains an accelerator key sequence."
                }
            ],
            "status": "nonstandard",
            "syntax": "false | true",
            "relevance": 0,
            "description": "IE only. Has the ability to turn off its system underlines for accelerator keys until the ALT key is pressed",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-behavior",
            "browsers": [
                "IE8"
            ],
            "relevance": 50,
            "description": "IE only. Used to extend behaviors of the browser",
            "restrictions": [
                "url"
            ]
        },
        {
            "name": "-ms-block-progression",
            "browsers": [
                "IE8"
            ],
            "values": [
                {
                    "name": "bt",
                    "description": "Bottom-to-top block flow. Layout is horizontal."
                },
                {
                    "name": "lr",
                    "description": "Left-to-right direction. The flow orientation is vertical."
                },
                {
                    "name": "rl",
                    "description": "Right-to-left direction. The flow orientation is vertical."
                },
                {
                    "name": "tb",
                    "description": "Top-to-bottom direction. The flow orientation is horizontal."
                }
            ],
            "status": "nonstandard",
            "syntax": "tb | rl | bt | lr",
            "relevance": 0,
            "description": "Sets the block-progression value and the flow orientation",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-content-zoom-chaining",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "chained",
                    "description": "The nearest zoomable parent element begins zooming when the user hits a zoom limit during a manipulation. No bounce effect is shown."
                },
                {
                    "name": "none",
                    "description": "A bounce effect is shown when the user hits a zoom limit during a manipulation."
                }
            ],
            "status": "nonstandard",
            "syntax": "none | chained",
            "relevance": 0,
            "description": "Specifies the zoom behavior that occurs when a user hits the zoom limit during a manipulation."
        },
        {
            "name": "-ms-content-zooming",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The element is not zoomable."
                },
                {
                    "name": "zoom",
                    "description": "The element is zoomable."
                }
            ],
            "status": "nonstandard",
            "syntax": "none | zoom",
            "relevance": 0,
            "description": "Specifies whether zooming is enabled.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-content-zoom-limit",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>",
            "relevance": 0,
            "description": "Shorthand property for the -ms-content-zoom-limit-min and -ms-content-zoom-limit-max properties.",
            "restrictions": [
                "percentage"
            ]
        },
        {
            "name": "-ms-content-zoom-limit-max",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<percentage>",
            "relevance": 0,
            "description": "Specifies the maximum zoom factor.",
            "restrictions": [
                "percentage"
            ]
        },
        {
            "name": "-ms-content-zoom-limit-min",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<percentage>",
            "relevance": 0,
            "description": "Specifies the minimum zoom factor.",
            "restrictions": [
                "percentage"
            ]
        },
        {
            "name": "-ms-content-zoom-snap",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "mandatory",
                    "description": "Indicates that the motion of the content after the contact is picked up is always adjusted so that it lands on a snap-point."
                },
                {
                    "name": "none",
                    "description": "Indicates that zooming is unaffected by any defined snap-points."
                },
                {
                    "name": "proximity",
                    "description": "Indicates that the motion of the content after the contact is picked up may be adjusted if the content would normally stop \"close enough\" to a snap-point."
                },
                {
                    "name": "snapInterval(100%, 100%)",
                    "description": "Specifies where the snap-points will be placed."
                },
                {
                    "name": "snapList()",
                    "description": "Specifies the position of individual snap-points as a comma-separated list of zoom factors."
                }
            ],
            "status": "nonstandard",
            "syntax": "<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>",
            "relevance": 0,
            "description": "Shorthand property for the -ms-content-zoom-snap-type and -ms-content-zoom-snap-points properties."
        },
        {
            "name": "-ms-content-zoom-snap-points",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "snapInterval(100%, 100%)",
                    "description": "Specifies where the snap-points will be placed."
                },
                {
                    "name": "snapList()",
                    "description": "Specifies the position of individual snap-points as a comma-separated list of zoom factors."
                }
            ],
            "status": "nonstandard",
            "syntax": "snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )",
            "relevance": 0,
            "description": "Defines where zoom snap-points are located."
        },
        {
            "name": "-ms-content-zoom-snap-type",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "mandatory",
                    "description": "Indicates that the motion of the content after the contact is picked up is always adjusted so that it lands on a snap-point."
                },
                {
                    "name": "none",
                    "description": "Indicates that zooming is unaffected by any defined snap-points."
                },
                {
                    "name": "proximity",
                    "description": "Indicates that the motion of the content after the contact is picked up may be adjusted if the content would normally stop \"close enough\" to a snap-point."
                }
            ],
            "status": "nonstandard",
            "syntax": "none | proximity | mandatory",
            "relevance": 0,
            "description": "Specifies how zooming is affected by defined snap-points.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-filter",
            "browsers": [
                "IE8-9"
            ],
            "status": "nonstandard",
            "syntax": "<string>",
            "relevance": 0,
            "description": "IE only. Used to produce visual effects.",
            "restrictions": [
                "string"
            ]
        },
        {
            "name": "-ms-flex",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Retrieves the value of the main size property as the used 'flex-basis'."
                },
                {
                    "name": "none",
                    "description": "Expands to '0 0 auto'."
                }
            ],
            "relevance": 50,
            "description": "specifies the parameters of a flexible length: the positive and negative flexibility, and the preferred size.",
            "restrictions": [
                "length",
                "number",
                "percentage"
            ]
        },
        {
            "name": "-ms-flex-align",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "baseline",
                    "description": "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
                },
                {
                    "name": "center",
                    "description": "The flex item's margin box is centered in the cross axis within the line."
                },
                {
                    "name": "end",
                    "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
                },
                {
                    "name": "start",
                    "description": "The cross-start margin edge of the flexbox item is placed flush with the cross-start edge of the line."
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flexbox item is anything other than 'auto', this value is identical to 'start'."
                }
            ],
            "relevance": 50,
            "description": "Aligns flex items along the cross axis of the current line of the flex container.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-direction",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "column",
                    "description": "The flex container's main axis has the same orientation as the block axis of the current writing mode."
                },
                {
                    "name": "column-reverse",
                    "description": "Same as 'column', except the main-start and main-end directions are swapped."
                },
                {
                    "name": "row",
                    "description": "The flex container's main axis has the same orientation as the inline axis of the current writing mode."
                },
                {
                    "name": "row-reverse",
                    "description": "Same as 'row', except the main-start and main-end directions are swapped."
                }
            ],
            "relevance": 50,
            "description": "Specifies how flex items are placed in the flex container, by setting the direction of the flex container's main axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-flow",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "column",
                    "description": "The flex container's main axis has the same orientation as the block axis of the current writing mode."
                },
                {
                    "name": "column-reverse",
                    "description": "Same as 'column', except the main-start and main-end directions are swapped."
                },
                {
                    "name": "nowrap",
                    "description": "The flex container is single-line."
                },
                {
                    "name": "row",
                    "description": "The flex container's main axis has the same orientation as the inline axis of the current writing mode."
                },
                {
                    "name": "wrap",
                    "description": "The flexbox is multi-line."
                },
                {
                    "name": "wrap-reverse",
                    "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
                }
            ],
            "relevance": 50,
            "description": "Specifies how flexbox items are placed in the flexbox.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-item-align",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Computes to the value of 'align-items' on the element's parent, or 'stretch' if the element has no parent. On absolutely positioned elements, it computes to itself."
                },
                {
                    "name": "baseline",
                    "description": "If the flex item's inline axis is the same as the cross axis, this value is identical to 'flex-start'. Otherwise, it participates in baseline alignment."
                },
                {
                    "name": "center",
                    "description": "The flex item's margin box is centered in the cross axis within the line."
                },
                {
                    "name": "end",
                    "description": "The cross-end margin edge of the flex item is placed flush with the cross-end edge of the line."
                },
                {
                    "name": "start",
                    "description": "The cross-start margin edge of the flex item is placed flush with the cross-start edge of the line."
                },
                {
                    "name": "stretch",
                    "description": "If the cross size property of the flex item computes to auto, and neither of the cross-axis margins are auto, the flex item is stretched."
                }
            ],
            "relevance": 50,
            "description": "Allows the default alignment along the cross axis to be overridden for individual flex items.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-line-pack",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Lines are packed toward the center of the flex container."
                },
                {
                    "name": "distribute",
                    "description": "Lines are evenly distributed in the flex container, with half-size spaces on either end."
                },
                {
                    "name": "end",
                    "description": "Lines are packed toward the end of the flex container."
                },
                {
                    "name": "justify",
                    "description": "Lines are evenly distributed in the flex container."
                },
                {
                    "name": "start",
                    "description": "Lines are packed toward the start of the flex container."
                },
                {
                    "name": "stretch",
                    "description": "Lines stretch to take up the remaining space."
                }
            ],
            "relevance": 50,
            "description": "Aligns a flex container's lines within the flex container when there is extra space in the cross-axis, similar to how 'justify-content' aligns individual items within the main-axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-order",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-flex-pack",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Flex items are packed toward the center of the line."
                },
                {
                    "name": "distribute",
                    "description": "Flex items are evenly distributed in the line, with half-size spaces on either end."
                },
                {
                    "name": "end",
                    "description": "Flex items are packed toward the end of the line."
                },
                {
                    "name": "justify",
                    "description": "Flex items are evenly distributed in the line."
                },
                {
                    "name": "start",
                    "description": "Flex items are packed toward the start of the line."
                }
            ],
            "relevance": 50,
            "description": "Aligns flex items along the main axis of the current line of the flex container.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flex-wrap",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "nowrap",
                    "description": "The flex container is single-line."
                },
                {
                    "name": "wrap",
                    "description": "The flexbox is multi-line."
                },
                {
                    "name": "wrap-reverse",
                    "description": "Same as 'wrap', except the cross-start and cross-end directions are swapped."
                }
            ],
            "relevance": 50,
            "description": "Controls whether the flex container is single-line or multi-line, and the direction of the cross-axis, which determines the direction new lines are stacked in.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-flow-from",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The block container is not a CSS Region."
                }
            ],
            "status": "nonstandard",
            "syntax": "[ none | <custom-ident> ]#",
            "relevance": 0,
            "description": "Makes a block container a region and associates it with a named flow.",
            "restrictions": [
                "identifier"
            ]
        },
        {
            "name": "-ms-flow-into",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The element is not moved to a named flow and normal CSS processing takes place."
                }
            ],
            "status": "nonstandard",
            "syntax": "[ none | <custom-ident> ]#",
            "relevance": 0,
            "description": "Places an element or its contents into a named flow.",
            "restrictions": [
                "identifier"
            ]
        },
        {
            "name": "-ms-grid-column",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "end"
                },
                {
                    "name": "start"
                }
            ],
            "relevance": 50,
            "description": "Used to place grid items and explicitly defined grid cells in the Grid.",
            "restrictions": [
                "integer",
                "string",
                "enum"
            ]
        },
        {
            "name": "-ms-grid-column-align",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Places the center of the Grid Item's margin box at the center of the Grid Item's column."
                },
                {
                    "name": "end",
                    "description": "Aligns the end edge of the Grid Item's margin box to the end edge of the Grid Item's column."
                },
                {
                    "name": "start",
                    "description": "Aligns the starting edge of the Grid Item's margin box to the starting edge of the Grid Item's column."
                },
                {
                    "name": "stretch",
                    "description": "Ensures that the Grid Item's margin box is equal to the size of the Grid Item's column."
                }
            ],
            "relevance": 50,
            "description": "Aligns the columns in a grid.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-grid-columns",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "none | <track-list> | <auto-track-list>",
            "relevance": 0,
            "description": "Lays out the columns of the grid."
        },
        {
            "name": "-ms-grid-column-span",
            "browsers": [
                "E",
                "IE10"
            ],
            "relevance": 50,
            "description": "Specifies the number of columns to span.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-grid-layer",
            "browsers": [
                "E",
                "IE10"
            ],
            "relevance": 50,
            "description": "Grid-layer is similar in concept to z-index, but avoids overloading the meaning of the z-index property, which is applicable only to positioned elements.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-grid-row",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "end"
                },
                {
                    "name": "start"
                }
            ],
            "relevance": 50,
            "description": "grid-row is used to place grid items and explicitly defined grid cells in the Grid.",
            "restrictions": [
                "integer",
                "string",
                "enum"
            ]
        },
        {
            "name": "-ms-grid-row-align",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "Places the center of the Grid Item's margin box at the center of the Grid Item's row."
                },
                {
                    "name": "end",
                    "description": "Aligns the end edge of the Grid Item's margin box to the end edge of the Grid Item's row."
                },
                {
                    "name": "start",
                    "description": "Aligns the starting edge of the Grid Item's margin box to the starting edge of the Grid Item's row."
                },
                {
                    "name": "stretch",
                    "description": "Ensures that the Grid Item's margin box is equal to the size of the Grid Item's row."
                }
            ],
            "relevance": 50,
            "description": "Aligns the rows in a grid.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-grid-rows",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "none | <track-list> | <auto-track-list>",
            "relevance": 0,
            "description": "Lays out the columns of the grid."
        },
        {
            "name": "-ms-grid-row-span",
            "browsers": [
                "E",
                "IE10"
            ],
            "relevance": 50,
            "description": "Specifies the number of rows to span.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-high-contrast-adjust",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Properties will be adjusted as applicable."
                },
                {
                    "name": "none",
                    "description": "No adjustments will be applied."
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | none",
            "relevance": 0,
            "description": "Specifies if properties should be adjusted in high contrast mode.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-hyphenate-limit-chars",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent chooses a value that adapts to the current layout."
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | <integer>{1,3}",
            "relevance": 0,
            "description": "Specifies the minimum number of characters in a hyphenated word.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-hyphenate-limit-lines",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "no-limit",
                    "description": "There is no limit."
                }
            ],
            "status": "nonstandard",
            "syntax": "no-limit | <integer>",
            "relevance": 0,
            "description": "Indicates the maximum number of successive hyphenated lines in an element.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-ms-hyphenate-limit-zone",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<percentage> | <length>",
            "relevance": 0,
            "description": "Specifies the maximum amount of unfilled space (before justification) that may be left in the line box before hyphenation is triggered to pull part of a word from the next line back up into the current line.",
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "-ms-hyphens",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
                },
                {
                    "name": "manual",
                    "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
                },
                {
                    "name": "none",
                    "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
                }
            ],
            "relevance": 50,
            "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-ime-mode",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "active",
                    "description": "The input method editor is initially active; text entry is performed using it unless the user specifically dismisses it."
                },
                {
                    "name": "auto",
                    "description": "No change is made to the current input method editor state. This is the default."
                },
                {
                    "name": "disabled",
                    "description": "The input method editor is disabled and may not be activated by the user."
                },
                {
                    "name": "inactive",
                    "description": "The input method editor is initially inactive, but the user may activate it if they wish."
                },
                {
                    "name": "normal",
                    "description": "The IME state should be normal; this value can be used in a user style sheet to override the page setting."
                }
            ],
            "relevance": 50,
            "description": "Controls the state of the input method editor for text fields.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-interpolation-mode",
            "browsers": [
                "IE7"
            ],
            "values": [
                {
                    "name": "bicubic"
                },
                {
                    "name": "nearest-neighbor"
                }
            ],
            "relevance": 50,
            "description": "Gets or sets the interpolation (resampling) method used to stretch images.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-layout-grid",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "char",
                    "description": "Any of the range of character values available to the -ms-layout-grid-char property."
                },
                {
                    "name": "line",
                    "description": "Any of the range of line values available to the -ms-layout-grid-line property."
                },
                {
                    "name": "mode",
                    "description": "Any of the range of mode values available to the -ms-layout-grid-mode property."
                },
                {
                    "name": "type",
                    "description": "Any of the range of type values available to the -ms-layout-grid-type property."
                }
            ],
            "relevance": 50,
            "description": "Sets or retrieves the composite document grid properties that specify the layout of text characters."
        },
        {
            "name": "-ms-layout-grid-char",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Largest character in the font of the element is used to set the character grid."
                },
                {
                    "name": "none",
                    "description": "Default. No character grid is set."
                }
            ],
            "relevance": 50,
            "description": "Sets or retrieves the size of the character grid used for rendering the text content of an element.",
            "restrictions": [
                "enum",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-layout-grid-line",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Largest character in the font of the element is used to set the character grid."
                },
                {
                    "name": "none",
                    "description": "Default. No grid line is set."
                }
            ],
            "relevance": 50,
            "description": "Sets or retrieves the gridline value used for rendering the text content of an element.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-layout-grid-mode",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "both",
                    "description": "Default. Both the char and line grid modes are enabled. This setting is necessary to fully enable the layout grid on an element."
                },
                {
                    "name": "char",
                    "description": "Only a character grid is used. This is recommended for use with block-level elements, such as a blockquote, where the line grid is intended to be disabled."
                },
                {
                    "name": "line",
                    "description": "Only a line grid is used. This is recommended for use with inline elements, such as a span, to disable the horizontal grid on runs of text that act as a single entity in the grid layout."
                },
                {
                    "name": "none",
                    "description": "No grid is used."
                }
            ],
            "relevance": 50,
            "description": "Gets or sets whether the text layout grid uses two dimensions.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-layout-grid-type",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "fixed",
                    "description": "Grid used for monospaced layout. All noncursive characters are treated as equal; every character is centered within a single grid space by default."
                },
                {
                    "name": "loose",
                    "description": "Default. Grid used for Japanese and Korean characters."
                },
                {
                    "name": "strict",
                    "description": "Grid used for Chinese, as well as Japanese (Genko) and Korean characters. Only the ideographs, kanas, and wide characters are snapped to the grid."
                }
            ],
            "relevance": 50,
            "description": "Sets or retrieves the type of grid used for rendering the text content of an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-line-break",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The UA determines the set of line-breaking restrictions to use for CJK scripts, and it may vary the restrictions based on the length of the line; e.g., use a less restrictive set of line-break rules for short lines."
                },
                {
                    "name": "keep-all",
                    "description": "Sequences of CJK characters can no longer break on implied break points. This option should only be used where the presence of word separator characters still creates line-breaking opportunities, as in Korean."
                },
                {
                    "name": "newspaper",
                    "description": "Breaks CJK scripts using the least restrictive set of line-breaking rules. Typically used for short lines, such as in newspapers."
                },
                {
                    "name": "normal",
                    "description": "Breaks CJK scripts using a normal set of line-breaking rules."
                },
                {
                    "name": "strict",
                    "description": "Breaks CJK scripts using a more restrictive set of line-breaking rules than 'normal'."
                }
            ],
            "relevance": 50,
            "description": "Specifies what set of line breaking restrictions are in effect within the element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-overflow-style",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "No preference, UA should use the first scrolling method in the list that it supports."
                },
                {
                    "name": "-ms-autohiding-scrollbar",
                    "description": "Indicates the element displays auto-hiding scrollbars during mouse interactions and panning indicators during touch and keyboard interactions."
                },
                {
                    "name": "none",
                    "description": "Indicates the element does not display scrollbars or panning indicators, even when its content overflows."
                },
                {
                    "name": "scrollbar",
                    "description": "Scrollbars are typically narrow strips inserted on one or two edges of an element and which often have arrows to click on and a \"thumb\" to drag up and down (or left and right) to move the contents of the element."
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | none | scrollbar | -ms-autohiding-scrollbar",
            "relevance": 0,
            "description": "Specify whether content is clipped when it overflows the element's content area.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-perspective",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No perspective transform is applied."
                }
            ],
            "relevance": 50,
            "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-perspective-origin",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "-ms-perspective-origin-x",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "Establishes the origin for the perspective property. It effectively sets the X  position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "-ms-perspective-origin-y",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "Establishes the origin for the perspective property. It effectively sets the Y position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "-ms-progress-appearance",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "bar"
                },
                {
                    "name": "ring"
                }
            ],
            "relevance": 50,
            "description": "Gets or sets a value that specifies whether a progress control displays as a bar or a ring.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scrollbar-3dlight-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-arrow-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the arrow elements of a scroll arrow.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-base-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-darkshadow-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the gutter of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-face-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-highlight-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-shadow-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scrollbar-track-color",
            "browsers": [
                "IE8"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "Determines the color of the track element of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-ms-scroll-chaining",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "chained"
                },
                {
                    "name": "none"
                }
            ],
            "status": "nonstandard",
            "syntax": "chained | none",
            "relevance": 0,
            "description": "Gets or sets a value that indicates the scrolling behavior that occurs when a user hits the content boundary during a manipulation.",
            "restrictions": [
                "enum",
                "length"
            ]
        },
        {
            "name": "-ms-scroll-limit",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "status": "nonstandard",
            "syntax": "<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>",
            "relevance": 0,
            "description": "Gets or sets a shorthand value that sets values for the -ms-scroll-limit-x-min, -ms-scroll-limit-y-min, -ms-scroll-limit-x-max, and -ms-scroll-limit-y-max properties.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-scroll-limit-x-max",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | <length>",
            "relevance": 0,
            "description": "Gets or sets a value that specifies the maximum value for the scrollLeft property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-scroll-limit-x-min",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<length>",
            "relevance": 0,
            "description": "Gets or sets a value that specifies the minimum value for the scrollLeft property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-scroll-limit-y-max",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | <length>",
            "relevance": 0,
            "description": "Gets or sets a value that specifies the maximum value for the scrollTop property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-scroll-limit-y-min",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<length>",
            "relevance": 0,
            "description": "Gets or sets a value that specifies the minimum value for the scrollTop property.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-ms-scroll-rails",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none"
                },
                {
                    "name": "railed"
                }
            ],
            "status": "nonstandard",
            "syntax": "none | railed",
            "relevance": 0,
            "description": "Gets or sets a value that indicates whether or not small motions perpendicular to the primary axis of motion will result in either changes to both the scrollTop and scrollLeft properties or a change to the primary axis (for instance, either the scrollTop or scrollLeft properties will change, but not both).",
            "restrictions": [
                "enum",
                "length"
            ]
        },
        {
            "name": "-ms-scroll-snap-points-x",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "snapInterval(100%, 100%)"
                },
                {
                    "name": "snapList()"
                }
            ],
            "status": "nonstandard",
            "syntax": "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
            "relevance": 0,
            "description": "Gets or sets a value that defines where snap-points will be located along the x-axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scroll-snap-points-y",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "snapInterval(100%, 100%)"
                },
                {
                    "name": "snapList()"
                }
            ],
            "status": "nonstandard",
            "syntax": "snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )",
            "relevance": 0,
            "description": "Gets or sets a value that defines where snap-points will be located along the y-axis.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scroll-snap-type",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The visual viewport of this scroll container must ignore snap points, if any, when scrolled."
                },
                {
                    "name": "mandatory",
                    "description": "The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations."
                },
                {
                    "name": "proximity",
                    "description": "The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll."
                }
            ],
            "status": "nonstandard",
            "syntax": "none | proximity | mandatory",
            "relevance": 0,
            "description": "Gets or sets a value that defines what type of snap-point should be used for the current element. There are two type of snap-points, with the primary difference being whether or not the user is guaranteed to always stop on a snap-point.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scroll-snap-x",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "mandatory"
                },
                {
                    "name": "none"
                },
                {
                    "name": "proximity"
                },
                {
                    "name": "snapInterval(100%, 100%)"
                },
                {
                    "name": "snapList()"
                }
            ],
            "status": "nonstandard",
            "syntax": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>",
            "relevance": 0,
            "description": "Gets or sets a shorthand value that sets values for the -ms-scroll-snap-type and -ms-scroll-snap-points-x properties.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scroll-snap-y",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "mandatory"
                },
                {
                    "name": "none"
                },
                {
                    "name": "proximity"
                },
                {
                    "name": "snapInterval(100%, 100%)"
                },
                {
                    "name": "snapList()"
                }
            ],
            "status": "nonstandard",
            "syntax": "<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>",
            "relevance": 0,
            "description": "Gets or sets a shorthand value that sets values for the -ms-scroll-snap-type and -ms-scroll-snap-points-y properties.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-scroll-translation",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none"
                },
                {
                    "name": "vertical-to-horizontal"
                }
            ],
            "status": "nonstandard",
            "syntax": "none | vertical-to-horizontal",
            "relevance": 0,
            "description": "Gets or sets a value that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-text-align-last",
            "browsers": [
                "E",
                "IE8"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "center",
                    "description": "The inline contents are centered within the line box."
                },
                {
                    "name": "justify",
                    "description": "The text is justified according to the method specified by the 'text-justify' property."
                },
                {
                    "name": "left",
                    "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
                },
                {
                    "name": "right",
                    "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
                }
            ],
            "relevance": 50,
            "description": "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-text-autospace",
            "browsers": [
                "E",
                "IE8"
            ],
            "values": [
                {
                    "name": "ideograph-alpha",
                    "description": "Creates 1/4em extra spacing between runs of ideographic letters and non-ideographic letters, such as Latin-based, Cyrillic, Greek, Arabic or Hebrew."
                },
                {
                    "name": "ideograph-numeric",
                    "description": "Creates 1/4em extra spacing between runs of ideographic letters and numeric glyphs."
                },
                {
                    "name": "ideograph-parenthesis",
                    "description": "Creates extra spacing between normal (non wide) parenthesis and ideographs."
                },
                {
                    "name": "ideograph-space",
                    "description": "Extends the width of the space character while surrounded by ideographs."
                },
                {
                    "name": "none",
                    "description": "No extra space is created."
                },
                {
                    "name": "punctuation",
                    "description": "Creates extra non-breaking spacing around punctuation as required by language-specific typographic conventions."
                }
            ],
            "status": "nonstandard",
            "syntax": "none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space",
            "relevance": 0,
            "description": "Determines whether or not a full-width punctuation mark character should be trimmed if it appears at the beginning of a line, so that its 'ink' lines up with the first glyph in the line above and below.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-text-combine-horizontal",
            "browsers": [
                "E",
                "IE11"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Attempt to typeset horizontally all consecutive characters within the box such that they take up the space of a single character within the vertical line box."
                },
                {
                    "name": "digits",
                    "description": "Attempt to typeset horizontally each maximal sequence of consecutive ASCII digits (U+0030-U+0039) that has as many or fewer characters than the specified integer such that it takes up the space of a single character within the vertical line box."
                },
                {
                    "name": "none",
                    "description": "No special processing."
                }
            ],
            "relevance": 50,
            "description": "This property specifies the combination of multiple characters into the space of a single character.",
            "restrictions": [
                "enum",
                "integer"
            ]
        },
        {
            "name": "-ms-text-justify",
            "browsers": [
                "E",
                "IE8"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality."
                },
                {
                    "name": "distribute",
                    "description": "Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the 'text-align-last' property."
                },
                {
                    "name": "inter-cluster",
                    "description": "Justification primarily changes spacing at word separators and at grapheme cluster boundaries in clustered scripts. This value is typically used for Southeast Asian scripts such as Thai."
                },
                {
                    "name": "inter-ideograph",
                    "description": "Justification primarily changes spacing at word separators and at inter-graphemic boundaries in scripts that use no word spaces. This value is typically used for CJK languages."
                },
                {
                    "name": "inter-word",
                    "description": "Justification primarily changes spacing at word separators. This value is typically used for languages that separate words using spaces, like English or (sometimes) Korean."
                },
                {
                    "name": "kashida",
                    "description": "Justification primarily stretches Arabic and related scripts through the use of kashida or other calligraphic elongation."
                }
            ],
            "relevance": 50,
            "description": "Selects the justification algorithm used when 'text-align' is set to 'justify'. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-text-kashida-space",
            "browsers": [
                "E",
                "IE10"
            ],
            "relevance": 50,
            "description": "Sets or retrieves the ratio of kashida expansion to white space expansion when justifying lines of text in the object.",
            "restrictions": [
                "percentage"
            ]
        },
        {
            "name": "-ms-text-overflow",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "clip",
                    "description": "Clip inline content that overflows. Characters may be only partially rendered."
                },
                {
                    "name": "ellipsis",
                    "description": "Render an ellipsis character (U+2026) to represent clipped inline content."
                }
            ],
            "relevance": 50,
            "description": "Text can overflow for example when it is prevented from wrapping",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-text-size-adjust",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Renderers must use the default size adjustment when displaying on a small device."
                },
                {
                    "name": "none",
                    "description": "Renderers must not do size adjustment when displaying on a small device."
                }
            ],
            "relevance": 50,
            "description": "Specifies a size adjustment for displaying text content in mobile browsers.",
            "restrictions": [
                "enum",
                "percentage"
            ]
        },
        {
            "name": "-ms-text-underline-position",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "alphabetic",
                    "description": "The underline is aligned with the alphabetic baseline. In this case the underline is likely to cross some descenders."
                },
                {
                    "name": "auto",
                    "description": "The user agent may use any algorithm to determine the underline's position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over."
                },
                {
                    "name": "over",
                    "description": "The underline is aligned with the 'top' (right in vertical writing) edge of the element's em-box. In this mode, an overline also switches sides."
                },
                {
                    "name": "under",
                    "description": "The underline is aligned with the 'bottom' (left in vertical writing) edge of the element's em-box. In this case the underline usually does not cross the descenders. This is sometimes called 'accounting' underline."
                }
            ],
            "relevance": 50,
            "description": "Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements.This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear 'over' (to the right of) the affected run of text",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-touch-action",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The element is a passive element, with several exceptions."
                },
                {
                    "name": "double-tap-zoom",
                    "description": "The element will zoom on double-tap."
                },
                {
                    "name": "manipulation",
                    "description": "The element is a manipulation-causing element."
                },
                {
                    "name": "none",
                    "description": "The element is a manipulation-blocking element."
                },
                {
                    "name": "pan-x",
                    "description": "The element permits touch-driven panning on the horizontal axis. The touch pan is performed on the nearest ancestor with horizontally scrollable content."
                },
                {
                    "name": "pan-y",
                    "description": "The element permits touch-driven panning on the vertical axis. The touch pan is performed on the nearest ancestor with vertically scrollable content."
                },
                {
                    "name": "pinch-zoom",
                    "description": "The element permits pinch-zooming. The pinch-zoom is performed on the nearest ancestor with zoomable content."
                }
            ],
            "relevance": 50,
            "description": "Gets or sets a value that indicates whether and how a given region can be manipulated by the user.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-touch-select",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "grippers",
                    "description": "Grippers are always on."
                },
                {
                    "name": "none",
                    "description": "Grippers are always off."
                }
            ],
            "status": "nonstandard",
            "syntax": "grippers | none",
            "relevance": 0,
            "description": "Gets or sets a value that toggles the 'gripper' visual elements that enable touch text selection.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-transform",
            "browsers": [
                "IE9-9"
            ],
            "values": [
                {
                    "name": "matrix()",
                    "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
                },
                {
                    "name": "matrix3d()",
                    "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
                },
                {
                    "name": "none"
                },
                {
                    "name": "rotate()",
                    "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
                },
                {
                    "name": "rotate3d()",
                    "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
                },
                {
                    "name": "rotateX('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the X axis."
                },
                {
                    "name": "rotateY('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Y axis."
                },
                {
                    "name": "rotateZ('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Z axis."
                },
                {
                    "name": "scale()",
                    "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
                },
                {
                    "name": "scale3d()",
                    "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
                },
                {
                    "name": "scaleX()",
                    "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
                },
                {
                    "name": "scaleY()",
                    "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
                },
                {
                    "name": "scaleZ()",
                    "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
                },
                {
                    "name": "skew()",
                    "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
                },
                {
                    "name": "skewX()",
                    "description": "Specifies a skew transformation along the X axis by the given angle."
                },
                {
                    "name": "skewY()",
                    "description": "Specifies a skew transformation along the Y axis by the given angle."
                },
                {
                    "name": "translate()",
                    "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
                },
                {
                    "name": "translate3d()",
                    "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
                },
                {
                    "name": "translateX()",
                    "description": "Specifies a translation by the given amount in the X direction."
                },
                {
                    "name": "translateY()",
                    "description": "Specifies a translation by the given amount in the Y direction."
                },
                {
                    "name": "translateZ()",
                    "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
                }
            ],
            "relevance": 50,
            "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-transform-origin",
            "browsers": [
                "IE9-9"
            ],
            "relevance": 50,
            "description": "Establishes the origin of transformation for an element.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-transform-origin-x",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "The x coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-transform-origin-y",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "The y coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-transform-origin-z",
            "browsers": [
                "IE10"
            ],
            "relevance": 50,
            "description": "The z coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-user-select",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "element"
                },
                {
                    "name": "none"
                },
                {
                    "name": "text"
                }
            ],
            "status": "nonstandard",
            "syntax": "none | element | text",
            "relevance": 0,
            "description": "Controls the appearance of selection.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-word-break",
            "browsers": [
                "IE8"
            ],
            "values": [
                {
                    "name": "break-all",
                    "description": "Lines may break between any two grapheme clusters for non-CJK scripts."
                },
                {
                    "name": "keep-all",
                    "description": "Block characters can no longer create implied break points."
                },
                {
                    "name": "normal",
                    "description": "Breaks non-CJK scripts according to their own rules."
                }
            ],
            "relevance": 50,
            "description": "Specifies line break opportunities for non-CJK scripts.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-word-wrap",
            "browsers": [
                "IE8"
            ],
            "values": [
                {
                    "name": "break-word",
                    "description": "An unbreakable 'word' may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."
                },
                {
                    "name": "normal",
                    "description": "Lines may break only at allowed break points."
                }
            ],
            "relevance": 50,
            "description": "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-wrap-flow",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For floats an exclusion is created, for all other elements an exclusion is not created."
                },
                {
                    "name": "both",
                    "description": "Inline flow content can flow on all sides of the exclusion."
                },
                {
                    "name": "clear",
                    "description": "Inline flow content can only wrap on top and bottom of the exclusion and must leave the areas to the start and end edges of the exclusion box empty."
                },
                {
                    "name": "end",
                    "description": "Inline flow content can wrap on the end side of the exclusion area but must leave the area to the start edge of the exclusion area empty."
                },
                {
                    "name": "maximum",
                    "description": "Inline flow content can wrap on the side of the exclusion with the largest available space for the given line, and must leave the other side of the exclusion empty."
                },
                {
                    "name": "minimum",
                    "description": "Inline flow content can flow around the edge of the exclusion with the smallest available space within the flow content's containing block, and must leave the other edge of the exclusion empty."
                },
                {
                    "name": "start",
                    "description": "Inline flow content can wrap on the start edge of the exclusion area but must leave the area to end edge of the exclusion area empty."
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | both | start | end | maximum | clear",
            "relevance": 0,
            "description": "An element becomes an exclusion when its 'wrap-flow' property has a computed value other than 'auto'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-wrap-margin",
            "browsers": [
                "E",
                "IE10"
            ],
            "status": "nonstandard",
            "syntax": "<length>",
            "relevance": 0,
            "description": "Gets or sets a value that is used to offset the inner wrap shape from other shapes.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-ms-wrap-through",
            "browsers": [
                "E",
                "IE10"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The exclusion element does not inherit its parent node's wrapping context. Its descendants are only subject to exclusion shapes defined inside the element."
                },
                {
                    "name": "wrap",
                    "description": "The exclusion element inherits its parent node's wrapping context. Its descendant inline content wraps around exclusions defined outside the element."
                }
            ],
            "status": "nonstandard",
            "syntax": "wrap | none",
            "relevance": 0,
            "description": "Specifies if an element inherits its parent wrapping context. In other words if it is subject to the exclusions defined outside the element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-writing-mode",
            "browsers": [
                "IE8"
            ],
            "values": [
                {
                    "name": "bt-lr"
                },
                {
                    "name": "bt-rl"
                },
                {
                    "name": "lr-bt"
                },
                {
                    "name": "lr-tb"
                },
                {
                    "name": "rl-bt"
                },
                {
                    "name": "rl-tb"
                },
                {
                    "name": "tb-lr"
                },
                {
                    "name": "tb-rl"
                }
            ],
            "relevance": 50,
            "description": "Shorthand property for both 'direction' and 'block-progression'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-ms-zoom",
            "browsers": [
                "IE8"
            ],
            "values": [
                {
                    "name": "normal"
                }
            ],
            "relevance": 50,
            "description": "Sets or retrieves the magnification scale of the object.",
            "restrictions": [
                "enum",
                "integer",
                "number",
                "percentage"
            ]
        },
        {
            "name": "-ms-zoom-animation",
            "browsers": [
                "IE10"
            ],
            "values": [
                {
                    "name": "default"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 50,
            "description": "Gets or sets a value that indicates whether an animation is used when zooming.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "nav-down",
            "browsers": [
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
                },
                {
                    "name": "current",
                    "description": "Indicates that the user agent should target the frame that the element is in."
                },
                {
                    "name": "root",
                    "description": "Indicates that the user agent should target the full window."
                }
            ],
            "relevance": 50,
            "description": "Provides an way to control directional focus navigation.",
            "restrictions": [
                "enum",
                "identifier",
                "string"
            ]
        },
        {
            "name": "nav-index",
            "browsers": [
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The element's sequential navigation order is assigned automatically by the user agent."
                }
            ],
            "relevance": 50,
            "description": "Provides an input-method-neutral way of specifying the sequential navigation order (also known as 'tabbing order').",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "nav-left",
            "browsers": [
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
                },
                {
                    "name": "current",
                    "description": "Indicates that the user agent should target the frame that the element is in."
                },
                {
                    "name": "root",
                    "description": "Indicates that the user agent should target the full window."
                }
            ],
            "relevance": 50,
            "description": "Provides an way to control directional focus navigation.",
            "restrictions": [
                "enum",
                "identifier",
                "string"
            ]
        },
        {
            "name": "nav-right",
            "browsers": [
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
                },
                {
                    "name": "current",
                    "description": "Indicates that the user agent should target the frame that the element is in."
                },
                {
                    "name": "root",
                    "description": "Indicates that the user agent should target the full window."
                }
            ],
            "relevance": 50,
            "description": "Provides an way to control directional focus navigation.",
            "restrictions": [
                "enum",
                "identifier",
                "string"
            ]
        },
        {
            "name": "nav-up",
            "browsers": [
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent automatically determines which element to navigate the focus to in response to directional navigational input."
                },
                {
                    "name": "current",
                    "description": "Indicates that the user agent should target the frame that the element is in."
                },
                {
                    "name": "root",
                    "description": "Indicates that the user agent should target the full window."
                }
            ],
            "relevance": 50,
            "description": "Provides an way to control directional focus navigation.",
            "restrictions": [
                "enum",
                "identifier",
                "string"
            ]
        },
        {
            "name": "negative",
            "browsers": [
                "FF33"
            ],
            "atRule": "@counter-style",
            "syntax": "<symbol> <symbol>?",
            "relevance": 50,
            "description": "@counter-style descriptor. Defines how to alter the representation when the counter value is negative.",
            "restrictions": [
                "image",
                "identifier",
                "string"
            ]
        },
        {
            "name": "-o-animation",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                },
                {
                    "name": "none",
                    "description": "No animation is performed"
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines six of the animation properties into a single property.",
            "restrictions": [
                "time",
                "enum",
                "timing-function",
                "identifier",
                "number"
            ]
        },
        {
            "name": "-o-animation-delay",
            "browsers": [
                "O12"
            ],
            "relevance": 50,
            "description": "Defines when the animation will start.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-o-animation-direction",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-animation-duration",
            "browsers": [
                "O12"
            ],
            "relevance": 50,
            "description": "Defines the length of time that an animation takes to complete one cycle.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-o-animation-fill-mode",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "none",
                    "description": "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."
                }
            ],
            "relevance": 50,
            "description": "Defines what values are applied by the animation outside the time it is executing.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-animation-iteration-count",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                }
            ],
            "relevance": 50,
            "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            "restrictions": [
                "number",
                "enum"
            ]
        },
        {
            "name": "-o-animation-name",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No animation is performed"
                }
            ],
            "relevance": 50,
            "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            "restrictions": [
                "identifier",
                "enum"
            ]
        },
        {
            "name": "-o-animation-play-state",
            "browsers": [
                "O12"
            ],
            "values": [
                {
                    "name": "paused",
                    "description": "A running animation will be paused."
                },
                {
                    "name": "running",
                    "description": "Resume playback of a paused animation."
                }
            ],
            "relevance": 50,
            "description": "Defines whether the animation is running or paused.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-animation-timing-function",
            "browsers": [
                "O12"
            ],
            "relevance": 50,
            "description": "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "object-fit",
            "browsers": [
                "E79",
                "FF36",
                "S10",
                "C32",
                "O19"
            ],
            "values": [
                {
                    "name": "contain",
                    "description": "The replaced content is sized to maintain its aspect ratio while fitting within the element's content box: its concrete object size is resolved as a contain constraint against the element's used width and height."
                },
                {
                    "name": "cover",
                    "description": "The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element's used width and height."
                },
                {
                    "name": "fill",
                    "description": "The replaced content is sized to fill the element's content box: the object's concrete object size is the element's used width and height."
                },
                {
                    "name": "none",
                    "description": "The replaced content is not resized to fit inside the element's content box"
                },
                {
                    "name": "scale-down",
                    "description": "Size the content as if 'none' or 'contain' were specified, whichever would result in a smaller concrete object size."
                }
            ],
            "syntax": "fill | contain | cover | none | scale-down",
            "relevance": 72,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/object-fit"
                }
            ],
            "description": "Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "object-position",
            "browsers": [
                "E79",
                "FF36",
                "S10",
                "C32",
                "O19"
            ],
            "syntax": "<position>",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/object-position"
                }
            ],
            "description": "Determines the alignment of the replaced element inside its box.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-o-border-image",
            "browsers": [
                "O11.6"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
                },
                {
                    "name": "fill",
                    "description": "Causes the middle part of the border-image to be preserved."
                },
                {
                    "name": "none"
                },
                {
                    "name": "repeat",
                    "description": "The image is tiled (repeated) to fill the area."
                },
                {
                    "name": "round",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
                },
                {
                    "name": "space",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
                },
                {
                    "name": "stretch",
                    "description": "The image is stretched to fill the area."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "percentage",
                "number",
                "image",
                "enum"
            ]
        },
        {
            "name": "-o-object-fit",
            "browsers": [
                "O10.6"
            ],
            "values": [
                {
                    "name": "contain",
                    "description": "The replaced content is sized to maintain its aspect ratio while fitting within the element's content box: its concrete object size is resolved as a contain constraint against the element's used width and height."
                },
                {
                    "name": "cover",
                    "description": "The replaced content is sized to maintain its aspect ratio while filling the element's entire content box: its concrete object size is resolved as a cover constraint against the element's used width and height."
                },
                {
                    "name": "fill",
                    "description": "The replaced content is sized to fill the element's content box: the object's concrete object size is the element's used width and height."
                },
                {
                    "name": "none",
                    "description": "The replaced content is not resized to fit inside the element's content box"
                },
                {
                    "name": "scale-down",
                    "description": "Size the content as if 'none' or 'contain' were specified, whichever would result in a smaller concrete object size."
                }
            ],
            "relevance": 50,
            "description": "Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-object-position",
            "browsers": [
                "O10.6"
            ],
            "relevance": 50,
            "description": "Determines the alignment of the replaced element inside its box.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "opacity",
            "browsers": [
                "E12",
                "FF1",
                "S2",
                "C1",
                "IE9",
                "O9"
            ],
            "syntax": "<alpha-value>",
            "relevance": 92,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/opacity"
                }
            ],
            "description": "Opacity of an element's text, where 1 is opaque and 0 is entirely transparent.",
            "restrictions": [
                "number(0-1)"
            ]
        },
        {
            "name": "order",
            "browsers": [
                "E12",
                "FF20",
                "S9",
                "C29",
                "IE11",
                "O12.1"
            ],
            "syntax": "<integer>",
            "relevance": 67,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/order"
                }
            ],
            "description": "Controls the order in which children of a flex container appear within the flex container, by assigning them to ordinal groups.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "orphans",
            "browsers": [
                "E12",
                "S1.3",
                "C25",
                "IE8",
                "O9.2"
            ],
            "syntax": "<integer>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/orphans"
                }
            ],
            "description": "Specifies the minimum number of line boxes in a block container that must be left in a fragment before a fragmentation break.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-o-table-baseline",
            "browsers": [
                "O9.6"
            ],
            "relevance": 50,
            "description": "Determines which row of a inline-table should be used as baseline of inline-table.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-o-tab-size",
            "browsers": [
                "O10.6"
            ],
            "relevance": 50,
            "description": "This property determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.",
            "restrictions": [
                "integer",
                "length"
            ]
        },
        {
            "name": "-o-text-overflow",
            "browsers": [
                "O10"
            ],
            "values": [
                {
                    "name": "clip",
                    "description": "Clip inline content that overflows. Characters may be only partially rendered."
                },
                {
                    "name": "ellipsis",
                    "description": "Render an ellipsis character (U+2026) to represent clipped inline content."
                }
            ],
            "relevance": 50,
            "description": "Text can overflow for example when it is prevented from wrapping",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-transform",
            "browsers": [
                "O10.5"
            ],
            "values": [
                {
                    "name": "matrix()",
                    "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
                },
                {
                    "name": "matrix3d()",
                    "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
                },
                {
                    "name": "none"
                },
                {
                    "name": "rotate()",
                    "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
                },
                {
                    "name": "rotate3d()",
                    "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
                },
                {
                    "name": "rotateX('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the X axis."
                },
                {
                    "name": "rotateY('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Y axis."
                },
                {
                    "name": "rotateZ('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Z axis."
                },
                {
                    "name": "scale()",
                    "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
                },
                {
                    "name": "scale3d()",
                    "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
                },
                {
                    "name": "scaleX()",
                    "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
                },
                {
                    "name": "scaleY()",
                    "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
                },
                {
                    "name": "scaleZ()",
                    "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
                },
                {
                    "name": "skew()",
                    "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
                },
                {
                    "name": "skewX()",
                    "description": "Specifies a skew transformation along the X axis by the given angle."
                },
                {
                    "name": "skewY()",
                    "description": "Specifies a skew transformation along the Y axis by the given angle."
                },
                {
                    "name": "translate()",
                    "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
                },
                {
                    "name": "translate3d()",
                    "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
                },
                {
                    "name": "translateX()",
                    "description": "Specifies a translation by the given amount in the X direction."
                },
                {
                    "name": "translateY()",
                    "description": "Specifies a translation by the given amount in the Y direction."
                },
                {
                    "name": "translateZ()",
                    "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
                }
            ],
            "relevance": 50,
            "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-o-transform-origin",
            "browsers": [
                "O10.5"
            ],
            "relevance": 50,
            "description": "Establishes the origin of transformation for an element.",
            "restrictions": [
                "positon",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-o-transition",
            "browsers": [
                "O11.5"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines four of the transition properties into a single property.",
            "restrictions": [
                "time",
                "property",
                "timing-function",
                "enum"
            ]
        },
        {
            "name": "-o-transition-delay",
            "browsers": [
                "O11.5"
            ],
            "relevance": 50,
            "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-o-transition-duration",
            "browsers": [
                "O11.5"
            ],
            "relevance": 50,
            "description": "Specifies how long the transition from the old value to the new value should take.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-o-transition-property",
            "browsers": [
                "O11.5"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Specifies the name of the CSS property to which the transition is applied.",
            "restrictions": [
                "property"
            ]
        },
        {
            "name": "-o-transition-timing-function",
            "browsers": [
                "O11.5"
            ],
            "relevance": 50,
            "description": "Describes how the intermediate values used during a transition will be calculated.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "offset-block-end",
            "browsers": [
                "FF41"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
                }
            ],
            "relevance": 50,
            "description": "Logical 'bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "offset-block-start",
            "browsers": [
                "FF41"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
                }
            ],
            "relevance": 50,
            "description": "Logical 'top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "offset-inline-end",
            "browsers": [
                "FF41"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
                }
            ],
            "relevance": 50,
            "description": "Logical 'right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "offset-inline-start",
            "browsers": [
                "FF41"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well."
                }
            ],
            "relevance": 50,
            "description": "Logical 'left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "outline",
            "browsers": [
                "E94",
                "FF88",
                "S16.4",
                "C94",
                "IE8",
                "O80"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Permits the user agent to render a custom outline style, typically the default platform style."
                },
                {
                    "name": "invert",
                    "browsers": [
                        "E94",
                        "FF88",
                        "S16.4",
                        "C94",
                        "IE8",
                        "O80"
                    ],
                    "description": "Performs a color inversion on the pixels on the screen."
                }
            ],
            "syntax": "[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/outline"
                }
            ],
            "description": "Shorthand property for 'outline-style', 'outline-width', and 'outline-color'.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color",
                "enum"
            ]
        },
        {
            "name": "outline-color",
            "browsers": [
                "E12",
                "FF1.5",
                "S1.2",
                "C1",
                "IE8",
                "O7"
            ],
            "values": [
                {
                    "name": "invert",
                    "browsers": [
                        "E12",
                        "FF1.5",
                        "S1.2",
                        "C1",
                        "IE8",
                        "O7"
                    ],
                    "description": "Performs a color inversion on the pixels on the screen."
                }
            ],
            "syntax": "auto | <color>",
            "relevance": 61,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/outline-color"
                }
            ],
            "description": "The color of the outline.",
            "restrictions": [
                "enum",
                "color"
            ]
        },
        {
            "name": "outline-offset",
            "browsers": [
                "E15",
                "FF1.5",
                "S1.2",
                "C1",
                "O9.5"
            ],
            "syntax": "<length>",
            "relevance": 69,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/outline-offset"
                }
            ],
            "description": "Offset the outline and draw it beyond the border edge.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "outline-style",
            "browsers": [
                "E12",
                "FF1.5",
                "S1.2",
                "C1",
                "IE8",
                "O7"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Permits the user agent to render a custom outline style, typically the default platform style."
                }
            ],
            "syntax": "auto | <'border-style'>",
            "relevance": 61,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/outline-style"
                }
            ],
            "description": "Style of the outline.",
            "restrictions": [
                "line-style",
                "enum"
            ]
        },
        {
            "name": "outline-width",
            "browsers": [
                "E12",
                "FF1.5",
                "S1.2",
                "C1",
                "IE8",
                "O7"
            ],
            "syntax": "<line-width>",
            "relevance": 62,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/outline-width"
                }
            ],
            "description": "Width of the outline.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "overflow",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."
                },
                {
                    "name": "hidden",
                    "description": "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."
                },
                {
                    "name": "-moz-hidden-unscrollable",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O7"
                    ],
                    "description": "Same as the standardized 'clip', except doesn't establish a block formatting context."
                },
                {
                    "name": "scroll",
                    "description": "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."
                },
                {
                    "name": "visible",
                    "description": "Content is not clipped, i.e., it may be rendered outside the content box."
                }
            ],
            "syntax": "[ visible | hidden | clip | scroll | auto ]{1,2}",
            "relevance": 93,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow"
                }
            ],
            "description": "Shorthand for setting 'overflow-x' and 'overflow-y'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "overflow-wrap",
            "browsers": [
                "E18",
                "FF49",
                "S7",
                "C23",
                "IE5.5",
                "O12.1"
            ],
            "values": [
                {
                    "name": "break-word",
                    "description": "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."
                },
                {
                    "name": "normal",
                    "description": "Lines may break only at allowed break points."
                }
            ],
            "syntax": "normal | break-word | anywhere",
            "relevance": 65,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-wrap"
                }
            ],
            "description": "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit within the line box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "overflow-x",
            "browsers": [
                "E12",
                "FF3.5",
                "S3",
                "C1",
                "IE5",
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."
                },
                {
                    "name": "hidden",
                    "description": "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."
                },
                {
                    "name": "scroll",
                    "description": "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."
                },
                {
                    "name": "visible",
                    "description": "Content is not clipped, i.e., it may be rendered outside the content box."
                }
            ],
            "syntax": "visible | hidden | clip | scroll | auto",
            "relevance": 81,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-x"
                }
            ],
            "description": "Specifies the handling of overflow in the horizontal direction.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "overflow-y",
            "browsers": [
                "E12",
                "FF3.5",
                "S3",
                "C1",
                "IE5",
                "O9.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The behavior of the 'auto' value is UA-dependent, but should cause a scrolling mechanism to be provided for overflowing boxes."
                },
                {
                    "name": "hidden",
                    "description": "Content is clipped and no scrolling mechanism should be provided to view the content outside the clipping region."
                },
                {
                    "name": "scroll",
                    "description": "Content is clipped and if the user agent uses a scrolling mechanism that is visible on the screen (such as a scroll bar or a panner), that mechanism should be displayed for a box whether or not any of its content is clipped."
                },
                {
                    "name": "visible",
                    "description": "Content is not clipped, i.e., it may be rendered outside the content box."
                }
            ],
            "syntax": "visible | hidden | clip | scroll | auto",
            "relevance": 82,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-y"
                }
            ],
            "description": "Specifies the handling of overflow in the vertical direction.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "pad",
            "browsers": [
                "FF33"
            ],
            "atRule": "@counter-style",
            "syntax": "<integer> && <symbol>",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies a \"fixed-width\" counter style, where representations shorter than the pad value are padded with a particular <symbol>",
            "restrictions": [
                "integer",
                "image",
                "string",
                "identifier"
            ]
        },
        {
            "name": "padding",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [],
            "syntax": "[ <length> | <percentage> ]{1,4}",
            "relevance": 95,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding"
                }
            ],
            "description": "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-bottom",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<length> | <percentage>",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-bottom"
                }
            ],
            "description": "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-block-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'padding-left'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-block-end"
                }
            ],
            "description": "Logical 'padding-bottom'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-block-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'padding-left'>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-block-start"
                }
            ],
            "description": "Logical 'padding-top'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-inline-end",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'padding-left'>",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-inline-end"
                }
            ],
            "description": "Logical 'padding-right'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-inline-start",
            "browsers": [
                "E79",
                "FF41",
                "S12.1",
                "C69",
                "O56"
            ],
            "syntax": "<'padding-left'>",
            "relevance": 56,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-inline-start"
                }
            ],
            "description": "Logical 'padding-left'. Mapping depends on the parent element's 'writing-mode', 'direction', and 'text-orientation'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-left",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<length> | <percentage>",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-left"
                }
            ],
            "description": "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-right",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<length> | <percentage>",
            "relevance": 88,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-right"
                }
            ],
            "description": "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "padding-top",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "syntax": "<length> | <percentage>",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-top"
                }
            ],
            "description": "Shorthand property to set values for the thickness of the padding area. If left is omitted, it is the same as right. If bottom is omitted it is the same as top, if right is omitted it is the same as top. The value may not be negative.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "page-break-after",
            "browsers": [
                "E12",
                "FF1",
                "S1.2",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page break after generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page break after the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks after the generated box so that the next page is formatted as a right page."
                }
            ],
            "syntax": "auto | always | avoid | left | right | recto | verso",
            "relevance": 52,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/page-break-after"
                }
            ],
            "description": "Defines rules for page breaks after an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "page-break-before",
            "browsers": [
                "E12",
                "FF1",
                "S1.2",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page break before the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page break before the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before the generated box so that the next page is formatted as a right page."
                }
            ],
            "syntax": "auto | always | avoid | left | right | recto | verso",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/page-break-before"
                }
            ],
            "description": "Defines rules for page breaks before an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "page-break-inside",
            "browsers": [
                "E12",
                "FF19",
                "S1.3",
                "C1",
                "IE8",
                "O7"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page break inside the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page break inside the generated box."
                }
            ],
            "syntax": "auto | avoid",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/page-break-inside"
                }
            ],
            "description": "Defines rules for page breaks inside an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "paint-order",
            "browsers": [
                "E79",
                "FF60",
                "S11",
                "C35",
                "O22"
            ],
            "values": [
                {
                    "name": "fill"
                },
                {
                    "name": "markers"
                },
                {
                    "name": "normal",
                    "description": "The element is painted with the standard order of painting operations: the 'fill' is painted first, then its 'stroke' and finally its markers."
                },
                {
                    "name": "stroke"
                }
            ],
            "syntax": "normal | [ fill || stroke || markers ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/paint-order"
                }
            ],
            "description": "Controls the order that the three paint operations that shapes and text are rendered with: their fill, their stroke and any markers they might have.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "perspective",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C36",
                "IE10",
                "O23"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No perspective transform is applied."
                }
            ],
            "syntax": "none | <length>",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/perspective"
                }
            ],
            "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            "restrictions": [
                "length",
                "enum"
            ]
        },
        {
            "name": "perspective-origin",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C36",
                "IE10",
                "O23"
            ],
            "syntax": "<position>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/perspective-origin"
                }
            ],
            "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "pointer-events",
            "browsers": [
                "E12",
                "FF1.5",
                "S4",
                "C1",
                "IE11",
                "O9"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "The given element can be the target element for pointer events whenever the pointer is over either the interior or the perimeter of the element."
                },
                {
                    "name": "fill",
                    "description": "The given element can be the target element for pointer events whenever the pointer is over the interior of the element."
                },
                {
                    "name": "none",
                    "description": "The given element does not receive pointer events."
                },
                {
                    "name": "painted",
                    "description": "The given element can be the target element for pointer events when the pointer is over a \"painted\" area. "
                },
                {
                    "name": "stroke",
                    "description": "The given element can be the target element for pointer events whenever the pointer is over the perimeter of the element."
                },
                {
                    "name": "visible",
                    "description": "The given element can be the target element for pointer events when the 'visibility' property is set to visible and the pointer is over either the interior or the perimeter of the element."
                },
                {
                    "name": "visibleFill",
                    "description": "The given element can be the target element for pointer events when the 'visibility' property is set to visible and when the pointer is over the interior of the element."
                },
                {
                    "name": "visiblePainted",
                    "description": "The given element can be the target element for pointer events when the 'visibility' property is set to visible and when the pointer is over a 'painted' area."
                },
                {
                    "name": "visibleStroke",
                    "description": "The given element can be the target element for pointer events when the 'visibility' property is set to visible and when the pointer is over the perimeter of the element."
                }
            ],
            "syntax": "auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit",
            "relevance": 82,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/pointer-events"
                }
            ],
            "description": "Specifies under what circumstances a given element can be the target element for a pointer event.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "position",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O4"
            ],
            "values": [
                {
                    "name": "absolute",
                    "description": "The box's position (and possibly size) is specified with the 'top', 'right', 'bottom', and 'left' properties. These properties specify offsets with respect to the box's 'containing block'."
                },
                {
                    "name": "fixed",
                    "description": "The box's position is calculated according to the 'absolute' model, but in addition, the box is fixed with respect to some reference. As with the 'absolute' model, the box's margins do not collapse with any other margins."
                },
                {
                    "name": "-ms-page",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O4"
                    ],
                    "description": "The box's position is calculated according to the 'absolute' model."
                },
                {
                    "name": "relative",
                    "description": "The box's position is calculated according to the normal flow (this is called the position in normal flow). Then the box is offset relative to its normal position."
                },
                {
                    "name": "static",
                    "description": "The box is a normal box, laid out according to the normal flow. The 'top', 'right', 'bottom', and 'left' properties do not apply."
                },
                {
                    "name": "sticky",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O4"
                    ],
                    "description": "The box's position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes."
                },
                {
                    "name": "-webkit-sticky",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O4"
                    ],
                    "description": "The box's position is calculated according to the normal flow. Then the box is offset relative to its flow root and containing block and in all cases, including table elements, does not affect the position of any following boxes."
                }
            ],
            "syntax": "static | relative | absolute | sticky | fixed",
            "relevance": 95,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/position"
                }
            ],
            "description": "The position CSS property sets how an element is positioned in a document. The top, right, bottom, and left properties determine the final location of positioned elements.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "prefix",
            "browsers": [
                "FF33"
            ],
            "atRule": "@counter-style",
            "syntax": "<symbol>",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies a <symbol> that is prepended to the marker representation.",
            "restrictions": [
                "image",
                "string",
                "identifier"
            ]
        },
        {
            "name": "quotes",
            "browsers": [
                "E12",
                "FF1.5",
                "S9",
                "C11",
                "IE8",
                "O4"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The 'open-quote' and 'close-quote' values of the 'content' property produce no quotations marks, as if they were 'no-open-quote' and 'no-close-quote' respectively."
                }
            ],
            "syntax": "none | auto | [ <string> <string> ]+",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/quotes"
                }
            ],
            "description": "Specifies quotation marks for any number of embedded quotations.",
            "restrictions": [
                "string"
            ]
        },
        {
            "name": "range",
            "browsers": [
                "FF33"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The range depends on the counter system."
                },
                {
                    "name": "infinite",
                    "description": "If used as the first value in a range, it represents negative infinity; if used as the second value, it represents positive infinity."
                }
            ],
            "atRule": "@counter-style",
            "syntax": "[ [ <integer> | infinite ]{2} ]# | auto",
            "relevance": 50,
            "description": "@counter-style descriptor. Defines the ranges over which the counter style is defined.",
            "restrictions": [
                "integer",
                "enum"
            ]
        },
        {
            "name": "resize",
            "browsers": [
                "E79",
                "FF4",
                "S3",
                "C1",
                "O12.1"
            ],
            "values": [
                {
                    "name": "both",
                    "description": "The UA presents a bidirectional resizing mechanism to allow the user to adjust both the height and the width of the element."
                },
                {
                    "name": "horizontal",
                    "description": "The UA presents a unidirectional horizontal resizing mechanism to allow the user to adjust only the width of the element."
                },
                {
                    "name": "none",
                    "description": "The UA does not present a resizing mechanism on the element, and the user is given no direct manipulation mechanism to resize the element."
                },
                {
                    "name": "vertical",
                    "description": "The UA presents a unidirectional vertical resizing mechanism to allow the user to adjust only the height of the element."
                }
            ],
            "syntax": "none | both | horizontal | vertical | block | inline",
            "relevance": 66,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/resize"
                }
            ],
            "description": "Specifies whether or not an element is resizable by the user, and if so, along which axis/axes.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "right",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5.5",
                "O5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/right"
                }
            ],
            "description": "Specifies how far an absolutely positioned box's right margin edge is offset to the left of the right edge of the box's 'containing block'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "ruby-align",
            "browsers": [
                "FF38",
                "Spreview"
            ],
            "values": [
                {
                    "name": "auto",
                    "browsers": [
                        "FF38",
                        "Spreview"
                    ],
                    "description": "The user agent determines how the ruby contents are aligned. This is the initial value."
                },
                {
                    "name": "center",
                    "description": "The ruby content is centered within its box."
                },
                {
                    "name": "distribute-letter",
                    "browsers": [
                        "FF38",
                        "Spreview"
                    ],
                    "description": "If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with the first and last ruby text glyphs lining up with the corresponding first and last base glyphs. If the width of the ruby text is at least the width of the base, then the letters of the base are evenly distributed across the width of the ruby text."
                },
                {
                    "name": "distribute-space",
                    "browsers": [
                        "FF38",
                        "Spreview"
                    ],
                    "description": "If the width of the ruby text is smaller than that of the base, then the ruby text contents are evenly distributed across the width of the base, with a certain amount of white space preceding the first and following the last character in the ruby text. That amount of white space is normally equal to half the amount of inter-character space of the ruby text."
                },
                {
                    "name": "left",
                    "description": "The ruby text content is aligned with the start edge of the base."
                },
                {
                    "name": "line-edge",
                    "browsers": [
                        "FF38",
                        "Spreview"
                    ],
                    "description": "If the ruby text is not adjacent to a line edge, it is aligned as in 'auto'. If it is adjacent to a line edge, then it is still aligned as in auto, but the side of the ruby text that touches the end of the line is lined up with the corresponding edge of the base."
                },
                {
                    "name": "right",
                    "browsers": [
                        "FF38",
                        "Spreview"
                    ],
                    "description": "The ruby text content is aligned with the end edge of the base."
                },
                {
                    "name": "start",
                    "browsers": [
                        "FF38",
                        "Spreview"
                    ],
                    "description": "The ruby text content is aligned with the start edge of the base."
                },
                {
                    "name": "space-between",
                    "browsers": [
                        "FF38",
                        "Spreview"
                    ],
                    "description": "The ruby content expands as defined for normal text justification (as defined by 'text-justify'),"
                },
                {
                    "name": "space-around",
                    "browsers": [
                        "FF38",
                        "Spreview"
                    ],
                    "description": "As for 'space-between' except that there exists an extra justification opportunities whose space is distributed half before and half after the ruby content."
                }
            ],
            "status": "experimental",
            "syntax": "start | center | space-between | space-around",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/ruby-align"
                }
            ],
            "description": "Specifies how text is distributed within the various ruby boxes when their contents do not exactly fill their respective boxes.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "ruby-overhang",
            "browsers": [
                "FF10",
                "IE5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The ruby text can overhang text adjacent to the base on either side. This is the initial value."
                },
                {
                    "name": "end",
                    "description": "The ruby text can overhang the text that follows it."
                },
                {
                    "name": "none",
                    "description": "The ruby text cannot overhang any text adjacent to its base, only its own base."
                },
                {
                    "name": "start",
                    "description": "The ruby text can overhang the text that precedes it."
                }
            ],
            "relevance": 50,
            "description": "Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "ruby-position",
            "browsers": [
                "E84",
                "FF38",
                "S7",
                "C84",
                "O70"
            ],
            "values": [
                {
                    "name": "after",
                    "description": "The ruby text appears after the base. This is a relatively rare setting used in ideographic East Asian writing systems, most easily found in educational text."
                },
                {
                    "name": "before",
                    "description": "The ruby text appears before the base. This is the most common setting used in ideographic East Asian writing systems."
                },
                {
                    "name": "inline"
                },
                {
                    "name": "right",
                    "description": "The ruby text appears on the right of the base. Unlike 'before' and 'after', this value is not relative to the text flow direction."
                }
            ],
            "syntax": "[ alternate || [ over | under ] ] | inter-character",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/ruby-position"
                }
            ],
            "description": "Used by the parent of elements with display: ruby-text to control the position of the ruby text with respect to its base.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "ruby-span",
            "browsers": [
                "FF10"
            ],
            "values": [
                {
                    "name": "attr(x)",
                    "description": "The value of attribute 'x' is a string value. The string value is evaluated as a <number> to determine the number of ruby base elements to be spanned by the annotation element."
                },
                {
                    "name": "none",
                    "description": "No spanning. The computed value is '1'."
                }
            ],
            "relevance": 50,
            "description": "Determines whether, and on which side, ruby text is allowed to partially overhang any adjacent text in addition to its own base, when the ruby text is wider than the ruby base.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "scrollbar-3dlight-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-3dlight-color"
                }
            ],
            "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-arrow-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-arrow-color"
                }
            ],
            "description": "Determines the color of the arrow elements of a scroll arrow.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-base-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-base-color"
                }
            ],
            "description": "Determines the color of the main elements of a scroll bar, which include the scroll box, track, and scroll arrows.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-darkshadow-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-darkshadow-color"
                }
            ],
            "description": "Determines the color of the gutter of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-face-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-face-color"
                }
            ],
            "description": "Determines the color of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-highlight-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-highlight-color"
                }
            ],
            "description": "Determines the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-shadow-color",
            "browsers": [
                "IE5"
            ],
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-shadow-color"
                }
            ],
            "description": "Determines the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scrollbar-track-color",
            "browsers": [
                "IE6"
            ],
            "relevance": 50,
            "description": "Determines the color of the track element of a scroll bar.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "scroll-behavior",
            "browsers": [
                "E79",
                "FF36",
                "S15.4",
                "C61",
                "O48"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Scrolls in an instant fashion."
                },
                {
                    "name": "smooth",
                    "description": "Scrolls in a smooth fashion using a user-agent-defined timing function and time period."
                }
            ],
            "syntax": "auto | smooth",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-behavior"
                }
            ],
            "description": "Specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSSOM scrolling APIs.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "scroll-snap-coordinate",
            "browsers": [
                "FF39"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Specifies that this element does not contribute a snap point."
                }
            ],
            "status": "obsolete",
            "syntax": "none | <position>#",
            "relevance": 0,
            "description": "Defines the x and y coordinate within the element which will align with the nearest ancestor scroll container's snap-destination for the respective axis.",
            "restrictions": [
                "position",
                "length",
                "percentage",
                "enum"
            ]
        },
        {
            "name": "scroll-snap-destination",
            "browsers": [
                "FF39"
            ],
            "status": "obsolete",
            "syntax": "<position>",
            "relevance": 0,
            "description": "Define the x and y coordinate within the scroll container's visual viewport which element snap points will align with.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "scroll-snap-points-x",
            "browsers": [
                "FF39"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No snap points are defined by this scroll container."
                },
                {
                    "name": "repeat()",
                    "description": "Defines an interval at which snap points are defined, starting from the container's relevant start edge."
                }
            ],
            "status": "obsolete",
            "syntax": "none | repeat( <length-percentage> )",
            "relevance": 0,
            "description": "Defines the positioning of snap points along the x axis of the scroll container it is applied to.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "scroll-snap-points-y",
            "browsers": [
                "FF39"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No snap points are defined by this scroll container."
                },
                {
                    "name": "repeat()",
                    "description": "Defines an interval at which snap points are defined, starting from the container's relevant start edge."
                }
            ],
            "status": "obsolete",
            "syntax": "none | repeat( <length-percentage> )",
            "relevance": 0,
            "description": "Defines the positioning of snap points along the y axis of the scroll container it is applied to.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "scroll-snap-type",
            "browsers": [
                "E79",
                "FF99",
                "S11",
                "C69",
                "IE10",
                "O56"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The visual viewport of this scroll container must ignore snap points, if any, when scrolled."
                },
                {
                    "name": "mandatory",
                    "description": "The visual viewport of this scroll container is guaranteed to rest on a snap point when there are no active scrolling operations."
                },
                {
                    "name": "proximity",
                    "description": "The visual viewport of this scroll container may come to rest on a snap point at the termination of a scroll at the discretion of the UA given the parameters of the scroll."
                }
            ],
            "syntax": "none | [ x | y | block | inline | both ] [ mandatory | proximity ]?",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type"
                }
            ],
            "description": "Defines how strictly snap points are enforced on the scroll container.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "shape-image-threshold",
            "browsers": [
                "E79",
                "FF62",
                "S10.1",
                "C37",
                "O24"
            ],
            "syntax": "<alpha-value>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold"
                }
            ],
            "description": "Defines the alpha channel threshold used to extract the shape using an image. A value of 0.5 means that the shape will enclose all the pixels that are more than 50% opaque.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "shape-margin",
            "browsers": [
                "E79",
                "FF62",
                "S10.1",
                "C37",
                "O24"
            ],
            "syntax": "<length-percentage>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/shape-margin"
                }
            ],
            "description": "Adds a margin to a 'shape-outside'. This defines a new shape that is the smallest contour that includes all the points that are the 'shape-margin' distance outward in the perpendicular direction from a point on the underlying shape.",
            "restrictions": [
                "url",
                "length",
                "percentage"
            ]
        },
        {
            "name": "shape-outside",
            "browsers": [
                "E79",
                "FF62",
                "S10.1",
                "C37",
                "O24"
            ],
            "values": [
                {
                    "name": "margin-box",
                    "description": "The background is painted within (clipped to) the margin box."
                },
                {
                    "name": "none",
                    "description": "The float area is unaffected."
                }
            ],
            "syntax": "none | [ <shape-box> || <basic-shape> ] | <image>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/shape-outside"
                }
            ],
            "description": "Specifies an orthogonal rotation to be applied to an image before it is laid out.",
            "restrictions": [
                "image",
                "box",
                "shape",
                "enum"
            ]
        },
        {
            "name": "shape-rendering",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Suppresses aural rendering."
                },
                {
                    "name": "crispEdges",
                    "description": "Emphasize the contrast between clean edges of artwork over rendering speed and geometric precision."
                },
                {
                    "name": "geometricPrecision",
                    "description": "Emphasize geometric precision over speed and crisp edges."
                },
                {
                    "name": "optimizeSpeed",
                    "description": "Emphasize rendering speed over geometric precision and crisp edges."
                }
            ],
            "relevance": 50,
            "description": "Provides hints about what tradeoffs to make as it renders vector graphics elements such as <path> elements and basic shapes such as circles and rectangles.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "size",
            "browsers": [
                "C",
                "O8"
            ],
            "atRule": "@page",
            "syntax": "<length>{1,2} | auto | [ <page-size> || [ portrait | landscape ] ]",
            "relevance": 53,
            "description": "The size CSS at-rule descriptor, used with the @page at-rule, defines the size and orientation of the box which is used to represent a page. Most of the time, this size corresponds to the target size of the printed page if applicable.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "src",
            "values": [
                {
                    "name": "url()",
                    "description": "Reference font by URL"
                },
                {
                    "name": "format()",
                    "description": "Optional hint describing the format of the font resource."
                },
                {
                    "name": "local()",
                    "description": "Format-specific string that identifies a locally available copy of a given font."
                }
            ],
            "atRule": "@font-face",
            "syntax": "[ <url> [ format( <string># ) ]? | local( <family-name> ) ]#",
            "relevance": 86,
            "description": "@font-face descriptor. Specifies the resource containing font data. It is required, whether the font is downloadable or locally installed.",
            "restrictions": [
                "enum",
                "url",
                "identifier"
            ]
        },
        {
            "name": "stop-color",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "relevance": 50,
            "description": "Indicates what color to use at that gradient stop.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "stop-opacity",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "relevance": 50,
            "description": "Defines the opacity of a given gradient stop.",
            "restrictions": [
                "number(0-1)"
            ]
        },
        {
            "name": "stroke",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "url()",
                    "description": "A URL reference to a paint server element, which is an element that defines a paint server: 'hatch', 'linearGradient', 'mesh', 'pattern', 'radialGradient' and 'solidcolor'."
                },
                {
                    "name": "none",
                    "description": "No paint is applied in this layer."
                }
            ],
            "relevance": 67,
            "description": "Paints along the outline of the given graphical element.",
            "restrictions": [
                "color",
                "enum",
                "url"
            ]
        },
        {
            "name": "stroke-dasharray",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Indicates that no dashing is used."
                }
            ],
            "relevance": 61,
            "description": "Controls the pattern of dashes and gaps used to stroke paths.",
            "restrictions": [
                "length",
                "percentage",
                "number",
                "enum"
            ]
        },
        {
            "name": "stroke-dashoffset",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "relevance": 62,
            "description": "Specifies the distance into the dash pattern to start the dash.",
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "stroke-linecap",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "butt",
                    "description": "Indicates that the stroke for each subpath does not extend beyond its two endpoints."
                },
                {
                    "name": "round",
                    "description": "Indicates that at each end of each subpath, the shape representing the stroke will be extended by a half circle with a radius equal to the stroke width."
                },
                {
                    "name": "square",
                    "description": "Indicates that at the end of each subpath, the shape representing the stroke will be extended by a rectangle with the same width as the stroke width and whose length is half of the stroke width."
                }
            ],
            "relevance": 53,
            "description": "Specifies the shape to be used at the end of open subpaths when they are stroked.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "stroke-linejoin",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "bevel",
                    "description": "Indicates that a bevelled corner is to be used to join path segments."
                },
                {
                    "name": "miter",
                    "description": "Indicates that a sharp corner is to be used to join path segments."
                },
                {
                    "name": "round",
                    "description": "Indicates that a round corner is to be used to join path segments."
                }
            ],
            "relevance": 51,
            "description": "Specifies the shape to be used at the corners of paths or basic shapes when they are stroked.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "stroke-miterlimit",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "relevance": 51,
            "description": "When two line segments meet at a sharp angle and miter joins have been specified for 'stroke-linejoin', it is possible for the miter to extend far beyond the thickness of the line stroking the path.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "stroke-opacity",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "relevance": 52,
            "description": "Specifies the opacity of the painting operation used to stroke the current object.",
            "restrictions": [
                "number(0-1)"
            ]
        },
        {
            "name": "stroke-width",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "relevance": 64,
            "description": "Specifies the width of the stroke on the current object.",
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "suffix",
            "browsers": [
                "FF33"
            ],
            "atRule": "@counter-style",
            "syntax": "<symbol>",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies a <symbol> that is appended to the marker representation.",
            "restrictions": [
                "image",
                "string",
                "identifier"
            ]
        },
        {
            "name": "system",
            "browsers": [
                "FF33"
            ],
            "values": [
                {
                    "name": "additive",
                    "description": "Represents \"sign-value\" numbering systems, which, rather than using reusing digits in different positions to change their value, define additional digits with much larger values, so that the value of the number can be obtained by adding all the digits together."
                },
                {
                    "name": "alphabetic",
                    "description": "Interprets the list of counter symbols as digits to an alphabetic numbering system, similar to the default lower-alpha counter style, which wraps from \"a\", \"b\", \"c\", to \"aa\", \"ab\", \"ac\"."
                },
                {
                    "name": "cyclic",
                    "description": "Cycles repeatedly through its provided symbols, looping back to the beginning when it reaches the end of the list."
                },
                {
                    "name": "extends",
                    "description": "Use the algorithm of another counter style, but alter other aspects."
                },
                {
                    "name": "fixed",
                    "description": "Runs through its list of counter symbols once, then falls back."
                },
                {
                    "name": "numeric",
                    "description": "interprets the list of counter symbols as digits to a \"place-value\" numbering system, similar to the default 'decimal' counter style."
                },
                {
                    "name": "symbolic",
                    "description": "Cycles repeatedly through its provided symbols, doubling, tripling, etc. the symbols on each successive pass through the list."
                }
            ],
            "atRule": "@counter-style",
            "syntax": "cyclic | numeric | alphabetic | symbolic | additive | [ fixed <integer>? ] | [ extends <counter-style-name> ]",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies which algorithm will be used to construct the counter's representation based on the counter value.",
            "restrictions": [
                "enum",
                "integer"
            ]
        },
        {
            "name": "symbols",
            "browsers": [
                "FF33"
            ],
            "atRule": "@counter-style",
            "syntax": "<symbol>+",
            "relevance": 50,
            "description": "@counter-style descriptor. Specifies the symbols used by the marker-construction algorithm specified by the system descriptor.",
            "restrictions": [
                "image",
                "string",
                "identifier"
            ]
        },
        {
            "name": "table-layout",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C14",
                "IE5",
                "O7"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Use any automatic table layout algorithm."
                },
                {
                    "name": "fixed",
                    "description": "Use the fixed table layout algorithm."
                }
            ],
            "syntax": "auto | fixed",
            "relevance": 58,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/table-layout"
                }
            ],
            "description": "Controls the algorithm used to lay out the table cells, rows, and columns.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "tab-size",
            "browsers": [
                "E79",
                "FF91",
                "S7",
                "C21",
                "O15"
            ],
            "syntax": "<integer> | <length>",
            "relevance": 53,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/tab-size"
                }
            ],
            "description": "Determines the width of the tab character (U+0009), in space characters (U+0020), when rendered.",
            "restrictions": [
                "integer",
                "length"
            ]
        },
        {
            "name": "text-align",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "The inline contents are centered within the line box."
                },
                {
                    "name": "end",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE3",
                        "O3.5"
                    ],
                    "description": "The inline contents are aligned to the end edge of the line box."
                },
                {
                    "name": "justify",
                    "description": "The text is justified according to the method specified by the 'text-justify' property."
                },
                {
                    "name": "left",
                    "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
                },
                {
                    "name": "right",
                    "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
                },
                {
                    "name": "start",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE3",
                        "O3.5"
                    ],
                    "description": "The inline contents are aligned to the start edge of the line box."
                }
            ],
            "syntax": "start | end | left | right | center | justify | match-parent",
            "relevance": 93,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-align"
                }
            ],
            "description": "Describes how inline contents of a block are horizontally aligned if the contents do not completely fill the line box.",
            "restrictions": [
                "string"
            ]
        },
        {
            "name": "text-align-last",
            "browsers": [
                "E12",
                "FF49",
                "S16",
                "C47",
                "IE5.5",
                "O34"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Content on the affected line is aligned per 'text-align' unless 'text-align' is set to 'justify', in which case it is 'start-aligned'."
                },
                {
                    "name": "center",
                    "description": "The inline contents are centered within the line box."
                },
                {
                    "name": "justify",
                    "description": "The text is justified according to the method specified by the 'text-justify' property."
                },
                {
                    "name": "left",
                    "description": "The inline contents are aligned to the left edge of the line box. In vertical text, 'left' aligns to the edge of the line box that would be the start edge for left-to-right text."
                },
                {
                    "name": "right",
                    "description": "The inline contents are aligned to the right edge of the line box. In vertical text, 'right' aligns to the edge of the line box that would be the end edge for left-to-right text."
                }
            ],
            "syntax": "auto | start | end | left | right | center | justify",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-align-last"
                }
            ],
            "description": "Describes how the last line of a block or a line right before a forced line break is aligned when 'text-align' is set to 'justify'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-anchor",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "end",
                    "description": "The rendered characters are aligned such that the end of the resulting rendered text is at the initial current text position."
                },
                {
                    "name": "middle",
                    "description": "The rendered characters are aligned such that the geometric middle of the resulting rendered text is at the initial current text position."
                },
                {
                    "name": "start",
                    "description": "The rendered characters are aligned such that the start of the resulting rendered text is at the initial current text position."
                }
            ],
            "relevance": 50,
            "description": "Used to align (start-, middle- or end-alignment) a string of text relative to a given point.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-decoration",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "values": [
                {
                    "name": "dashed",
                    "description": "Produces a dashed line style."
                },
                {
                    "name": "dotted",
                    "description": "Produces a dotted line."
                },
                {
                    "name": "double",
                    "description": "Produces a double line."
                },
                {
                    "name": "line-through",
                    "description": "Each line of text has a line through the middle."
                },
                {
                    "name": "none",
                    "description": "Produces no line."
                },
                {
                    "name": "overline",
                    "description": "Each line of text has a line above it."
                },
                {
                    "name": "solid",
                    "description": "Produces a solid line."
                },
                {
                    "name": "underline",
                    "description": "Each line of text is underlined."
                },
                {
                    "name": "wavy",
                    "description": "Produces a wavy line."
                }
            ],
            "syntax": "<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>",
            "relevance": 91,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration"
                }
            ],
            "description": "Decorations applied to font used for an element's text.",
            "restrictions": [
                "enum",
                "color"
            ]
        },
        {
            "name": "text-decoration-color",
            "browsers": [
                "E79",
                "FF36",
                "S12.1",
                "C57",
                "O44"
            ],
            "syntax": "<color>",
            "relevance": 55,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-color"
                }
            ],
            "description": "Specifies the color of text decoration (underlines overlines, and line-throughs) set on the element with text-decoration-line.",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "text-decoration-line",
            "browsers": [
                "E79",
                "FF36",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "line-through",
                    "description": "Each line of text has a line through the middle."
                },
                {
                    "name": "none",
                    "description": "Neither produces nor inhibits text decoration."
                },
                {
                    "name": "overline",
                    "description": "Each line of text has a line above it."
                },
                {
                    "name": "underline",
                    "description": "Each line of text is underlined."
                }
            ],
            "syntax": "none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-line"
                }
            ],
            "description": "Specifies what line decorations, if any, are added to the element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-decoration-style",
            "browsers": [
                "E79",
                "FF36",
                "S12.1",
                "C57",
                "O44"
            ],
            "values": [
                {
                    "name": "dashed",
                    "description": "Produces a dashed line style."
                },
                {
                    "name": "dotted",
                    "description": "Produces a dotted line."
                },
                {
                    "name": "double",
                    "description": "Produces a double line."
                },
                {
                    "name": "none",
                    "description": "Produces no line."
                },
                {
                    "name": "solid",
                    "description": "Produces a solid line."
                },
                {
                    "name": "wavy",
                    "description": "Produces a wavy line."
                }
            ],
            "syntax": "solid | double | dotted | dashed | wavy",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-style"
                }
            ],
            "description": "Specifies the line style for underline, line-through and overline text decoration.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-indent",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "values": [],
            "syntax": "<length-percentage> && hanging? && each-line?",
            "relevance": 67,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-indent"
                }
            ],
            "description": "Specifies the indentation applied to lines of inline content in a block. The indentation only affects the first line of inline content in the block unless the 'hanging' keyword is specified, in which case it affects all lines except the first.",
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "text-justify",
            "browsers": [
                "E79",
                "FF55",
                "C32",
                "IE11",
                "O19"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The UA determines the justification algorithm to follow, based on a balance between performance and adequate presentation quality."
                },
                {
                    "name": "distribute",
                    "description": "Justification primarily changes spacing both at word separators and at grapheme cluster boundaries in all scripts except those in the connected and cursive groups. This value is sometimes used in e.g. Japanese, often with the 'text-align-last' property."
                },
                {
                    "name": "distribute-all-lines"
                },
                {
                    "name": "inter-cluster",
                    "description": "Justification primarily changes spacing at word separators and at grapheme cluster boundaries in clustered scripts. This value is typically used for Southeast Asian scripts such as Thai."
                },
                {
                    "name": "inter-ideograph",
                    "description": "Justification primarily changes spacing at word separators and at inter-graphemic boundaries in scripts that use no word spaces. This value is typically used for CJK languages."
                },
                {
                    "name": "inter-word",
                    "description": "Justification primarily changes spacing at word separators. This value is typically used for languages that separate words using spaces, like English or (sometimes) Korean."
                },
                {
                    "name": "kashida",
                    "description": "Justification primarily stretches Arabic and related scripts through the use of kashida or other calligraphic elongation."
                },
                {
                    "name": "newspaper"
                }
            ],
            "syntax": "auto | inter-character | inter-word | none",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-justify"
                }
            ],
            "description": "Selects the justification algorithm used when 'text-align' is set to 'justify'. The property applies to block containers, but the UA may (but is not required to) also support it on inline elements.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-orientation",
            "browsers": [
                "E79",
                "FF41",
                "S14",
                "C48",
                "O35"
            ],
            "values": [
                {
                    "name": "sideways",
                    "browsers": [
                        "E79",
                        "FF41",
                        "S14",
                        "C48",
                        "O35"
                    ],
                    "description": "This value is equivalent to 'sideways-right' in 'vertical-rl' writing mode and equivalent to 'sideways-left' in 'vertical-lr' writing mode."
                },
                {
                    "name": "sideways-right",
                    "browsers": [
                        "E79",
                        "FF41",
                        "S14",
                        "C48",
                        "O35"
                    ],
                    "description": "In vertical writing modes, this causes text to be set as if in a horizontal layout, but rotated 90° clockwise."
                },
                {
                    "name": "upright",
                    "description": "In vertical writing modes, characters from horizontal-only scripts are rendered upright, i.e. in their standard horizontal orientation."
                }
            ],
            "syntax": "mixed | upright | sideways",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-orientation"
                }
            ],
            "description": "Specifies the orientation of text within a line.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-overflow",
            "browsers": [
                "E12",
                "FF7",
                "S1.3",
                "C1",
                "IE6",
                "O11"
            ],
            "values": [
                {
                    "name": "clip",
                    "description": "Clip inline content that overflows. Characters may be only partially rendered."
                },
                {
                    "name": "ellipsis",
                    "description": "Render an ellipsis character (U+2026) to represent clipped inline content."
                }
            ],
            "syntax": "[ clip | ellipsis | <string> ]{1,2}",
            "relevance": 82,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-overflow"
                }
            ],
            "description": "Text can overflow for example when it is prevented from wrapping.",
            "restrictions": [
                "enum",
                "string"
            ]
        },
        {
            "name": "text-rendering",
            "browsers": [
                "E79",
                "FF1",
                "S5",
                "C4",
                "O15"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "geometricPrecision",
                    "description": "Indicates that the user agent shall emphasize geometric precision over legibility and rendering speed."
                },
                {
                    "name": "optimizeLegibility",
                    "description": "Indicates that the user agent shall emphasize legibility over rendering speed and geometric precision."
                },
                {
                    "name": "optimizeSpeed",
                    "description": "Indicates that the user agent shall emphasize rendering speed over legibility and geometric precision."
                }
            ],
            "syntax": "auto | optimizeSpeed | optimizeLegibility | geometricPrecision",
            "relevance": 68,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-rendering"
                }
            ],
            "description": "The creator of SVG content might want to provide a hint to the implementation about what tradeoffs to make as it renders text. The 'text-rendering' property provides these hints.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-shadow",
            "browsers": [
                "E12",
                "FF3.5",
                "S1.1",
                "C2",
                "IE10",
                "O9.5"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No shadow."
                }
            ],
            "syntax": "none | <shadow-t>#",
            "relevance": 73,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-shadow"
                }
            ],
            "description": "Enables shadow effects to be applied to the text of the element.",
            "restrictions": [
                "length",
                "color"
            ]
        },
        {
            "name": "text-transform",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O7"
            ],
            "values": [
                {
                    "name": "capitalize",
                    "description": "Puts the first typographic letter unit of each word in titlecase."
                },
                {
                    "name": "lowercase",
                    "description": "Puts all letters in lowercase."
                },
                {
                    "name": "none",
                    "description": "No effects."
                },
                {
                    "name": "uppercase",
                    "description": "Puts all letters in uppercase."
                }
            ],
            "syntax": "none | capitalize | uppercase | lowercase | full-width | full-size-kana",
            "relevance": 86,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-transform"
                }
            ],
            "description": "Controls capitalization effects of an element's text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "text-underline-position",
            "browsers": [
                "E12",
                "FF74",
                "S12.1",
                "C33",
                "IE6",
                "O20"
            ],
            "values": [
                {
                    "name": "above"
                },
                {
                    "name": "auto",
                    "description": "The user agent may use any algorithm to determine the underline's position. In horizontal line layout, the underline should be aligned as for alphabetic. In vertical line layout, if the language is set to Japanese or Korean, the underline should be aligned as for over."
                },
                {
                    "name": "below",
                    "description": "The underline is aligned with the under edge of the element's content box."
                }
            ],
            "syntax": "auto | from-font | [ under || [ left | right ] ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-underline-position"
                }
            ],
            "description": "Sets the position of an underline specified on the same element: it does not affect underlines specified by ancestor elements. This property is typically used in vertical writing contexts such as in Japanese documents where it often desired to have the underline appear 'over' (to the right of) the affected run of text",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "top",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5",
                "O6"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "For non-replaced elements, the effect of this value depends on which of related properties have the value 'auto' as well"
                }
            ],
            "syntax": "<length> | <percentage> | auto",
            "relevance": 95,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/top"
                }
            ],
            "description": "Specifies how far an absolutely positioned box's top margin edge is offset below the top edge of the box's 'containing block'.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "touch-action",
            "browsers": [
                "E12",
                "FF52",
                "S13",
                "C36",
                "IE11",
                "O23"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The user agent may determine any permitted touch behaviors for touches that begin on the element."
                },
                {
                    "name": "cross-slide-x",
                    "browsers": [
                        "E12",
                        "FF52",
                        "S13",
                        "C36",
                        "IE11",
                        "O23"
                    ]
                },
                {
                    "name": "cross-slide-y",
                    "browsers": [
                        "E12",
                        "FF52",
                        "S13",
                        "C36",
                        "IE11",
                        "O23"
                    ]
                },
                {
                    "name": "double-tap-zoom",
                    "browsers": [
                        "E12",
                        "FF52",
                        "S13",
                        "C36",
                        "IE11",
                        "O23"
                    ]
                },
                {
                    "name": "manipulation",
                    "description": "The user agent may consider touches that begin on the element only for the purposes of scrolling and continuous zooming."
                },
                {
                    "name": "none",
                    "description": "Touches that begin on the element must not trigger default touch behaviors."
                },
                {
                    "name": "pan-x",
                    "description": "The user agent may consider touches that begin on the element only for the purposes of horizontally scrolling the element's nearest ancestor with horizontally scrollable content."
                },
                {
                    "name": "pan-y",
                    "description": "The user agent may consider touches that begin on the element only for the purposes of vertically scrolling the element's nearest ancestor with vertically scrollable content."
                },
                {
                    "name": "pinch-zoom",
                    "browsers": [
                        "E12",
                        "FF52",
                        "S13",
                        "C36",
                        "IE11",
                        "O23"
                    ]
                }
            ],
            "syntax": "auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation",
            "relevance": 69,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/touch-action"
                }
            ],
            "description": "Determines whether touch input may trigger default behavior supplied by user agent.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "transform",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C36",
                "IE10",
                "O23"
            ],
            "values": [
                {
                    "name": "matrix()",
                    "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
                },
                {
                    "name": "matrix3d()",
                    "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
                },
                {
                    "name": "none"
                },
                {
                    "name": "perspective()",
                    "description": "Specifies a perspective projection matrix."
                },
                {
                    "name": "rotate()",
                    "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
                },
                {
                    "name": "rotate3d()",
                    "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
                },
                {
                    "name": "rotateX('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the X axis."
                },
                {
                    "name": "rotateY('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Y axis."
                },
                {
                    "name": "rotateZ('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Z axis."
                },
                {
                    "name": "scale()",
                    "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
                },
                {
                    "name": "scale3d()",
                    "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
                },
                {
                    "name": "scaleX()",
                    "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
                },
                {
                    "name": "scaleY()",
                    "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
                },
                {
                    "name": "scaleZ()",
                    "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
                },
                {
                    "name": "skew()",
                    "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
                },
                {
                    "name": "skewX()",
                    "description": "Specifies a skew transformation along the X axis by the given angle."
                },
                {
                    "name": "skewY()",
                    "description": "Specifies a skew transformation along the Y axis by the given angle."
                },
                {
                    "name": "translate()",
                    "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
                },
                {
                    "name": "translate3d()",
                    "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
                },
                {
                    "name": "translateX()",
                    "description": "Specifies a translation by the given amount in the X direction."
                },
                {
                    "name": "translateY()",
                    "description": "Specifies a translation by the given amount in the Y direction."
                },
                {
                    "name": "translateZ()",
                    "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
                }
            ],
            "syntax": "none | <transform-list>",
            "relevance": 90,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transform"
                }
            ],
            "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "transform-origin",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C36",
                "IE10",
                "O23"
            ],
            "syntax": "[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?",
            "relevance": 76,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transform-origin"
                }
            ],
            "description": "Establishes the origin of transformation for an element.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "transform-style",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C36",
                "O23"
            ],
            "values": [
                {
                    "name": "flat",
                    "description": "All children of this element are rendered flattened into the 2D plane of the element."
                },
                {
                    "name": "preserve-3d",
                    "browsers": [
                        "E12",
                        "FF16",
                        "S9",
                        "C36",
                        "O23"
                    ],
                    "description": "Flattening is not performed, so children maintain their position in 3D space."
                }
            ],
            "syntax": "flat | preserve-3d",
            "relevance": 56,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transform-style"
                }
            ],
            "description": "Defines how nested elements are rendered in 3D space.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "transition",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C26",
                "IE10",
                "O12.1"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "syntax": "<single-transition>#",
            "relevance": 89,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition"
                }
            ],
            "description": "Shorthand property combines four of the transition properties into a single property.",
            "restrictions": [
                "time",
                "property",
                "timing-function",
                "enum"
            ]
        },
        {
            "name": "transition-delay",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C26",
                "IE10",
                "O12.1"
            ],
            "syntax": "<time>#",
            "relevance": 64,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition-delay"
                }
            ],
            "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "transition-duration",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C26",
                "IE10",
                "O12.1"
            ],
            "syntax": "<time>#",
            "relevance": 68,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition-duration"
                }
            ],
            "description": "Specifies how long the transition from the old value to the new value should take.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "transition-property",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C26",
                "IE10",
                "O12.1"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "syntax": "none | <single-transition-property>#",
            "relevance": 68,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition-property"
                }
            ],
            "description": "Specifies the name of the CSS property to which the transition is applied.",
            "restrictions": [
                "property"
            ]
        },
        {
            "name": "transition-timing-function",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C26",
                "IE10",
                "O12.1"
            ],
            "syntax": "<easing-function>#",
            "relevance": 65,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition-timing-function"
                }
            ],
            "description": "Describes how the intermediate values used during a transition will be calculated.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "unicode-bidi",
            "browsers": [
                "E12",
                "FF1",
                "S1.3",
                "C2",
                "IE5.5",
                "O9.2"
            ],
            "values": [
                {
                    "name": "bidi-override",
                    "description": "Inside the element, reordering is strictly in sequence according to the 'direction' property; the implicit part of the bidirectional algorithm is ignored."
                },
                {
                    "name": "embed",
                    "description": "If the element is inline-level, this value opens an additional level of embedding with respect to the bidirectional algorithm. The direction of this embedding level is given by the 'direction' property."
                },
                {
                    "name": "isolate",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.3",
                        "C2",
                        "IE5.5",
                        "O9.2"
                    ],
                    "description": "The contents of the element are considered to be inside a separate, independent paragraph."
                },
                {
                    "name": "isolate-override",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.3",
                        "C2",
                        "IE5.5",
                        "O9.2"
                    ],
                    "description": "This combines the isolation behavior of 'isolate' with the directional override behavior of 'bidi-override'"
                },
                {
                    "name": "normal",
                    "description": "The element does not open an additional level of embedding with respect to the bidirectional algorithm. For inline-level elements, implicit reordering works across element boundaries."
                },
                {
                    "name": "plaintext",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1.3",
                        "C2",
                        "IE5.5",
                        "O9.2"
                    ],
                    "description": "For the purposes of the Unicode bidirectional algorithm, the base directionality of each bidi paragraph for which the element forms the containing block is determined not by the element's computed 'direction'."
                }
            ],
            "syntax": "normal | embed | isolate | bidi-override | isolate-override | plaintext",
            "relevance": 56,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/unicode-bidi"
                }
            ],
            "description": "The level of embedding with respect to the bidirectional algorithm.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "unicode-range",
            "values": [
                {
                    "name": "U+26",
                    "description": "Ampersand."
                },
                {
                    "name": "U+20-24F, U+2B0-2FF, U+370-4FF, U+1E00-1EFF, U+2000-20CF, U+2100-23FF, U+2500-26FF, U+E000-F8FF, U+FB00-FB4F",
                    "description": "WGL4 character set (Pan-European)."
                },
                {
                    "name": "U+20-17F, U+2B0-2FF, U+2000-206F, U+20A0-20CF, U+2100-21FF, U+2600-26FF",
                    "description": "The Multilingual European Subset No. 1. Latin. Covers ~44 languages."
                },
                {
                    "name": "U+20-2FF, U+370-4FF, U+1E00-20CF, U+2100-23FF, U+2500-26FF, U+FB00-FB4F, U+FFF0-FFFD",
                    "description": "The Multilingual European Subset No. 2. Latin, Greek, and Cyrillic. Covers ~128 language."
                },
                {
                    "name": "U+20-4FF, U+530-58F, U+10D0-10FF, U+1E00-23FF, U+2440-245F, U+2500-26FF, U+FB00-FB4F, U+FE20-FE2F, U+FFF0-FFFD",
                    "description": "The Multilingual European Subset No. 3. Covers all characters belonging to European scripts."
                },
                {
                    "name": "U+00-7F",
                    "description": "Basic Latin (ASCII)."
                },
                {
                    "name": "U+80-FF",
                    "description": "Latin-1 Supplement. Accented characters for Western European languages, common punctuation characters, multiplication and division signs."
                },
                {
                    "name": "U+100-17F",
                    "description": "Latin Extended-A. Accented characters for for Czech, Dutch, Polish, and Turkish."
                },
                {
                    "name": "U+180-24F",
                    "description": "Latin Extended-B. Croatian, Slovenian, Romanian, Non-European and historic latin, Khoisan, Pinyin, Livonian, Sinology."
                },
                {
                    "name": "U+1E00-1EFF",
                    "description": "Latin Extended Additional. Vietnamese, German captial sharp s, Medievalist, Latin general use."
                },
                {
                    "name": "U+250-2AF",
                    "description": "International Phonetic Alphabet Extensions."
                },
                {
                    "name": "U+370-3FF",
                    "description": "Greek and Coptic."
                },
                {
                    "name": "U+1F00-1FFF",
                    "description": "Greek Extended. Accented characters for polytonic Greek."
                },
                {
                    "name": "U+400-4FF",
                    "description": "Cyrillic."
                },
                {
                    "name": "U+500-52F",
                    "description": "Cyrillic Supplement. Extra letters for Komi, Khanty, Chukchi, Mordvin, Kurdish, Aleut, Chuvash, Abkhaz, Azerbaijani, and Orok."
                },
                {
                    "name": "U+00-52F, U+1E00-1FFF, U+2200-22FF",
                    "description": "Latin, Greek, Cyrillic, some punctuation and symbols."
                },
                {
                    "name": "U+530-58F",
                    "description": "Armenian."
                },
                {
                    "name": "U+590-5FF",
                    "description": "Hebrew."
                },
                {
                    "name": "U+600-6FF",
                    "description": "Arabic."
                },
                {
                    "name": "U+750-77F",
                    "description": "Arabic Supplement. Additional letters for African languages, Khowar, Torwali, Burushaski, and early Persian."
                },
                {
                    "name": "U+8A0-8FF",
                    "description": "Arabic Extended-A. Additional letters for African languages, European and Central Asian languages, Rohingya, Tamazight, Arwi, and Koranic annotation signs."
                },
                {
                    "name": "U+700-74F",
                    "description": "Syriac."
                },
                {
                    "name": "U+900-97F",
                    "description": "Devanagari."
                },
                {
                    "name": "U+980-9FF",
                    "description": "Bengali."
                },
                {
                    "name": "U+A00-A7F",
                    "description": "Gurmukhi."
                },
                {
                    "name": "U+A80-AFF",
                    "description": "Gujarati."
                },
                {
                    "name": "U+B00-B7F",
                    "description": "Oriya."
                },
                {
                    "name": "U+B80-BFF",
                    "description": "Tamil."
                },
                {
                    "name": "U+C00-C7F",
                    "description": "Telugu."
                },
                {
                    "name": "U+C80-CFF",
                    "description": "Kannada."
                },
                {
                    "name": "U+D00-D7F",
                    "description": "Malayalam."
                },
                {
                    "name": "U+D80-DFF",
                    "description": "Sinhala."
                },
                {
                    "name": "U+118A0-118FF",
                    "description": "Warang Citi."
                },
                {
                    "name": "U+E00-E7F",
                    "description": "Thai."
                },
                {
                    "name": "U+1A20-1AAF",
                    "description": "Tai Tham."
                },
                {
                    "name": "U+AA80-AADF",
                    "description": "Tai Viet."
                },
                {
                    "name": "U+E80-EFF",
                    "description": "Lao."
                },
                {
                    "name": "U+F00-FFF",
                    "description": "Tibetan."
                },
                {
                    "name": "U+1000-109F",
                    "description": "Myanmar (Burmese)."
                },
                {
                    "name": "U+10A0-10FF",
                    "description": "Georgian."
                },
                {
                    "name": "U+1200-137F",
                    "description": "Ethiopic."
                },
                {
                    "name": "U+1380-139F",
                    "description": "Ethiopic Supplement. Extra Syllables for Sebatbeit, and Tonal marks"
                },
                {
                    "name": "U+2D80-2DDF",
                    "description": "Ethiopic Extended. Extra Syllables for Me'en, Blin, and Sebatbeit."
                },
                {
                    "name": "U+AB00-AB2F",
                    "description": "Ethiopic Extended-A. Extra characters for Gamo-Gofa-Dawro, Basketo, and Gumuz."
                },
                {
                    "name": "U+1780-17FF",
                    "description": "Khmer."
                },
                {
                    "name": "U+1800-18AF",
                    "description": "Mongolian."
                },
                {
                    "name": "U+1B80-1BBF",
                    "description": "Sundanese."
                },
                {
                    "name": "U+1CC0-1CCF",
                    "description": "Sundanese Supplement. Punctuation."
                },
                {
                    "name": "U+4E00-9FD5",
                    "description": "CJK (Chinese, Japanese, Korean) Unified Ideographs. Most common ideographs for modern Chinese and Japanese."
                },
                {
                    "name": "U+3400-4DB5",
                    "description": "CJK Unified Ideographs Extension A. Rare ideographs."
                },
                {
                    "name": "U+2F00-2FDF",
                    "description": "Kangxi Radicals."
                },
                {
                    "name": "U+2E80-2EFF",
                    "description": "CJK Radicals Supplement. Alternative forms of Kangxi Radicals."
                },
                {
                    "name": "U+1100-11FF",
                    "description": "Hangul Jamo."
                },
                {
                    "name": "U+AC00-D7AF",
                    "description": "Hangul Syllables."
                },
                {
                    "name": "U+3040-309F",
                    "description": "Hiragana."
                },
                {
                    "name": "U+30A0-30FF",
                    "description": "Katakana."
                },
                {
                    "name": "U+A5, U+4E00-9FFF, U+30??, U+FF00-FF9F",
                    "description": "Japanese Kanji, Hiragana and Katakana characters plus Yen/Yuan symbol."
                },
                {
                    "name": "U+A4D0-A4FF",
                    "description": "Lisu."
                },
                {
                    "name": "U+A000-A48F",
                    "description": "Yi Syllables."
                },
                {
                    "name": "U+A490-A4CF",
                    "description": "Yi Radicals."
                },
                {
                    "name": "U+2000-206F",
                    "description": "General Punctuation."
                },
                {
                    "name": "U+3000-303F",
                    "description": "CJK Symbols and Punctuation."
                },
                {
                    "name": "U+2070-209F",
                    "description": "Superscripts and Subscripts."
                },
                {
                    "name": "U+20A0-20CF",
                    "description": "Currency Symbols."
                },
                {
                    "name": "U+2100-214F",
                    "description": "Letterlike Symbols."
                },
                {
                    "name": "U+2150-218F",
                    "description": "Number Forms."
                },
                {
                    "name": "U+2190-21FF",
                    "description": "Arrows."
                },
                {
                    "name": "U+2200-22FF",
                    "description": "Mathematical Operators."
                },
                {
                    "name": "U+2300-23FF",
                    "description": "Miscellaneous Technical."
                },
                {
                    "name": "U+E000-F8FF",
                    "description": "Private Use Area."
                },
                {
                    "name": "U+FB00-FB4F",
                    "description": "Alphabetic Presentation Forms. Ligatures for latin, Armenian, and Hebrew."
                },
                {
                    "name": "U+FB50-FDFF",
                    "description": "Arabic Presentation Forms-A. Contextual forms / ligatures for Persian, Urdu, Sindhi, Central Asian languages, etc, Arabic pedagogical symbols, word ligatures."
                },
                {
                    "name": "U+1F600-1F64F",
                    "description": "Emoji: Emoticons."
                },
                {
                    "name": "U+2600-26FF",
                    "description": "Emoji: Miscellaneous Symbols."
                },
                {
                    "name": "U+1F300-1F5FF",
                    "description": "Emoji: Miscellaneous Symbols and Pictographs."
                },
                {
                    "name": "U+1F900-1F9FF",
                    "description": "Emoji: Supplemental Symbols and Pictographs."
                },
                {
                    "name": "U+1F680-1F6FF",
                    "description": "Emoji: Transport and Map Symbols."
                }
            ],
            "atRule": "@font-face",
            "syntax": "<unicode-range>#",
            "relevance": 72,
            "description": "@font-face descriptor. Defines the set of Unicode codepoints that may be supported by the font face for which it is declared.",
            "restrictions": [
                "unicode-range"
            ]
        },
        {
            "name": "user-select",
            "browsers": [
                "E79",
                "FF69",
                "S3",
                "C54",
                "IE10",
                "O41"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "The content of the element must be selected atomically"
                },
                {
                    "name": "auto"
                },
                {
                    "name": "contain",
                    "description": "UAs must not allow a selection which is started in this element to be extended outside of this element."
                },
                {
                    "name": "none",
                    "description": "The UA must not allow selections to be started in this element."
                },
                {
                    "name": "text",
                    "description": "The element imposes no constraint on the selection."
                }
            ],
            "syntax": "auto | text | none | contain | all",
            "relevance": 82,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/user-select"
                }
            ],
            "description": "Controls the appearance of selection.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "vertical-align",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O4"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Align the dominant baseline of the parent box with the equivalent, or heuristically reconstructed, baseline of the element inline box."
                },
                {
                    "name": "baseline",
                    "description": "Align the 'alphabetic' baseline of the element with the 'alphabetic' baseline of the parent element."
                },
                {
                    "name": "bottom",
                    "description": "Align the after edge of the extended inline box with the after-edge of the line box."
                },
                {
                    "name": "middle",
                    "description": "Align the 'middle' baseline of the inline element with the middle baseline of the parent."
                },
                {
                    "name": "sub",
                    "description": "Lower the baseline of the box to the proper position for subscripts of the parent's box. (This value has no effect on the font size of the element's text.)"
                },
                {
                    "name": "super",
                    "description": "Raise the baseline of the box to the proper position for superscripts of the parent's box. (This value has no effect on the font size of the element's text.)"
                },
                {
                    "name": "text-bottom",
                    "description": "Align the bottom of the box with the after-edge of the parent element's font."
                },
                {
                    "name": "text-top",
                    "description": "Align the top of the box with the before-edge of the parent element's font."
                },
                {
                    "name": "top",
                    "description": "Align the before edge of the extended inline box with the before-edge of the line box."
                },
                {
                    "name": "-webkit-baseline-middle",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O4"
                    ]
                }
            ],
            "syntax": "baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>",
            "relevance": 90,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/vertical-align"
                }
            ],
            "description": "Affects the vertical positioning of the inline boxes generated by an inline-level element inside a line box.",
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "visibility",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O4"
            ],
            "values": [
                {
                    "name": "collapse",
                    "description": "Table-specific. If used on elements other than rows, row groups, columns, or column groups, 'collapse' has the same meaning as 'hidden'."
                },
                {
                    "name": "hidden",
                    "description": "The generated box is invisible (fully transparent, nothing is drawn), but still affects layout."
                },
                {
                    "name": "visible",
                    "description": "The generated box is visible."
                }
            ],
            "syntax": "visible | hidden | collapse",
            "relevance": 87,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/visibility"
                }
            ],
            "description": "Specifies whether the boxes generated by an element are rendered. Invisible boxes still affect layout (set the 'display' property to 'none' to suppress box generation altogether).",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-animation",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                },
                {
                    "name": "none",
                    "description": "No animation is performed"
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines six of the animation properties into a single property.",
            "restrictions": [
                "time",
                "enum",
                "timing-function",
                "identifier",
                "number"
            ]
        },
        {
            "name": "-webkit-animation-delay",
            "browsers": [
                "C",
                "S5"
            ],
            "relevance": 50,
            "description": "Defines when the animation will start.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-webkit-animation-direction",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "alternate",
                    "description": "The animation cycle iterations that are odd counts are played in the normal direction, and the animation cycle iterations that are even counts are played in a reverse direction."
                },
                {
                    "name": "alternate-reverse",
                    "description": "The animation cycle iterations that are odd counts are played in the reverse direction, and the animation cycle iterations that are even counts are played in a normal direction."
                },
                {
                    "name": "normal",
                    "description": "Normal playback."
                },
                {
                    "name": "reverse",
                    "description": "All iterations of the animation are played in the reverse direction from the way they were specified."
                }
            ],
            "relevance": 50,
            "description": "Defines whether or not the animation should play in reverse on alternate cycles.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-animation-duration",
            "browsers": [
                "C",
                "S5"
            ],
            "relevance": 50,
            "description": "Defines the length of time that an animation takes to complete one cycle.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-webkit-animation-fill-mode",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "backwards",
                    "description": "The beginning property value (as defined in the first @keyframes at-rule) is applied before the animation is displayed, during the period defined by 'animation-delay'."
                },
                {
                    "name": "both",
                    "description": "Both forwards and backwards fill modes are applied."
                },
                {
                    "name": "forwards",
                    "description": "The final property value (as defined in the last @keyframes at-rule) is maintained after the animation completes."
                },
                {
                    "name": "none",
                    "description": "There is no change to the property value between the time the animation is applied and the time the animation begins playing or after the animation completes."
                }
            ],
            "relevance": 50,
            "description": "Defines what values are applied by the animation outside the time it is executing.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-animation-iteration-count",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "infinite",
                    "description": "Causes the animation to repeat forever."
                }
            ],
            "relevance": 50,
            "description": "Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.",
            "restrictions": [
                "number",
                "enum"
            ]
        },
        {
            "name": "-webkit-animation-name",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No animation is performed"
                }
            ],
            "relevance": 50,
            "description": "Defines a list of animations that apply. Each name is used to select the keyframe at-rule that provides the property values for the animation.",
            "restrictions": [
                "identifier",
                "enum"
            ]
        },
        {
            "name": "-webkit-animation-play-state",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "paused",
                    "description": "A running animation will be paused."
                },
                {
                    "name": "running",
                    "description": "Resume playback of a paused animation."
                }
            ],
            "relevance": 50,
            "description": "Defines whether the animation is running or paused.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-animation-timing-function",
            "browsers": [
                "C",
                "S5"
            ],
            "relevance": 50,
            "description": "Describes how the animation will progress over one cycle of its duration. See the 'transition-timing-function'.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "-webkit-appearance",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "button"
                },
                {
                    "name": "button-bevel"
                },
                {
                    "name": "caps-lock-indicator"
                },
                {
                    "name": "caret"
                },
                {
                    "name": "checkbox"
                },
                {
                    "name": "default-button"
                },
                {
                    "name": "listbox"
                },
                {
                    "name": "listitem"
                },
                {
                    "name": "media-fullscreen-button"
                },
                {
                    "name": "media-mute-button"
                },
                {
                    "name": "media-play-button"
                },
                {
                    "name": "media-seek-back-button"
                },
                {
                    "name": "media-seek-forward-button"
                },
                {
                    "name": "media-slider"
                },
                {
                    "name": "media-sliderthumb"
                },
                {
                    "name": "menulist"
                },
                {
                    "name": "menulist-button"
                },
                {
                    "name": "menulist-text"
                },
                {
                    "name": "menulist-textfield"
                },
                {
                    "name": "none"
                },
                {
                    "name": "push-button"
                },
                {
                    "name": "radio"
                },
                {
                    "name": "scrollbarbutton-down"
                },
                {
                    "name": "scrollbarbutton-left"
                },
                {
                    "name": "scrollbarbutton-right"
                },
                {
                    "name": "scrollbarbutton-up"
                },
                {
                    "name": "scrollbargripper-horizontal"
                },
                {
                    "name": "scrollbargripper-vertical"
                },
                {
                    "name": "scrollbarthumb-horizontal"
                },
                {
                    "name": "scrollbarthumb-vertical"
                },
                {
                    "name": "scrollbartrack-horizontal"
                },
                {
                    "name": "scrollbartrack-vertical"
                },
                {
                    "name": "searchfield"
                },
                {
                    "name": "searchfield-cancel-button"
                },
                {
                    "name": "searchfield-decoration"
                },
                {
                    "name": "searchfield-results-button"
                },
                {
                    "name": "searchfield-results-decoration"
                },
                {
                    "name": "slider-horizontal"
                },
                {
                    "name": "sliderthumb-horizontal"
                },
                {
                    "name": "sliderthumb-vertical"
                },
                {
                    "name": "slider-vertical"
                },
                {
                    "name": "square-button"
                },
                {
                    "name": "textarea"
                },
                {
                    "name": "textfield"
                }
            ],
            "status": "nonstandard",
            "syntax": "none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button",
            "relevance": 0,
            "description": "Changes the appearance of buttons and other controls to resemble native controls.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-backdrop-filter",
            "browsers": [
                "S9"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No filter effects are applied."
                },
                {
                    "name": "blur()",
                    "description": "Applies a Gaussian blur to the input image."
                },
                {
                    "name": "brightness()",
                    "description": "Applies a linear multiplier to input image, making it appear more or less bright."
                },
                {
                    "name": "contrast()",
                    "description": "Adjusts the contrast of the input."
                },
                {
                    "name": "drop-shadow()",
                    "description": "Applies a drop shadow effect to the input image."
                },
                {
                    "name": "grayscale()",
                    "description": "Converts the input image to grayscale."
                },
                {
                    "name": "hue-rotate()",
                    "description": "Applies a hue rotation on the input image. "
                },
                {
                    "name": "invert()",
                    "description": "Inverts the samples in the input image."
                },
                {
                    "name": "opacity()",
                    "description": "Applies transparency to the samples in the input image."
                },
                {
                    "name": "saturate()",
                    "description": "Saturates the input image."
                },
                {
                    "name": "sepia()",
                    "description": "Converts the input image to sepia."
                },
                {
                    "name": "url()",
                    "description": "A filter reference to a <filter> element."
                }
            ],
            "relevance": 50,
            "description": "Applies a filter effect where the first filter in the list takes the element's background image as the input image.",
            "restrictions": [
                "enum",
                "url"
            ]
        },
        {
            "name": "-webkit-backface-visibility",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "hidden"
                },
                {
                    "name": "visible"
                }
            ],
            "relevance": 50,
            "description": "Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-background-clip",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Determines the background painting area.",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "-webkit-background-composite",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "border"
                },
                {
                    "name": "padding"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-background-origin",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "For elements rendered as a single box, specifies the background positioning area. For elements rendered as multiple boxes (e.g., inline boxes on several lines, boxes on several pages) specifies which boxes 'box-decoration-break' operates on to determine the background positioning area(s).",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "-webkit-border-image",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "If 'auto' is specified then the border image width is the intrinsic width or height (whichever is applicable) of the corresponding image slice. If the image does not have the required intrinsic dimension then the corresponding border-width is used instead."
                },
                {
                    "name": "fill",
                    "description": "Causes the middle part of the border-image to be preserved."
                },
                {
                    "name": "none"
                },
                {
                    "name": "repeat",
                    "description": "The image is tiled (repeated) to fill the area."
                },
                {
                    "name": "round",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the image is rescaled so that it does."
                },
                {
                    "name": "space",
                    "description": "The image is tiled (repeated) to fill the area. If it does not fill the area with a whole number of tiles, the extra space is distributed around the tiles."
                },
                {
                    "name": "stretch",
                    "description": "The image is stretched to fill the area."
                },
                {
                    "name": "url()"
                }
            ],
            "relevance": 50,
            "description": "Shorthand property for setting 'border-image-source', 'border-image-slice', 'border-image-width', 'border-image-outset' and 'border-image-repeat'. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "percentage",
                "number",
                "url",
                "enum"
            ]
        },
        {
            "name": "-webkit-box-align",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "baseline",
                    "description": "If this box orientation is inline-axis or horizontal, all children are placed with their baselines aligned, and extra space placed before or after as necessary. For block flows, the baseline of the first non-empty line box located within the element is used. For tables, the baseline of the first cell is used."
                },
                {
                    "name": "center",
                    "description": "Any extra space is divided evenly, with half placed above the child and the other half placed after the child."
                },
                {
                    "name": "end",
                    "description": "For normal direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element. For reverse direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element."
                },
                {
                    "name": "start",
                    "description": "For normal direction boxes, the top edge of each child is placed along the top of the box. Extra space is placed below the element. For reverse direction boxes, the bottom edge of each child is placed along the bottom of the box. Extra space is placed above the element."
                },
                {
                    "name": "stretch",
                    "description": "The height of each child is adjusted to that of the containing block."
                }
            ],
            "relevance": 50,
            "description": "Specifies the alignment of nested elements within an outer flexible box element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-box-direction",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "A box with a computed value of horizontal for box-orient displays its children from left to right. A box with a computed value of vertical displays its children from top to bottom."
                },
                {
                    "name": "reverse",
                    "description": "A box with a computed value of horizontal for box-orient displays its children from right to left. A box with a computed value of vertical displays its children from bottom to top."
                }
            ],
            "relevance": 50,
            "description": "In webkit applications, -webkit-box-direction specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-box-flex",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Specifies an element's flexibility.",
            "restrictions": [
                "number"
            ]
        },
        {
            "name": "-webkit-box-flex-group",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Flexible elements can be assigned to flex groups using the 'box-flex-group' property.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-webkit-box-ordinal-group",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Indicates the ordinal group the element belongs to. Elements with a lower ordinal group are displayed before those with a higher ordinal group.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-webkit-box-orient",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "block-axis",
                    "description": "Elements are oriented along the box's axis."
                },
                {
                    "name": "horizontal",
                    "description": "The box displays its children from left to right in a horizontal line."
                },
                {
                    "name": "inline-axis",
                    "description": "Elements are oriented vertically."
                },
                {
                    "name": "vertical",
                    "description": "The box displays its children from stacked from top to bottom vertically."
                }
            ],
            "relevance": 50,
            "description": "In webkit applications, -webkit-box-orient specifies whether a box lays out its contents horizontally or vertically.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-box-pack",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "center",
                    "description": "The extra space is divided evenly, with half placed before the first child and the other half placed after the last child."
                },
                {
                    "name": "end",
                    "description": "For normal direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child. For reverse direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child."
                },
                {
                    "name": "justify",
                    "description": "The space is divided evenly in-between each child, with none of the extra space placed before the first child or after the last child. If there is only one child, treat the pack value as if it were start."
                },
                {
                    "name": "start",
                    "description": "For normal direction boxes, the left edge of the first child is placed at the left side, with all extra space placed after the last child. For reverse direction boxes, the right edge of the last child is placed at the right side, with all extra space placed before the first child."
                }
            ],
            "relevance": 50,
            "description": "Specifies alignment of child elements within the current element in the direction of orientation.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-box-reflect",
            "browsers": [
                "E79",
                "S4",
                "C4",
                "O15"
            ],
            "values": [
                {
                    "name": "above",
                    "description": "The reflection appears above the border box."
                },
                {
                    "name": "below",
                    "description": "The reflection appears below the border box."
                },
                {
                    "name": "left",
                    "description": "The reflection appears to the left of the border box."
                },
                {
                    "name": "right",
                    "description": "The reflection appears to the right of the border box."
                }
            ],
            "status": "nonstandard",
            "syntax": "[ above | below | right | left ]? <length>? <image>?",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-box-reflect"
                }
            ],
            "description": "Defines a reflection of a border box."
        },
        {
            "name": "-webkit-box-sizing",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "border-box",
                    "description": "The specified width and height (and respective min/max properties) on this element determine the border box of the element."
                },
                {
                    "name": "content-box",
                    "description": "Behavior of width and height as specified by CSS2.1. The specified width and height (and respective min/max properties) apply to the width and height respectively of the content box of the element."
                }
            ],
            "relevance": 50,
            "description": "Box Model addition in CSS3.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-break-after",
            "browsers": [
                "S7"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the generated box."
                },
                {
                    "name": "avoid-region"
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "region"
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior before the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-break-before",
            "browsers": [
                "S7"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the generated box."
                },
                {
                    "name": "avoid-region"
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "region"
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior before the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-break-inside",
            "browsers": [
                "S7"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break inside the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break inside the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break inside the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break inside the generated box."
                },
                {
                    "name": "avoid-region"
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior inside the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-column-break-after",
            "browsers": [
                "E80",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the generated box."
                },
                {
                    "name": "avoid-region"
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "region"
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior before the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-column-break-before",
            "browsers": [
                "E80",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "always",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break before/after the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break before/after the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break before/after the generated box."
                },
                {
                    "name": "avoid-region"
                },
                {
                    "name": "column",
                    "description": "Always force a column break before/after the generated box."
                },
                {
                    "name": "left",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a left page."
                },
                {
                    "name": "page",
                    "description": "Always force a page break before/after the generated box."
                },
                {
                    "name": "region"
                },
                {
                    "name": "right",
                    "description": "Force one or two page breaks before/after the generated box so that the next page is formatted as a right page."
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior before the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-column-break-inside",
            "browsers": [
                "E80",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Neither force nor forbid a page/column break inside the generated box."
                },
                {
                    "name": "avoid",
                    "description": "Avoid a page/column break inside the generated box."
                },
                {
                    "name": "avoid-column",
                    "description": "Avoid a column break inside the generated box."
                },
                {
                    "name": "avoid-page",
                    "description": "Avoid a page break inside the generated box."
                },
                {
                    "name": "avoid-region"
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior inside the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-column-count",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Determines the number of columns by the 'column-width' property and the element width."
                }
            ],
            "relevance": 50,
            "description": "Describes the optimal number of columns into which the content of the element will be flowed.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "-webkit-column-gap",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "User agent specific and typically equivalent to 1em."
                }
            ],
            "relevance": 50,
            "description": "Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-webkit-column-rule",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "This property is a shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.",
            "restrictions": [
                "length",
                "line-width",
                "line-style",
                "color"
            ]
        },
        {
            "name": "-webkit-column-rule-color",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Sets the color of the column rule",
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-webkit-column-rule-style",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Sets the style of the rule between columns of an element.",
            "restrictions": [
                "line-style"
            ]
        },
        {
            "name": "-webkit-column-rule-width",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "description": "Sets the width of the rule between columns. Negative values are not allowed.",
            "restrictions": [
                "length",
                "line-width"
            ]
        },
        {
            "name": "-webkit-columns",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "relevance": 50,
            "description": "A shorthand property which sets both 'column-width' and 'column-count'.",
            "restrictions": [
                "length",
                "integer"
            ]
        },
        {
            "name": "-webkit-column-span",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "The element spans across all columns. Content in the normal flow that appears before the element is automatically balanced across all columns before the element appear."
                },
                {
                    "name": "none",
                    "description": "The element does not span multiple columns."
                }
            ],
            "relevance": 50,
            "description": "Describes the page/column break behavior after the generated box.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-column-width",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                }
            ],
            "relevance": 50,
            "description": "This property describes the width of columns in multicol elements.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-webkit-filter",
            "browsers": [
                "C18",
                "O15",
                "S6"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No filter effects are applied."
                },
                {
                    "name": "blur()",
                    "description": "Applies a Gaussian blur to the input image."
                },
                {
                    "name": "brightness()",
                    "description": "Applies a linear multiplier to input image, making it appear more or less bright."
                },
                {
                    "name": "contrast()",
                    "description": "Adjusts the contrast of the input."
                },
                {
                    "name": "drop-shadow()",
                    "description": "Applies a drop shadow effect to the input image."
                },
                {
                    "name": "grayscale()",
                    "description": "Converts the input image to grayscale."
                },
                {
                    "name": "hue-rotate()",
                    "description": "Applies a hue rotation on the input image. "
                },
                {
                    "name": "invert()",
                    "description": "Inverts the samples in the input image."
                },
                {
                    "name": "opacity()",
                    "description": "Applies transparency to the samples in the input image."
                },
                {
                    "name": "saturate()",
                    "description": "Saturates the input image."
                },
                {
                    "name": "sepia()",
                    "description": "Converts the input image to sepia."
                },
                {
                    "name": "url()",
                    "description": "A filter reference to a <filter> element."
                }
            ],
            "relevance": 50,
            "description": "Processes an element's rendering before it is displayed in the document, by applying one or more filter effects.",
            "restrictions": [
                "enum",
                "url"
            ]
        },
        {
            "name": "-webkit-flow-from",
            "browsers": [
                "S6.1"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The block container is not a CSS Region."
                }
            ],
            "relevance": 50,
            "description": "Makes a block container a region and associates it with a named flow.",
            "restrictions": [
                "identifier"
            ]
        },
        {
            "name": "-webkit-flow-into",
            "browsers": [
                "S6.1"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "The element is not moved to a named flow and normal CSS processing takes place."
                }
            ],
            "relevance": 50,
            "description": "Places an element or its contents into a named flow.",
            "restrictions": [
                "identifier"
            ]
        },
        {
            "name": "-webkit-font-feature-settings",
            "browsers": [
                "C16"
            ],
            "values": [
                {
                    "name": "\"c2cs\""
                },
                {
                    "name": "\"dlig\""
                },
                {
                    "name": "\"kern\""
                },
                {
                    "name": "\"liga\""
                },
                {
                    "name": "\"lnum\""
                },
                {
                    "name": "\"onum\""
                },
                {
                    "name": "\"smcp\""
                },
                {
                    "name": "\"swsh\""
                },
                {
                    "name": "\"tnum\""
                },
                {
                    "name": "normal",
                    "description": "No change in glyph substitution or positioning occurs."
                },
                {
                    "name": "off"
                },
                {
                    "name": "on"
                }
            ],
            "relevance": 50,
            "description": "This property provides low-level control over OpenType font features. It is intended as a way of providing access to font features that are not widely used but are needed for a particular use case.",
            "restrictions": [
                "string",
                "integer"
            ]
        },
        {
            "name": "-webkit-hyphens",
            "browsers": [
                "S5.1"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Conditional hyphenation characters inside a word, if present, take priority over automatic resources when determining hyphenation points within the word."
                },
                {
                    "name": "manual",
                    "description": "Words are only broken at line breaks where there are characters inside the word that suggest line break opportunities"
                },
                {
                    "name": "none",
                    "description": "Words are not broken at line breaks, even if characters inside the word suggest line break points."
                }
            ],
            "relevance": 50,
            "description": "Controls whether hyphenation is allowed to create more break opportunities within a line of text.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-line-break",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "after-white-space"
                },
                {
                    "name": "normal"
                }
            ],
            "relevance": 50,
            "description": "Specifies line-breaking rules for CJK (Chinese, Japanese, and Korean) text."
        },
        {
            "name": "-webkit-margin-bottom-collapse",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "collapse"
                },
                {
                    "name": "discard"
                },
                {
                    "name": "separate"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-margin-collapse",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "collapse"
                },
                {
                    "name": "discard"
                },
                {
                    "name": "separate"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-margin-start",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "-webkit-margin-top-collapse",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "collapse"
                },
                {
                    "name": "discard"
                },
                {
                    "name": "separate"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-mask-clip",
            "browsers": [
                "C",
                "O15",
                "S4"
            ],
            "status": "nonstandard",
            "syntax": "[ <box> | border | padding | content | text ]#",
            "relevance": 0,
            "description": "Determines the mask painting area, which determines the area that is affected by the mask.",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "-webkit-mask-image",
            "browsers": [
                "C",
                "O15",
                "S4"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "Counts as a transparent black image layer."
                },
                {
                    "name": "url()",
                    "description": "Reference to a <mask element or to a CSS image."
                }
            ],
            "status": "nonstandard",
            "syntax": "<mask-reference>#",
            "relevance": 0,
            "description": "Sets the mask layer image of an element.",
            "restrictions": [
                "url",
                "image",
                "enum"
            ]
        },
        {
            "name": "-webkit-mask-origin",
            "browsers": [
                "C",
                "O15",
                "S4"
            ],
            "status": "nonstandard",
            "syntax": "[ <box> | border | padding | content ]#",
            "relevance": 0,
            "description": "Specifies the mask positioning area.",
            "restrictions": [
                "box"
            ]
        },
        {
            "name": "-webkit-mask-repeat",
            "browsers": [
                "C",
                "O15",
                "S4"
            ],
            "status": "nonstandard",
            "syntax": "<repeat-style>#",
            "relevance": 0,
            "description": "Specifies how mask layer images are tiled after they have been sized and positioned.",
            "restrictions": [
                "repeat"
            ]
        },
        {
            "name": "-webkit-mask-size",
            "browsers": [
                "C",
                "O15",
                "S4"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Resolved by using the image's intrinsic ratio and the size of the other dimension, or failing that, using the image's intrinsic size, or failing that, treating it as 100%."
                },
                {
                    "name": "contain",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the largest size such that both its width and its height can fit inside the background positioning area."
                },
                {
                    "name": "cover",
                    "description": "Scale the image, while preserving its intrinsic aspect ratio (if any), to the smallest size such that both its width and its height can completely cover the background positioning area."
                }
            ],
            "status": "nonstandard",
            "syntax": "<bg-size>#",
            "relevance": 0,
            "description": "Specifies the size of the mask layer images.",
            "restrictions": [
                "length",
                "percentage",
                "enum"
            ]
        },
        {
            "name": "-webkit-nbsp-mode",
            "browsers": [
                "S13.1"
            ],
            "values": [
                {
                    "name": "normal"
                },
                {
                    "name": "space"
                }
            ],
            "relevance": 50,
            "description": "Defines the behavior of nonbreaking spaces within text."
        },
        {
            "name": "-webkit-overflow-scrolling",
            "browsers": [
                "C",
                "S5"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "touch"
                }
            ],
            "status": "nonstandard",
            "syntax": "auto | touch",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-overflow-scrolling"
                }
            ],
            "description": "Specifies whether to use native-style scrolling in an overflow:scroll element."
        },
        {
            "name": "-webkit-padding-start",
            "browsers": [
                "C",
                "S3"
            ],
            "relevance": 50,
            "restrictions": [
                "percentage",
                "length"
            ]
        },
        {
            "name": "-webkit-perspective",
            "browsers": [
                "C",
                "S4"
            ],
            "values": [
                {
                    "name": "none",
                    "description": "No perspective transform is applied."
                }
            ],
            "relevance": 50,
            "description": "Applies the same transform as the perspective(<number>) transform function, except that it applies only to the positioned or transformed children of the element, not to the transform on the element itself.",
            "restrictions": [
                "length"
            ]
        },
        {
            "name": "-webkit-perspective-origin",
            "browsers": [
                "C",
                "S4"
            ],
            "relevance": 50,
            "description": "Establishes the origin for the perspective property. It effectively sets the X and Y position at which the viewer appears to be looking at the children of the element.",
            "restrictions": [
                "position",
                "percentage",
                "length"
            ]
        },
        {
            "name": "-webkit-region-fragment",
            "browsers": [
                "S7"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Content flows as it would in a regular content box."
                },
                {
                    "name": "break",
                    "description": "If the content fits within the CSS Region, then this property has no effect."
                }
            ],
            "relevance": 50,
            "description": "The 'region-fragment' property controls the behavior of the last region associated with a named flow.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-tap-highlight-color",
            "browsers": [
                "E12",
                "C16",
                "O15"
            ],
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-tap-highlight-color"
                }
            ],
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-webkit-text-fill-color",
            "browsers": [
                "E12",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "syntax": "<color>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color"
                }
            ],
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-webkit-text-size-adjust",
            "browsers": [
                "E",
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Renderers must use the default size adjustment when displaying on a small device."
                },
                {
                    "name": "none",
                    "description": "Renderers must not do size adjustment when displaying on a small device."
                }
            ],
            "relevance": 50,
            "description": "Specifies a size adjustment for displaying text content in mobile browsers.",
            "restrictions": [
                "percentage"
            ]
        },
        {
            "name": "-webkit-text-stroke",
            "browsers": [
                "E15",
                "FF49",
                "S3",
                "C4",
                "O15"
            ],
            "syntax": "<length> || <color>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke"
                }
            ],
            "restrictions": [
                "length",
                "line-width",
                "color",
                "percentage"
            ]
        },
        {
            "name": "-webkit-text-stroke-color",
            "browsers": [
                "E15",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "syntax": "<color>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color"
                }
            ],
            "restrictions": [
                "color"
            ]
        },
        {
            "name": "-webkit-text-stroke-width",
            "browsers": [
                "E15",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "syntax": "<length>",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width"
                }
            ],
            "restrictions": [
                "length",
                "line-width",
                "percentage"
            ]
        },
        {
            "name": "-webkit-touch-callout",
            "browsers": [
                "S3"
            ],
            "values": [
                {
                    "name": "none"
                }
            ],
            "status": "nonstandard",
            "syntax": "default | none",
            "relevance": 0,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-touch-callout"
                }
            ],
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-transform",
            "browsers": [
                "C",
                "O12",
                "S3.1"
            ],
            "values": [
                {
                    "name": "matrix()",
                    "description": "Specifies a 2D transformation in the form of a transformation matrix of six values. matrix(a,b,c,d,e,f) is equivalent to applying the transformation matrix [a b c d e f]"
                },
                {
                    "name": "matrix3d()",
                    "description": "Specifies a 3D transformation as a 4x4 homogeneous matrix of 16 values in column-major order."
                },
                {
                    "name": "none"
                },
                {
                    "name": "perspective()",
                    "description": "Specifies a perspective projection matrix."
                },
                {
                    "name": "rotate()",
                    "description": "Specifies a 2D rotation by the angle specified in the parameter about the origin of the element, as defined by the transform-origin property."
                },
                {
                    "name": "rotate3d()",
                    "description": "Specifies a clockwise 3D rotation by the angle specified in last parameter about the [x,y,z] direction vector described by the first 3 parameters."
                },
                {
                    "name": "rotateX('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the X axis."
                },
                {
                    "name": "rotateY('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Y axis."
                },
                {
                    "name": "rotateZ('angle')",
                    "description": "Specifies a clockwise rotation by the given angle about the Z axis."
                },
                {
                    "name": "scale()",
                    "description": "Specifies a 2D scale operation by the [sx,sy] scaling vector described by the 2 parameters. If the second parameter is not provided, it is takes a value equal to the first."
                },
                {
                    "name": "scale3d()",
                    "description": "Specifies a 3D scale operation by the [sx,sy,sz] scaling vector described by the 3 parameters."
                },
                {
                    "name": "scaleX()",
                    "description": "Specifies a scale operation using the [sx,1] scaling vector, where sx is given as the parameter."
                },
                {
                    "name": "scaleY()",
                    "description": "Specifies a scale operation using the [sy,1] scaling vector, where sy is given as the parameter."
                },
                {
                    "name": "scaleZ()",
                    "description": "Specifies a scale operation using the [1,1,sz] scaling vector, where sz is given as the parameter."
                },
                {
                    "name": "skew()",
                    "description": "Specifies a skew transformation along the X and Y axes. The first angle parameter specifies the skew on the X axis. The second angle parameter specifies the skew on the Y axis. If the second parameter is not given then a value of 0 is used for the Y angle (ie: no skew on the Y axis)."
                },
                {
                    "name": "skewX()",
                    "description": "Specifies a skew transformation along the X axis by the given angle."
                },
                {
                    "name": "skewY()",
                    "description": "Specifies a skew transformation along the Y axis by the given angle."
                },
                {
                    "name": "translate()",
                    "description": "Specifies a 2D translation by the vector [tx, ty], where tx is the first translation-value parameter and ty is the optional second translation-value parameter."
                },
                {
                    "name": "translate3d()",
                    "description": "Specifies a 3D translation by the vector [tx,ty,tz], with tx, ty and tz being the first, second and third translation-value parameters respectively."
                },
                {
                    "name": "translateX()",
                    "description": "Specifies a translation by the given amount in the X direction."
                },
                {
                    "name": "translateY()",
                    "description": "Specifies a translation by the given amount in the Y direction."
                },
                {
                    "name": "translateZ()",
                    "description": "Specifies a translation by the given amount in the Z direction. Note that percentage values are not allowed in the translateZ translation-value, and if present are evaluated as 0."
                }
            ],
            "relevance": 50,
            "description": "A two-dimensional transformation is applied to an element through the 'transform' property. This property contains a list of transform functions similar to those allowed by SVG.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-transform-origin",
            "browsers": [
                "C",
                "O15",
                "S3.1"
            ],
            "relevance": 50,
            "description": "Establishes the origin of transformation for an element.",
            "restrictions": [
                "position",
                "length",
                "percentage"
            ]
        },
        {
            "name": "-webkit-transform-origin-x",
            "browsers": [
                "E80",
                "S13.1",
                "C80",
                "O67"
            ],
            "relevance": 50,
            "description": "The x coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-webkit-transform-origin-y",
            "browsers": [
                "E80",
                "S13.1",
                "C80",
                "O67"
            ],
            "relevance": 50,
            "description": "The y coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-webkit-transform-origin-z",
            "browsers": [
                "E80",
                "S13.1",
                "C80",
                "O67"
            ],
            "relevance": 50,
            "description": "The z coordinate of the origin for transforms applied to an element with respect to its border box.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "-webkit-transform-style",
            "browsers": [
                "C",
                "S4"
            ],
            "values": [
                {
                    "name": "flat",
                    "description": "All children of this element are rendered flattened into the 2D plane of the element."
                }
            ],
            "relevance": 50,
            "description": "Defines how nested elements are rendered in 3D space.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-transition",
            "browsers": [
                "C",
                "O12",
                "S5"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Shorthand property combines four of the transition properties into a single property.",
            "restrictions": [
                "time",
                "property",
                "timing-function",
                "enum"
            ]
        },
        {
            "name": "-webkit-transition-delay",
            "browsers": [
                "C",
                "O12",
                "S5"
            ],
            "relevance": 50,
            "description": "Defines when the transition will start. It allows a transition to begin execution some period of time from when it is applied.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-webkit-transition-duration",
            "browsers": [
                "C",
                "O12",
                "S5"
            ],
            "relevance": 50,
            "description": "Specifies how long the transition from the old value to the new value should take.",
            "restrictions": [
                "time"
            ]
        },
        {
            "name": "-webkit-transition-property",
            "browsers": [
                "C",
                "O12",
                "S5"
            ],
            "values": [
                {
                    "name": "all",
                    "description": "Every property that is able to undergo a transition will do so."
                },
                {
                    "name": "none",
                    "description": "No property will transition."
                }
            ],
            "relevance": 50,
            "description": "Specifies the name of the CSS property to which the transition is applied.",
            "restrictions": [
                "property"
            ]
        },
        {
            "name": "-webkit-transition-timing-function",
            "browsers": [
                "C",
                "O12",
                "S5"
            ],
            "relevance": 50,
            "description": "Describes how the intermediate values used during a transition will be calculated.",
            "restrictions": [
                "timing-function"
            ]
        },
        {
            "name": "-webkit-user-drag",
            "browsers": [
                "E80",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "element"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 50,
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-user-modify",
            "browsers": [
                "E80",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "read-only"
                },
                {
                    "name": "read-write"
                },
                {
                    "name": "read-write-plaintext-only"
                }
            ],
            "syntax": "read-only | read-write | read-write-plaintext-only",
            "relevance": 50,
            "description": "Determines whether a user can edit the content of an element.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "-webkit-user-select",
            "browsers": [
                "C",
                "S3"
            ],
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                },
                {
                    "name": "text"
                }
            ],
            "relevance": 50,
            "description": "Controls the appearance of selection.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "widows",
            "browsers": [
                "E12",
                "S1.3",
                "C25",
                "IE8",
                "O9.2"
            ],
            "syntax": "<integer>",
            "relevance": 51,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/widows"
                }
            ],
            "description": "Specifies the minimum number of line boxes of a block container that must be left in a fragment after a break.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "width",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The width depends on the values of other properties."
                },
                {
                    "name": "fit-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O3.5"
                    ],
                    "description": "Use the fit-content inline size or fit-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "max-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O3.5"
                    ],
                    "description": "Use the max-content inline size or max-content block size, as appropriate to the writing mode."
                },
                {
                    "name": "min-content",
                    "browsers": [
                        "E12",
                        "FF1",
                        "S1",
                        "C1",
                        "IE4",
                        "O3.5"
                    ],
                    "description": "Use the min-content inline size or min-content block size, as appropriate to the writing mode."
                }
            ],
            "syntax": "auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)",
            "relevance": 96,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/width"
                }
            ],
            "description": "Specifies the width of the content area, padding area or border area (depending on 'box-sizing') of certain boxes.",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "will-change",
            "browsers": [
                "E79",
                "FF36",
                "S9.1",
                "C36",
                "O24"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "Expresses no particular intent."
                },
                {
                    "name": "contents",
                    "description": "Indicates that the author expects to animate or change something about the element's contents in the near future."
                },
                {
                    "name": "scroll-position",
                    "description": "Indicates that the author expects to animate or change the scroll position of the element in the near future."
                }
            ],
            "syntax": "auto | <animateable-feature>#",
            "relevance": 65,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/will-change"
                }
            ],
            "description": "Provides a rendering hint to the user agent, stating what kinds of changes the author expects to perform on the element.",
            "restrictions": [
                "enum",
                "identifier"
            ]
        },
        {
            "name": "word-break",
            "browsers": [
                "E12",
                "FF15",
                "S3",
                "C1",
                "IE5.5",
                "O15"
            ],
            "values": [
                {
                    "name": "break-all",
                    "description": "Lines may break between any two grapheme clusters for non-CJK scripts."
                },
                {
                    "name": "keep-all",
                    "description": "Block characters can no longer create implied break points."
                },
                {
                    "name": "normal",
                    "description": "Breaks non-CJK scripts according to their own rules."
                }
            ],
            "syntax": "normal | break-all | keep-all | break-word",
            "relevance": 76,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/word-break"
                }
            ],
            "description": "Specifies line break opportunities for non-CJK scripts.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "word-spacing",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE6",
                "O3.5"
            ],
            "values": [
                {
                    "name": "normal",
                    "description": "No additional spacing is applied. Computes to zero."
                }
            ],
            "syntax": "normal | <length>",
            "relevance": 57,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/word-spacing"
                }
            ],
            "description": "Specifies additional spacing between \"words\".",
            "restrictions": [
                "length",
                "percentage"
            ]
        },
        {
            "name": "word-wrap",
            "browsers": [
                "E80",
                "FF72",
                "S13.1",
                "C80",
                "O67"
            ],
            "values": [
                {
                    "name": "break-word",
                    "description": "An otherwise unbreakable sequence of characters may be broken at an arbitrary point if there are no otherwise-acceptable break points in the line."
                },
                {
                    "name": "normal",
                    "description": "Lines may break only at allowed break points."
                }
            ],
            "syntax": "normal | break-word",
            "relevance": 77,
            "description": "Specifies whether the UA may break within a word to prevent overflow when an otherwise-unbreakable string is too long to fit.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "writing-mode",
            "browsers": [
                "E12",
                "FF41",
                "S10.1",
                "C48",
                "IE9",
                "O35"
            ],
            "values": [
                {
                    "name": "horizontal-tb",
                    "description": "Top-to-bottom block flow direction. The writing mode is horizontal."
                },
                {
                    "name": "sideways-lr",
                    "browsers": [
                        "E12",
                        "FF41",
                        "S10.1",
                        "C48",
                        "IE9",
                        "O35"
                    ],
                    "description": "Left-to-right block flow direction. The writing mode is vertical, while the typographic mode is horizontal."
                },
                {
                    "name": "sideways-rl",
                    "browsers": [
                        "E12",
                        "FF41",
                        "S10.1",
                        "C48",
                        "IE9",
                        "O35"
                    ],
                    "description": "Right-to-left block flow direction. The writing mode is vertical, while the typographic mode is horizontal."
                },
                {
                    "name": "vertical-lr",
                    "description": "Left-to-right block flow direction. The writing mode is vertical."
                },
                {
                    "name": "vertical-rl",
                    "description": "Right-to-left block flow direction. The writing mode is vertical."
                }
            ],
            "syntax": "horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/writing-mode"
                }
            ],
            "description": "This is a shorthand property for both 'direction' and 'block-progression'.",
            "restrictions": [
                "enum"
            ]
        },
        {
            "name": "z-index",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O4"
            ],
            "values": [
                {
                    "name": "auto",
                    "description": "The stack level of the generated box in the current stacking context is 0. The box does not establish a new stacking context unless it is the root element."
                }
            ],
            "syntax": "auto | <integer>",
            "relevance": 92,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/z-index"
                }
            ],
            "description": "For a positioned box, the 'z-index' property specifies the stack level of the box in the current stacking context and whether the box establishes a local stacking context.",
            "restrictions": [
                "integer"
            ]
        },
        {
            "name": "zoom",
            "browsers": [
                "E12",
                "FFpreview",
                "S3.1",
                "C1",
                "IE5.5",
                "O15"
            ],
            "values": [
                {
                    "name": "normal"
                }
            ],
            "status": "nonstandard",
            "syntax": "normal | reset | <number> | <percentage>",
            "relevance": 15,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/zoom"
                }
            ],
            "description": "Non-standard. Specifies the magnification scale of the object. See 'transform: scale()' for a standards-based alternative.",
            "restrictions": [
                "enum",
                "integer",
                "number",
                "percentage"
            ]
        },
        {
            "name": "-ms-ime-align",
            "status": "nonstandard",
            "syntax": "auto | after",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "after"
                }
            ],
            "relevance": 0,
            "description": "Aligns the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active."
        },
        {
            "name": "-moz-binding",
            "status": "nonstandard",
            "syntax": "<url> | none",
            "relevance": 0,
            "description": "The -moz-binding CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element."
        },
        {
            "name": "-moz-context-properties",
            "status": "nonstandard",
            "syntax": "none | [ fill | fill-opacity | stroke | stroke-opacity ]#",
            "relevance": 0,
            "description": "If you reference an SVG image in a webpage (such as with the <img> element or as a background image), the SVG image can coordinate with the embedding element (its context) to have the image adopt property values set on the embedding element. To do this the embedding element needs to list the properties that are to be made available to the image by listing them as values of the -moz-context-properties property, and the image needs to opt in to using those properties by using values such as the context-fill value.\n\nThis feature is available since Firefox 55, but is only currently supported with SVG images loaded via chrome:// or resource:// URLs. To experiment with the feature in SVG on the Web it is necessary to set the svg.context-properties.content.enabled pref to true."
        },
        {
            "name": "-moz-float-edge",
            "status": "obsolete",
            "syntax": "border-box | content-box | margin-box | padding-box",
            "values": [
                {
                    "name": "border-box"
                },
                {
                    "name": "content-box"
                },
                {
                    "name": "margin-box"
                },
                {
                    "name": "padding-box"
                }
            ],
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-float-edge"
                }
            ],
            "description": "The non-standard -moz-float-edge CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness."
        },
        {
            "name": "-moz-force-broken-image-icon",
            "status": "obsolete",
            "syntax": "0 | 1",
            "values": [
                {
                    "name": "0"
                },
                {
                    "name": "1"
                }
            ],
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-force-broken-image-icon"
                }
            ],
            "description": "The -moz-force-broken-image-icon extended CSS property can be used to force the broken image icon to be shown even when a broken image has an alt attribute."
        },
        {
            "name": "-moz-image-region",
            "status": "nonstandard",
            "syntax": "<shape> | auto",
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-image-region"
                }
            ],
            "description": "For certain XUL elements and pseudo-elements that use an image from the list-style-image property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance."
        },
        {
            "name": "-moz-orient",
            "status": "nonstandard",
            "syntax": "inline | block | horizontal | vertical",
            "values": [
                {
                    "name": "inline"
                },
                {
                    "name": "block"
                },
                {
                    "name": "horizontal"
                },
                {
                    "name": "vertical"
                }
            ],
            "relevance": 0,
            "browsers": [
                "FF6"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-orient"
                }
            ],
            "description": "The -moz-orient CSS property specifies the orientation of the element to which it's applied."
        },
        {
            "name": "-moz-outline-radius",
            "status": "nonstandard",
            "syntax": "<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?",
            "relevance": 0,
            "description": "In Mozilla applications like Firefox, the -moz-outline-radius CSS property can be used to give an element's outline rounded corners."
        },
        {
            "name": "-moz-outline-radius-bottomleft",
            "status": "nonstandard",
            "syntax": "<outline-radius>",
            "relevance": 0,
            "description": "In Mozilla applications, the -moz-outline-radius-bottomleft CSS property can be used to round the bottom-left corner of an element's outline."
        },
        {
            "name": "-moz-outline-radius-bottomright",
            "status": "nonstandard",
            "syntax": "<outline-radius>",
            "relevance": 0,
            "description": "In Mozilla applications, the -moz-outline-radius-bottomright CSS property can be used to round the bottom-right corner of an element's outline."
        },
        {
            "name": "-moz-outline-radius-topleft",
            "status": "nonstandard",
            "syntax": "<outline-radius>",
            "relevance": 0,
            "description": "In Mozilla applications, the -moz-outline-radius-topleft CSS property can be used to round the top-left corner of an element's outline."
        },
        {
            "name": "-moz-outline-radius-topright",
            "status": "nonstandard",
            "syntax": "<outline-radius>",
            "relevance": 0,
            "description": "In Mozilla applications, the -moz-outline-radius-topright CSS property can be used to round the top-right corner of an element's outline."
        },
        {
            "name": "-moz-stack-sizing",
            "status": "nonstandard",
            "syntax": "ignore | stretch-to-fit",
            "values": [
                {
                    "name": "ignore"
                },
                {
                    "name": "stretch-to-fit"
                }
            ],
            "relevance": 0,
            "description": "-moz-stack-sizing is an extended CSS property. Normally, a stack will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible."
        },
        {
            "name": "-moz-text-blink",
            "status": "nonstandard",
            "syntax": "none | blink",
            "values": [
                {
                    "name": "none"
                },
                {
                    "name": "blink"
                }
            ],
            "relevance": 0,
            "description": "The -moz-text-blink non-standard Mozilla CSS extension specifies the blink mode."
        },
        {
            "name": "-moz-user-input",
            "status": "obsolete",
            "syntax": "auto | none | enabled | disabled",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                },
                {
                    "name": "enabled"
                },
                {
                    "name": "disabled"
                }
            ],
            "relevance": 0,
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-moz-user-input"
                }
            ],
            "description": "In Mozilla applications, -moz-user-input determines if an element will accept user input."
        },
        {
            "name": "-moz-user-modify",
            "status": "nonstandard",
            "syntax": "read-only | read-write | write-only",
            "values": [
                {
                    "name": "read-only"
                },
                {
                    "name": "read-write"
                },
                {
                    "name": "write-only"
                }
            ],
            "relevance": 0,
            "description": "The -moz-user-modify property has no effect. It was originally planned to determine whether or not the content of an element can be edited by a user."
        },
        {
            "name": "-moz-window-dragging",
            "status": "nonstandard",
            "syntax": "drag | no-drag",
            "values": [
                {
                    "name": "drag"
                },
                {
                    "name": "no-drag"
                }
            ],
            "relevance": 0,
            "description": "The -moz-window-dragging CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X."
        },
        {
            "name": "-moz-window-shadow",
            "status": "nonstandard",
            "syntax": "default | menu | tooltip | sheet | none",
            "values": [
                {
                    "name": "default"
                },
                {
                    "name": "menu"
                },
                {
                    "name": "tooltip"
                },
                {
                    "name": "sheet"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 0,
            "description": "The -moz-window-shadow CSS property specifies whether a window will have a shadow. It only works on Mac OS X."
        },
        {
            "name": "-webkit-border-before",
            "status": "nonstandard",
            "syntax": "<'border-width'> || <'border-style'> || <color>",
            "relevance": 0,
            "browsers": [
                "E79",
                "S5.1",
                "C8",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-border-before"
                }
            ],
            "description": "The -webkit-border-before CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet."
        },
        {
            "name": "-webkit-border-before-color",
            "status": "nonstandard",
            "syntax": "<color>",
            "relevance": 0,
            "description": "The -webkit-border-before-color CSS property sets the color of the individual logical block start border in a single place in the style sheet."
        },
        {
            "name": "-webkit-border-before-style",
            "status": "nonstandard",
            "syntax": "<'border-style'>",
            "relevance": 0,
            "description": "The -webkit-border-before-style CSS property sets the style of the individual logical block start border in a single place in the style sheet."
        },
        {
            "name": "-webkit-border-before-width",
            "status": "nonstandard",
            "syntax": "<'border-width'>",
            "relevance": 0,
            "description": "The -webkit-border-before-width CSS property sets the width of the individual logical block start border in a single place in the style sheet."
        },
        {
            "name": "-webkit-line-clamp",
            "syntax": "none | <integer>",
            "relevance": 50,
            "browsers": [
                "E17",
                "FF68",
                "S5",
                "C6",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-line-clamp"
                }
            ],
            "description": "The -webkit-line-clamp CSS property allows limiting of the contents of a block container to the specified number of lines."
        },
        {
            "name": "-webkit-mask",
            "status": "nonstandard",
            "syntax": "[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#",
            "relevance": 0,
            "description": "The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points."
        },
        {
            "name": "-webkit-mask-attachment",
            "status": "nonstandard",
            "syntax": "<attachment>#",
            "relevance": 0,
            "browsers": [
                "S4",
                "C1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-attachment"
                }
            ],
            "description": "If a -webkit-mask-image is specified, -webkit-mask-attachment determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block."
        },
        {
            "name": "-webkit-mask-composite",
            "status": "nonstandard",
            "syntax": "<composite-style>#",
            "relevance": 0,
            "browsers": [
                "E18",
                "S3.1",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-composite"
                }
            ],
            "description": "The -webkit-mask-composite property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the -webkit-mask-image property."
        },
        {
            "name": "-webkit-mask-position",
            "status": "nonstandard",
            "syntax": "<position>#",
            "relevance": 0,
            "description": "The mask-position CSS property sets the initial position, relative to the mask position layer defined by mask-origin, for each defined mask image."
        },
        {
            "name": "-webkit-mask-position-x",
            "status": "nonstandard",
            "syntax": "[ <length-percentage> | left | center | right ]#",
            "relevance": 0,
            "browsers": [
                "E18",
                "FF49",
                "S3.1",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-x"
                }
            ],
            "description": "The -webkit-mask-position-x CSS property sets the initial horizontal position of a mask image."
        },
        {
            "name": "-webkit-mask-position-y",
            "status": "nonstandard",
            "syntax": "[ <length-percentage> | top | center | bottom ]#",
            "relevance": 0,
            "browsers": [
                "E18",
                "FF49",
                "S3.1",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-position-y"
                }
            ],
            "description": "The -webkit-mask-position-y CSS property sets the initial vertical position of a mask image."
        },
        {
            "name": "-webkit-mask-repeat-x",
            "status": "nonstandard",
            "syntax": "repeat | no-repeat | space | round",
            "values": [
                {
                    "name": "repeat"
                },
                {
                    "name": "no-repeat"
                },
                {
                    "name": "space"
                },
                {
                    "name": "round"
                }
            ],
            "relevance": 0,
            "browsers": [
                "E79",
                "S5",
                "C3",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-x"
                }
            ],
            "description": "The -webkit-mask-repeat-x property specifies whether and how a mask image is repeated (tiled) horizontally."
        },
        {
            "name": "-webkit-mask-repeat-y",
            "status": "nonstandard",
            "syntax": "repeat | no-repeat | space | round",
            "values": [
                {
                    "name": "repeat"
                },
                {
                    "name": "no-repeat"
                },
                {
                    "name": "space"
                },
                {
                    "name": "round"
                }
            ],
            "relevance": 0,
            "browsers": [
                "E79",
                "S5",
                "C3",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/-webkit-mask-repeat-y"
                }
            ],
            "description": "The -webkit-mask-repeat-y property specifies whether and how a mask image is repeated (tiled) vertically."
        },
        {
            "name": "accent-color",
            "syntax": "auto | <color>",
            "relevance": 50,
            "browsers": [
                "E93",
                "FF92",
                "S15.4",
                "C93",
                "O79"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/accent-color"
                }
            ],
            "description": "Sets the color of the elements accent"
        },
        {
            "name": "align-tracks",
            "status": "experimental",
            "syntax": "[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#",
            "relevance": 50,
            "browsers": [
                "FF77"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/align-tracks"
                }
            ],
            "description": "The align-tracks CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis."
        },
        {
            "name": "animation-composition",
            "syntax": "<single-animation-composition>#",
            "relevance": 50,
            "browsers": [
                "E112",
                "FF115",
                "S16",
                "C112",
                "O98"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-composition"
                }
            ],
            "description": "The composite operation to use when multiple animations affect the same property."
        },
        {
            "name": "animation-range",
            "status": "experimental",
            "syntax": "[ <'animation-range-start'> <'animation-range-end'>? ]#",
            "relevance": 50,
            "browsers": [
                "E115",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-range"
                }
            ],
            "description": "The animation-range CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end."
        },
        {
            "name": "animation-range-end",
            "status": "experimental",
            "syntax": "[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#",
            "relevance": 50,
            "browsers": [
                "E115",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-range-end"
                }
            ],
            "description": "The animation-range-end CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end."
        },
        {
            "name": "animation-range-start",
            "status": "experimental",
            "syntax": "[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#",
            "relevance": 50,
            "browsers": [
                "E115",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-range-start"
                }
            ],
            "description": "The animation-range-start CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start."
        },
        {
            "name": "animation-timeline",
            "status": "experimental",
            "syntax": "<single-animation-timeline>#",
            "relevance": 50,
            "browsers": [
                "E115",
                "FF110",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/animation-timeline"
                }
            ],
            "description": "Specifies the names of one or more @scroll-timeline at-rules to describe the element's scroll animations."
        },
        {
            "name": "appearance",
            "syntax": "none | auto | textfield | menulist-button | <compat-auto>",
            "relevance": 69,
            "browsers": [
                "E84",
                "FF80",
                "S15.4",
                "C84",
                "O70"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/appearance"
                }
            ],
            "description": "Changes the appearance of buttons and other controls to resemble native controls."
        },
        {
            "name": "aspect-ratio",
            "syntax": "auto | <ratio>",
            "relevance": 60,
            "browsers": [
                "E88",
                "FF89",
                "S15",
                "C88",
                "O74"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/aspect-ratio"
                }
            ],
            "description": "The aspect-ratio   CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and some other layout functions."
        },
        {
            "name": "azimuth",
            "status": "obsolete",
            "syntax": "<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards",
            "relevance": 0,
            "description": "In combination with elevation, the azimuth CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage."
        },
        {
            "name": "backdrop-filter",
            "syntax": "none | <filter-function-list>",
            "relevance": 58,
            "browsers": [
                "E17",
                "FF103",
                "S9",
                "C76",
                "O63"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/backdrop-filter"
                }
            ],
            "description": "The backdrop-filter CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything behind the element, to see the effect you must make the element or its background at least partially transparent."
        },
        {
            "name": "border-block",
            "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
            "relevance": 50,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block"
                }
            ],
            "description": "The border-block CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet."
        },
        {
            "name": "border-block-color",
            "syntax": "<'border-top-color'>{1,2}",
            "relevance": 50,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-color"
                }
            ],
            "description": "The border-block-color CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-block-style",
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-style"
                }
            ],
            "description": "The border-block-style CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-block-width",
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-block-width"
                }
            ],
            "description": "The border-block-width CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-end-end-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 53,
            "browsers": [
                "E89",
                "FF66",
                "S15",
                "C89",
                "O75"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius"
                }
            ],
            "description": "The border-end-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on on the element's writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-end-start-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 53,
            "browsers": [
                "E89",
                "FF66",
                "S15",
                "C89",
                "O75"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius"
                }
            ],
            "description": "The border-end-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-inline",
            "syntax": "<'border-top-width'> || <'border-top-style'> || <color>",
            "relevance": 50,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline"
                }
            ],
            "description": "The border-inline CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet."
        },
        {
            "name": "border-inline-color",
            "syntax": "<'border-top-color'>{1,2}",
            "relevance": 50,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-color"
                }
            ],
            "description": "The border-inline-color CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-color and border-bottom-color, or border-right-color and border-left-color property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-inline-style",
            "syntax": "<'border-top-style'>",
            "relevance": 50,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-style"
                }
            ],
            "description": "The border-inline-style CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-style and border-bottom-style, or border-left-style and border-right-style properties depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-inline-width",
            "syntax": "<'border-top-width'>",
            "relevance": 50,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-inline-width"
                }
            ],
            "description": "The border-inline-width CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the border-top-width and border-bottom-width, or border-left-width, and border-right-width property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-start-end-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 53,
            "browsers": [
                "E89",
                "FF66",
                "S15",
                "C89",
                "O75"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius"
                }
            ],
            "description": "The border-start-end-radius CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's writing-mode, direction, and text-orientation."
        },
        {
            "name": "border-start-start-radius",
            "syntax": "<length-percentage>{1,2}",
            "relevance": 53,
            "browsers": [
                "E89",
                "FF66",
                "S15",
                "C89",
                "O75"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius"
                }
            ],
            "description": "The border-start-start-radius CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's writing-mode, direction, and text-orientation."
        },
        {
            "name": "box-align",
            "status": "obsolete",
            "syntax": "start | center | end | baseline | stretch",
            "values": [
                {
                    "name": "start"
                },
                {
                    "name": "center"
                },
                {
                    "name": "end"
                },
                {
                    "name": "baseline"
                },
                {
                    "name": "stretch"
                }
            ],
            "relevance": 0,
            "browsers": [
                "E12",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-align"
                }
            ],
            "description": "The box-align CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box."
        },
        {
            "name": "box-direction",
            "status": "obsolete",
            "syntax": "normal | reverse | inherit",
            "values": [
                {
                    "name": "normal"
                },
                {
                    "name": "reverse"
                },
                {
                    "name": "inherit"
                }
            ],
            "relevance": 0,
            "browsers": [
                "E12",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-direction"
                }
            ],
            "description": "The box-direction CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge)."
        },
        {
            "name": "box-flex",
            "status": "obsolete",
            "syntax": "<number>",
            "relevance": 0,
            "browsers": [
                "E12",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-flex"
                }
            ],
            "description": "The -moz-box-flex and -webkit-box-flex CSS properties specify how a -moz-box or -webkit-box grows to fill the box that contains it, in the direction of the containing box's layout."
        },
        {
            "name": "box-flex-group",
            "status": "obsolete",
            "syntax": "<integer>",
            "relevance": 0,
            "browsers": [
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-flex-group"
                }
            ],
            "description": "The box-flex-group CSS property assigns the flexbox's child elements to a flex group."
        },
        {
            "name": "box-lines",
            "status": "obsolete",
            "syntax": "single | multiple",
            "values": [
                {
                    "name": "single"
                },
                {
                    "name": "multiple"
                }
            ],
            "relevance": 0,
            "browsers": [
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-lines"
                }
            ],
            "description": "The box-lines CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes)."
        },
        {
            "name": "box-ordinal-group",
            "status": "obsolete",
            "syntax": "<integer>",
            "relevance": 0,
            "browsers": [
                "E12",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group"
                }
            ],
            "description": "The box-ordinal-group CSS property assigns the flexbox's child elements to an ordinal group."
        },
        {
            "name": "box-orient",
            "status": "obsolete",
            "syntax": "horizontal | vertical | inline-axis | block-axis | inherit",
            "values": [
                {
                    "name": "horizontal"
                },
                {
                    "name": "vertical"
                },
                {
                    "name": "inline-axis"
                },
                {
                    "name": "block-axis"
                },
                {
                    "name": "inherit"
                }
            ],
            "relevance": 0,
            "browsers": [
                "E12",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-orient"
                }
            ],
            "description": "The box-orient CSS property specifies whether an element lays out its contents horizontally or vertically."
        },
        {
            "name": "box-pack",
            "status": "obsolete",
            "syntax": "start | center | end | justify",
            "values": [
                {
                    "name": "start"
                },
                {
                    "name": "center"
                },
                {
                    "name": "end"
                },
                {
                    "name": "justify"
                }
            ],
            "relevance": 0,
            "browsers": [
                "E12",
                "FF49",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/box-pack"
                }
            ],
            "description": "The -moz-box-pack and -webkit-box-pack CSS properties specify how a -moz-box or -webkit-box packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box."
        },
        {
            "name": "caret",
            "syntax": "<'caret-color'> || <'caret-shape'>",
            "relevance": 50,
            "description": "Shorthand for setting caret-color and caret-shape."
        },
        {
            "name": "caret-shape",
            "syntax": "auto | bar | block | underscore",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "bar"
                },
                {
                    "name": "block"
                },
                {
                    "name": "underscore"
                }
            ],
            "relevance": 50,
            "description": "Specifies the desired shape of the text insertion caret."
        },
        {
            "name": "color-scheme",
            "syntax": "normal | [ light | dark | <custom-ident> ]+ && only?",
            "relevance": 57,
            "browsers": [
                "E81",
                "FF96",
                "S13",
                "C81",
                "O68"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/color-scheme"
                }
            ],
            "description": "The color-scheme CSS property allows an element to indicate which color schemes it can comfortably be rendered in."
        },
        {
            "name": "contain-intrinsic-size",
            "syntax": "[ auto? [ none | <length> ] ]{1,2}",
            "relevance": 50,
            "browsers": [
                "E83",
                "FF107",
                "S17",
                "C83",
                "O69"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size"
                }
            ],
            "description": "Size of an element when the element is subject to size containment."
        },
        {
            "name": "contain-intrinsic-block-size",
            "syntax": "auto? [ none | <length> ]",
            "relevance": 50,
            "browsers": [
                "E95",
                "FF107",
                "S17",
                "C95",
                "O81"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size"
                }
            ],
            "description": "Block size of an element when the element is subject to size containment."
        },
        {
            "name": "contain-intrinsic-height",
            "syntax": "auto? [ none | <length> ]",
            "relevance": 50,
            "browsers": [
                "E95",
                "FF107",
                "S17",
                "C95",
                "O81"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height"
                }
            ],
            "description": "Height of an element when the element is subject to size containment."
        },
        {
            "name": "contain-intrinsic-inline-size",
            "syntax": "auto? [ none | <length> ]",
            "relevance": 50,
            "browsers": [
                "E95",
                "FF107",
                "S17",
                "C95",
                "O81"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size"
                }
            ],
            "description": "Inline size of an element when the element is subject to size containment."
        },
        {
            "name": "contain-intrinsic-width",
            "syntax": "auto? [ none | <length> ]",
            "relevance": 50,
            "browsers": [
                "E95",
                "FF107",
                "S17",
                "C95",
                "O81"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width"
                }
            ],
            "description": "Width of an element when the element is subject to size containment."
        },
        {
            "name": "container",
            "syntax": "<'container-name'> [ / <'container-type'> ]?",
            "relevance": 53,
            "browsers": [
                "E105",
                "FF110",
                "S16",
                "C105",
                "O91"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/container"
                }
            ],
            "description": "The container shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query."
        },
        {
            "name": "container-name",
            "syntax": "none | <custom-ident>+",
            "relevance": 50,
            "browsers": [
                "E105",
                "FF110",
                "S16",
                "C105",
                "O91"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/container-name"
                }
            ],
            "description": "The container-name CSS property specifies a list of query container names used by the @container at-rule in a container query."
        },
        {
            "name": "container-type",
            "syntax": "normal | size | inline-size",
            "values": [
                {
                    "name": "normal"
                },
                {
                    "name": "size"
                },
                {
                    "name": "inline-size"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E105",
                "FF110",
                "S16",
                "C105",
                "O91"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/container-type"
                }
            ],
            "description": "The container-type CSS property is used to define the type of containment used in a container query."
        },
        {
            "name": "content-visibility",
            "syntax": "visible | auto | hidden",
            "values": [
                {
                    "name": "visible"
                },
                {
                    "name": "auto"
                },
                {
                    "name": "hidden"
                }
            ],
            "relevance": 52,
            "browsers": [
                "E85",
                "FFpreview",
                "Spreview",
                "C85",
                "O71"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/content-visibility"
                }
            ],
            "description": "Controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed."
        },
        {
            "name": "counter-set",
            "syntax": "[ <counter-name> <integer>? ]+ | none",
            "relevance": 50,
            "browsers": [
                "E85",
                "FF68",
                "S17.2",
                "C85",
                "O71"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/counter-set"
                }
            ],
            "description": "The counter-set CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element."
        },
        {
            "name": "font-optical-sizing",
            "syntax": "auto | none",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E17",
                "FF62",
                "S11",
                "C79",
                "O66"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing"
                }
            ],
            "description": "The font-optical-sizing CSS property allows developers to control whether browsers render text with slightly differing visual representations to optimize viewing at different sizes, or not. This only works for fonts that have an optical size variation axis."
        },
        {
            "name": "font-palette",
            "syntax": "normal | light | dark | <palette-identifier>",
            "relevance": 50,
            "browsers": [
                "E101",
                "FF107",
                "S15.4",
                "C101",
                "O87"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-palette"
                }
            ],
            "description": "The font-palette CSS property allows specifying one of the many palettes contained in a font that a user agent should use for the font. Users can also override the values in a palette or create a new palette by using the @font-palette-values at-rule."
        },
        {
            "name": "font-variation-settings",
            "atRule": "@font-face",
            "syntax": "normal | [ <string> <number> ]#",
            "relevance": 51,
            "browsers": [
                "E17",
                "FF62",
                "S11",
                "C62",
                "O49"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variation-settings"
                }
            ],
            "description": "The font-variation-settings CSS property provides low-level control over OpenType or TrueType font variations, by specifying the four letter axis names of the features you want to vary, along with their variation values."
        },
        {
            "name": "font-smooth",
            "status": "nonstandard",
            "syntax": "auto | never | always | <absolute-size> | <length>",
            "relevance": 0,
            "browsers": [
                "E79",
                "FF25",
                "S4",
                "C5",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-smooth"
                }
            ],
            "description": "The font-smooth CSS property controls the application of anti-aliasing when fonts are rendered."
        },
        {
            "name": "font-synthesis-position",
            "syntax": "auto | none",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 50,
            "browsers": [
                "FF118"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-position"
                }
            ],
            "description": "The font-synthesis-position CSS property lets you specify whether or not a browser may synthesize the subscript and superscript \"position\" typefaces when they are missing in a font family, while using font-variant-position to set the positions."
        },
        {
            "name": "font-synthesis-small-caps",
            "syntax": "auto | none",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E97",
                "FF111",
                "S16.4",
                "C97",
                "O83"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps"
                }
            ],
            "description": "The font-synthesis-small-caps CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters."
        },
        {
            "name": "font-synthesis-style",
            "syntax": "auto | none",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E97",
                "FF111",
                "S16.4",
                "C97",
                "O83"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style"
                }
            ],
            "description": "The font-synthesis-style CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family."
        },
        {
            "name": "font-synthesis-weight",
            "syntax": "auto | none",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E97",
                "FF111",
                "S16.4",
                "C97",
                "O83"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight"
                }
            ],
            "description": "The font-synthesis-weight CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family."
        },
        {
            "name": "font-variant-emoji",
            "syntax": "normal | text | emoji | unicode",
            "values": [
                {
                    "name": "normal"
                },
                {
                    "name": "text"
                },
                {
                    "name": "emoji"
                },
                {
                    "name": "unicode"
                }
            ],
            "relevance": 50,
            "browsers": [
                "FF108"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji"
                }
            ],
            "description": "The font-variant-emoji CSS property specifies the default presentation style for displaying emojis."
        },
        {
            "name": "forced-color-adjust",
            "syntax": "auto | none",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 57,
            "browsers": [
                "E79",
                "FF113",
                "C89",
                "IE10",
                "O75"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust"
                }
            ],
            "description": "Allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS"
        },
        {
            "name": "gap",
            "syntax": "<'row-gap'> <'column-gap'>?",
            "relevance": 70,
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C57",
                "O44"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/gap"
                }
            ],
            "description": "The gap CSS property is a shorthand property for row-gap and column-gap specifying the gutters between grid rows and columns."
        },
        {
            "name": "hanging-punctuation",
            "syntax": "none | [ first || [ force-end | allow-end ] || last ]",
            "relevance": 50,
            "browsers": [
                "S10"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation"
                }
            ],
            "description": "The hanging-punctuation CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box."
        },
        {
            "name": "hyphenate-character",
            "syntax": "auto | <string>",
            "relevance": 50,
            "browsers": [
                "E106",
                "FF98",
                "S17",
                "C106",
                "O92"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/hyphenate-character"
                }
            ],
            "description": "A hyphenate character used at the end of a line."
        },
        {
            "name": "hyphenate-limit-chars",
            "syntax": "[ auto | <integer> ]{1,3}",
            "relevance": 50,
            "browsers": [
                "E109",
                "C109",
                "O95"
            ],
            "description": "The hyphenate-limit-chars CSS property specifies the minimum word length to allow hyphenation of words as well as the minimum number of characters before and after the hyphen."
        },
        {
            "name": "image-resolution",
            "status": "experimental",
            "syntax": "[ from-image || <resolution> ] && snap?",
            "relevance": 50,
            "description": "The image-resolution property specifies the intrinsic resolution of all raster images used in or on the element. It affects both content images (e.g. replaced elements and generated content) and decorative images (such as background-image). The intrinsic resolution of an image is used to determine the image’s intrinsic dimensions."
        },
        {
            "name": "initial-letter",
            "status": "experimental",
            "syntax": "normal | [ <number> <integer>? ]",
            "relevance": 50,
            "browsers": [
                "E110",
                "S9",
                "C110",
                "O96"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/initial-letter"
                }
            ],
            "description": "The initial-letter CSS property specifies styling for dropped, raised, and sunken initial letters."
        },
        {
            "name": "initial-letter-align",
            "status": "experimental",
            "syntax": "[ auto | alphabetic | hanging | ideographic ]",
            "relevance": 50,
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/initial-letter-align"
                }
            ],
            "description": "The initial-letter-align CSS property specifies the alignment of initial letters within a paragraph."
        },
        {
            "name": "input-security",
            "syntax": "auto | none",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 50,
            "description": "Enables or disables the obscuring a sensitive test input."
        },
        {
            "name": "inset",
            "syntax": "<'top'>{1,4}",
            "relevance": 58,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset"
                }
            ],
            "description": "The inset CSS property defines the logical block and inline start and end offsets of an element, which map to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-block",
            "syntax": "<'top'>{1,2}",
            "relevance": 53,
            "browsers": [
                "E87",
                "FF63",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-block"
                }
            ],
            "description": "The inset-block CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-block-end",
            "syntax": "<'top'>",
            "relevance": 50,
            "browsers": [
                "E87",
                "FF63",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-block-end"
                }
            ],
            "description": "The inset-block-end CSS property defines the logical block end offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-block-start",
            "syntax": "<'top'>",
            "relevance": 53,
            "browsers": [
                "E87",
                "FF63",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-block-start"
                }
            ],
            "description": "The inset-block-start CSS property defines the logical block start offset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-inline",
            "syntax": "<'top'>{1,2}",
            "relevance": 53,
            "browsers": [
                "E87",
                "FF63",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-inline"
                }
            ],
            "description": "The inset-inline CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the top and bottom, or right and left properties depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-inline-end",
            "syntax": "<'top'>",
            "relevance": 51,
            "browsers": [
                "E87",
                "FF63",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-inline-end"
                }
            ],
            "description": "The inset-inline-end CSS property defines the logical inline end inset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "inset-inline-start",
            "syntax": "<'top'>",
            "relevance": 54,
            "browsers": [
                "E87",
                "FF63",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/inset-inline-start"
                }
            ],
            "description": "The inset-inline-start CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the top, right, bottom, or left property depending on the values defined for writing-mode, direction, and text-orientation."
        },
        {
            "name": "justify-tracks",
            "status": "experimental",
            "syntax": "[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#",
            "relevance": 50,
            "browsers": [
                "FF77"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/justify-tracks"
                }
            ],
            "description": "The justify-tracks CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis"
        },
        {
            "name": "line-clamp",
            "status": "experimental",
            "syntax": "none | <integer>",
            "relevance": 50,
            "description": "The line-clamp property allows limiting the contents of a block container to the specified number of lines; remaining content is fragmented away and neither rendered nor measured. Optionally, it also allows inserting content into the last line box to indicate the continuity of truncated/interrupted content."
        },
        {
            "name": "line-height-step",
            "status": "experimental",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "C60",
                "O47"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/line-height-step"
                }
            ],
            "description": "The line-height-step CSS property defines the step units for line box heights. When the step unit is positive, line box heights are rounded up to the closest multiple of the unit. Negative values are invalid."
        },
        {
            "name": "margin-block",
            "syntax": "<'margin-left'>{1,2}",
            "relevance": 54,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-block"
                }
            ],
            "description": "The margin-block CSS property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation."
        },
        {
            "name": "margin-inline",
            "syntax": "<'margin-left'>{1,2}",
            "relevance": 54,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-inline"
                }
            ],
            "description": "The margin-inline CSS property defines the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation."
        },
        {
            "name": "margin-trim",
            "status": "experimental",
            "syntax": "none | in-flow | all",
            "values": [
                {
                    "name": "none"
                },
                {
                    "name": "in-flow"
                },
                {
                    "name": "all"
                }
            ],
            "relevance": 50,
            "browsers": [
                "S16.4"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/margin-trim"
                }
            ],
            "description": "The margin-trim property allows the container to trim the margins of its children where they adjoin the container’s edges."
        },
        {
            "name": "mask",
            "syntax": "<mask-layer>#",
            "relevance": 55,
            "browsers": [
                "E79",
                "FF53",
                "S15.4",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask"
                }
            ],
            "description": "The mask CSS property alters the visibility of an element by either partially or fully hiding it. This is accomplished by either masking or clipping the image at specific points."
        },
        {
            "name": "mask-border",
            "syntax": "<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>",
            "relevance": 50,
            "browsers": [
                "E79",
                "S17.2",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border"
                }
            ],
            "description": "The mask-border CSS property lets you create a mask along the edge of an element's border.\n\nThis property is a shorthand for mask-border-source, mask-border-slice, mask-border-width, mask-border-outset, mask-border-repeat, and mask-border-mode. As with all shorthand properties, any omitted sub-values will be set to their initial value."
        },
        {
            "name": "mask-border-mode",
            "syntax": "luminance | alpha",
            "values": [
                {
                    "name": "luminance"
                },
                {
                    "name": "alpha"
                }
            ],
            "relevance": 50,
            "description": "The mask-border-mode CSS property specifies the blending mode used in a mask border."
        },
        {
            "name": "mask-border-outset",
            "syntax": "[ <length> | <number> ]{1,4}",
            "relevance": 50,
            "browsers": [
                "E79",
                "S17.2",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border-outset"
                }
            ],
            "description": "The mask-border-outset CSS property specifies the distance by which an element's mask border is set out from its border box."
        },
        {
            "name": "mask-border-repeat",
            "syntax": "[ stretch | repeat | round | space ]{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "S17.2",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat"
                }
            ],
            "description": "The mask-border-repeat CSS property defines how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border."
        },
        {
            "name": "mask-border-slice",
            "syntax": "<number-percentage>{1,4} fill?",
            "relevance": 50,
            "browsers": [
                "E79",
                "S17.2",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border-slice"
                }
            ],
            "description": "The mask-border-slice CSS property divides the image specified by mask-border-source into regions. These regions are used to form the components of an element's mask border."
        },
        {
            "name": "mask-border-source",
            "syntax": "none | <image>",
            "relevance": 50,
            "browsers": [
                "E79",
                "S17.2",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border-source"
                }
            ],
            "description": "The mask-border-source CSS property specifies the source image used to create an element's mask border.\n\nThe mask-border-slice property is used to divide the source image into regions, which are then dynamically applied to the final mask border."
        },
        {
            "name": "mask-border-width",
            "syntax": "[ <length-percentage> | <number> | auto ]{1,4}",
            "relevance": 50,
            "browsers": [
                "E79",
                "S17.2",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-border-width"
                }
            ],
            "description": "The mask-border-width CSS property specifies the width of an element's mask border."
        },
        {
            "name": "mask-clip",
            "syntax": "[ <geometry-box> | no-clip ]#",
            "relevance": 50,
            "browsers": [
                "E120",
                "FF53",
                "S15.4",
                "C120",
                "O106"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-clip"
                }
            ],
            "description": "The mask-clip CSS property determines the area, which is affected by a mask. The painted content of an element must be restricted to this area."
        },
        {
            "name": "mask-composite",
            "syntax": "<compositing-operator>#",
            "relevance": 50,
            "browsers": [
                "E18",
                "FF53",
                "S15.4",
                "C120",
                "O106"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/mask-composite"
                }
            ],
            "description": "The mask-composite CSS property represents a compositing operation used on the current mask layer with the mask layers below it."
        },
        {
            "name": "masonry-auto-flow",
            "status": "experimental",
            "syntax": "[ pack | next ] || [ definite-first | ordered ]",
            "relevance": 50,
            "browsers": [
                "Spreview"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow"
                }
            ],
            "description": "The masonry-auto-flow CSS property modifies how items are placed when using masonry in CSS Grid Layout."
        },
        {
            "name": "math-depth",
            "syntax": "auto-add | add(<integer>) | <integer>",
            "relevance": 50,
            "browsers": [
                "E109",
                "FF117",
                "C109",
                "O95"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/math-depth"
                }
            ],
            "description": "Describe a notion of \"depth\" for each element of a mathematical formula, with respect to the top-level container of that formula."
        },
        {
            "name": "math-shift",
            "syntax": "normal | compact",
            "values": [
                {
                    "name": "normal"
                },
                {
                    "name": "compact"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E109",
                "C109",
                "O95"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/math-shift"
                }
            ],
            "description": "Used for positioning superscript during the layout of MathML scripted elements."
        },
        {
            "name": "math-style",
            "syntax": "normal | compact",
            "values": [
                {
                    "name": "normal"
                },
                {
                    "name": "compact"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E109",
                "FF117",
                "S14.1",
                "C109",
                "O95"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/math-style"
                }
            ],
            "description": "The math-style property indicates whether MathML equations should render with normal or compact height."
        },
        {
            "name": "max-lines",
            "status": "experimental",
            "syntax": "none | <integer>",
            "relevance": 50,
            "description": "The max-lines property forces a break after a set number of lines"
        },
        {
            "name": "offset",
            "syntax": "[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF72",
                "S16",
                "C55",
                "O42"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset"
                }
            ],
            "description": "The offset CSS property is a shorthand property for animating an element along a defined path."
        },
        {
            "name": "offset-anchor",
            "syntax": "auto | <position>",
            "relevance": 50,
            "browsers": [
                "E116",
                "FF72",
                "S16",
                "C116",
                "O102"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset-anchor"
                }
            ],
            "description": "Defines an anchor point of the box positioned along the path. The anchor point specifies the point of the box which is to be considered as the point that is moved along the path."
        },
        {
            "name": "offset-distance",
            "syntax": "<length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF72",
                "S16",
                "C55",
                "O42"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset-distance"
                }
            ],
            "description": "The offset-distance CSS property specifies a position along an offset-path."
        },
        {
            "name": "offset-path",
            "syntax": "none | <offset-path> || <coord-box>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF72",
                "S15.4",
                "C55",
                "O45"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset-path"
                }
            ],
            "description": "The offset-path CSS property specifies the offset path where the element gets positioned. The exact element’s position on the offset path is determined by the offset-distance property. An offset path is either a specified path with one or multiple sub-paths or the geometry of a not-styled basic shape. Each shape or path must define an initial position for the computed value of \"0\" for offset-distance and an initial direction which specifies the rotation of the object to the initial position.\n\nIn this specification, a direction (or rotation) of 0 degrees is equivalent to the direction of the positive x-axis in the object’s local coordinate system. In other words, a rotation of 0 degree points to the right side of the UA if the object and its ancestors have no transformation applied."
        },
        {
            "name": "offset-position",
            "syntax": "normal | auto | <position>",
            "relevance": 50,
            "browsers": [
                "E116",
                "FF122",
                "S16",
                "C116",
                "O102"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset-position"
                }
            ],
            "description": "Specifies the initial position of the offset path. If position is specified with static, offset-position would be ignored."
        },
        {
            "name": "offset-rotate",
            "syntax": "[ auto | reverse ] || <angle>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF72",
                "S16",
                "C56",
                "O43"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/offset-rotate"
                }
            ],
            "description": "The offset-rotate CSS property defines the direction of the element while positioning along the offset path."
        },
        {
            "name": "overflow-anchor",
            "syntax": "auto | none",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 52,
            "browsers": [
                "E79",
                "FF66",
                "Spreview",
                "C56",
                "O43"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-anchor"
                }
            ],
            "description": "The overflow-anchor CSS property provides a way to opt out browser scroll anchoring behavior which adjusts scroll position to minimize content shifts."
        },
        {
            "name": "overflow-block",
            "syntax": "visible | hidden | clip | scroll | auto",
            "values": [
                {
                    "name": "visible"
                },
                {
                    "name": "hidden"
                },
                {
                    "name": "clip"
                },
                {
                    "name": "scroll"
                },
                {
                    "name": "auto"
                }
            ],
            "relevance": 50,
            "browsers": [
                "FF69"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-block"
                }
            ],
            "description": "The overflow-block CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the block axis."
        },
        {
            "name": "overflow-clip-box",
            "status": "nonstandard",
            "syntax": "padding-box | content-box",
            "values": [
                {
                    "name": "padding-box"
                },
                {
                    "name": "content-box"
                }
            ],
            "relevance": 0,
            "description": "The overflow-clip-box CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the overflow-clip-box-inline and overflow-clip-box-block properties."
        },
        {
            "name": "overflow-clip-margin",
            "syntax": "<visual-box> || <length [0,∞]>",
            "relevance": 50,
            "browsers": [
                "E90",
                "FF102",
                "C90",
                "O76"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin"
                }
            ],
            "description": "The overflow-clip-margin CSS property determines how far outside its bounds an element with overflow: clip may be painted before being clipped."
        },
        {
            "name": "overflow-inline",
            "syntax": "visible | hidden | clip | scroll | auto",
            "values": [
                {
                    "name": "visible"
                },
                {
                    "name": "hidden"
                },
                {
                    "name": "clip"
                },
                {
                    "name": "scroll"
                },
                {
                    "name": "auto"
                }
            ],
            "relevance": 50,
            "browsers": [
                "FF69"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overflow-inline"
                }
            ],
            "description": "The overflow-inline CSS media feature can be used to test how the output device handles content that overflows the initial containing block along the inline axis."
        },
        {
            "name": "overlay",
            "status": "experimental",
            "syntax": "none | auto",
            "values": [
                {
                    "name": "none"
                },
                {
                    "name": "auto"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E117",
                "C117",
                "O103"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overlay"
                }
            ],
            "description": "The overlay CSS property specifies whether an element appearing in the top layer (for example, a shown popover or modal {{htmlelement(\"dialog\")}} element) is actually rendered in the top layer. This property is only relevant within a list of transition-property values, and only if allow-discrete is set as the transition-behavior."
        },
        {
            "name": "overscroll-behavior",
            "syntax": "[ contain | none | auto ]{1,2}",
            "relevance": 50,
            "browsers": [
                "E18",
                "FF59",
                "S16",
                "C63",
                "O50"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior"
                }
            ],
            "description": "The overscroll-behavior CSS property is shorthand for the overscroll-behavior-x and overscroll-behavior-y properties, which allow you to control the browser's scroll overflow behavior — what happens when the boundary of a scrolling area is reached."
        },
        {
            "name": "overscroll-behavior-block",
            "syntax": "contain | none | auto",
            "values": [
                {
                    "name": "contain"
                },
                {
                    "name": "none"
                },
                {
                    "name": "auto"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E79",
                "FF73",
                "S16",
                "C77",
                "O64"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block"
                }
            ],
            "description": "The overscroll-behavior-block CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached."
        },
        {
            "name": "overscroll-behavior-inline",
            "syntax": "contain | none | auto",
            "values": [
                {
                    "name": "contain"
                },
                {
                    "name": "none"
                },
                {
                    "name": "auto"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E79",
                "FF73",
                "S16",
                "C77",
                "O64"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline"
                }
            ],
            "description": "The overscroll-behavior-inline CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached."
        },
        {
            "name": "overscroll-behavior-x",
            "syntax": "contain | none | auto",
            "values": [
                {
                    "name": "contain"
                },
                {
                    "name": "none"
                },
                {
                    "name": "auto"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E18",
                "FF59",
                "S16",
                "C63",
                "O50"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x"
                }
            ],
            "description": "The overscroll-behavior-x CSS property is allows you to control the browser's scroll overflow behavior — what happens when the boundary of a scrolling area is reached — in the x axis direction."
        },
        {
            "name": "overscroll-behavior-y",
            "syntax": "contain | none | auto",
            "values": [
                {
                    "name": "contain"
                },
                {
                    "name": "none"
                },
                {
                    "name": "auto"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E18",
                "FF59",
                "S16",
                "C63",
                "O50"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y"
                }
            ],
            "description": "The overscroll-behavior-y CSS property is allows you to control the browser's scroll overflow behavior — what happens when the boundary of a scrolling area is reached — in the y axis direction."
        },
        {
            "name": "padding-block",
            "syntax": "<'padding-left'>{1,2}",
            "relevance": 54,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-block"
                }
            ],
            "description": "The padding-block CSS property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation."
        },
        {
            "name": "padding-inline",
            "syntax": "<'padding-left'>{1,2}",
            "relevance": 54,
            "browsers": [
                "E87",
                "FF66",
                "S14.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/padding-inline"
                }
            ],
            "description": "The padding-inline CSS property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation."
        },
        {
            "name": "page",
            "syntax": "auto | <custom-ident>",
            "relevance": 50,
            "browsers": [
                "E85",
                "FF110",
                "S13.1",
                "C85",
                "O71"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/page"
                }
            ],
            "description": "The page CSS property is used to specify the named page, a specific type of page defined by the @page at-rule."
        },
        {
            "name": "place-content",
            "syntax": "<'align-content'> <'justify-content'>?",
            "relevance": 51,
            "browsers": [
                "E79",
                "FF45",
                "S9",
                "C59",
                "O46"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/place-content"
                }
            ],
            "description": "The place-content CSS shorthand property sets both the align-content and justify-content properties."
        },
        {
            "name": "place-items",
            "syntax": "<'align-items'> <'justify-items'>?",
            "relevance": 51,
            "browsers": [
                "E79",
                "FF45",
                "S11",
                "C59",
                "O46"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/place-items"
                }
            ],
            "description": "The CSS place-items shorthand property sets both the align-items and justify-items properties. The first value is the align-items property value, the second the justify-items one. If the second value is not present, the first value is also used for it."
        },
        {
            "name": "place-self",
            "syntax": "<'align-self'> <'justify-self'>?",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF45",
                "S11",
                "C59",
                "O46"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/place-self"
                }
            ],
            "description": "The place-self CSS property is a shorthand property sets both the align-self and justify-self properties. The first value is the align-self property value, the second the justify-self one. If the second value is not present, the first value is also used for it."
        },
        {
            "name": "print-color-adjust",
            "syntax": "economy | exact",
            "values": [
                {
                    "name": "economy"
                },
                {
                    "name": "exact"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E79",
                "FF97",
                "S15.4",
                "C17",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/print-color-adjust"
                }
            ],
            "description": "Defines what optimization the user agent is allowed to do when adjusting the appearance for an output device."
        },
        {
            "name": "rotate",
            "syntax": "none | <angle> | [ x | y | z | <number>{3} ] && <angle>",
            "relevance": 50,
            "browsers": [
                "E104",
                "FF72",
                "S14.1",
                "C104",
                "O90"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/rotate"
                }
            ],
            "description": "The rotate CSS property allows you to specify rotation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
        },
        {
            "name": "row-gap",
            "syntax": "normal | <length-percentage>",
            "relevance": 58,
            "browsers": [
                "E16",
                "FF52",
                "S10.1",
                "C47",
                "O34"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/row-gap"
                }
            ],
            "description": "The row-gap CSS property specifies the gutter between grid rows."
        },
        {
            "name": "ruby-merge",
            "status": "experimental",
            "syntax": "separate | collapse | auto",
            "values": [
                {
                    "name": "separate"
                },
                {
                    "name": "collapse"
                },
                {
                    "name": "auto"
                }
            ],
            "relevance": 50,
            "description": "This property controls how ruby annotation boxes should be rendered when there are more than one in a ruby container box: whether each pair should be kept separate, the annotations should be collapsed and rendered as a group, or the separation should be determined based on the space available."
        },
        {
            "name": "scale",
            "syntax": "none | <number>{1,3}",
            "relevance": 51,
            "browsers": [
                "E104",
                "FF72",
                "S14.1",
                "C104",
                "O90"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scale"
                }
            ],
            "description": "The scale CSS property allows you to specify scale transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
        },
        {
            "name": "scrollbar-color",
            "syntax": "auto | <color>{2}",
            "relevance": 52,
            "browsers": [
                "E121",
                "FF64",
                "C121"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-color"
                }
            ],
            "description": "The scrollbar-color CSS property sets the color of the scrollbar track and thumb."
        },
        {
            "name": "scrollbar-gutter",
            "syntax": "auto | stable && both-edges?",
            "relevance": 50,
            "browsers": [
                "E94",
                "FF97",
                "S17",
                "C94",
                "O80"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter"
                }
            ],
            "description": "The scrollbar-gutter CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed."
        },
        {
            "name": "scrollbar-width",
            "syntax": "auto | thin | none",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "thin"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 63,
            "browsers": [
                "E121",
                "FF64",
                "C121"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scrollbar-width"
                }
            ],
            "description": "The scrollbar-width property allows the author to set the maximum thickness of an element’s scrollbars when they are shown. "
        },
        {
            "name": "scroll-margin",
            "syntax": "<length>{1,4}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF90",
                "S14.1",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin"
                }
            ],
            "description": "The scroll-margin property is a shorthand property which sets all of the scroll-margin longhands, assigning values much like the margin property does for the margin-* longhands."
        },
        {
            "name": "scroll-margin-block",
            "syntax": "<length>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block"
                }
            ],
            "description": "The scroll-margin-block property is a shorthand property which sets the scroll-margin longhands in the block dimension."
        },
        {
            "name": "scroll-margin-block-start",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start"
                }
            ],
            "description": "The scroll-margin-block-start property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-block-end",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end"
                }
            ],
            "description": "The scroll-margin-block-end property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-bottom",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S14.1",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom"
                }
            ],
            "description": "The scroll-margin-bottom property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-inline",
            "syntax": "<length>{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline"
                }
            ],
            "description": "The scroll-margin-inline property is a shorthand property which sets the scroll-margin longhands in the inline dimension."
        },
        {
            "name": "scroll-margin-inline-start",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start"
                }
            ],
            "description": "The scroll-margin-inline-start property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-inline-end",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end"
                }
            ],
            "description": "The scroll-margin-inline-end property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-left",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S14.1",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left"
                }
            ],
            "description": "The scroll-margin-left property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-right",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S14.1",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right"
                }
            ],
            "description": "The scroll-margin-right property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-margin-top",
            "syntax": "<length>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S14.1",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top"
                }
            ],
            "description": "The scroll-margin-top property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container’s coordinate space), then adding the specified outsets."
        },
        {
            "name": "scroll-padding",
            "syntax": "[ auto | <length-percentage> ]{1,4}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S14.1",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding"
                }
            ],
            "description": "The scroll-padding property is a shorthand property which sets all of the scroll-padding longhands, assigning values much like the padding property does for the padding-* longhands."
        },
        {
            "name": "scroll-padding-block",
            "syntax": "[ auto | <length-percentage> ]{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block"
                }
            ],
            "description": "The scroll-padding-block property is a shorthand property which sets the scroll-padding longhands for the block dimension."
        },
        {
            "name": "scroll-padding-block-start",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start"
                }
            ],
            "description": "The scroll-padding-block-start property defines offsets for the start edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-block-end",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end"
                }
            ],
            "description": "The scroll-padding-block-end property defines offsets for the end edge in the block dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-bottom",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S14.1",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom"
                }
            ],
            "description": "The scroll-padding-bottom property defines offsets for the bottom of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-inline",
            "syntax": "[ auto | <length-percentage> ]{1,2}",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline"
                }
            ],
            "description": "The scroll-padding-inline property is a shorthand property which sets the scroll-padding longhands for the inline dimension."
        },
        {
            "name": "scroll-padding-inline-start",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start"
                }
            ],
            "description": "The scroll-padding-inline-start property defines offsets for the start edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-inline-end",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S15",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end"
                }
            ],
            "description": "The scroll-padding-inline-end property defines offsets for the end edge in the inline dimension of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-left",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S14.1",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left"
                }
            ],
            "description": "The scroll-padding-left property defines offsets for the left of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-right",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S14.1",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right"
                }
            ],
            "description": "The scroll-padding-right property defines offsets for the right of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-padding-top",
            "syntax": "auto | <length-percentage>",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF68",
                "S14.1",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top"
                }
            ],
            "description": "The scroll-padding-top property defines offsets for the top of the optimal viewing region of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or simply to put more breathing room between a targeted element and the edges of the scrollport."
        },
        {
            "name": "scroll-snap-align",
            "syntax": "[ none | start | end | center ]{1,2}",
            "relevance": 53,
            "browsers": [
                "E79",
                "FF68",
                "S11",
                "C69",
                "O56"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align"
                }
            ],
            "description": "The scroll-snap-align property specifies the box’s snap position as an alignment of its snap area (as the alignment subject) within its snap container’s snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value."
        },
        {
            "name": "scroll-snap-stop",
            "syntax": "normal | always",
            "values": [
                {
                    "name": "normal"
                },
                {
                    "name": "always"
                }
            ],
            "relevance": 51,
            "browsers": [
                "E79",
                "FF103",
                "S15",
                "C75",
                "O62"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop"
                }
            ],
            "description": "The scroll-snap-stop CSS property defines whether the scroll container is allowed to \"pass over\" possible snap positions."
        },
        {
            "name": "scroll-snap-type-x",
            "status": "obsolete",
            "syntax": "none | mandatory | proximity",
            "values": [
                {
                    "name": "none"
                },
                {
                    "name": "mandatory"
                },
                {
                    "name": "proximity"
                }
            ],
            "relevance": 0,
            "description": "The scroll-snap-type-x CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n\nSpecifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent."
        },
        {
            "name": "scroll-snap-type-y",
            "status": "obsolete",
            "syntax": "none | mandatory | proximity",
            "values": [
                {
                    "name": "none"
                },
                {
                    "name": "mandatory"
                },
                {
                    "name": "proximity"
                }
            ],
            "relevance": 0,
            "description": "The scroll-snap-type-y CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n\nSpecifying any precise animations or physics used to enforce those snap points is not covered by this property but instead left up to the user agent."
        },
        {
            "name": "scroll-timeline",
            "status": "experimental",
            "syntax": "[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#",
            "relevance": 50,
            "browsers": [
                "E115",
                "FF111",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-timeline"
                }
            ],
            "description": "Defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline."
        },
        {
            "name": "scroll-timeline-axis",
            "status": "experimental",
            "syntax": "[ block | inline | x | y ]#",
            "relevance": 50,
            "browsers": [
                "E115",
                "FF111",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis"
                }
            ],
            "description": "Specifies the scrollbar that will be used to provide the timeline for a scroll-timeline animation"
        },
        {
            "name": "scroll-timeline-name",
            "status": "experimental",
            "syntax": "none | <dashed-ident>#",
            "relevance": 50,
            "browsers": [
                "E115",
                "FF111",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name"
                }
            ],
            "description": "Defines a name that can be used to identify an element as the source of a scroll-timeline."
        },
        {
            "name": "text-combine-upright",
            "syntax": "none | all | [ digits <integer>? ]",
            "relevance": 50,
            "browsers": [
                "E79",
                "FF48",
                "S15.4",
                "C48",
                "IE11",
                "O35"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-combine-upright"
                }
            ],
            "description": "The text-combine-upright CSS property specifies the combination of multiple characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n\nThis is used to produce an effect that is known as tate-chū-yoko (縦中横) in Japanese, or as 直書橫向 in Chinese."
        },
        {
            "name": "text-decoration-skip",
            "status": "experimental",
            "syntax": "none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]",
            "relevance": 52,
            "browsers": [
                "S12.1",
                "C57",
                "O44"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip"
                }
            ],
            "description": "The text-decoration-skip CSS property specifies what parts of the element’s content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors."
        },
        {
            "name": "text-decoration-skip-ink",
            "syntax": "auto | all | none",
            "values": [
                {
                    "name": "auto"
                },
                {
                    "name": "all"
                },
                {
                    "name": "none"
                }
            ],
            "relevance": 51,
            "browsers": [
                "E79",
                "FF70",
                "S15.4",
                "C64",
                "O50"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink"
                }
            ],
            "description": "The text-decoration-skip-ink CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders."
        },
        {
            "name": "text-decoration-thickness",
            "syntax": "auto | from-font | <length> | <percentage> ",
            "relevance": 50,
            "browsers": [
                "E89",
                "FF70",
                "S12.1",
                "C89",
                "O75"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness"
                }
            ],
            "description": "The text-decoration-thickness CSS property sets the thickness, or width, of the decoration line that is used on text in an element, such as a line-through, underline, or overline."
        },
        {
            "name": "text-emphasis",
            "syntax": "<'text-emphasis-style'> || <'text-emphasis-color'>",
            "relevance": 50,
            "browsers": [
                "E99",
                "FF46",
                "S7",
                "C99",
                "O85"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis"
                }
            ],
            "description": "The text-emphasis CSS property is a shorthand property for setting text-emphasis-style and text-emphasis-color in one declaration. This property will apply the specified emphasis mark to each character of the element's text, except separator characters, like spaces,  and control characters."
        },
        {
            "name": "text-emphasis-color",
            "syntax": "<color>",
            "relevance": 50,
            "browsers": [
                "E99",
                "FF46",
                "S7",
                "C99",
                "O85"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color"
                }
            ],
            "description": "The text-emphasis-color CSS property defines the color used to draw emphasis marks on text being rendered in the HTML document. This value can also be set and reset using the text-emphasis shorthand."
        },
        {
            "name": "text-emphasis-position",
            "syntax": "[ over | under ] && [ right | left ]",
            "relevance": 50,
            "browsers": [
                "E99",
                "FF46",
                "S7",
                "C99",
                "O85"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position"
                }
            ],
            "description": "The text-emphasis-position CSS property describes where emphasis marks are drawn at. The effect of emphasis marks on the line height is the same as for ruby text: if there isn't enough place, the line height is increased."
        },
        {
            "name": "text-emphasis-style",
            "syntax": "none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>",
            "relevance": 50,
            "browsers": [
                "E99",
                "FF46",
                "S7",
                "C99",
                "O85"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style"
                }
            ],
            "description": "The text-emphasis-style CSS property defines the type of emphasis used. It can also be set, and reset, using the text-emphasis shorthand."
        },
        {
            "name": "text-size-adjust",
            "status": "experimental",
            "syntax": "none | auto | <percentage>",
            "relevance": 57,
            "browsers": [
                "E79",
                "C54",
                "O41"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-size-adjust"
                }
            ],
            "description": "The text-size-adjust CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property."
        },
        {
            "name": "text-underline-offset",
            "syntax": "auto | <length> | <percentage> ",
            "relevance": 51,
            "browsers": [
                "E87",
                "FF70",
                "S12.1",
                "C87",
                "O73"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-underline-offset"
                }
            ],
            "description": "The text-underline-offset CSS property sets the offset distance of an underline text decoration line (applied using text-decoration) from its original position."
        },
        {
            "name": "text-wrap",
            "syntax": "wrap | nowrap | balance | stable | pretty",
            "values": [
                {
                    "name": "wrap"
                },
                {
                    "name": "nowrap"
                },
                {
                    "name": "balance"
                },
                {
                    "name": "stable"
                },
                {
                    "name": "pretty"
                }
            ],
            "relevance": 54,
            "browsers": [
                "E114",
                "FF121",
                "Spreview",
                "C114",
                "O100"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/text-wrap"
                }
            ],
            "description": "The text-wrap CSS property controls how text inside an element is wrapped."
        },
        {
            "name": "timeline-scope",
            "status": "experimental",
            "syntax": "none | <dashed-ident>#",
            "relevance": 50,
            "browsers": [
                "E116",
                "C116",
                "O102"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/timeline-scope"
                }
            ],
            "description": "The timeline-scope CSS property modifies the scope of a named animation timeline."
        },
        {
            "name": "transform-box",
            "syntax": "content-box | border-box | fill-box | stroke-box | view-box",
            "values": [
                {
                    "name": "content-box"
                },
                {
                    "name": "border-box"
                },
                {
                    "name": "fill-box"
                },
                {
                    "name": "stroke-box"
                },
                {
                    "name": "view-box"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E79",
                "FF55",
                "S11",
                "C64",
                "O51"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transform-box"
                }
            ],
            "description": "The transform-box CSS property defines the layout box to which the transform and transform-origin properties relate."
        },
        {
            "name": "transition-behavior",
            "status": "experimental",
            "syntax": "<transition-behavior-value>#",
            "relevance": 50,
            "browsers": [
                "E117",
                "C117",
                "O103"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/transition-behavior"
                }
            ],
            "description": "The transition-behavior CSS property specifies whether transitions will be started for properties whose animation behavior is discrete."
        },
        {
            "name": "translate",
            "syntax": "none | <length-percentage> [ <length-percentage> <length>? ]?",
            "relevance": 50,
            "browsers": [
                "E104",
                "FF72",
                "S14.1",
                "C104",
                "O90"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/translate"
                }
            ],
            "description": "The translate CSS property allows you to specify translation transforms individually and independently of the transform property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the transform value."
        },
        {
            "name": "view-timeline",
            "status": "experimental",
            "syntax": "[ <'view-timeline-name'> <'view-timeline-axis'>? ]#",
            "relevance": 50,
            "browsers": [
                "E115",
                "FF114",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/view-timeline"
                }
            ],
            "description": "The view-timeline CSS shorthand property is used to define a named view progress timeline, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline is set on the subject."
        },
        {
            "name": "view-timeline-axis",
            "status": "experimental",
            "syntax": "[ block | inline | x | y ]#",
            "relevance": 50,
            "browsers": [
                "E115",
                "FF114",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/view-timeline-axis"
                }
            ],
            "description": "The view-timeline-axis CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a named view progress timeline animation, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline-axis is set on the subject. See CSS scroll-driven animations for more details."
        },
        {
            "name": "view-timeline-inset",
            "status": "experimental",
            "syntax": "[ [ auto | <length-percentage> ]{1,2} ]#",
            "relevance": 50,
            "browsers": [
                "E115",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/view-timeline-inset"
                }
            ],
            "description": "The view-timeline-inset CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see Scroll container for more details) in which the subject element of a named view progress timeline animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline."
        },
        {
            "name": "view-timeline-name",
            "status": "experimental",
            "syntax": "none | <dashed-ident>#",
            "relevance": 50,
            "browsers": [
                "E115",
                "FF111",
                "C115",
                "O101"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/view-timeline-name"
                }
            ],
            "description": "The view-timeline-name CSS property is used to define the name of a named view progress timeline, which is progressed through based on the change in visibility of an element (known as the subject) inside a scrollable element (scroller). view-timeline is set on the subject."
        },
        {
            "name": "view-transition-name",
            "status": "experimental",
            "syntax": "none | <custom-ident>",
            "relevance": 50,
            "browsers": [
                "E111",
                "C111",
                "O97"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/view-transition-name"
                }
            ],
            "description": "The view-transition-name CSS property provides the selected element with a distinct identifying name (a custom-ident) and causes it to participate in a separate view transition from the root view transition — or no view transition if the none value is specified."
        },
        {
            "name": "white-space",
            "syntax": "normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ <'white-space-collapse'> || <'text-wrap'> || <'white-space-trim'> ]",
            "relevance": 89,
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5.5",
                "O4"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/white-space"
                }
            ],
            "description": "Specifies how whitespace is handled in an element."
        },
        {
            "name": "white-space-collapse",
            "syntax": "collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces",
            "values": [
                {
                    "name": "collapse"
                },
                {
                    "name": "discard"
                },
                {
                    "name": "preserve"
                },
                {
                    "name": "preserve-breaks"
                },
                {
                    "name": "preserve-spaces"
                },
                {
                    "name": "break-spaces"
                }
            ],
            "relevance": 50,
            "browsers": [
                "E114",
                "Spreview",
                "C114",
                "O100"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/white-space-collapse"
                }
            ],
            "description": "The white-space-collapse CSS property controls how white space inside an element is collapsed."
        },
        {
            "name": "speak-as",
            "atRule": "@counter-style",
            "syntax": "auto | bullets | numbers | words | spell-out | <counter-style-name>",
            "relevance": 50,
            "browsers": [
                "S11.1"
            ],
            "description": "The speak-as descriptor specifies how a counter symbol constructed with a given @counter-style will be represented in the spoken form. For example, an author can specify a counter symbol to be either spoken as its numerical value or just represented with an audio cue."
        },
        {
            "name": "base-palette",
            "atRule": "@font-palette-values",
            "syntax": "light | dark | <integer [0,∞]>",
            "relevance": 50,
            "description": "The base-palette CSS descriptor is used to specify the name or index of a pre-defined palette to be used for creating a new palette. If the specified base-palette does not exist, then the palette defined at index 0 will be used."
        },
        {
            "name": "override-colors",
            "atRule": "@font-palette-values",
            "syntax": "[ <integer [0,∞]> <absolute-color-base> ]#",
            "relevance": 50,
            "description": "The override-colors CSS descriptor is used to override colors in the chosen base-palette for a color font."
        },
        {
            "name": "ascent-override",
            "atRule": "@font-face",
            "status": "experimental",
            "syntax": "normal | <percentage>",
            "relevance": 50,
            "description": "Describes the ascent metric of a font."
        },
        {
            "name": "descent-override",
            "atRule": "@font-face",
            "status": "experimental",
            "syntax": "normal | <percentage>",
            "relevance": 50,
            "description": "Describes the descent metric of a font."
        },
        {
            "name": "font-display",
            "atRule": "@font-face",
            "status": "experimental",
            "syntax": "[ auto | block | swap | fallback | optional ]",
            "relevance": 74,
            "description": "The font-display descriptor determines how a font face is displayed based on whether and when it is downloaded and ready to use."
        },
        {
            "name": "line-gap-override",
            "atRule": "@font-face",
            "status": "experimental",
            "syntax": "normal | <percentage>",
            "relevance": 50,
            "description": "Describes the line-gap metric of a font."
        },
        {
            "name": "size-adjust",
            "atRule": "@font-face",
            "status": "experimental",
            "syntax": "<percentage>",
            "relevance": 50,
            "description": "A multiplier for glyph outlines and metrics of a font."
        },
        {
            "name": "bleed",
            "atRule": "@page",
            "syntax": "auto | <length>",
            "relevance": 50,
            "description": "The bleed CSS at-rule descriptor, used with the @page at-rule, specifies the extent of the page bleed area outside the page box. This property only has effect if crop marks are enabled using the marks property."
        },
        {
            "name": "marks",
            "atRule": "@page",
            "syntax": "none | [ crop || cross ]",
            "relevance": 50,
            "description": "The marks CSS at-rule descriptor, used with the @page at-rule, adds crop and/or cross marks to the presentation of the document. Crop marks indicate where the page should be cut. Cross marks are used to align sheets."
        },
        {
            "name": "page-orientation",
            "atRule": "@page",
            "syntax": "upright | rotate-left | rotate-right ",
            "relevance": 50,
            "description": "The page-orientation CSS descriptor for the @page at-rule controls the rotation of a printed page. It handles the flow of content across pages when the orientation of a page is changed. This behavior differs from the size descriptor in that a user can define the direction in which to rotate the page."
        },
        {
            "name": "syntax",
            "atRule": "@property",
            "status": "experimental",
            "syntax": "<string>",
            "relevance": 50,
            "description": "Specifies the syntax of the custom property registration represented by the @property rule, controlling how the property’s value is parsed at computed value time."
        },
        {
            "name": "inherits",
            "atRule": "@property",
            "status": "experimental",
            "syntax": "true | false",
            "values": [
                {
                    "name": "true"
                },
                {
                    "name": "false"
                }
            ],
            "relevance": 50,
            "description": "Specifies the inherit flag of the custom property registration represented by the @property rule, controlling whether or not the property inherits by default."
        },
        {
            "name": "initial-value",
            "atRule": "@property",
            "status": "experimental",
            "syntax": "<declaration-value>?",
            "relevance": 50,
            "description": "Specifies the initial value of the custom property registration represented by the @property rule, controlling the property’s initial value."
        }
    ],
    "atDirectives": [
        {
            "name": "@charset",
            "browsers": [
                "E12",
                "FF1.5",
                "S4",
                "C2",
                "IE5.5",
                "O9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@charset"
                }
            ],
            "description": "Defines character set of the document."
        },
        {
            "name": "@counter-style",
            "browsers": [
                "E91",
                "FF33",
                "S17",
                "C91",
                "O77"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@counter-style"
                }
            ],
            "description": "Defines a custom counter style."
        },
        {
            "name": "@font-face",
            "browsers": [
                "E12",
                "FF3.5",
                "S3.1",
                "C1",
                "IE4",
                "O10"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@font-face"
                }
            ],
            "description": "Allows for linking to fonts that are automatically activated when needed. This permits authors to work around the limitation of 'web-safe' fonts, allowing for consistent rendering independent of the fonts available in a given user's environment."
        },
        {
            "name": "@font-feature-values",
            "browsers": [
                "E111",
                "FF34",
                "S9.1",
                "C111",
                "O97"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@font-feature-values"
                }
            ],
            "description": "Defines named values for the indices used to select alternate glyphs for a given font family."
        },
        {
            "name": "@import",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE5.5",
                "O3.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@import"
                }
            ],
            "description": "Includes content of another file."
        },
        {
            "name": "@keyframes",
            "browsers": [
                "E12",
                "FF16",
                "S9",
                "C43",
                "IE10",
                "O30"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@keyframes"
                }
            ],
            "description": "Defines set of animation key frames."
        },
        {
            "name": "@layer",
            "browsers": [
                "E99",
                "FF97",
                "S15.4",
                "C99",
                "O85"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@layer"
                }
            ],
            "description": "Declare a cascade layer and the order of precedence in case of multiple cascade layers."
        },
        {
            "name": "@media",
            "browsers": [
                "E12",
                "FF1",
                "S3",
                "C1",
                "IE6",
                "O9.2"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@media"
                }
            ],
            "description": "Defines a stylesheet for a particular media type."
        },
        {
            "name": "@-moz-document",
            "browsers": [
                "FF1.8"
            ],
            "description": "Gecko-specific at-rule that restricts the style rules contained within it based on the URL of the document."
        },
        {
            "name": "@-moz-keyframes",
            "browsers": [
                "FF5"
            ],
            "description": "Defines set of animation key frames."
        },
        {
            "name": "@-ms-viewport",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Specifies the size, zoom factor, and orientation of the viewport."
        },
        {
            "name": "@namespace",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE9",
                "O8"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@namespace"
                }
            ],
            "description": "Declares a prefix and associates it with a namespace name."
        },
        {
            "name": "@-o-keyframes",
            "browsers": [
                "O12"
            ],
            "description": "Defines set of animation key frames."
        },
        {
            "name": "@-o-viewport",
            "browsers": [
                "O11"
            ],
            "description": "Specifies the size, zoom factor, and orientation of the viewport."
        },
        {
            "name": "@page",
            "browsers": [
                "E12",
                "FF19",
                "S13.1",
                "C2",
                "IE8",
                "O6"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@page"
                }
            ],
            "description": "Directive defines various page parameters."
        },
        {
            "name": "@property",
            "browsers": [
                "E85",
                "FFpreview",
                "S16.4",
                "C85",
                "O71"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@property"
                }
            ],
            "description": "Describes the aspect of custom properties and variables."
        },
        {
            "name": "@supports",
            "browsers": [
                "E12",
                "FF22",
                "S9",
                "C28",
                "O12.1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/@supports"
                }
            ],
            "description": "A conditional group rule whose condition tests whether the user agent supports CSS property:value pairs."
        },
        {
            "name": "@-webkit-keyframes",
            "browsers": [
                "C",
                "S4"
            ],
            "description": "Defines set of animation key frames."
        }
    ],
    "pseudoClasses": [
        {
            "name": ":active",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:active"
                }
            ],
            "description": "Applies while an element is being activated by the user. For example, between the times the user presses the mouse button and releases it."
        },
        {
            "name": ":any-link",
            "browsers": [
                "E79",
                "FF50",
                "S9",
                "C65",
                "O52"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:any-link"
                }
            ],
            "description": "Represents an element that acts as the source anchor of a hyperlink. Applies to both visited and unvisited links."
        },
        {
            "name": ":checked",
            "browsers": [
                "E12",
                "FF1",
                "S3.1",
                "C1",
                "IE9",
                "O9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:checked"
                }
            ],
            "description": "Radio and checkbox elements can be toggled by the user. Some menu items are 'checked' when the user selects them. When such elements are toggled 'on' the :checked pseudo-class applies."
        },
        {
            "name": ":corner-present",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Indicates whether or not a scrollbar corner is present."
        },
        {
            "name": ":decrement",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Indicates whether or not the button or track piece will decrement the view's position when used."
        },
        {
            "name": ":default",
            "browsers": [
                "E79",
                "FF4",
                "S5",
                "C10",
                "O10"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:default"
                }
            ],
            "description": "Applies to the one or more UI elements that are the default among a set of similar elements. Typically applies to context menu items, buttons, and select lists/menus."
        },
        {
            "name": ":disabled",
            "browsers": [
                "E12",
                "FF1",
                "S3.1",
                "C1",
                "IE9",
                "O9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:disabled"
                }
            ],
            "description": "Represents user interface elements that are in a disabled state; such elements have a corresponding enabled state."
        },
        {
            "name": ":double-button",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Applies when both buttons are displayed together at the same end of the scrollbar."
        },
        {
            "name": ":empty",
            "browsers": [
                "E12",
                "FF1",
                "S3.1",
                "C1",
                "IE9",
                "O9.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:empty"
                }
            ],
            "description": "Represents an element that has no children at all."
        },
        {
            "name": ":enabled",
            "browsers": [
                "E12",
                "FF1",
                "S3.1",
                "C1",
                "IE9",
                "O9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:enabled"
                }
            ],
            "description": "Represents user interface elements that are in an enabled state; such elements have a corresponding disabled state."
        },
        {
            "name": ":end",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Indicates whether the object is placed after the thumb."
        },
        {
            "name": ":first",
            "browsers": [
                "E12",
                "FF116",
                "S6",
                "C18",
                "IE8",
                "O9.2"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:first"
                }
            ],
            "description": "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."
        },
        {
            "name": ":first-child",
            "browsers": [
                "E12",
                "FF3",
                "S3.1",
                "C4",
                "IE7",
                "O9.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:first-child"
                }
            ],
            "description": "Same as :nth-child(1). Represents an element that is the first child of some other element."
        },
        {
            "name": ":first-of-type",
            "browsers": [
                "E12",
                "FF3.5",
                "S3.1",
                "C1",
                "IE9",
                "O9.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:first-of-type"
                }
            ],
            "description": "Same as :nth-of-type(1). Represents an element that is the first sibling of its type in the list of children of its parent element."
        },
        {
            "name": ":focus",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE8",
                "O7"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:focus"
                }
            ],
            "description": "Applies while an element has the focus (accepts keyboard or mouse events, or other forms of input)."
        },
        {
            "name": ":fullscreen",
            "browsers": [
                "E12",
                "FF64",
                "S16.4",
                "C71",
                "IE11",
                "O58"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:fullscreen"
                }
            ],
            "description": "Matches any element that has its fullscreen flag set."
        },
        {
            "name": ":future",
            "browsers": [
                "E79",
                "S7",
                "C23",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:future"
                }
            ],
            "description": "Represents any element that is defined to occur entirely after a :current element."
        },
        {
            "name": ":horizontal",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to any scrollbar pieces that have a horizontal orientation."
        },
        {
            "name": ":host",
            "browsers": [
                "E79",
                "FF63",
                "S10",
                "C54",
                "O41"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:host"
                }
            ],
            "description": "When evaluated in the context of a shadow tree, matches the shadow tree's host element."
        },
        {
            "name": ":host()",
            "browsers": [
                "C35",
                "O22"
            ],
            "description": "When evaluated in the context of a shadow tree, it matches the shadow tree's host element if the host element, in its normal context, matches the selector argument."
        },
        {
            "name": ":host-context()",
            "browsers": [
                "C35",
                "O22"
            ],
            "description": "Tests whether there is an ancestor, outside the shadow tree, which matches a particular selector."
        },
        {
            "name": ":hover",
            "browsers": [
                "E12",
                "FF1",
                "S2",
                "C1",
                "IE4",
                "O4"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:hover"
                }
            ],
            "description": "Applies while the user designates an element with a pointing device, but does not necessarily activate it. For example, a visual user agent could apply this pseudo-class when the cursor (mouse pointer) hovers over a box generated by the element."
        },
        {
            "name": ":increment",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Indicates whether or not the button or track piece will increment the view's position when used."
        },
        {
            "name": ":indeterminate",
            "browsers": [
                "E12",
                "FF2",
                "S3",
                "C1",
                "IE10",
                "O9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:indeterminate"
                }
            ],
            "description": "Applies to UI elements whose value is in an indeterminate state."
        },
        {
            "name": ":in-range",
            "browsers": [
                "E13",
                "FF29",
                "S5.1",
                "C10",
                "O11"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:in-range"
                }
            ],
            "description": "Used in conjunction with the min and max attributes, whether on a range input, a number field, or any other types that accept those attributes."
        },
        {
            "name": ":invalid",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C10",
                "IE10",
                "O10"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:invalid"
                }
            ],
            "description": "An element is :valid or :invalid when it is, respectively, valid or invalid with respect to data validity semantics defined by a different specification."
        },
        {
            "name": ":lang()",
            "browsers": [
                "E",
                "C",
                "FF1",
                "IE8",
                "O8",
                "S3"
            ],
            "description": "Represents an element that is in language specified."
        },
        {
            "name": ":last-child",
            "browsers": [
                "E12",
                "FF1",
                "S3.1",
                "C1",
                "IE9",
                "O9.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:last-child"
                }
            ],
            "description": "Same as :nth-last-child(1). Represents an element that is the last child of some other element."
        },
        {
            "name": ":last-of-type",
            "browsers": [
                "E12",
                "FF3.5",
                "S3.1",
                "C1",
                "IE9",
                "O9.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:last-of-type"
                }
            ],
            "description": "Same as :nth-last-of-type(1). Represents an element that is the last sibling of its type in the list of children of its parent element."
        },
        {
            "name": ":left",
            "browsers": [
                "E12",
                "S5",
                "C6",
                "IE8",
                "O9.2"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:left"
                }
            ],
            "description": "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."
        },
        {
            "name": ":link",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE3",
                "O3.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:link"
                }
            ],
            "description": "Applies to links that have not yet been visited."
        },
        {
            "name": ":matches()",
            "browsers": [
                "S9"
            ],
            "description": "Takes a selector list as its argument. It represents an element that is represented by its argument."
        },
        {
            "name": ":-moz-any()",
            "browsers": [
                "FF4"
            ],
            "description": "Represents an element that is represented by the selector list passed as its argument. Standardized as :matches()."
        },
        {
            "name": ":-moz-any-link",
            "browsers": [
                "FF1"
            ],
            "description": "Represents an element that acts as the source anchor of a hyperlink. Applies to both visited and unvisited links."
        },
        {
            "name": ":-moz-broken",
            "browsers": [
                "FF3"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-broken"
                }
            ],
            "description": "Non-standard. Matches elements representing broken images."
        },
        {
            "name": ":-moz-drag-over",
            "browsers": [
                "FF1"
            ],
            "description": "Non-standard. Matches elements when a drag-over event applies to it."
        },
        {
            "name": ":-moz-first-node",
            "browsers": [
                "FF72"
            ],
            "description": "Non-standard. Represents an element that is the first child node of some other element."
        },
        {
            "name": ":-moz-focusring",
            "browsers": [
                "FF4"
            ],
            "description": "Non-standard. Matches an element that has focus and focus ring drawing is enabled in the browser."
        },
        {
            "name": ":-moz-full-screen",
            "browsers": [
                "FF9"
            ],
            "description": "Matches any element that has its fullscreen flag set. Standardized as :fullscreen."
        },
        {
            "name": ":-moz-last-node",
            "browsers": [
                "FF72"
            ],
            "description": "Non-standard. Represents an element that is the last child node of some other element."
        },
        {
            "name": ":-moz-loading",
            "browsers": [
                "FF3"
            ],
            "description": "Non-standard. Matches elements, such as images, that haven't started loading yet."
        },
        {
            "name": ":-moz-only-whitespace",
            "browsers": [
                "FF1"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-only-whitespace"
                }
            ],
            "description": "The same as :empty, except that it additionally matches elements that only contain code points affected by whitespace processing. Standardized as :blank."
        },
        {
            "name": ":-moz-placeholder",
            "browsers": [
                "FF4"
            ],
            "description": "Deprecated. Represents placeholder text in an input field. Use ::-moz-placeholder for Firefox 19+."
        },
        {
            "name": ":-moz-submit-invalid",
            "browsers": [
                "FF88"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-submit-invalid"
                }
            ],
            "description": "Non-standard. Represents any submit button when the contents of the associated form are not valid."
        },
        {
            "name": ":-moz-suppressed",
            "browsers": [
                "FF3"
            ],
            "description": "Non-standard. Matches elements representing images that have been blocked from loading."
        },
        {
            "name": ":-moz-ui-invalid",
            "browsers": [
                "FF4"
            ],
            "description": "Non-standard. Represents any validated form element whose value isn't valid "
        },
        {
            "name": ":-moz-ui-valid",
            "browsers": [
                "FF4"
            ],
            "description": "Non-standard. Represents any validated form element whose value is valid "
        },
        {
            "name": ":-moz-user-disabled",
            "browsers": [
                "FF3"
            ],
            "description": "Non-standard. Matches elements representing images that have been disabled due to the user's preferences."
        },
        {
            "name": ":-moz-window-inactive",
            "browsers": [
                "FF4"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:-moz-window-inactive"
                }
            ],
            "description": "Non-standard. Matches elements in an inactive window."
        },
        {
            "name": ":-ms-fullscreen",
            "browsers": [
                "IE11"
            ],
            "description": "Matches any element that has its fullscreen flag set."
        },
        {
            "name": ":-ms-input-placeholder",
            "browsers": [
                "IE10"
            ],
            "description": "Represents placeholder text in an input field. Note: for Edge use the pseudo-element ::-ms-input-placeholder. Standardized as ::placeholder."
        },
        {
            "name": ":-ms-keyboard-active",
            "browsers": [
                "IE10"
            ],
            "description": "Windows Store apps only. Applies one or more styles to an element when it has focus and the user presses the space bar."
        },
        {
            "name": ":-ms-lang()",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents an element that is in the language specified. Accepts a comma separated list of language tokens."
        },
        {
            "name": ":no-button",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to track pieces. Applies when there is no button at that end of the track."
        },
        {
            "name": ":not()",
            "browsers": [
                "E",
                "C",
                "FF1",
                "IE9",
                "O9.5",
                "S2"
            ],
            "description": "The negation pseudo-class, :not(X), is a functional notation taking a simple selector (excluding the negation pseudo-class itself) as an argument. It represents an element that is not represented by its argument."
        },
        {
            "name": ":nth-child()",
            "browsers": [
                "E",
                "C",
                "FF3.5",
                "IE9",
                "O9.5",
                "S3.1"
            ],
            "description": "Represents an element that has an+b-1 siblings before it in the document tree, for any positive integer or zero value of n, and has a parent element."
        },
        {
            "name": ":nth-last-child()",
            "browsers": [
                "E",
                "C",
                "FF3.5",
                "IE9",
                "O9.5",
                "S3.1"
            ],
            "description": "Represents an element that has an+b-1 siblings after it in the document tree, for any positive integer or zero value of n, and has a parent element."
        },
        {
            "name": ":nth-last-of-type()",
            "browsers": [
                "E",
                "C",
                "FF3.5",
                "IE9",
                "O9.5",
                "S3.1"
            ],
            "description": "Represents an element that has an+b-1 siblings with the same expanded element name after it in the document tree, for any zero or positive integer value of n, and has a parent element."
        },
        {
            "name": ":nth-of-type()",
            "browsers": [
                "E",
                "C",
                "FF3.5",
                "IE9",
                "O9.5",
                "S3.1"
            ],
            "description": "Represents an element that has an+b-1 siblings with the same expanded element name before it in the document tree, for any zero or positive integer value of n, and has a parent element."
        },
        {
            "name": ":only-child",
            "browsers": [
                "E12",
                "FF1.5",
                "S3.1",
                "C2",
                "IE9",
                "O9.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:only-child"
                }
            ],
            "description": "Represents an element that has a parent element and whose parent element has no other element children. Same as :first-child:last-child or :nth-child(1):nth-last-child(1), but with a lower specificity."
        },
        {
            "name": ":only-of-type",
            "browsers": [
                "E12",
                "FF3.5",
                "S3.1",
                "C1",
                "IE9",
                "O9.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:only-of-type"
                }
            ],
            "description": "Matches every element that is the only child of its type, of its parent. Same as :first-of-type:last-of-type or :nth-of-type(1):nth-last-of-type(1), but with a lower specificity."
        },
        {
            "name": ":optional",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C10",
                "IE10",
                "O10"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:optional"
                }
            ],
            "description": "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to is submitted. Elements that are not form elements are neither required nor optional."
        },
        {
            "name": ":out-of-range",
            "browsers": [
                "E13",
                "FF29",
                "S5.1",
                "C10",
                "O11"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:out-of-range"
                }
            ],
            "description": "Used in conjunction with the min and max attributes, whether on a range input, a number field, or any other types that accept those attributes."
        },
        {
            "name": ":past",
            "browsers": [
                "E79",
                "S7",
                "C23",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:past"
                }
            ],
            "description": "Represents any element that is defined to occur entirely prior to a :current element."
        },
        {
            "name": ":read-only",
            "browsers": [
                "E13",
                "FF78",
                "S4",
                "C1",
                "O9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:read-only"
                }
            ],
            "description": "An element whose contents are not user-alterable is :read-only. However, elements whose contents are user-alterable (such as text input fields) are considered to be in a :read-write state. In typical documents, most elements are :read-only."
        },
        {
            "name": ":read-write",
            "browsers": [
                "E13",
                "FF78",
                "S4",
                "C1",
                "O9"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:read-write"
                }
            ],
            "description": "An element whose contents are not user-alterable is :read-only. However, elements whose contents are user-alterable (such as text input fields) are considered to be in a :read-write state. In typical documents, most elements are :read-only."
        },
        {
            "name": ":required",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C10",
                "IE10",
                "O10"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:required"
                }
            ],
            "description": "A form element is :required or :optional if a value for it is, respectively, required or optional before the form it belongs to is submitted. Elements that are not form elements are neither required nor optional."
        },
        {
            "name": ":right",
            "browsers": [
                "E12",
                "S5",
                "C6",
                "IE8",
                "O9.2"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:right"
                }
            ],
            "description": "When printing double-sided documents, the page boxes on left and right pages may be different. This can be expressed through CSS pseudo-classes defined in the  page context."
        },
        {
            "name": ":root",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE9",
                "O9.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:root"
                }
            ],
            "description": "Represents an element that is the root of the document. In HTML 4, this is always the HTML element."
        },
        {
            "name": ":scope",
            "browsers": [
                "E79",
                "FF32",
                "S7",
                "C27",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:scope"
                }
            ],
            "description": "Represents any element that is in the contextual reference element set."
        },
        {
            "name": ":single-button",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Applies when both buttons are displayed separately at either end of the scrollbar."
        },
        {
            "name": ":start",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to buttons and track pieces. Indicates whether the object is placed before the thumb."
        },
        {
            "name": ":target",
            "browsers": [
                "E12",
                "FF1",
                "S1.3",
                "C1",
                "IE9",
                "O9.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:target"
                }
            ],
            "description": "Some URIs refer to a location within a resource. This kind of URI ends with a 'number sign' (#) followed by an anchor identifier (called the fragment identifier)."
        },
        {
            "name": ":valid",
            "browsers": [
                "E12",
                "FF4",
                "S5",
                "C10",
                "IE10",
                "O10"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:valid"
                }
            ],
            "description": "An element is :valid or :invalid when it is, respectively, valid or invalid with respect to data validity semantics defined by a different specification."
        },
        {
            "name": ":vertical",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Non-standard. Applies to any scrollbar pieces that have a vertical orientation."
        },
        {
            "name": ":visited",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE4",
                "O3.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:visited"
                }
            ],
            "description": "Applies once the link has been visited by the user."
        },
        {
            "name": ":-webkit-any()",
            "browsers": [
                "C",
                "S5"
            ],
            "description": "Represents an element that is represented by the selector list passed as its argument. Standardized as :matches()."
        },
        {
            "name": ":-webkit-full-screen",
            "browsers": [
                "C",
                "S6"
            ],
            "description": "Matches any element that has its fullscreen flag set. Standardized as :fullscreen."
        },
        {
            "name": ":window-inactive",
            "browsers": [
                "C",
                "S3"
            ],
            "description": "Non-standard. Applies to all scrollbar pieces. Indicates whether or not the window containing the scrollbar is currently active."
        },
        {
            "name": ":current",
            "status": "experimental",
            "description": "The :current CSS pseudo-class selector is a time-dimensional pseudo-class that represents the element, or an ancestor of the element, that is currently being displayed"
        },
        {
            "name": ":blank",
            "status": "experimental",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:blank"
                }
            ],
            "description": "The :blank CSS pseudo-class selects empty user input elements (eg. <input> or <textarea>)."
        },
        {
            "name": ":defined",
            "status": "experimental",
            "browsers": [
                "E79",
                "FF63",
                "S10",
                "C54",
                "O41"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:defined"
                }
            ],
            "description": "The :defined CSS pseudo-class represents any element that has been defined. This includes any standard element built in to the browser, and custom elements that have been successfully defined (i.e. with the CustomElementRegistry.define() method)."
        },
        {
            "name": ":dir",
            "browsers": [
                "E120",
                "FF49",
                "S16.4",
                "C120",
                "O106"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:dir"
                }
            ],
            "description": "The :dir() CSS pseudo-class matches elements based on the directionality of the text contained in them."
        },
        {
            "name": ":focus-visible",
            "browsers": [
                "E86",
                "FF85",
                "S15.4",
                "C86",
                "O72"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:focus-visible"
                }
            ],
            "description": "The :focus-visible pseudo-class applies while an element matches the :focus pseudo-class and the UA determines via heuristics that the focus should be made evident on the element."
        },
        {
            "name": ":focus-within",
            "browsers": [
                "E79",
                "FF52",
                "S10.1",
                "C60",
                "O47"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:focus-within"
                }
            ],
            "description": "The :focus-within pseudo-class applies to any element for which the :focus pseudo class applies as well as to an element whose descendant in the flat tree (including non-element nodes, such as text nodes) matches the conditions for matching :focus."
        },
        {
            "name": ":has",
            "status": "experimental",
            "browsers": [
                "E105",
                "FF121",
                "S15.4",
                "C105",
                "O91"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:has"
                }
            ],
            "description": ":The :has() CSS pseudo-class represents an element if any of the selectors passed as parameters (relative to the :scope of the given element), match at least one element."
        },
        {
            "name": ":is",
            "status": "experimental",
            "browsers": [
                "E88",
                "FF78",
                "S14",
                "C88",
                "O74"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:is"
                }
            ],
            "description": "The :is() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list. This is useful for writing large selectors in a more compact form."
        },
        {
            "name": ":local-link",
            "status": "experimental",
            "description": "The :local-link CSS pseudo-class represents an link to the same document"
        },
        {
            "name": ":paused",
            "status": "experimental",
            "browsers": [
                "S15.4"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:paused"
                }
            ],
            "description": "The :paused CSS pseudo-class selector is a resource state pseudo-class that will match an audio, video, or similar resource that is capable of being “played” or “paused”, when that element is “paused”."
        },
        {
            "name": ":placeholder-shown",
            "status": "experimental",
            "browsers": [
                "E79",
                "FF51",
                "S9",
                "C47",
                "IE10",
                "O34"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:placeholder-shown"
                }
            ],
            "description": "The :placeholder-shown CSS pseudo-class represents any <input> or <textarea> element that is currently displaying placeholder text."
        },
        {
            "name": ":playing",
            "status": "experimental",
            "browsers": [
                "S15.4"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:playing"
                }
            ],
            "description": "The :playing CSS pseudo-class selector is a resource state pseudo-class that will match an audio, video, or similar resource that is capable of being “played” or “paused”, when that element is “playing”. "
        },
        {
            "name": ":target-within",
            "status": "experimental",
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:target-within"
                }
            ],
            "description": "The :target-within CSS pseudo-class represents an element that is a target element or contains an element that is a target. A target element is a unique element with an id matching the URL's fragment."
        },
        {
            "name": ":user-invalid",
            "status": "experimental",
            "browsers": [
                "E119",
                "FF88",
                "S16.5",
                "C119",
                "O105"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:user-invalid"
                }
            ],
            "description": "The :user-invalid CSS pseudo-class represents any validated form element whose value isn't valid based on their validation constraints, after the user has interacted with it."
        },
        {
            "name": ":user-valid",
            "status": "experimental",
            "browsers": [
                "E119",
                "FF88",
                "S16.5",
                "C119",
                "O105"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:user-valid"
                }
            ],
            "description": "The :user-valid CSS pseudo-class represents any validated form element whose value validates correctly based on its validation constraints. However, unlike :valid it only matches once the user has interacted with it."
        },
        {
            "name": ":where",
            "status": "experimental",
            "browsers": [
                "E88",
                "FF78",
                "S14",
                "C88",
                "O74"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:where"
                }
            ],
            "description": "The :where() CSS pseudo-class function takes a selector list as its argument, and selects any element that can be selected by one of the selectors in that list."
        },
        {
            "name": ":picture-in-picture",
            "status": "experimental",
            "browsers": [
                "E110",
                "S13.1",
                "C110",
                "O96"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/:picture-in-picture"
                }
            ],
            "description": "The :picture-in-picture CSS pseudo-class matches the element which is currently in picture-in-picture mode."
        }
    ],
    "pseudoElements": [
        {
            "name": "::after",
            "browsers": [
                "E12",
                "FF1.5",
                "S4",
                "C1",
                "IE9",
                "O7"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::after"
                }
            ],
            "description": "Represents a styleable child pseudo-element immediately after the originating element's actual content."
        },
        {
            "name": "::backdrop",
            "browsers": [
                "E79",
                "FF47",
                "S15.4",
                "C37",
                "IE11",
                "O24"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::backdrop"
                }
            ],
            "description": "Used to create a backdrop that hides the underlying document for an element in a top layer (such as an element that is displayed fullscreen)."
        },
        {
            "name": "::before",
            "browsers": [
                "E12",
                "FF1.5",
                "S4",
                "C1",
                "IE9",
                "O7"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::before"
                }
            ],
            "description": "Represents a styleable child pseudo-element immediately before the originating element's actual content."
        },
        {
            "name": "::content",
            "browsers": [
                "C35",
                "O22"
            ],
            "description": "Deprecated. Matches the distribution list itself, on elements that have one. Use ::slotted for forward compatibility."
        },
        {
            "name": "::cue",
            "browsers": [
                "E79",
                "FF55",
                "S7",
                "C26",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::cue"
                }
            ]
        },
        {
            "name": "::cue()",
            "browsers": [
                "C",
                "O16",
                "S6"
            ]
        },
        {
            "name": "::cue-region",
            "browsers": [
                "C",
                "O16",
                "S6"
            ]
        },
        {
            "name": "::cue-region()",
            "browsers": [
                "C",
                "O16",
                "S6"
            ]
        },
        {
            "name": "::first-letter",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE9",
                "O7"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::first-letter"
                }
            ],
            "description": "Represents the first letter of an element, if it is not preceded by any other content (such as images or inline tables) on its line."
        },
        {
            "name": "::first-line",
            "browsers": [
                "E12",
                "FF1",
                "S1",
                "C1",
                "IE9",
                "O7"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::first-line"
                }
            ],
            "description": "Describes the contents of the first formatted line of its originating element."
        },
        {
            "name": "::-moz-focus-inner",
            "browsers": [
                "FF72"
            ]
        },
        {
            "name": "::-moz-focus-outer",
            "browsers": [
                "FF4"
            ]
        },
        {
            "name": "::-moz-list-bullet",
            "browsers": [
                "FF72"
            ],
            "description": "Used to style the bullet of a list element. Similar to the standardized ::marker."
        },
        {
            "name": "::-moz-list-number",
            "browsers": [
                "FF72"
            ],
            "description": "Used to style the numbers of a list element. Similar to the standardized ::marker."
        },
        {
            "name": "::-moz-placeholder",
            "browsers": [
                "FF19"
            ],
            "description": "Represents placeholder text in an input field"
        },
        {
            "name": "::-moz-progress-bar",
            "browsers": [
                "FF72"
            ],
            "description": "Represents the bar portion of a progress bar."
        },
        {
            "name": "::-moz-selection",
            "browsers": [
                "FF1"
            ],
            "description": "Represents the portion of a document that has been highlighted by the user."
        },
        {
            "name": "::-ms-backdrop",
            "browsers": [
                "IE11"
            ],
            "description": "Used to create a backdrop that hides the underlying document for an element in a top layer (such as an element that is displayed fullscreen)."
        },
        {
            "name": "::-ms-browse",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the browse button of an input type=file control."
        },
        {
            "name": "::-ms-check",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the check of a checkbox or radio button input control."
        },
        {
            "name": "::-ms-clear",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the clear button of a text input control"
        },
        {
            "name": "::-ms-expand",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the drop-down button of a select control."
        },
        {
            "name": "::-ms-fill",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the bar portion of a progress bar."
        },
        {
            "name": "::-ms-fill-lower",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the portion of the slider track from its smallest value up to the value currently selected by the thumb. In a left-to-right layout, this is the portion of the slider track to the left of the thumb."
        },
        {
            "name": "::-ms-fill-upper",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the portion of the slider track from the value currently selected by the thumb up to the slider's largest value. In a left-to-right layout, this is the portion of the slider track to the right of the thumb."
        },
        {
            "name": "::-ms-reveal",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the password reveal button of an input type=password control."
        },
        {
            "name": "::-ms-thumb",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the portion of range input control (also known as a slider control) that the user drags."
        },
        {
            "name": "::-ms-ticks-after",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the tick marks of a slider that begin just after the thumb and continue up to the slider's largest value. In a left-to-right layout, these are the ticks to the right of the thumb."
        },
        {
            "name": "::-ms-ticks-before",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the tick marks of a slider that represent its smallest values up to the value currently selected by the thumb. In a left-to-right layout, these are the ticks to the left of the thumb."
        },
        {
            "name": "::-ms-tooltip",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the tooltip of a slider (input type=range)."
        },
        {
            "name": "::-ms-track",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the track of a slider."
        },
        {
            "name": "::-ms-value",
            "browsers": [
                "E",
                "IE10"
            ],
            "description": "Represents the content of a text or password input control, or a select control."
        },
        {
            "name": "::selection",
            "browsers": [
                "E12",
                "FF62",
                "S1.1",
                "C1",
                "IE9",
                "O9.5"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::selection"
                }
            ],
            "description": "Represents the portion of a document that has been highlighted by the user."
        },
        {
            "name": "::shadow",
            "browsers": [
                "C35",
                "O22"
            ],
            "description": "Matches the shadow root if an element has a shadow tree."
        },
        {
            "name": "::-webkit-file-upload-button",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-inner-spin-button",
            "browsers": [
                "E79",
                "S5",
                "C6",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-inner-spin-button"
                }
            ]
        },
        {
            "name": "::-webkit-input-placeholder",
            "browsers": [
                "C",
                "S4"
            ]
        },
        {
            "name": "::-webkit-keygen-select",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-meter-bar",
            "browsers": [
                "E79",
                "S5.1",
                "C12",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-bar"
                }
            ]
        },
        {
            "name": "::-webkit-meter-even-less-good-value",
            "browsers": [
                "E79",
                "S5.1",
                "C12",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-even-less-good-value"
                }
            ]
        },
        {
            "name": "::-webkit-meter-optimum-value",
            "browsers": [
                "E79",
                "S5.1",
                "C12",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-optimum-value"
                }
            ]
        },
        {
            "name": "::-webkit-meter-suboptimum-value",
            "browsers": [
                "E79",
                "S5.1",
                "C12",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-meter-suboptimum-value"
                }
            ]
        },
        {
            "name": "::-webkit-outer-spin-button",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-progress-bar",
            "browsers": [
                "E79",
                "S7",
                "C25",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-bar"
                }
            ]
        },
        {
            "name": "::-webkit-progress-inner-element",
            "browsers": [
                "E79",
                "S7",
                "C23",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-inner-element"
                }
            ]
        },
        {
            "name": "::-webkit-progress-value",
            "browsers": [
                "E79",
                "S7",
                "C25",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-progress-value"
                }
            ]
        },
        {
            "name": "::-webkit-resizer",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar-button",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar-corner",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar-thumb",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar-track",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-scrollbar-track-piece",
            "browsers": [
                "E79",
                "S4",
                "C2",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-scrollbar"
                }
            ]
        },
        {
            "name": "::-webkit-search-cancel-button",
            "browsers": [
                "E79",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-search-cancel-button"
                }
            ]
        },
        {
            "name": "::-webkit-search-decoration",
            "browsers": [
                "C",
                "S4"
            ]
        },
        {
            "name": "::-webkit-search-results-button",
            "browsers": [
                "E79",
                "S3",
                "C1",
                "O15"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-webkit-search-results-button"
                }
            ]
        },
        {
            "name": "::-webkit-search-results-decoration",
            "browsers": [
                "C",
                "S4"
            ]
        },
        {
            "name": "::-webkit-slider-runnable-track",
            "browsers": [
                "E83",
                "C83",
                "O69"
            ]
        },
        {
            "name": "::-webkit-slider-thumb",
            "browsers": [
                "E83",
                "C83",
                "O69"
            ]
        },
        {
            "name": "::-webkit-textfield-decoration-container",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble-arrow",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble-arrow-clipper",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble-heading",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble-message",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::-webkit-validation-bubble-text-block",
            "browsers": [
                "C",
                "O",
                "S6"
            ]
        },
        {
            "name": "::target-text",
            "status": "experimental",
            "browsers": [
                "E89",
                "C89",
                "O75"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::target-text"
                }
            ],
            "description": "The ::target-text CSS pseudo-element represents the text that has been scrolled to if the browser supports scroll-to-text fragments. It allows authors to choose how to highlight that section of text."
        },
        {
            "name": "::-moz-range-progress",
            "status": "nonstandard",
            "browsers": [
                "FF22"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-progress"
                }
            ],
            "description": "The ::-moz-range-progress CSS pseudo-element is a Mozilla extension that represents the lower portion of the track (i.e., groove) in which the indicator slides in an <input> of type=\"range\". This portion corresponds to values lower than the value currently selected by the thumb (i.e., virtual knob)."
        },
        {
            "name": "::-moz-range-thumb",
            "status": "nonstandard",
            "browsers": [
                "FF21"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-thumb"
                }
            ],
            "description": "The ::-moz-range-thumb CSS pseudo-element is a Mozilla extension that represents the thumb (i.e., virtual knob) of an <input> of type=\"range\". The user can move the thumb along the input's track to alter its numerical value."
        },
        {
            "name": "::-moz-range-track",
            "status": "nonstandard",
            "browsers": [
                "FF21"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::-moz-range-track"
                }
            ],
            "description": "The ::-moz-range-track CSS pseudo-element is a Mozilla extension that represents the track (i.e., groove) in which the indicator slides in an <input> of type=\"range\"."
        },
        {
            "name": "::-webkit-progress-inner-value",
            "status": "nonstandard",
            "description": "The ::-webkit-progress-value CSS pseudo-element represents the filled-in portion of the bar of a <progress> element. It is a child of the ::-webkit-progress-bar pseudo-element.\n\nIn order to let ::-webkit-progress-value take effect, -webkit-appearance needs to be set to none on the <progress> element."
        },
        {
            "name": "::grammar-error",
            "status": "experimental",
            "browsers": [
                "E121",
                "Spreview",
                "C121"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::grammar-error"
                }
            ],
            "description": "The ::grammar-error CSS pseudo-element represents a text segment which the user agent has flagged as grammatically incorrect."
        },
        {
            "name": "::marker",
            "browsers": [
                "E86",
                "FF68",
                "S11.1",
                "C86",
                "O72"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::marker"
                }
            ],
            "description": "The ::marker CSS pseudo-element selects the marker box of a list item, which typically contains a bullet or number. It works on any element or pseudo-element set to display: list-item, such as the <li> and <summary> elements."
        },
        {
            "name": "::part",
            "status": "experimental",
            "browsers": [
                "E79",
                "FF72",
                "S13.1",
                "C73",
                "O60"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::part"
                }
            ],
            "description": "The ::part CSS pseudo-element represents any element within a shadow tree that has a matching part attribute."
        },
        {
            "name": "::placeholder",
            "browsers": [
                "E79",
                "FF51",
                "S10.1",
                "C57",
                "O44"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::placeholder"
                }
            ],
            "description": "The ::placeholder CSS pseudo-element represents the placeholder text of a form element."
        },
        {
            "name": "::slotted",
            "browsers": [
                "E79",
                "FF63",
                "S10",
                "C50",
                "O37"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::slotted"
                }
            ],
            "description": "The :slotted() CSS pseudo-element represents any element that has been placed into a slot inside an HTML template."
        },
        {
            "name": "::spelling-error",
            "status": "experimental",
            "browsers": [
                "E121",
                "Spreview",
                "C121"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::spelling-error"
                }
            ],
            "description": "The ::spelling-error CSS pseudo-element represents a text segment which the user agent has flagged as incorrectly spelled."
        },
        {
            "name": "::view-transition",
            "status": "experimental",
            "browsers": [
                "E109",
                "C109",
                "O95"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::view-transition"
                }
            ],
            "description": "The ::view-transition CSS pseudo-element represents the root of the view transitions overlay, which contains all view transitions and sits over the top of all other page content."
        },
        {
            "name": "::view-transition-group",
            "status": "experimental",
            "browsers": [
                "E109",
                "C109",
                "O95"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::view-transition-group"
                }
            ],
            "description": "The ::view-transition-group CSS pseudo-element represents a single view transition group."
        },
        {
            "name": "::view-transition-image-pair",
            "status": "experimental",
            "browsers": [
                "E109",
                "C109",
                "O95"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::view-transition-image-pair"
                }
            ],
            "description": "The ::view-transition-image-pair CSS pseudo-element represents a container for a view transition's \"old\" and \"new\" view states — before and after the transition."
        },
        {
            "name": "::view-transition-new",
            "status": "experimental",
            "browsers": [
                "E109",
                "C109",
                "O95"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::view-transition-new"
                }
            ],
            "description": "The ::view-transition-new CSS pseudo-element represents the \"new\" view state of a view transition — a live representation of the new view, after the transition."
        },
        {
            "name": "::view-transition-old",
            "status": "experimental",
            "browsers": [
                "E109",
                "C109",
                "O95"
            ],
            "references": [
                {
                    "name": "MDN Reference",
                    "url": "https://developer.mozilla.org/docs/Web/CSS/::view-transition-old"
                }
            ],
            "description": "The ::view-transition-old CSS pseudo-element represents the \"old\" view state of a view transition — a static screenshot of the old view, before the transition."
        }
    ]
};


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/builtinData.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/builtinData.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   basicShapeFunctions: () => (/* binding */ basicShapeFunctions),
/* harmony export */   boxKeywords: () => (/* binding */ boxKeywords),
/* harmony export */   cssWideFunctions: () => (/* binding */ cssWideFunctions),
/* harmony export */   cssWideKeywords: () => (/* binding */ cssWideKeywords),
/* harmony export */   geometryBoxKeywords: () => (/* binding */ geometryBoxKeywords),
/* harmony export */   html5Tags: () => (/* binding */ html5Tags),
/* harmony export */   imageFunctions: () => (/* binding */ imageFunctions),
/* harmony export */   lineStyleKeywords: () => (/* binding */ lineStyleKeywords),
/* harmony export */   lineWidthKeywords: () => (/* binding */ lineWidthKeywords),
/* harmony export */   pageBoxDirectives: () => (/* binding */ pageBoxDirectives),
/* harmony export */   positionKeywords: () => (/* binding */ positionKeywords),
/* harmony export */   repeatStyleKeywords: () => (/* binding */ repeatStyleKeywords),
/* harmony export */   svgElements: () => (/* binding */ svgElements),
/* harmony export */   transitionTimingFunctions: () => (/* binding */ transitionTimingFunctions),
/* harmony export */   units: () => (/* binding */ units)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

const positionKeywords = {
    'bottom': 'Computes to ‘100%’ for the vertical position if one or two values are given, otherwise specifies the bottom edge as the origin for the next offset.',
    'center': 'Computes to ‘50%’ (‘left 50%’) for the horizontal position if the horizontal position is not otherwise specified, or ‘50%’ (‘top 50%’) for the vertical position if it is.',
    'left': 'Computes to ‘0%’ for the horizontal position if one or two values are given, otherwise specifies the left edge as the origin for the next offset.',
    'right': 'Computes to ‘100%’ for the horizontal position if one or two values are given, otherwise specifies the right edge as the origin for the next offset.',
    'top': 'Computes to ‘0%’ for the vertical position if one or two values are given, otherwise specifies the top edge as the origin for the next offset.'
};
const repeatStyleKeywords = {
    'no-repeat': 'Placed once and not repeated in this direction.',
    'repeat': 'Repeated in this direction as often as needed to cover the background painting area.',
    'repeat-x': 'Computes to ‘repeat no-repeat’.',
    'repeat-y': 'Computes to ‘no-repeat repeat’.',
    'round': 'Repeated as often as will fit within the background positioning area. If it doesn’t fit a whole number of times, it is rescaled so that it does.',
    'space': 'Repeated as often as will fit within the background positioning area without being clipped and then the images are spaced out to fill the area.'
};
const lineStyleKeywords = {
    'dashed': 'A series of square-ended dashes.',
    'dotted': 'A series of round dots.',
    'double': 'Two parallel solid lines with some space between them.',
    'groove': 'Looks as if it were carved in the canvas.',
    'hidden': 'Same as ‘none’, but has different behavior in the border conflict resolution rules for border-collapsed tables.',
    'inset': 'Looks as if the content on the inside of the border is sunken into the canvas.',
    'none': 'No border. Color and width are ignored.',
    'outset': 'Looks as if the content on the inside of the border is coming out of the canvas.',
    'ridge': 'Looks as if it were coming out of the canvas.',
    'solid': 'A single line segment.'
};
const lineWidthKeywords = ['medium', 'thick', 'thin'];
const boxKeywords = {
    'border-box': 'The background is painted within (clipped to) the border box.',
    'content-box': 'The background is painted within (clipped to) the content box.',
    'padding-box': 'The background is painted within (clipped to) the padding box.'
};
const geometryBoxKeywords = {
    'margin-box': 'Uses the margin box as reference box.',
    'fill-box': 'Uses the object bounding box as reference box.',
    'stroke-box': 'Uses the stroke bounding box as reference box.',
    'view-box': 'Uses the nearest SVG viewport as reference box.'
};
const cssWideKeywords = {
    'initial': 'Represents the value specified as the property’s initial value.',
    'inherit': 'Represents the computed value of the property on the element’s parent.',
    'unset': 'Acts as either `inherit` or `initial`, depending on whether the property is inherited or not.'
};
const cssWideFunctions = {
    'var()': 'Evaluates the value of a custom variable.',
    'calc()': 'Evaluates an mathematical expression. The following operators can be used: + - * /.'
};
const imageFunctions = {
    'url()': 'Reference an image file by URL',
    'image()': 'Provide image fallbacks and annotations.',
    '-webkit-image-set()': 'Provide multiple resolutions. Remember to use unprefixed image-set() in addition.',
    'image-set()': 'Provide multiple resolutions of an image and const the UA decide which is most appropriate in a given situation.',
    '-moz-element()': 'Use an element in the document as an image. Remember to use unprefixed element() in addition.',
    'element()': 'Use an element in the document as an image.',
    'cross-fade()': 'Indicates the two images to be combined and how far along in the transition the combination is.',
    '-webkit-gradient()': 'Deprecated. Use modern linear-gradient() or radial-gradient() instead.',
    '-webkit-linear-gradient()': 'Linear gradient. Remember to use unprefixed version in addition.',
    '-moz-linear-gradient()': 'Linear gradient. Remember to use unprefixed version in addition.',
    '-o-linear-gradient()': 'Linear gradient. Remember to use unprefixed version in addition.',
    'linear-gradient()': 'A linear gradient is created by specifying a straight gradient line, and then several colors placed along that line.',
    '-webkit-repeating-linear-gradient()': 'Repeating Linear gradient. Remember to use unprefixed version in addition.',
    '-moz-repeating-linear-gradient()': 'Repeating Linear gradient. Remember to use unprefixed version in addition.',
    '-o-repeating-linear-gradient()': 'Repeating Linear gradient. Remember to use unprefixed version in addition.',
    'repeating-linear-gradient()': 'Same as linear-gradient, except the color-stops are repeated infinitely in both directions, with their positions shifted by multiples of the difference between the last specified color-stop’s position and the first specified color-stop’s position.',
    '-webkit-radial-gradient()': 'Radial gradient. Remember to use unprefixed version in addition.',
    '-moz-radial-gradient()': 'Radial gradient. Remember to use unprefixed version in addition.',
    'radial-gradient()': 'Colors emerge from a single point and smoothly spread outward in a circular or elliptical shape.',
    '-webkit-repeating-radial-gradient()': 'Repeating radial gradient. Remember to use unprefixed version in addition.',
    '-moz-repeating-radial-gradient()': 'Repeating radial gradient. Remember to use unprefixed version in addition.',
    'repeating-radial-gradient()': 'Same as radial-gradient, except the color-stops are repeated infinitely in both directions, with their positions shifted by multiples of the difference between the last specified color-stop’s position and the first specified color-stop’s position.'
};
const transitionTimingFunctions = {
    'ease': 'Equivalent to cubic-bezier(0.25, 0.1, 0.25, 1.0).',
    'ease-in': 'Equivalent to cubic-bezier(0.42, 0, 1.0, 1.0).',
    'ease-in-out': 'Equivalent to cubic-bezier(0.42, 0, 0.58, 1.0).',
    'ease-out': 'Equivalent to cubic-bezier(0, 0, 0.58, 1.0).',
    'linear': 'Equivalent to cubic-bezier(0.0, 0.0, 1.0, 1.0).',
    'step-end': 'Equivalent to steps(1, end).',
    'step-start': 'Equivalent to steps(1, start).',
    'steps()': 'The first parameter specifies the number of intervals in the function. The second parameter, which is optional, is either the value “start” or “end”.',
    'cubic-bezier()': 'Specifies a cubic-bezier curve. The four values specify points P1 and P2  of the curve as (x1, y1, x2, y2).',
    'cubic-bezier(0.6, -0.28, 0.735, 0.045)': 'Ease-in Back. Overshoots.',
    'cubic-bezier(0.68, -0.55, 0.265, 1.55)': 'Ease-in-out Back. Overshoots.',
    'cubic-bezier(0.175, 0.885, 0.32, 1.275)': 'Ease-out Back. Overshoots.',
    'cubic-bezier(0.6, 0.04, 0.98, 0.335)': 'Ease-in Circular. Based on half circle.',
    'cubic-bezier(0.785, 0.135, 0.15, 0.86)': 'Ease-in-out Circular. Based on half circle.',
    'cubic-bezier(0.075, 0.82, 0.165, 1)': 'Ease-out Circular. Based on half circle.',
    'cubic-bezier(0.55, 0.055, 0.675, 0.19)': 'Ease-in Cubic. Based on power of three.',
    'cubic-bezier(0.645, 0.045, 0.355, 1)': 'Ease-in-out Cubic. Based on power of three.',
    'cubic-bezier(0.215, 0.610, 0.355, 1)': 'Ease-out Cubic. Based on power of three.',
    'cubic-bezier(0.95, 0.05, 0.795, 0.035)': 'Ease-in Exponential. Based on two to the power ten.',
    'cubic-bezier(1, 0, 0, 1)': 'Ease-in-out Exponential. Based on two to the power ten.',
    'cubic-bezier(0.19, 1, 0.22, 1)': 'Ease-out Exponential. Based on two to the power ten.',
    'cubic-bezier(0.47, 0, 0.745, 0.715)': 'Ease-in Sine.',
    'cubic-bezier(0.445, 0.05, 0.55, 0.95)': 'Ease-in-out Sine.',
    'cubic-bezier(0.39, 0.575, 0.565, 1)': 'Ease-out Sine.',
    'cubic-bezier(0.55, 0.085, 0.68, 0.53)': 'Ease-in Quadratic. Based on power of two.',
    'cubic-bezier(0.455, 0.03, 0.515, 0.955)': 'Ease-in-out Quadratic. Based on power of two.',
    'cubic-bezier(0.25, 0.46, 0.45, 0.94)': 'Ease-out Quadratic. Based on power of two.',
    'cubic-bezier(0.895, 0.03, 0.685, 0.22)': 'Ease-in Quartic. Based on power of four.',
    'cubic-bezier(0.77, 0, 0.175, 1)': 'Ease-in-out Quartic. Based on power of four.',
    'cubic-bezier(0.165, 0.84, 0.44, 1)': 'Ease-out Quartic. Based on power of four.',
    'cubic-bezier(0.755, 0.05, 0.855, 0.06)': 'Ease-in Quintic. Based on power of five.',
    'cubic-bezier(0.86, 0, 0.07, 1)': 'Ease-in-out Quintic. Based on power of five.',
    'cubic-bezier(0.23, 1, 0.320, 1)': 'Ease-out Quintic. Based on power of five.'
};
const basicShapeFunctions = {
    'circle()': 'Defines a circle.',
    'ellipse()': 'Defines an ellipse.',
    'inset()': 'Defines an inset rectangle.',
    'polygon()': 'Defines a polygon.'
};
const units = {
    'length': ['cap', 'ch', 'cm', 'cqb', 'cqh', 'cqi', 'cqmax', 'cqmin', 'cqw', 'dvb', 'dvh', 'dvi', 'dvw', 'em', 'ex', 'ic', 'in', 'lh', 'lvb', 'lvh', 'lvi', 'lvw', 'mm', 'pc', 'pt', 'px', 'q', 'rcap', 'rch', 'rem', 'rex', 'ric', 'rlh', 'svb', 'svh', 'svi', 'svw', 'vb', 'vh', 'vi', 'vmax', 'vmin', 'vw'],
    'angle': ['deg', 'rad', 'grad', 'turn'],
    'time': ['ms', 's'],
    'frequency': ['Hz', 'kHz'],
    'resolution': ['dpi', 'dpcm', 'dppx'],
    'percentage': ['%', 'fr']
};
const html5Tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption',
    'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer',
    'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link',
    'main', 'map', 'mark', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q',
    'rb', 'rp', 'rt', 'rtc', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td',
    'template', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'const', 'video', 'wbr'];
const svgElements = ['circle', 'clipPath', 'cursor', 'defs', 'desc', 'ellipse', 'feBlend', 'feColorMatrix', 'feComponentTransfer', 'feComposite', 'feConvolveMatrix', 'feDiffuseLighting',
    'feDisplacementMap', 'feDistantLight', 'feDropShadow', 'feFlood', 'feFuncA', 'feFuncB', 'feFuncG', 'feFuncR', 'feGaussianBlur', 'feImage', 'feMerge', 'feMergeNode', 'feMorphology',
    'feOffset', 'fePointLight', 'feSpecularLighting', 'feSpotLight', 'feTile', 'feTurbulence', 'filter', 'foreignObject', 'g', 'hatch', 'hatchpath', 'image', 'line', 'linearGradient',
    'marker', 'mask', 'mesh', 'meshpatch', 'meshrow', 'metadata', 'mpath', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'set', 'solidcolor', 'stop', 'svg', 'switch',
    'symbol', 'text', 'textPath', 'tspan', 'use', 'view'];
const pageBoxDirectives = [
    '@bottom-center', '@bottom-left', '@bottom-left-corner', '@bottom-right', '@bottom-right-corner',
    '@left-bottom', '@left-middle', '@left-top', '@right-bottom', '@right-middle', '@right-top',
    '@top-center', '@top-left', '@top-left-corner', '@top-right', '@top-right-corner'
];


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/colors.js":
/*!*************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/colors.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   colorFrom256RGB: () => (/* binding */ colorFrom256RGB),
/* harmony export */   colorFromHSL: () => (/* binding */ colorFromHSL),
/* harmony export */   colorFromHWB: () => (/* binding */ colorFromHWB),
/* harmony export */   colorFromHex: () => (/* binding */ colorFromHex),
/* harmony export */   colorFunctions: () => (/* binding */ colorFunctions),
/* harmony export */   colorKeywords: () => (/* binding */ colorKeywords),
/* harmony export */   colors: () => (/* binding */ colors),
/* harmony export */   getColorValue: () => (/* binding */ getColorValue),
/* harmony export */   hexDigit: () => (/* binding */ hexDigit),
/* harmony export */   hslFromColor: () => (/* binding */ hslFromColor),
/* harmony export */   hwbFromColor: () => (/* binding */ hwbFromColor),
/* harmony export */   isColorConstructor: () => (/* binding */ isColorConstructor),
/* harmony export */   isColorString: () => (/* binding */ isColorString),
/* harmony export */   isColorValue: () => (/* binding */ isColorValue)
/* harmony export */ });
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_1__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


const hexColorRegExp = /(^#([0-9A-F]{3}){1,2}$)|(^#([0-9A-F]{4}){1,2}$)/i;
const colorFunctions = [
    {
        label: 'rgb',
        func: 'rgb($red, $green, $blue)',
        insertText: 'rgb(${1:red}, ${2:green}, ${3:blue})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from red, green, and blue values.')
    },
    {
        label: 'rgba',
        func: 'rgba($red, $green, $blue, $alpha)',
        insertText: 'rgba(${1:red}, ${2:green}, ${3:blue}, ${4:alpha})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from red, green, blue, and alpha values.')
    },
    {
        label: 'rgb relative',
        func: 'rgb(from $color $red $green $blue)',
        insertText: 'rgb(from ${1:color} ${2:r} ${3:g} ${4:b})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from the red, green, and blue values of another Color.')
    },
    {
        label: 'hsl',
        func: 'hsl($hue, $saturation, $lightness)',
        insertText: 'hsl(${1:hue}, ${2:saturation}, ${3:lightness})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from hue, saturation, and lightness values.')
    },
    {
        label: 'hsla',
        func: 'hsla($hue, $saturation, $lightness, $alpha)',
        insertText: 'hsla(${1:hue}, ${2:saturation}, ${3:lightness}, ${4:alpha})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from hue, saturation, lightness, and alpha values.')
    },
    {
        label: 'hsl relative',
        func: 'hsl(from $color $hue $saturation $lightness)',
        insertText: 'hsl(from ${1:color} ${2:h} ${3:s} ${4:l})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from the hue, saturation, and lightness values of another Color.')
    },
    {
        label: 'hwb',
        func: 'hwb($hue $white $black)',
        insertText: 'hwb(${1:hue} ${2:white} ${3:black})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from hue, white, and black values.')
    },
    {
        label: 'hwb relative',
        func: 'hwb(from $color $hue $white $black)',
        insertText: 'hwb(from ${1:color} ${2:h} ${3:w} ${4:b})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from the hue, white, and black values of another Color.')
    },
    {
        label: 'lab',
        func: 'lab($lightness $a $b)',
        insertText: 'lab(${1:lightness} ${2:a} ${3:b})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from lightness, a, and b values.')
    },
    {
        label: 'lab relative',
        func: 'lab(from $color $lightness $a $b)',
        insertText: 'lab(from ${1:color} ${2:l} ${3:a} ${4:b})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from the lightness, a, and b values of another Color.')
    },
    {
        label: 'oklab',
        func: 'oklab($lightness $a $b)',
        insertText: 'oklab(${1:lightness} ${2:a} ${3:b})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from lightness, a, and b values.')
    },
    {
        label: 'oklab relative',
        func: 'oklab(from $color $lightness $a $b)',
        insertText: 'oklab(from ${1:color} ${2:l} ${3:a} ${4:b})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from the lightness, a, and b values of another Color.')
    },
    {
        label: 'lch',
        func: 'lch($lightness $chroma $hue)',
        insertText: 'lch(${1:lightness} ${2:chroma} ${3:hue})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from lightness, chroma, and hue values.')
    },
    {
        label: 'lch relative',
        func: 'lch(from $color $lightness $chroma $hue)',
        insertText: 'lch(from ${1:color} ${2:l} ${3:c} ${4:h})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from the lightness, chroma, and hue values of another Color.')
    },
    {
        label: 'oklch',
        func: 'oklch($lightness $chroma $hue)',
        insertText: 'oklch(${1:lightness} ${2:chroma} ${3:hue})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from lightness, chroma, and hue values.')
    },
    {
        label: 'oklch relative',
        func: 'oklch(from $color $lightness $chroma $hue)',
        insertText: 'oklch(from ${1:color} ${2:l} ${3:c} ${4:h})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color from the lightness, chroma, and hue values of another Color.')
    },
    {
        label: 'color',
        func: 'color($color-space $red $green $blue)',
        insertText: 'color(${1|srgb,srgb-linear,display-p3,a98-rgb,prophoto-rgb,rec2020,xyx,xyz-d50,xyz-d65|} ${2:red} ${3:green} ${4:blue})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color in a specific color space from red, green, and blue values.')
    },
    {
        label: 'color relative',
        func: 'color(from $color $color-space $red $green $blue)',
        insertText: 'color(from ${1:color} ${2|srgb,srgb-linear,display-p3,a98-rgb,prophoto-rgb,rec2020,xyx,xyz-d50,xyz-d65|} ${3:r} ${4:g} ${5:b})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Creates a Color in a specific color space from the red, green, and blue values of another Color.')
    },
    {
        label: 'color-mix',
        func: 'color-mix(in $color-space, $color $percentage, $color $percentage)',
        insertText: 'color-mix(in ${1|srgb,srgb-linear,lab,oklab,xyz,xyz-d50,xyz-d65|}, ${3:color} ${4:percentage}, ${5:color} ${6:percentage})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Mix two colors together in a rectangular color space.')
    },
    {
        label: 'color-mix hue',
        func: 'color-mix(in $color-space $interpolation-method hue, $color $percentage, $color $percentage)',
        insertText: 'color-mix(in ${1|hsl,hwb,lch,oklch|} ${2|shorter hue,longer hue,increasing hue,decreasing hue|}, ${3:color} ${4:percentage}, ${5:color} ${6:percentage})',
        desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t('Mix two colors together in a polar color space.')
    },
];
const colorFunctionNameRegExp = /^(rgb|rgba|hsl|hsla|hwb)$/i;
const colors = {
    aliceblue: '#f0f8ff',
    antiquewhite: '#faebd7',
    aqua: '#00ffff',
    aquamarine: '#7fffd4',
    azure: '#f0ffff',
    beige: '#f5f5dc',
    bisque: '#ffe4c4',
    black: '#000000',
    blanchedalmond: '#ffebcd',
    blue: '#0000ff',
    blueviolet: '#8a2be2',
    brown: '#a52a2a',
    burlywood: '#deb887',
    cadetblue: '#5f9ea0',
    chartreuse: '#7fff00',
    chocolate: '#d2691e',
    coral: '#ff7f50',
    cornflowerblue: '#6495ed',
    cornsilk: '#fff8dc',
    crimson: '#dc143c',
    cyan: '#00ffff',
    darkblue: '#00008b',
    darkcyan: '#008b8b',
    darkgoldenrod: '#b8860b',
    darkgray: '#a9a9a9',
    darkgrey: '#a9a9a9',
    darkgreen: '#006400',
    darkkhaki: '#bdb76b',
    darkmagenta: '#8b008b',
    darkolivegreen: '#556b2f',
    darkorange: '#ff8c00',
    darkorchid: '#9932cc',
    darkred: '#8b0000',
    darksalmon: '#e9967a',
    darkseagreen: '#8fbc8f',
    darkslateblue: '#483d8b',
    darkslategray: '#2f4f4f',
    darkslategrey: '#2f4f4f',
    darkturquoise: '#00ced1',
    darkviolet: '#9400d3',
    deeppink: '#ff1493',
    deepskyblue: '#00bfff',
    dimgray: '#696969',
    dimgrey: '#696969',
    dodgerblue: '#1e90ff',
    firebrick: '#b22222',
    floralwhite: '#fffaf0',
    forestgreen: '#228b22',
    fuchsia: '#ff00ff',
    gainsboro: '#dcdcdc',
    ghostwhite: '#f8f8ff',
    gold: '#ffd700',
    goldenrod: '#daa520',
    gray: '#808080',
    grey: '#808080',
    green: '#008000',
    greenyellow: '#adff2f',
    honeydew: '#f0fff0',
    hotpink: '#ff69b4',
    indianred: '#cd5c5c',
    indigo: '#4b0082',
    ivory: '#fffff0',
    khaki: '#f0e68c',
    lavender: '#e6e6fa',
    lavenderblush: '#fff0f5',
    lawngreen: '#7cfc00',
    lemonchiffon: '#fffacd',
    lightblue: '#add8e6',
    lightcoral: '#f08080',
    lightcyan: '#e0ffff',
    lightgoldenrodyellow: '#fafad2',
    lightgray: '#d3d3d3',
    lightgrey: '#d3d3d3',
    lightgreen: '#90ee90',
    lightpink: '#ffb6c1',
    lightsalmon: '#ffa07a',
    lightseagreen: '#20b2aa',
    lightskyblue: '#87cefa',
    lightslategray: '#778899',
    lightslategrey: '#778899',
    lightsteelblue: '#b0c4de',
    lightyellow: '#ffffe0',
    lime: '#00ff00',
    limegreen: '#32cd32',
    linen: '#faf0e6',
    magenta: '#ff00ff',
    maroon: '#800000',
    mediumaquamarine: '#66cdaa',
    mediumblue: '#0000cd',
    mediumorchid: '#ba55d3',
    mediumpurple: '#9370d8',
    mediumseagreen: '#3cb371',
    mediumslateblue: '#7b68ee',
    mediumspringgreen: '#00fa9a',
    mediumturquoise: '#48d1cc',
    mediumvioletred: '#c71585',
    midnightblue: '#191970',
    mintcream: '#f5fffa',
    mistyrose: '#ffe4e1',
    moccasin: '#ffe4b5',
    navajowhite: '#ffdead',
    navy: '#000080',
    oldlace: '#fdf5e6',
    olive: '#808000',
    olivedrab: '#6b8e23',
    orange: '#ffa500',
    orangered: '#ff4500',
    orchid: '#da70d6',
    palegoldenrod: '#eee8aa',
    palegreen: '#98fb98',
    paleturquoise: '#afeeee',
    palevioletred: '#d87093',
    papayawhip: '#ffefd5',
    peachpuff: '#ffdab9',
    peru: '#cd853f',
    pink: '#ffc0cb',
    plum: '#dda0dd',
    powderblue: '#b0e0e6',
    purple: '#800080',
    red: '#ff0000',
    rebeccapurple: '#663399',
    rosybrown: '#bc8f8f',
    royalblue: '#4169e1',
    saddlebrown: '#8b4513',
    salmon: '#fa8072',
    sandybrown: '#f4a460',
    seagreen: '#2e8b57',
    seashell: '#fff5ee',
    sienna: '#a0522d',
    silver: '#c0c0c0',
    skyblue: '#87ceeb',
    slateblue: '#6a5acd',
    slategray: '#708090',
    slategrey: '#708090',
    snow: '#fffafa',
    springgreen: '#00ff7f',
    steelblue: '#4682b4',
    tan: '#d2b48c',
    teal: '#008080',
    thistle: '#d8bfd8',
    tomato: '#ff6347',
    turquoise: '#40e0d0',
    violet: '#ee82ee',
    wheat: '#f5deb3',
    white: '#ffffff',
    whitesmoke: '#f5f5f5',
    yellow: '#ffff00',
    yellowgreen: '#9acd32'
};
const colorsRegExp = new RegExp(`^(${Object.keys(colors).join('|')})$`, "i");
const colorKeywords = {
    'currentColor': 'The value of the \'color\' property. The computed value of the \'currentColor\' keyword is the computed value of the \'color\' property. If the \'currentColor\' keyword is set on the \'color\' property itself, it is treated as \'color:inherit\' at parse time.',
    'transparent': 'Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value.',
};
const colorKeywordsRegExp = new RegExp(`^(${Object.keys(colorKeywords).join('|')})$`, "i");
function getNumericValue(node, factor) {
    const val = node.getText();
    const m = val.match(/^([-+]?[0-9]*\.?[0-9]+)(%?)$/);
    if (m) {
        if (m[2]) {
            factor = 100.0;
        }
        const result = parseFloat(m[1]) / factor;
        if (result >= 0 && result <= 1) {
            return result;
        }
    }
    throw new Error();
}
function getAngle(node) {
    const val = node.getText();
    const m = val.match(/^([-+]?[0-9]*\.?[0-9]+)(deg|rad|grad|turn)?$/);
    if (m) {
        switch (m[2]) {
            case 'deg':
                return parseFloat(val) % 360;
            case 'rad':
                return (parseFloat(val) * 180 / Math.PI) % 360;
            case 'grad':
                return (parseFloat(val) * 0.9) % 360;
            case 'turn':
                return (parseFloat(val) * 360) % 360;
            default:
                if ('undefined' === typeof m[2]) {
                    return parseFloat(val) % 360;
                }
        }
    }
    throw new Error();
}
function isColorConstructor(node) {
    const name = node.getName();
    if (!name) {
        return false;
    }
    return colorFunctionNameRegExp.test(name);
}
function isColorString(s) {
    return hexColorRegExp.test(s) || colorsRegExp.test(s) || colorKeywordsRegExp.test(s);
}
/**
 * Returns true if the node is a color value - either
 * defined a hex number, as rgb or rgba function, or
 * as color name.
 */
function isColorValue(node) {
    if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.HexColorValue) {
        return true;
    }
    else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Function) {
        return isColorConstructor(node);
    }
    else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Identifier) {
        if (node.parent && node.parent.type !== _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Term) {
            return false;
        }
        const candidateColor = node.getText().toLowerCase();
        if (candidateColor === 'none') {
            return false;
        }
        if (colors[candidateColor]) {
            return true;
        }
    }
    return false;
}
const Digit0 = 48;
const Digit9 = 57;
const A = 65;
const F = 70;
const a = 97;
const f = 102;
function hexDigit(charCode) {
    if (charCode < Digit0) {
        return 0;
    }
    if (charCode <= Digit9) {
        return charCode - Digit0;
    }
    if (charCode < a) {
        charCode += (a - A);
    }
    if (charCode >= a && charCode <= f) {
        return charCode - a + 10;
    }
    return 0;
}
function colorFromHex(text) {
    if (text[0] !== '#') {
        return null;
    }
    switch (text.length) {
        case 4:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,
                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,
                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,
                alpha: 1
            };
        case 5:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x11) / 255.0,
                green: (hexDigit(text.charCodeAt(2)) * 0x11) / 255.0,
                blue: (hexDigit(text.charCodeAt(3)) * 0x11) / 255.0,
                alpha: (hexDigit(text.charCodeAt(4)) * 0x11) / 255.0,
            };
        case 7:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,
                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,
                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,
                alpha: 1
            };
        case 9:
            return {
                red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,
                green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,
                blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,
                alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0
            };
    }
    return null;
}
function colorFrom256RGB(red, green, blue, alpha = 1.0) {
    return {
        red: red / 255.0,
        green: green / 255.0,
        blue: blue / 255.0,
        alpha
    };
}
function colorFromHSL(hue, sat, light, alpha = 1.0) {
    hue = hue / 60.0;
    if (sat === 0) {
        return { red: light, green: light, blue: light, alpha };
    }
    else {
        const hueToRgb = (t1, t2, hue) => {
            while (hue < 0) {
                hue += 6;
            }
            while (hue >= 6) {
                hue -= 6;
            }
            if (hue < 1) {
                return (t2 - t1) * hue + t1;
            }
            if (hue < 3) {
                return t2;
            }
            if (hue < 4) {
                return (t2 - t1) * (4 - hue) + t1;
            }
            return t1;
        };
        const t2 = light <= 0.5 ? (light * (sat + 1)) : (light + sat - (light * sat));
        const t1 = light * 2 - t2;
        return { red: hueToRgb(t1, t2, hue + 2), green: hueToRgb(t1, t2, hue), blue: hueToRgb(t1, t2, hue - 2), alpha };
    }
}
function hslFromColor(rgba) {
    const r = rgba.red;
    const g = rgba.green;
    const b = rgba.blue;
    const a = rgba.alpha;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0;
    let s = 0;
    const l = (min + max) / 2;
    const chroma = max - min;
    if (chroma > 0) {
        s = Math.min((l <= 0.5 ? chroma / (2 * l) : chroma / (2 - (2 * l))), 1);
        switch (max) {
            case r:
                h = (g - b) / chroma + (g < b ? 6 : 0);
                break;
            case g:
                h = (b - r) / chroma + 2;
                break;
            case b:
                h = (r - g) / chroma + 4;
                break;
        }
        h *= 60;
        h = Math.round(h);
    }
    return { h, s, l, a };
}
function colorFromHWB(hue, white, black, alpha = 1.0) {
    if (white + black >= 1) {
        const gray = white / (white + black);
        return { red: gray, green: gray, blue: gray, alpha };
    }
    const rgb = colorFromHSL(hue, 1, 0.5, alpha);
    let red = rgb.red;
    red *= (1 - white - black);
    red += white;
    let green = rgb.green;
    green *= (1 - white - black);
    green += white;
    let blue = rgb.blue;
    blue *= (1 - white - black);
    blue += white;
    return {
        red: red,
        green: green,
        blue: blue,
        alpha
    };
}
function hwbFromColor(rgba) {
    const hsl = hslFromColor(rgba);
    const white = Math.min(rgba.red, rgba.green, rgba.blue);
    const black = 1 - Math.max(rgba.red, rgba.green, rgba.blue);
    return {
        h: hsl.h,
        w: white,
        b: black,
        a: hsl.a
    };
}
function getColorValue(node) {
    if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.HexColorValue) {
        const text = node.getText();
        return colorFromHex(text);
    }
    else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Function) {
        const functionNode = node;
        const name = functionNode.getName();
        let colorValues = functionNode.getArguments().getChildren();
        if (colorValues.length === 1) {
            const functionArg = colorValues[0].getChildren();
            if (functionArg.length === 1 && functionArg[0].type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Expression) {
                colorValues = functionArg[0].getChildren();
                if (colorValues.length === 3) {
                    const lastValue = colorValues[2];
                    if (lastValue instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.BinaryExpression) {
                        const left = lastValue.getLeft(), right = lastValue.getRight(), operator = lastValue.getOperator();
                        if (left && right && operator && operator.matches('/')) {
                            colorValues = [colorValues[0], colorValues[1], left, right];
                        }
                    }
                }
            }
        }
        if (!name || colorValues.length < 3 || colorValues.length > 4) {
            return null;
        }
        try {
            const alpha = colorValues.length === 4 ? getNumericValue(colorValues[3], 1) : 1;
            if (name === 'rgb' || name === 'rgba') {
                return {
                    red: getNumericValue(colorValues[0], 255.0),
                    green: getNumericValue(colorValues[1], 255.0),
                    blue: getNumericValue(colorValues[2], 255.0),
                    alpha
                };
            }
            else if (name === 'hsl' || name === 'hsla') {
                const h = getAngle(colorValues[0]);
                const s = getNumericValue(colorValues[1], 100.0);
                const l = getNumericValue(colorValues[2], 100.0);
                return colorFromHSL(h, s, l, alpha);
            }
            else if (name === 'hwb') {
                const h = getAngle(colorValues[0]);
                const w = getNumericValue(colorValues[1], 100.0);
                const b = getNumericValue(colorValues[2], 100.0);
                return colorFromHWB(h, w, b, alpha);
            }
        }
        catch (e) {
            // parse error on numeric value
            return null;
        }
    }
    else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Identifier) {
        if (node.parent && node.parent.type !== _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Term) {
            return null;
        }
        const term = node.parent;
        if (term && term.parent && term.parent.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.BinaryExpression) {
            const expression = term.parent;
            if (expression.parent && expression.parent.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ListEntry && expression.parent.key === expression) {
                return null;
            }
        }
        const candidateColor = node.getText().toLowerCase();
        if (candidateColor === 'none') {
            return null;
        }
        const colorHex = colors[candidateColor];
        if (colorHex) {
            return colorFromHex(colorHex);
        }
    }
    return null;
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/dataManager.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/dataManager.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSDataManager: () => (/* binding */ CSSDataManager)
/* harmony export */ });
/* harmony import */ var _utils_objects__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/objects */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/objects.js");
/* harmony import */ var _data_webCustomData__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../data/webCustomData */ "../../node_modules/vscode-css-languageservice/lib/esm/data/webCustomData.js");
/* harmony import */ var _dataProvider__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./dataProvider */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/dataProvider.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




class CSSDataManager {
    constructor(options) {
        this.dataProviders = [];
        this._propertySet = {};
        this._atDirectiveSet = {};
        this._pseudoClassSet = {};
        this._pseudoElementSet = {};
        this._properties = [];
        this._atDirectives = [];
        this._pseudoClasses = [];
        this._pseudoElements = [];
        this.setDataProviders(options?.useDefaultDataProvider !== false, options?.customDataProviders || []);
    }
    setDataProviders(builtIn, providers) {
        this.dataProviders = [];
        if (builtIn) {
            this.dataProviders.push(new _dataProvider__WEBPACK_IMPORTED_MODULE_2__.CSSDataProvider(_data_webCustomData__WEBPACK_IMPORTED_MODULE_1__.cssData));
        }
        this.dataProviders.push(...providers);
        this.collectData();
    }
    /**
     * Collect all data  & handle duplicates
     */
    collectData() {
        this._propertySet = {};
        this._atDirectiveSet = {};
        this._pseudoClassSet = {};
        this._pseudoElementSet = {};
        this.dataProviders.forEach(provider => {
            provider.provideProperties().forEach(p => {
                if (!this._propertySet[p.name]) {
                    this._propertySet[p.name] = p;
                }
            });
            provider.provideAtDirectives().forEach(p => {
                if (!this._atDirectiveSet[p.name]) {
                    this._atDirectiveSet[p.name] = p;
                }
            });
            provider.providePseudoClasses().forEach(p => {
                if (!this._pseudoClassSet[p.name]) {
                    this._pseudoClassSet[p.name] = p;
                }
            });
            provider.providePseudoElements().forEach(p => {
                if (!this._pseudoElementSet[p.name]) {
                    this._pseudoElementSet[p.name] = p;
                }
            });
        });
        this._properties = _utils_objects__WEBPACK_IMPORTED_MODULE_0__.values(this._propertySet);
        this._atDirectives = _utils_objects__WEBPACK_IMPORTED_MODULE_0__.values(this._atDirectiveSet);
        this._pseudoClasses = _utils_objects__WEBPACK_IMPORTED_MODULE_0__.values(this._pseudoClassSet);
        this._pseudoElements = _utils_objects__WEBPACK_IMPORTED_MODULE_0__.values(this._pseudoElementSet);
    }
    getProperty(name) { return this._propertySet[name]; }
    getAtDirective(name) { return this._atDirectiveSet[name]; }
    getPseudoClass(name) { return this._pseudoClassSet[name]; }
    getPseudoElement(name) { return this._pseudoElementSet[name]; }
    getProperties() {
        return this._properties;
    }
    getAtDirectives() {
        return this._atDirectives;
    }
    getPseudoClasses() {
        return this._pseudoClasses;
    }
    getPseudoElements() {
        return this._pseudoElements;
    }
    isKnownProperty(name) {
        return name.toLowerCase() in this._propertySet;
    }
    isStandardProperty(name) {
        return this.isKnownProperty(name) &&
            (!this._propertySet[name.toLowerCase()].status || this._propertySet[name.toLowerCase()].status === 'standard');
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/dataProvider.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/dataProvider.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSDataProvider: () => (/* binding */ CSSDataProvider)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

class CSSDataProvider {
    /**
     * Currently, unversioned data uses the V1 implementation
     * In the future when the provider handles multiple versions of HTML custom data,
     * use the latest implementation for unversioned data
     */
    constructor(data) {
        this._properties = [];
        this._atDirectives = [];
        this._pseudoClasses = [];
        this._pseudoElements = [];
        this.addData(data);
    }
    provideProperties() {
        return this._properties;
    }
    provideAtDirectives() {
        return this._atDirectives;
    }
    providePseudoClasses() {
        return this._pseudoClasses;
    }
    providePseudoElements() {
        return this._pseudoElements;
    }
    addData(data) {
        if (Array.isArray(data.properties)) {
            for (const prop of data.properties) {
                if (isPropertyData(prop)) {
                    this._properties.push(prop);
                }
            }
        }
        if (Array.isArray(data.atDirectives)) {
            for (const prop of data.atDirectives) {
                if (isAtDirective(prop)) {
                    this._atDirectives.push(prop);
                }
            }
        }
        if (Array.isArray(data.pseudoClasses)) {
            for (const prop of data.pseudoClasses) {
                if (isPseudoClassData(prop)) {
                    this._pseudoClasses.push(prop);
                }
            }
        }
        if (Array.isArray(data.pseudoElements)) {
            for (const prop of data.pseudoElements) {
                if (isPseudoElementData(prop)) {
                    this._pseudoElements.push(prop);
                }
            }
        }
    }
}
function isPropertyData(d) {
    return typeof d.name === 'string';
}
function isAtDirective(d) {
    return typeof d.name === 'string';
}
function isPseudoClassData(d) {
    return typeof d.name === 'string';
}
function isPseudoElementData(d) {
    return typeof d.name === 'string';
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/entry.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/entry.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   browserNames: () => (/* binding */ browserNames),
/* harmony export */   getBrowserLabel: () => (/* binding */ getBrowserLabel),
/* harmony export */   getEntryDescription: () => (/* binding */ getEntryDescription),
/* harmony export */   textToMarkedString: () => (/* binding */ textToMarkedString)
/* harmony export */ });
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


const browserNames = {
    E: 'Edge',
    FF: 'Firefox',
    S: 'Safari',
    C: 'Chrome',
    IE: 'IE',
    O: 'Opera'
};
function getEntryStatus(status) {
    switch (status) {
        case 'experimental':
            return '⚠️ Property is experimental. Be cautious when using it.️\n\n';
        case 'nonstandard':
            return '🚨️ Property is nonstandard. Avoid using it.\n\n';
        case 'obsolete':
            return '🚨️️️ Property is obsolete. Avoid using it.\n\n';
        default:
            return '';
    }
}
function getEntryDescription(entry, doesSupportMarkdown, settings) {
    let result;
    if (doesSupportMarkdown) {
        result = {
            kind: 'markdown',
            value: getEntryMarkdownDescription(entry, settings)
        };
    }
    else {
        result = {
            kind: 'plaintext',
            value: getEntryStringDescription(entry, settings)
        };
    }
    if (result.value === '') {
        return undefined;
    }
    return result;
}
function textToMarkedString(text) {
    text = text.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    return text.replace(/</g, '&lt;').replace(/>/g, '&gt;');
}
function getEntryStringDescription(entry, settings) {
    if (!entry.description || entry.description === '') {
        return '';
    }
    if (typeof entry.description !== 'string') {
        return entry.description.value;
    }
    let result = '';
    if (settings?.documentation !== false) {
        if (entry.status) {
            result += getEntryStatus(entry.status);
        }
        result += entry.description;
        const browserLabel = getBrowserLabel(entry.browsers);
        if (browserLabel) {
            result += '\n(' + browserLabel + ')';
        }
        if ('syntax' in entry) {
            result += `\n\nSyntax: ${entry.syntax}`;
        }
    }
    if (entry.references && entry.references.length > 0 && settings?.references !== false) {
        if (result.length > 0) {
            result += '\n\n';
        }
        result += entry.references.map(r => {
            return `${r.name}: ${r.url}`;
        }).join(' | ');
    }
    return result;
}
function getEntryMarkdownDescription(entry, settings) {
    if (!entry.description || entry.description === '') {
        return '';
    }
    let result = '';
    if (settings?.documentation !== false) {
        if (entry.status) {
            result += getEntryStatus(entry.status);
        }
        if (typeof entry.description === 'string') {
            result += textToMarkedString(entry.description);
        }
        else {
            result += entry.description.kind === _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.MarkupKind.Markdown ? entry.description.value : textToMarkedString(entry.description.value);
        }
        const browserLabel = getBrowserLabel(entry.browsers);
        if (browserLabel) {
            result += '\n\n(' + textToMarkedString(browserLabel) + ')';
        }
        if ('syntax' in entry && entry.syntax) {
            result += `\n\nSyntax: ${textToMarkedString(entry.syntax)}`;
        }
    }
    if (entry.references && entry.references.length > 0 && settings?.references !== false) {
        if (result.length > 0) {
            result += '\n\n';
        }
        result += entry.references.map(r => {
            return `[${r.name}](${r.url})`;
        }).join(' | ');
    }
    return result;
}
/**
 * Input is like `["E12","FF49","C47","IE","O"]`
 * Output is like `Edge 12, Firefox 49, Chrome 47, IE, Opera`
 */
function getBrowserLabel(browsers = []) {
    if (browsers.length === 0) {
        return null;
    }
    return browsers
        .map(b => {
        let result = '';
        const matches = b.match(/([A-Z]+)(\d+)?/);
        const name = matches[1];
        const version = matches[2];
        if (name in browserNames) {
            result += browserNames[name];
        }
        if (version) {
            result += ' ' + version;
        }
        return result;
    })
        .join(', ');
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/facts.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/facts.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   basicShapeFunctions: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.basicShapeFunctions),
/* harmony export */   boxKeywords: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.boxKeywords),
/* harmony export */   browserNames: () => (/* reexport safe */ _entry__WEBPACK_IMPORTED_MODULE_0__.browserNames),
/* harmony export */   colorFrom256RGB: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorFrom256RGB),
/* harmony export */   colorFromHSL: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorFromHSL),
/* harmony export */   colorFromHWB: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorFromHWB),
/* harmony export */   colorFromHex: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorFromHex),
/* harmony export */   colorFunctions: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorFunctions),
/* harmony export */   colorKeywords: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colorKeywords),
/* harmony export */   colors: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.colors),
/* harmony export */   cssWideFunctions: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.cssWideFunctions),
/* harmony export */   cssWideKeywords: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.cssWideKeywords),
/* harmony export */   geometryBoxKeywords: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.geometryBoxKeywords),
/* harmony export */   getBrowserLabel: () => (/* reexport safe */ _entry__WEBPACK_IMPORTED_MODULE_0__.getBrowserLabel),
/* harmony export */   getColorValue: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.getColorValue),
/* harmony export */   getEntryDescription: () => (/* reexport safe */ _entry__WEBPACK_IMPORTED_MODULE_0__.getEntryDescription),
/* harmony export */   hexDigit: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.hexDigit),
/* harmony export */   hslFromColor: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.hslFromColor),
/* harmony export */   html5Tags: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.html5Tags),
/* harmony export */   hwbFromColor: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.hwbFromColor),
/* harmony export */   imageFunctions: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.imageFunctions),
/* harmony export */   isColorConstructor: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.isColorConstructor),
/* harmony export */   isColorString: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.isColorString),
/* harmony export */   isColorValue: () => (/* reexport safe */ _colors__WEBPACK_IMPORTED_MODULE_1__.isColorValue),
/* harmony export */   lineStyleKeywords: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.lineStyleKeywords),
/* harmony export */   lineWidthKeywords: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.lineWidthKeywords),
/* harmony export */   pageBoxDirectives: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.pageBoxDirectives),
/* harmony export */   positionKeywords: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.positionKeywords),
/* harmony export */   repeatStyleKeywords: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.repeatStyleKeywords),
/* harmony export */   svgElements: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.svgElements),
/* harmony export */   textToMarkedString: () => (/* reexport safe */ _entry__WEBPACK_IMPORTED_MODULE_0__.textToMarkedString),
/* harmony export */   transitionTimingFunctions: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.transitionTimingFunctions),
/* harmony export */   units: () => (/* reexport safe */ _builtinData__WEBPACK_IMPORTED_MODULE_2__.units)
/* harmony export */ });
/* harmony import */ var _entry__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./entry */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/entry.js");
/* harmony import */ var _colors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./colors */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/colors.js");
/* harmony import */ var _builtinData__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./builtinData */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/builtinData.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/






/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssErrors.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/parser/cssErrors.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSIssueType: () => (/* binding */ CSSIssueType),
/* harmony export */   ParseError: () => (/* binding */ ParseError)
/* harmony export */ });
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_0__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


class CSSIssueType {
    constructor(id, message) {
        this.id = id;
        this.message = message;
    }
}
const ParseError = {
    NumberExpected: new CSSIssueType('css-numberexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("number expected")),
    ConditionExpected: new CSSIssueType('css-conditionexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("condition expected")),
    RuleOrSelectorExpected: new CSSIssueType('css-ruleorselectorexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("at-rule or selector expected")),
    DotExpected: new CSSIssueType('css-dotexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("dot expected")),
    ColonExpected: new CSSIssueType('css-colonexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("colon expected")),
    SemiColonExpected: new CSSIssueType('css-semicolonexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("semi-colon expected")),
    TermExpected: new CSSIssueType('css-termexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("term expected")),
    ExpressionExpected: new CSSIssueType('css-expressionexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("expression expected")),
    OperatorExpected: new CSSIssueType('css-operatorexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("operator expected")),
    IdentifierExpected: new CSSIssueType('css-identifierexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("identifier expected")),
    PercentageExpected: new CSSIssueType('css-percentageexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("percentage expected")),
    URIOrStringExpected: new CSSIssueType('css-uriorstringexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("uri or string expected")),
    URIExpected: new CSSIssueType('css-uriexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("URI expected")),
    VariableNameExpected: new CSSIssueType('css-varnameexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("variable name expected")),
    VariableValueExpected: new CSSIssueType('css-varvalueexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("variable value expected")),
    PropertyValueExpected: new CSSIssueType('css-propertyvalueexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("property value expected")),
    LeftCurlyExpected: new CSSIssueType('css-lcurlyexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("{ expected")),
    RightCurlyExpected: new CSSIssueType('css-rcurlyexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("} expected")),
    LeftSquareBracketExpected: new CSSIssueType('css-rbracketexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("[ expected")),
    RightSquareBracketExpected: new CSSIssueType('css-lbracketexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("] expected")),
    LeftParenthesisExpected: new CSSIssueType('css-lparentexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("( expected")),
    RightParenthesisExpected: new CSSIssueType('css-rparentexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t(") expected")),
    CommaExpected: new CSSIssueType('css-commaexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("comma expected")),
    PageDirectiveOrDeclarationExpected: new CSSIssueType('css-pagedirordeclexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("page directive or declaraton expected")),
    UnknownAtRule: new CSSIssueType('css-unknownatrule', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("at-rule unknown")),
    UnknownKeyword: new CSSIssueType('css-unknownkeyword', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("unknown keyword")),
    SelectorExpected: new CSSIssueType('css-selectorexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("selector expected")),
    StringLiteralExpected: new CSSIssueType('css-stringliteralexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("string literal expected")),
    WhitespaceExpected: new CSSIssueType('css-whitespaceexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("whitespace expected")),
    MediaQueryExpected: new CSSIssueType('css-mediaqueryexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("media query expected")),
    IdentifierOrWildcardExpected: new CSSIssueType('css-idorwildcardexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("identifier or wildcard expected")),
    WildcardExpected: new CSSIssueType('css-wildcardexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("wildcard expected")),
    IdentifierOrVariableExpected: new CSSIssueType('css-idorvarexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("identifier or variable expected")),
};


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AbstractDeclaration: () => (/* binding */ AbstractDeclaration),
/* harmony export */   AtApplyRule: () => (/* binding */ AtApplyRule),
/* harmony export */   AttributeSelector: () => (/* binding */ AttributeSelector),
/* harmony export */   BinaryExpression: () => (/* binding */ BinaryExpression),
/* harmony export */   BodyDeclaration: () => (/* binding */ BodyDeclaration),
/* harmony export */   Container: () => (/* binding */ Container),
/* harmony export */   CustomPropertyDeclaration: () => (/* binding */ CustomPropertyDeclaration),
/* harmony export */   CustomPropertySet: () => (/* binding */ CustomPropertySet),
/* harmony export */   Declaration: () => (/* binding */ Declaration),
/* harmony export */   Declarations: () => (/* binding */ Declarations),
/* harmony export */   Document: () => (/* binding */ Document),
/* harmony export */   EachStatement: () => (/* binding */ EachStatement),
/* harmony export */   ElseStatement: () => (/* binding */ ElseStatement),
/* harmony export */   Expression: () => (/* binding */ Expression),
/* harmony export */   ExtendsReference: () => (/* binding */ ExtendsReference),
/* harmony export */   FontFace: () => (/* binding */ FontFace),
/* harmony export */   ForStatement: () => (/* binding */ ForStatement),
/* harmony export */   Forward: () => (/* binding */ Forward),
/* harmony export */   ForwardVisibility: () => (/* binding */ ForwardVisibility),
/* harmony export */   Function: () => (/* binding */ Function),
/* harmony export */   FunctionArgument: () => (/* binding */ FunctionArgument),
/* harmony export */   FunctionDeclaration: () => (/* binding */ FunctionDeclaration),
/* harmony export */   FunctionParameter: () => (/* binding */ FunctionParameter),
/* harmony export */   GuardCondition: () => (/* binding */ GuardCondition),
/* harmony export */   HexColorValue: () => (/* binding */ HexColorValue),
/* harmony export */   Identifier: () => (/* binding */ Identifier),
/* harmony export */   IfStatement: () => (/* binding */ IfStatement),
/* harmony export */   Import: () => (/* binding */ Import),
/* harmony export */   Interpolation: () => (/* binding */ Interpolation),
/* harmony export */   Invocation: () => (/* binding */ Invocation),
/* harmony export */   Keyframe: () => (/* binding */ Keyframe),
/* harmony export */   KeyframeSelector: () => (/* binding */ KeyframeSelector),
/* harmony export */   Layer: () => (/* binding */ Layer),
/* harmony export */   LessGuard: () => (/* binding */ LessGuard),
/* harmony export */   Level: () => (/* binding */ Level),
/* harmony export */   ListEntry: () => (/* binding */ ListEntry),
/* harmony export */   Marker: () => (/* binding */ Marker),
/* harmony export */   Media: () => (/* binding */ Media),
/* harmony export */   MediaCondition: () => (/* binding */ MediaCondition),
/* harmony export */   MediaFeature: () => (/* binding */ MediaFeature),
/* harmony export */   MediaQuery: () => (/* binding */ MediaQuery),
/* harmony export */   Medialist: () => (/* binding */ Medialist),
/* harmony export */   MixinContentDeclaration: () => (/* binding */ MixinContentDeclaration),
/* harmony export */   MixinContentReference: () => (/* binding */ MixinContentReference),
/* harmony export */   MixinDeclaration: () => (/* binding */ MixinDeclaration),
/* harmony export */   MixinReference: () => (/* binding */ MixinReference),
/* harmony export */   Module: () => (/* binding */ Module),
/* harmony export */   ModuleConfiguration: () => (/* binding */ ModuleConfiguration),
/* harmony export */   Namespace: () => (/* binding */ Namespace),
/* harmony export */   NestedProperties: () => (/* binding */ NestedProperties),
/* harmony export */   Node: () => (/* binding */ Node),
/* harmony export */   NodeType: () => (/* binding */ NodeType),
/* harmony export */   Nodelist: () => (/* binding */ Nodelist),
/* harmony export */   NumericValue: () => (/* binding */ NumericValue),
/* harmony export */   Operator: () => (/* binding */ Operator),
/* harmony export */   Page: () => (/* binding */ Page),
/* harmony export */   PageBoxMarginBox: () => (/* binding */ PageBoxMarginBox),
/* harmony export */   ParseErrorCollector: () => (/* binding */ ParseErrorCollector),
/* harmony export */   Property: () => (/* binding */ Property),
/* harmony export */   PropertyAtRule: () => (/* binding */ PropertyAtRule),
/* harmony export */   RatioValue: () => (/* binding */ RatioValue),
/* harmony export */   ReferenceType: () => (/* binding */ ReferenceType),
/* harmony export */   RuleSet: () => (/* binding */ RuleSet),
/* harmony export */   Selector: () => (/* binding */ Selector),
/* harmony export */   SimpleSelector: () => (/* binding */ SimpleSelector),
/* harmony export */   Stylesheet: () => (/* binding */ Stylesheet),
/* harmony export */   Supports: () => (/* binding */ Supports),
/* harmony export */   SupportsCondition: () => (/* binding */ SupportsCondition),
/* harmony export */   Term: () => (/* binding */ Term),
/* harmony export */   UnicodeRange: () => (/* binding */ UnicodeRange),
/* harmony export */   UnknownAtRule: () => (/* binding */ UnknownAtRule),
/* harmony export */   Use: () => (/* binding */ Use),
/* harmony export */   Variable: () => (/* binding */ Variable),
/* harmony export */   VariableDeclaration: () => (/* binding */ VariableDeclaration),
/* harmony export */   ViewPort: () => (/* binding */ ViewPort),
/* harmony export */   WhileStatement: () => (/* binding */ WhileStatement),
/* harmony export */   getNodeAtOffset: () => (/* binding */ getNodeAtOffset),
/* harmony export */   getNodePath: () => (/* binding */ getNodePath),
/* harmony export */   getParentDeclaration: () => (/* binding */ getParentDeclaration)
/* harmony export */ });
/* harmony import */ var _utils_strings__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/strings */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/strings.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


/// <summary>
/// Nodes for the css 2.1 specification. See for reference:
/// http://www.w3.org/TR/CSS21/grammar.html#grammar
/// </summary>
var NodeType;
(function (NodeType) {
    NodeType[NodeType["Undefined"] = 0] = "Undefined";
    NodeType[NodeType["Identifier"] = 1] = "Identifier";
    NodeType[NodeType["Stylesheet"] = 2] = "Stylesheet";
    NodeType[NodeType["Ruleset"] = 3] = "Ruleset";
    NodeType[NodeType["Selector"] = 4] = "Selector";
    NodeType[NodeType["SimpleSelector"] = 5] = "SimpleSelector";
    NodeType[NodeType["SelectorInterpolation"] = 6] = "SelectorInterpolation";
    NodeType[NodeType["SelectorCombinator"] = 7] = "SelectorCombinator";
    NodeType[NodeType["SelectorCombinatorParent"] = 8] = "SelectorCombinatorParent";
    NodeType[NodeType["SelectorCombinatorSibling"] = 9] = "SelectorCombinatorSibling";
    NodeType[NodeType["SelectorCombinatorAllSiblings"] = 10] = "SelectorCombinatorAllSiblings";
    NodeType[NodeType["SelectorCombinatorShadowPiercingDescendant"] = 11] = "SelectorCombinatorShadowPiercingDescendant";
    NodeType[NodeType["Page"] = 12] = "Page";
    NodeType[NodeType["PageBoxMarginBox"] = 13] = "PageBoxMarginBox";
    NodeType[NodeType["ClassSelector"] = 14] = "ClassSelector";
    NodeType[NodeType["IdentifierSelector"] = 15] = "IdentifierSelector";
    NodeType[NodeType["ElementNameSelector"] = 16] = "ElementNameSelector";
    NodeType[NodeType["PseudoSelector"] = 17] = "PseudoSelector";
    NodeType[NodeType["AttributeSelector"] = 18] = "AttributeSelector";
    NodeType[NodeType["Declaration"] = 19] = "Declaration";
    NodeType[NodeType["Declarations"] = 20] = "Declarations";
    NodeType[NodeType["Property"] = 21] = "Property";
    NodeType[NodeType["Expression"] = 22] = "Expression";
    NodeType[NodeType["BinaryExpression"] = 23] = "BinaryExpression";
    NodeType[NodeType["Term"] = 24] = "Term";
    NodeType[NodeType["Operator"] = 25] = "Operator";
    NodeType[NodeType["Value"] = 26] = "Value";
    NodeType[NodeType["StringLiteral"] = 27] = "StringLiteral";
    NodeType[NodeType["URILiteral"] = 28] = "URILiteral";
    NodeType[NodeType["EscapedValue"] = 29] = "EscapedValue";
    NodeType[NodeType["Function"] = 30] = "Function";
    NodeType[NodeType["NumericValue"] = 31] = "NumericValue";
    NodeType[NodeType["HexColorValue"] = 32] = "HexColorValue";
    NodeType[NodeType["RatioValue"] = 33] = "RatioValue";
    NodeType[NodeType["MixinDeclaration"] = 34] = "MixinDeclaration";
    NodeType[NodeType["MixinReference"] = 35] = "MixinReference";
    NodeType[NodeType["VariableName"] = 36] = "VariableName";
    NodeType[NodeType["VariableDeclaration"] = 37] = "VariableDeclaration";
    NodeType[NodeType["Prio"] = 38] = "Prio";
    NodeType[NodeType["Interpolation"] = 39] = "Interpolation";
    NodeType[NodeType["NestedProperties"] = 40] = "NestedProperties";
    NodeType[NodeType["ExtendsReference"] = 41] = "ExtendsReference";
    NodeType[NodeType["SelectorPlaceholder"] = 42] = "SelectorPlaceholder";
    NodeType[NodeType["Debug"] = 43] = "Debug";
    NodeType[NodeType["If"] = 44] = "If";
    NodeType[NodeType["Else"] = 45] = "Else";
    NodeType[NodeType["For"] = 46] = "For";
    NodeType[NodeType["Each"] = 47] = "Each";
    NodeType[NodeType["While"] = 48] = "While";
    NodeType[NodeType["MixinContentReference"] = 49] = "MixinContentReference";
    NodeType[NodeType["MixinContentDeclaration"] = 50] = "MixinContentDeclaration";
    NodeType[NodeType["Media"] = 51] = "Media";
    NodeType[NodeType["Keyframe"] = 52] = "Keyframe";
    NodeType[NodeType["FontFace"] = 53] = "FontFace";
    NodeType[NodeType["Import"] = 54] = "Import";
    NodeType[NodeType["Namespace"] = 55] = "Namespace";
    NodeType[NodeType["Invocation"] = 56] = "Invocation";
    NodeType[NodeType["FunctionDeclaration"] = 57] = "FunctionDeclaration";
    NodeType[NodeType["ReturnStatement"] = 58] = "ReturnStatement";
    NodeType[NodeType["MediaQuery"] = 59] = "MediaQuery";
    NodeType[NodeType["MediaCondition"] = 60] = "MediaCondition";
    NodeType[NodeType["MediaFeature"] = 61] = "MediaFeature";
    NodeType[NodeType["FunctionParameter"] = 62] = "FunctionParameter";
    NodeType[NodeType["FunctionArgument"] = 63] = "FunctionArgument";
    NodeType[NodeType["KeyframeSelector"] = 64] = "KeyframeSelector";
    NodeType[NodeType["ViewPort"] = 65] = "ViewPort";
    NodeType[NodeType["Document"] = 66] = "Document";
    NodeType[NodeType["AtApplyRule"] = 67] = "AtApplyRule";
    NodeType[NodeType["CustomPropertyDeclaration"] = 68] = "CustomPropertyDeclaration";
    NodeType[NodeType["CustomPropertySet"] = 69] = "CustomPropertySet";
    NodeType[NodeType["ListEntry"] = 70] = "ListEntry";
    NodeType[NodeType["Supports"] = 71] = "Supports";
    NodeType[NodeType["SupportsCondition"] = 72] = "SupportsCondition";
    NodeType[NodeType["NamespacePrefix"] = 73] = "NamespacePrefix";
    NodeType[NodeType["GridLine"] = 74] = "GridLine";
    NodeType[NodeType["Plugin"] = 75] = "Plugin";
    NodeType[NodeType["UnknownAtRule"] = 76] = "UnknownAtRule";
    NodeType[NodeType["Use"] = 77] = "Use";
    NodeType[NodeType["ModuleConfiguration"] = 78] = "ModuleConfiguration";
    NodeType[NodeType["Forward"] = 79] = "Forward";
    NodeType[NodeType["ForwardVisibility"] = 80] = "ForwardVisibility";
    NodeType[NodeType["Module"] = 81] = "Module";
    NodeType[NodeType["UnicodeRange"] = 82] = "UnicodeRange";
    NodeType[NodeType["Layer"] = 83] = "Layer";
    NodeType[NodeType["LayerNameList"] = 84] = "LayerNameList";
    NodeType[NodeType["LayerName"] = 85] = "LayerName";
    NodeType[NodeType["PropertyAtRule"] = 86] = "PropertyAtRule";
    NodeType[NodeType["Container"] = 87] = "Container";
})(NodeType || (NodeType = {}));
var ReferenceType;
(function (ReferenceType) {
    ReferenceType[ReferenceType["Mixin"] = 0] = "Mixin";
    ReferenceType[ReferenceType["Rule"] = 1] = "Rule";
    ReferenceType[ReferenceType["Variable"] = 2] = "Variable";
    ReferenceType[ReferenceType["Function"] = 3] = "Function";
    ReferenceType[ReferenceType["Keyframe"] = 4] = "Keyframe";
    ReferenceType[ReferenceType["Unknown"] = 5] = "Unknown";
    ReferenceType[ReferenceType["Module"] = 6] = "Module";
    ReferenceType[ReferenceType["Forward"] = 7] = "Forward";
    ReferenceType[ReferenceType["ForwardVisibility"] = 8] = "ForwardVisibility";
    ReferenceType[ReferenceType["Property"] = 9] = "Property";
})(ReferenceType || (ReferenceType = {}));
function getNodeAtOffset(node, offset) {
    let candidate = null;
    if (!node || offset < node.offset || offset > node.end) {
        return null;
    }
    // Find the shortest node at the position
    node.accept((node) => {
        if (node.offset === -1 && node.length === -1) {
            return true;
        }
        if (node.offset <= offset && node.end >= offset) {
            if (!candidate) {
                candidate = node;
            }
            else if (node.length <= candidate.length) {
                candidate = node;
            }
            return true;
        }
        return false;
    });
    return candidate;
}
function getNodePath(node, offset) {
    let candidate = getNodeAtOffset(node, offset);
    const path = [];
    while (candidate) {
        path.unshift(candidate);
        candidate = candidate.parent;
    }
    return path;
}
function getParentDeclaration(node) {
    const decl = node.findParent(NodeType.Declaration);
    const value = decl && decl.getValue();
    if (value && value.encloses(node)) {
        return decl;
    }
    return null;
}
class Node {
    get end() { return this.offset + this.length; }
    constructor(offset = -1, len = -1, nodeType) {
        this.parent = null;
        this.offset = offset;
        this.length = len;
        if (nodeType) {
            this.nodeType = nodeType;
        }
    }
    set type(type) {
        this.nodeType = type;
    }
    get type() {
        return this.nodeType || NodeType.Undefined;
    }
    getTextProvider() {
        let node = this;
        while (node && !node.textProvider) {
            node = node.parent;
        }
        if (node) {
            return node.textProvider;
        }
        return () => { return 'unknown'; };
    }
    getText() {
        return this.getTextProvider()(this.offset, this.length);
    }
    matches(str) {
        return this.length === str.length && this.getTextProvider()(this.offset, this.length) === str;
    }
    startsWith(str) {
        return this.length >= str.length && this.getTextProvider()(this.offset, str.length) === str;
    }
    endsWith(str) {
        return this.length >= str.length && this.getTextProvider()(this.end - str.length, str.length) === str;
    }
    accept(visitor) {
        if (visitor(this) && this.children) {
            for (const child of this.children) {
                child.accept(visitor);
            }
        }
    }
    acceptVisitor(visitor) {
        this.accept(visitor.visitNode.bind(visitor));
    }
    adoptChild(node, index = -1) {
        if (node.parent && node.parent.children) {
            const idx = node.parent.children.indexOf(node);
            if (idx >= 0) {
                node.parent.children.splice(idx, 1);
            }
        }
        node.parent = this;
        let children = this.children;
        if (!children) {
            children = this.children = [];
        }
        if (index !== -1) {
            children.splice(index, 0, node);
        }
        else {
            children.push(node);
        }
        return node;
    }
    attachTo(parent, index = -1) {
        if (parent) {
            parent.adoptChild(this, index);
        }
        return this;
    }
    collectIssues(results) {
        if (this.issues) {
            results.push.apply(results, this.issues);
        }
    }
    addIssue(issue) {
        if (!this.issues) {
            this.issues = [];
        }
        this.issues.push(issue);
    }
    hasIssue(rule) {
        return Array.isArray(this.issues) && this.issues.some(i => i.getRule() === rule);
    }
    isErroneous(recursive = false) {
        if (this.issues && this.issues.length > 0) {
            return true;
        }
        return recursive && Array.isArray(this.children) && this.children.some(c => c.isErroneous(true));
    }
    setNode(field, node, index = -1) {
        if (node) {
            node.attachTo(this, index);
            this[field] = node;
            return true;
        }
        return false;
    }
    addChild(node) {
        if (node) {
            if (!this.children) {
                this.children = [];
            }
            node.attachTo(this);
            this.updateOffsetAndLength(node);
            return true;
        }
        return false;
    }
    updateOffsetAndLength(node) {
        if (node.offset < this.offset || this.offset === -1) {
            this.offset = node.offset;
        }
        const nodeEnd = node.end;
        if ((nodeEnd > this.end) || this.length === -1) {
            this.length = nodeEnd - this.offset;
        }
    }
    hasChildren() {
        return !!this.children && this.children.length > 0;
    }
    getChildren() {
        return this.children ? this.children.slice(0) : [];
    }
    getChild(index) {
        if (this.children && index < this.children.length) {
            return this.children[index];
        }
        return null;
    }
    addChildren(nodes) {
        for (const node of nodes) {
            this.addChild(node);
        }
    }
    findFirstChildBeforeOffset(offset) {
        if (this.children) {
            let current = null;
            for (let i = this.children.length - 1; i >= 0; i--) {
                // iterate until we find a child that has a start offset smaller than the input offset
                current = this.children[i];
                if (current.offset <= offset) {
                    return current;
                }
            }
        }
        return null;
    }
    findChildAtOffset(offset, goDeep) {
        const current = this.findFirstChildBeforeOffset(offset);
        if (current && current.end >= offset) {
            if (goDeep) {
                return current.findChildAtOffset(offset, true) || current;
            }
            return current;
        }
        return null;
    }
    encloses(candidate) {
        return this.offset <= candidate.offset && this.offset + this.length >= candidate.offset + candidate.length;
    }
    getParent() {
        let result = this.parent;
        while (result instanceof Nodelist) {
            result = result.parent;
        }
        return result;
    }
    findParent(type) {
        let result = this;
        while (result && result.type !== type) {
            result = result.parent;
        }
        return result;
    }
    findAParent(...types) {
        let result = this;
        while (result && !types.some(t => result.type === t)) {
            result = result.parent;
        }
        return result;
    }
    setData(key, value) {
        if (!this.options) {
            this.options = {};
        }
        this.options[key] = value;
    }
    getData(key) {
        if (!this.options || !this.options.hasOwnProperty(key)) {
            return null;
        }
        return this.options[key];
    }
}
class Nodelist extends Node {
    constructor(parent, index = -1) {
        super(-1, -1);
        this.attachTo(parent, index);
        this.offset = -1;
        this.length = -1;
    }
}
class UnicodeRange extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.UnicodeRange;
    }
    setRangeStart(rangeStart) {
        return this.setNode('rangeStart', rangeStart);
    }
    getRangeStart() {
        return this.rangeStart;
    }
    setRangeEnd(rangeEnd) {
        return this.setNode('rangeEnd', rangeEnd);
    }
    getRangeEnd() {
        return this.rangeEnd;
    }
}
class Identifier extends Node {
    constructor(offset, length) {
        super(offset, length);
        this.isCustomProperty = false;
    }
    get type() {
        return NodeType.Identifier;
    }
    containsInterpolation() {
        return this.hasChildren();
    }
}
class Stylesheet extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Stylesheet;
    }
}
class Declarations extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Declarations;
    }
}
class BodyDeclaration extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    getDeclarations() {
        return this.declarations;
    }
    setDeclarations(decls) {
        return this.setNode('declarations', decls);
    }
}
class RuleSet extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Ruleset;
    }
    getSelectors() {
        if (!this.selectors) {
            this.selectors = new Nodelist(this);
        }
        return this.selectors;
    }
    isNested() {
        return !!this.parent && this.parent.findParent(NodeType.Declarations) !== null;
    }
}
class Selector extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Selector;
    }
}
class SimpleSelector extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.SimpleSelector;
    }
}
class AtApplyRule extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.AtApplyRule;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : '';
    }
}
class AbstractDeclaration extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
}
class CustomPropertySet extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.CustomPropertySet;
    }
}
class Declaration extends AbstractDeclaration {
    constructor(offset, length) {
        super(offset, length);
        this.property = null;
    }
    get type() {
        return NodeType.Declaration;
    }
    setProperty(node) {
        return this.setNode('property', node);
    }
    getProperty() {
        return this.property;
    }
    getFullPropertyName() {
        const propertyName = this.property ? this.property.getName() : 'unknown';
        if (this.parent instanceof Declarations && this.parent.getParent() instanceof NestedProperties) {
            const parentDecl = this.parent.getParent().getParent();
            if (parentDecl instanceof Declaration) {
                return parentDecl.getFullPropertyName() + propertyName;
            }
        }
        return propertyName;
    }
    getNonPrefixedPropertyName() {
        const propertyName = this.getFullPropertyName();
        if (propertyName && propertyName.charAt(0) === '-') {
            const vendorPrefixEnd = propertyName.indexOf('-', 1);
            if (vendorPrefixEnd !== -1) {
                return propertyName.substring(vendorPrefixEnd + 1);
            }
        }
        return propertyName;
    }
    setValue(value) {
        return this.setNode('value', value);
    }
    getValue() {
        return this.value;
    }
    setNestedProperties(value) {
        return this.setNode('nestedProperties', value);
    }
    getNestedProperties() {
        return this.nestedProperties;
    }
}
class CustomPropertyDeclaration extends Declaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.CustomPropertyDeclaration;
    }
    setPropertySet(value) {
        return this.setNode('propertySet', value);
    }
    getPropertySet() {
        return this.propertySet;
    }
}
class Property extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Property;
    }
    setIdentifier(value) {
        return this.setNode('identifier', value);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return (0,_utils_strings__WEBPACK_IMPORTED_MODULE_0__.trim)(this.getText(), /[_\+]+$/); /* +_: less merge */
    }
    isCustomProperty() {
        return !!this.identifier && this.identifier.isCustomProperty;
    }
}
class Invocation extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Invocation;
    }
    getArguments() {
        if (!this.arguments) {
            this.arguments = new Nodelist(this);
        }
        return this.arguments;
    }
}
class Function extends Invocation {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Function;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : '';
    }
}
class FunctionParameter extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.FunctionParameter;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : '';
    }
    setDefaultValue(node) {
        return this.setNode('defaultValue', node, 0);
    }
    getDefaultValue() {
        return this.defaultValue;
    }
}
class FunctionArgument extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.FunctionArgument;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : '';
    }
    setValue(node) {
        return this.setNode('value', node, 0);
    }
    getValue() {
        return this.value;
    }
}
class IfStatement extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.If;
    }
    setExpression(node) {
        return this.setNode('expression', node, 0);
    }
    setElseClause(elseClause) {
        return this.setNode('elseClause', elseClause);
    }
}
class ForStatement extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.For;
    }
    setVariable(node) {
        return this.setNode('variable', node, 0);
    }
}
class EachStatement extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Each;
    }
    getVariables() {
        if (!this.variables) {
            this.variables = new Nodelist(this);
        }
        return this.variables;
    }
}
class WhileStatement extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.While;
    }
}
class ElseStatement extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Else;
    }
}
class FunctionDeclaration extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.FunctionDeclaration;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : '';
    }
    getParameters() {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    }
}
class ViewPort extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.ViewPort;
    }
}
class FontFace extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.FontFace;
    }
}
class NestedProperties extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.NestedProperties;
    }
}
class Keyframe extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Keyframe;
    }
    setKeyword(keyword) {
        return this.setNode('keyword', keyword, 0);
    }
    getKeyword() {
        return this.keyword;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : '';
    }
}
class KeyframeSelector extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.KeyframeSelector;
    }
}
class Import extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Import;
    }
    setMedialist(node) {
        if (node) {
            node.attachTo(this);
            return true;
        }
        return false;
    }
}
class Use extends Node {
    get type() {
        return NodeType.Use;
    }
    getParameters() {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
}
class ModuleConfiguration extends Node {
    get type() {
        return NodeType.ModuleConfiguration;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : '';
    }
    setValue(node) {
        return this.setNode('value', node, 0);
    }
    getValue() {
        return this.value;
    }
}
class Forward extends Node {
    get type() {
        return NodeType.Forward;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getMembers() {
        if (!this.members) {
            this.members = new Nodelist(this);
        }
        return this.members;
    }
    getParameters() {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    }
}
class ForwardVisibility extends Node {
    get type() {
        return NodeType.ForwardVisibility;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
}
class Namespace extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Namespace;
    }
}
class Media extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Media;
    }
}
class Supports extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Supports;
    }
}
class Layer extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Layer;
    }
    setNames(names) {
        return this.setNode('names', names);
    }
    getNames() {
        return this.names;
    }
}
class PropertyAtRule extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.PropertyAtRule;
    }
    setName(node) {
        if (node) {
            node.attachTo(this);
            this.name = node;
            return true;
        }
        return false;
    }
    getName() {
        return this.name;
    }
}
class Document extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Document;
    }
}
class Container extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Container;
    }
}
class Medialist extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
}
class MediaQuery extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MediaQuery;
    }
}
class MediaCondition extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MediaCondition;
    }
}
class MediaFeature extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MediaFeature;
    }
}
class SupportsCondition extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.SupportsCondition;
    }
}
class Page extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Page;
    }
}
class PageBoxMarginBox extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.PageBoxMarginBox;
    }
}
class Expression extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Expression;
    }
}
class BinaryExpression extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.BinaryExpression;
    }
    setLeft(left) {
        return this.setNode('left', left);
    }
    getLeft() {
        return this.left;
    }
    setRight(right) {
        return this.setNode('right', right);
    }
    getRight() {
        return this.right;
    }
    setOperator(value) {
        return this.setNode('operator', value);
    }
    getOperator() {
        return this.operator;
    }
}
class Term extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Term;
    }
    setOperator(value) {
        return this.setNode('operator', value);
    }
    getOperator() {
        return this.operator;
    }
    setExpression(value) {
        return this.setNode('expression', value);
    }
    getExpression() {
        return this.expression;
    }
}
class AttributeSelector extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.AttributeSelector;
    }
    setNamespacePrefix(value) {
        return this.setNode('namespacePrefix', value);
    }
    getNamespacePrefix() {
        return this.namespacePrefix;
    }
    setIdentifier(value) {
        return this.setNode('identifier', value);
    }
    getIdentifier() {
        return this.identifier;
    }
    setOperator(operator) {
        return this.setNode('operator', operator);
    }
    getOperator() {
        return this.operator;
    }
    setValue(value) {
        return this.setNode('value', value);
    }
    getValue() {
        return this.value;
    }
}
class Operator extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Operator;
    }
}
class HexColorValue extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.HexColorValue;
    }
}
class RatioValue extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.RatioValue;
    }
}
const _dot = '.'.charCodeAt(0), _0 = '0'.charCodeAt(0), _9 = '9'.charCodeAt(0);
class NumericValue extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.NumericValue;
    }
    getValue() {
        const raw = this.getText();
        let unitIdx = 0;
        let code;
        for (let i = 0, len = raw.length; i < len; i++) {
            code = raw.charCodeAt(i);
            if (!(_0 <= code && code <= _9 || code === _dot)) {
                break;
            }
            unitIdx += 1;
        }
        return {
            value: raw.substring(0, unitIdx),
            unit: unitIdx < raw.length ? raw.substring(unitIdx) : undefined
        };
    }
}
class VariableDeclaration extends AbstractDeclaration {
    constructor(offset, length) {
        super(offset, length);
        this.needsSemicolon = true;
    }
    get type() {
        return NodeType.VariableDeclaration;
    }
    setVariable(node) {
        if (node) {
            node.attachTo(this);
            this.variable = node;
            return true;
        }
        return false;
    }
    getVariable() {
        return this.variable;
    }
    getName() {
        return this.variable ? this.variable.getName() : '';
    }
    setValue(node) {
        if (node) {
            node.attachTo(this);
            this.value = node;
            return true;
        }
        return false;
    }
    getValue() {
        return this.value;
    }
}
class Interpolation extends Node {
    // private _interpolations: void; // workaround for https://github.com/Microsoft/TypeScript/issues/18276
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.Interpolation;
    }
}
class Variable extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.VariableName;
    }
    getName() {
        return this.getText();
    }
}
class ExtendsReference extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.ExtendsReference;
    }
    getSelectors() {
        if (!this.selectors) {
            this.selectors = new Nodelist(this);
        }
        return this.selectors;
    }
}
class MixinContentReference extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MixinContentReference;
    }
    getArguments() {
        if (!this.arguments) {
            this.arguments = new Nodelist(this);
        }
        return this.arguments;
    }
}
class MixinContentDeclaration extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MixinContentDeclaration;
    }
    getParameters() {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    }
}
class MixinReference extends Node {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MixinReference;
    }
    getNamespaces() {
        if (!this.namespaces) {
            this.namespaces = new Nodelist(this);
        }
        return this.namespaces;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : '';
    }
    getArguments() {
        if (!this.arguments) {
            this.arguments = new Nodelist(this);
        }
        return this.arguments;
    }
    setContent(node) {
        return this.setNode('content', node);
    }
    getContent() {
        return this.content;
    }
}
class MixinDeclaration extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.MixinDeclaration;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
    getName() {
        return this.identifier ? this.identifier.getText() : '';
    }
    getParameters() {
        if (!this.parameters) {
            this.parameters = new Nodelist(this);
        }
        return this.parameters;
    }
    setGuard(node) {
        if (node) {
            node.attachTo(this);
            this.guard = node;
        }
        return false;
    }
}
class UnknownAtRule extends BodyDeclaration {
    constructor(offset, length) {
        super(offset, length);
    }
    get type() {
        return NodeType.UnknownAtRule;
    }
    setAtRuleName(atRuleName) {
        this.atRuleName = atRuleName;
    }
    getAtRuleName() {
        return this.atRuleName;
    }
}
class ListEntry extends Node {
    get type() {
        return NodeType.ListEntry;
    }
    setKey(node) {
        return this.setNode('key', node, 0);
    }
    setValue(node) {
        return this.setNode('value', node, 1);
    }
}
class LessGuard extends Node {
    getConditions() {
        if (!this.conditions) {
            this.conditions = new Nodelist(this);
        }
        return this.conditions;
    }
}
class GuardCondition extends Node {
    setVariable(node) {
        return this.setNode('variable', node);
    }
}
class Module extends Node {
    get type() {
        return NodeType.Module;
    }
    setIdentifier(node) {
        return this.setNode('identifier', node, 0);
    }
    getIdentifier() {
        return this.identifier;
    }
}
var Level;
(function (Level) {
    Level[Level["Ignore"] = 1] = "Ignore";
    Level[Level["Warning"] = 2] = "Warning";
    Level[Level["Error"] = 4] = "Error";
})(Level || (Level = {}));
class Marker {
    constructor(node, rule, level, message, offset = node.offset, length = node.length) {
        this.node = node;
        this.rule = rule;
        this.level = level;
        this.message = message || rule.message;
        this.offset = offset;
        this.length = length;
    }
    getRule() {
        return this.rule;
    }
    getLevel() {
        return this.level;
    }
    getOffset() {
        return this.offset;
    }
    getLength() {
        return this.length;
    }
    getNode() {
        return this.node;
    }
    getMessage() {
        return this.message;
    }
}
/*
export class DefaultVisitor implements IVisitor {

    public visitNode(node:Node):boolean {
        switch (node.type) {
            case NodeType.Stylesheet:
                return this.visitStylesheet(<Stylesheet> node);
            case NodeType.FontFace:
                return this.visitFontFace(<FontFace> node);
            case NodeType.Ruleset:
                return this.visitRuleSet(<RuleSet> node);
            case NodeType.Selector:
                return this.visitSelector(<Selector> node);
            case NodeType.SimpleSelector:
                return this.visitSimpleSelector(<SimpleSelector> node);
            case NodeType.Declaration:
                return this.visitDeclaration(<Declaration> node);
            case NodeType.Function:
                return this.visitFunction(<Function> node);
            case NodeType.FunctionDeclaration:
                return this.visitFunctionDeclaration(<FunctionDeclaration> node);
            case NodeType.FunctionParameter:
                return this.visitFunctionParameter(<FunctionParameter> node);
            case NodeType.FunctionArgument:
                return this.visitFunctionArgument(<FunctionArgument> node);
            case NodeType.Term:
                return this.visitTerm(<Term> node);
            case NodeType.Declaration:
                return this.visitExpression(<Expression> node);
            case NodeType.NumericValue:
                return this.visitNumericValue(<NumericValue> node);
            case NodeType.Page:
                return this.visitPage(<Page> node);
            case NodeType.PageBoxMarginBox:
                return this.visitPageBoxMarginBox(<PageBoxMarginBox> node);
            case NodeType.Property:
                return this.visitProperty(<Property> node);
            case NodeType.NumericValue:
                return this.visitNodelist(<Nodelist> node);
            case NodeType.Import:
                return this.visitImport(<Import> node);
            case NodeType.Namespace:
                return this.visitNamespace(<Namespace> node);
            case NodeType.Keyframe:
                return this.visitKeyframe(<Keyframe> node);
            case NodeType.KeyframeSelector:
                return this.visitKeyframeSelector(<KeyframeSelector> node);
            case NodeType.MixinDeclaration:
                return this.visitMixinDeclaration(<MixinDeclaration> node);
            case NodeType.MixinReference:
                return this.visitMixinReference(<MixinReference> node);
            case NodeType.Variable:
                return this.visitVariable(<Variable> node);
            case NodeType.VariableDeclaration:
                return this.visitVariableDeclaration(<VariableDeclaration> node);
        }
        return this.visitUnknownNode(node);
    }

    public visitFontFace(node:FontFace):boolean {
        return true;
    }

    public visitKeyframe(node:Keyframe):boolean {
        return true;
    }

    public visitKeyframeSelector(node:KeyframeSelector):boolean {
        return true;
    }

    public visitStylesheet(node:Stylesheet):boolean {
        return true;
    }

    public visitProperty(Node:Property):boolean {
        return true;
    }

    public visitRuleSet(node:RuleSet):boolean {
        return true;
    }

    public visitSelector(node:Selector):boolean {
        return true;
    }

    public visitSimpleSelector(node:SimpleSelector):boolean {
        return true;
    }

    public visitDeclaration(node:Declaration):boolean {
        return true;
    }

    public visitFunction(node:Function):boolean {
        return true;
    }

    public visitFunctionDeclaration(node:FunctionDeclaration):boolean {
        return true;
    }

    public visitInvocation(node:Invocation):boolean {
        return true;
    }

    public visitTerm(node:Term):boolean {
        return true;
    }

    public visitImport(node:Import):boolean {
        return true;
    }

    public visitNamespace(node:Namespace):boolean {
        return true;
    }

    public visitExpression(node:Expression):boolean {
        return true;
    }

    public visitNumericValue(node:NumericValue):boolean {
        return true;
    }

    public visitPage(node:Page):boolean {
        return true;
    }

    public visitPageBoxMarginBox(node:PageBoxMarginBox):boolean {
        return true;
    }

    public visitNodelist(node:Nodelist):boolean {
        return true;
    }

    public visitVariableDeclaration(node:VariableDeclaration):boolean {
        return true;
    }

    public visitVariable(node:Variable):boolean {
        return true;
    }

    public visitMixinDeclaration(node:MixinDeclaration):boolean {
        return true;
    }

    public visitMixinReference(node:MixinReference):boolean {
        return true;
    }

    public visitUnknownNode(node:Node):boolean {
        return true;
    }
}
*/
class ParseErrorCollector {
    static entries(node) {
        const visitor = new ParseErrorCollector();
        node.acceptVisitor(visitor);
        return visitor.entries;
    }
    constructor() {
        this.entries = [];
    }
    visitNode(node) {
        if (node.isErroneous()) {
            node.collectIssues(this.entries);
        }
        return true;
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssParser.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/parser/cssParser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Parser: () => (/* binding */ Parser)
/* harmony export */ });
/* harmony import */ var _cssScanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/* harmony import */ var _cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _cssErrors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cssErrors */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssErrors.js");
/* harmony import */ var _languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../languageFacts/facts */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/facts.js");
/* harmony import */ var _utils_objects__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/objects */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/objects.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/






/// <summary>
/// A parser for the css core specification. See for reference:
/// https://www.w3.org/TR/CSS21/grammar.html
/// http://www.w3.org/TR/CSS21/syndata.html#tokenization
/// </summary>
class Parser {
    constructor(scnr = new _cssScanner__WEBPACK_IMPORTED_MODULE_0__.Scanner()) {
        this.keyframeRegex = /^@(\-(webkit|ms|moz|o)\-)?keyframes$/i;
        this.scanner = scnr;
        this.token = { type: _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF, offset: -1, len: 0, text: '' };
        this.prevToken = undefined;
    }
    peekIdent(text) {
        return _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident === this.token.type && text.length === this.token.text.length && text === this.token.text.toLowerCase();
    }
    peekKeyword(text) {
        return _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword === this.token.type && text.length === this.token.text.length && text === this.token.text.toLowerCase();
    }
    peekDelim(text) {
        return _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Delim === this.token.type && text === this.token.text;
    }
    peek(type) {
        return type === this.token.type;
    }
    peekOne(...types) {
        return types.indexOf(this.token.type) !== -1;
    }
    peekRegExp(type, regEx) {
        if (type !== this.token.type) {
            return false;
        }
        return regEx.test(this.token.text);
    }
    hasWhitespace() {
        return !!this.prevToken && (this.prevToken.offset + this.prevToken.len !== this.token.offset);
    }
    consumeToken() {
        this.prevToken = this.token;
        this.token = this.scanner.scan();
    }
    acceptUnicodeRange() {
        const token = this.scanner.tryScanUnicode();
        if (token) {
            this.prevToken = token;
            this.token = this.scanner.scan();
            return true;
        }
        return false;
    }
    mark() {
        return {
            prev: this.prevToken,
            curr: this.token,
            pos: this.scanner.pos()
        };
    }
    restoreAtMark(mark) {
        this.prevToken = mark.prev;
        this.token = mark.curr;
        this.scanner.goBackTo(mark.pos);
    }
    try(func) {
        const pos = this.mark();
        const node = func();
        if (!node) {
            this.restoreAtMark(pos);
            return null;
        }
        return node;
    }
    acceptOneKeyword(keywords) {
        if (_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword === this.token.type) {
            for (const keyword of keywords) {
                if (keyword.length === this.token.text.length && keyword === this.token.text.toLowerCase()) {
                    this.consumeToken();
                    return true;
                }
            }
        }
        return false;
    }
    accept(type) {
        if (type === this.token.type) {
            this.consumeToken();
            return true;
        }
        return false;
    }
    acceptIdent(text) {
        if (this.peekIdent(text)) {
            this.consumeToken();
            return true;
        }
        return false;
    }
    acceptKeyword(text) {
        if (this.peekKeyword(text)) {
            this.consumeToken();
            return true;
        }
        return false;
    }
    acceptDelim(text) {
        if (this.peekDelim(text)) {
            this.consumeToken();
            return true;
        }
        return false;
    }
    acceptRegexp(regEx) {
        if (regEx.test(this.token.text)) {
            this.consumeToken();
            return true;
        }
        return false;
    }
    _parseRegexp(regEx) {
        let node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Identifier);
        do { } while (this.acceptRegexp(regEx));
        return this.finish(node);
    }
    acceptUnquotedString() {
        const pos = this.scanner.pos();
        this.scanner.goBackTo(this.token.offset);
        const unquoted = this.scanner.scanUnquotedString();
        if (unquoted) {
            this.token = unquoted;
            this.consumeToken();
            return true;
        }
        this.scanner.goBackTo(pos);
        return false;
    }
    resync(resyncTokens, resyncStopTokens) {
        while (true) {
            if (resyncTokens && resyncTokens.indexOf(this.token.type) !== -1) {
                this.consumeToken();
                return true;
            }
            else if (resyncStopTokens && resyncStopTokens.indexOf(this.token.type) !== -1) {
                return true;
            }
            else {
                if (this.token.type === _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) {
                    return false;
                }
                this.token = this.scanner.scan();
            }
        }
    }
    createNode(nodeType) {
        return new _cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node(this.token.offset, this.token.len, nodeType);
    }
    create(ctor) {
        return new ctor(this.token.offset, this.token.len);
    }
    finish(node, error, resyncTokens, resyncStopTokens) {
        // parseNumeric misuses error for boolean flagging (however the real error mustn't be a false)
        // + nodelist offsets mustn't be modified, because there is a offset hack in rulesets for smartselection
        if (!(node instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_1__.Nodelist)) {
            if (error) {
                this.markError(node, error, resyncTokens, resyncStopTokens);
            }
            // set the node end position
            if (this.prevToken) {
                // length with more elements belonging together
                const prevEnd = this.prevToken.offset + this.prevToken.len;
                node.length = prevEnd > node.offset ? prevEnd - node.offset : 0; // offset is taken from current token, end from previous: Use 0 for empty nodes
            }
        }
        return node;
    }
    markError(node, error, resyncTokens, resyncStopTokens) {
        if (this.token !== this.lastErrorToken) { // do not report twice on the same token
            node.addIssue(new _cssNodes__WEBPACK_IMPORTED_MODULE_1__.Marker(node, error, _cssNodes__WEBPACK_IMPORTED_MODULE_1__.Level.Error, undefined, this.token.offset, this.token.len));
            this.lastErrorToken = this.token;
        }
        if (resyncTokens || resyncStopTokens) {
            this.resync(resyncTokens, resyncStopTokens);
        }
    }
    parseStylesheet(textDocument) {
        const versionId = textDocument.version;
        const text = textDocument.getText();
        const textProvider = (offset, length) => {
            if (textDocument.version !== versionId) {
                throw new Error('Underlying model has changed, AST is no longer valid');
            }
            return text.substr(offset, length);
        };
        return this.internalParse(text, this._parseStylesheet, textProvider);
    }
    internalParse(input, parseFunc, textProvider) {
        this.scanner.setSource(input);
        this.token = this.scanner.scan();
        const node = parseFunc.bind(this)();
        if (node) {
            if (textProvider) {
                node.textProvider = textProvider;
            }
            else {
                node.textProvider = (offset, length) => { return input.substr(offset, length); };
            }
        }
        return node;
    }
    _parseStylesheet() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Stylesheet);
        while (node.addChild(this._parseStylesheetStart())) {
            // Parse statements only valid at the beginning of stylesheets.
        }
        let inRecovery = false;
        do {
            let hasMatch = false;
            do {
                hasMatch = false;
                const statement = this._parseStylesheetStatement();
                if (statement) {
                    node.addChild(statement);
                    hasMatch = true;
                    inRecovery = false;
                    if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) && this._needsSemicolonAfter(statement) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                        this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
                    }
                }
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon) || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CDO) || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CDC)) {
                    // accept empty statements
                    hasMatch = true;
                    inRecovery = false;
                }
            } while (hasMatch);
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF)) {
                break;
            }
            if (!inRecovery) {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
                    this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnknownAtRule);
                }
                else {
                    this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RuleOrSelectorExpected);
                }
                inRecovery = true;
            }
            this.consumeToken();
        } while (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF));
        return this.finish(node);
    }
    _parseStylesheetStart() {
        return this._parseCharset();
    }
    _parseStylesheetStatement(isNested = false) {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return this._parseStylesheetAtStatement(isNested);
        }
        return this._parseRuleset(isNested);
    }
    _parseStylesheetAtStatement(isNested = false) {
        return this._parseImport()
            || this._parseMedia(isNested)
            || this._parsePage()
            || this._parseFontFace()
            || this._parseKeyframe()
            || this._parseSupports(isNested)
            || this._parseLayer(isNested)
            || this._parsePropertyAtRule()
            || this._parseViewPort()
            || this._parseNamespace()
            || this._parseDocument()
            || this._parseContainer()
            || this._parseUnknownAtRule();
    }
    _tryParseRuleset(isNested) {
        const mark = this.mark();
        if (this._parseSelector(isNested)) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma) && this._parseSelector(isNested)) {
                // loop
            }
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
                this.restoreAtMark(mark);
                return this._parseRuleset(isNested);
            }
        }
        this.restoreAtMark(mark);
        return null;
    }
    _parseRuleset(isNested = false) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.RuleSet);
        const selectors = node.getSelectors();
        if (!selectors.addChild(this._parseSelector(isNested))) {
            return null;
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            if (!selectors.addChild(this._parseSelector(isNested))) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SelectorExpected);
            }
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parseRuleSetDeclarationAtStatement() {
        return this._parseMedia(true)
            || this._parseSupports(true)
            || this._parseLayer(true)
            || this._parseUnknownAtRule();
    }
    _parseRuleSetDeclaration() {
        // https://www.w3.org/TR/css-syntax-3/#consume-a-list-of-declarations
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return this._parseRuleSetDeclarationAtStatement();
        }
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            return this._parseRuleset(true);
        }
        return this._tryParseRuleset(true) || this._parseDeclaration();
    }
    _needsSemicolonAfter(node) {
        switch (node.type) {
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Keyframe:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ViewPort:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Media:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Ruleset:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Namespace:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.If:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.For:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Each:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.While:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinDeclaration:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.FunctionDeclaration:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinContentDeclaration:
                return false;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ExtendsReference:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinContentReference:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ReturnStatement:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MediaQuery:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Debug:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Import:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.AtApplyRule:
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.CustomPropertyDeclaration:
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.VariableDeclaration:
                return node.needsSemicolon;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinReference:
                return !node.getContent();
            case _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Declaration:
                return !node.getNestedProperties();
        }
        return false;
    }
    _parseDeclarations(parseDeclaration) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Declarations);
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
            return null;
        }
        let decl = parseDeclaration();
        while (node.addChild(decl)) {
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR)) {
                break;
            }
            if (this._needsSemicolonAfter(decl) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR]);
            }
            // We accepted semicolon token. Link it to declaration.
            if (decl && this.prevToken && this.prevToken.type === _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon) {
                decl.semicolonPosition = this.prevToken.offset;
            }
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                // accept empty statements
            }
            decl = parseDeclaration();
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightCurlyExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
        }
        return this.finish(node);
    }
    _parseBody(node, parseDeclaration) {
        if (!node.setDeclarations(this._parseDeclarations(parseDeclaration))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftCurlyExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
        }
        return this.finish(node);
    }
    _parseSelector(isNested) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Selector);
        let hasContent = false;
        if (isNested) {
            // nested selectors can start with a combinator
            hasContent = node.addChild(this._parseCombinator());
        }
        while (node.addChild(this._parseSimpleSelector())) {
            hasContent = true;
            node.addChild(this._parseCombinator()); // optional
        }
        return hasContent ? this.finish(node) : null;
    }
    _parseDeclaration(stopTokens) {
        const customProperty = this._tryParseCustomPropertyDeclaration(stopTokens);
        if (customProperty) {
            return customProperty;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Declaration);
        if (!node.setProperty(this._parseProperty())) {
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.ColonExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon], stopTokens || [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        if (!node.setValue(this._parseExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.PropertyValueExpected);
        }
        node.addChild(this._parsePrio());
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
        }
        return this.finish(node);
    }
    _tryParseCustomPropertyDeclaration(stopTokens) {
        if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^--/)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.CustomPropertyDeclaration);
        if (!node.setProperty(this._parseProperty())) {
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.ColonExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon]);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        const mark = this.mark();
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
            // try to parse it as nested declaration
            const propertySet = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.CustomPropertySet);
            const declarations = this._parseDeclarations(this._parseRuleSetDeclaration.bind(this));
            if (propertySet.setDeclarations(declarations) && !declarations.isErroneous(true)) {
                propertySet.addChild(this._parsePrio());
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                    this.finish(propertySet);
                    node.setPropertySet(propertySet);
                    node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
                    return this.finish(node);
                }
            }
            this.restoreAtMark(mark);
        }
        // try to parse as expression
        const expression = this._parseExpr();
        if (expression && !expression.isErroneous(true)) {
            this._parsePrio();
            if (this.peekOne(...(stopTokens || []), _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF)) {
                node.setValue(expression);
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
                    node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
                }
                return this.finish(node);
            }
        }
        this.restoreAtMark(mark);
        node.addChild(this._parseCustomPropertyValue(stopTokens));
        node.addChild(this._parsePrio());
        if ((0,_utils_objects__WEBPACK_IMPORTED_MODULE_4__.isDefined)(node.colonPosition) && this.token.offset === node.colonPosition + 1) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.PropertyValueExpected);
        }
        return this.finish(node);
    }
    /**
     * Parse custom property values.
     *
     * Based on https://www.w3.org/TR/css-variables/#syntax
     *
     * This code is somewhat unusual, as the allowed syntax is incredibly broad,
     * parsing almost any sequence of tokens, save for a small set of exceptions.
     * Unbalanced delimitors, invalid tokens, and declaration
     * terminators like semicolons and !important directives (when not inside
     * of delimitors).
     */
    _parseCustomPropertyValue(stopTokens = [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR]) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        const isTopLevel = () => curlyDepth === 0 && parensDepth === 0 && bracketsDepth === 0;
        const onStopToken = () => stopTokens.indexOf(this.token.type) !== -1;
        let curlyDepth = 0;
        let parensDepth = 0;
        let bracketsDepth = 0;
        done: while (true) {
            switch (this.token.type) {
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon:
                    // A semicolon only ends things if we're not inside a delimitor.
                    if (isTopLevel()) {
                        break done;
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Exclamation:
                    // An exclamation ends the value if we're not inside delims.
                    if (isTopLevel()) {
                        break done;
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL:
                    curlyDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR:
                    curlyDepth--;
                    if (curlyDepth < 0) {
                        // The property value has been terminated without a semicolon, and
                        // this is the last declaration in the ruleset.
                        if (onStopToken() && parensDepth === 0 && bracketsDepth === 0) {
                            break done;
                        }
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftCurlyExpected);
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL:
                    parensDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR:
                    parensDepth--;
                    if (parensDepth < 0) {
                        if (onStopToken() && bracketsDepth === 0 && curlyDepth === 0) {
                            break done;
                        }
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected);
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL:
                    bracketsDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR:
                    bracketsDepth--;
                    if (bracketsDepth < 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftSquareBracketExpected);
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadString: // fall through
                    break done;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF:
                    // We shouldn't have reached the end of input, something is
                    // unterminated.
                    let error = _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightCurlyExpected;
                    if (bracketsDepth > 0) {
                        error = _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected;
                    }
                    else if (parensDepth > 0) {
                        error = _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected;
                    }
                    return this.finish(node, error);
            }
            this.consumeToken();
        }
        return this.finish(node);
    }
    _tryToParseDeclaration(stopTokens) {
        const mark = this.mark();
        if (this._parseProperty() && this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            // looks like a declaration, go ahead
            this.restoreAtMark(mark);
            return this._parseDeclaration(stopTokens);
        }
        this.restoreAtMark(mark);
        return null;
    }
    _parseProperty() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Property);
        const mark = this.mark();
        if (this.acceptDelim('*') || this.acceptDelim('_')) {
            // support for  IE 5.x, 6 and 7 star hack: see http://en.wikipedia.org/wiki/CSS_filter#Star_hack
            if (this.hasWhitespace()) {
                this.restoreAtMark(mark);
                return null;
            }
        }
        if (node.setIdentifier(this._parsePropertyIdentifier())) {
            return this.finish(node);
        }
        return null;
    }
    _parsePropertyIdentifier() {
        return this._parseIdent();
    }
    _parseCharset() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Charset)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken(); // charset
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.String)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    }
    _parseImport() {
        // @import [ <url> | <string> ]
        //     [ layer | layer(<layer-name>) ]?
        //     <import-condition> ;
        // <import-conditions> = [ supports( [ <supports-condition> | <declaration> ] ) ]?
        //                      <media-query-list>?
        if (!this.peekKeyword('@import')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Import);
        this.consumeToken(); // @import
        if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.URIOrStringExpected);
        }
        return this._completeParseImport(node);
    }
    _completeParseImport(node) {
        if (this.acceptIdent('layer')) {
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                if (!node.addChild(this._parseLayerName())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
                }
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR], []);
                }
            }
        }
        if (this.acceptIdent('supports')) {
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                node.addChild(this._tryToParseDeclaration() || this._parseSupportsCondition());
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR], []);
                }
            }
        }
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF)) {
            node.setMedialist(this._parseMediaQueryList());
        }
        return this.finish(node);
    }
    _parseNamespace() {
        // http://www.w3.org/TR/css3-namespace/
        // namespace  : NAMESPACE_SYM S* [IDENT S*]? [STRING|URI] S* ';' S*
        if (!this.peekKeyword('@namespace')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Namespace);
        this.consumeToken(); // @namespace
        if (!node.addChild(this._parseURILiteral())) { // url literal also starts with ident
            node.addChild(this._parseIdent()); // optional prefix
            if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.URIExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon]);
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    }
    _parseFontFace() {
        if (!this.peekKeyword('@font-face')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.FontFace);
        this.consumeToken(); // @font-face
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parseViewPort() {
        if (!this.peekKeyword('@-ms-viewport') &&
            !this.peekKeyword('@-o-viewport') &&
            !this.peekKeyword('@viewport')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ViewPort);
        this.consumeToken(); // @-ms-viewport
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parseKeyframe() {
        if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword, this.keyframeRegex)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Keyframe);
        const atNode = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken(); // atkeyword
        node.setKeyword(this.finish(atNode));
        if (atNode.matches('@-ms-keyframes')) { // -ms-keyframes never existed
            this.markError(atNode, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnknownKeyword);
        }
        if (!node.setIdentifier(this._parseKeyframeIdent())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR]);
        }
        return this._parseBody(node, this._parseKeyframeSelector.bind(this));
    }
    _parseKeyframeIdent() {
        return this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Keyframe]);
    }
    _parseKeyframeSelector() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.KeyframeSelector);
        let hasContent = false;
        if (node.addChild(this._parseIdent())) {
            hasContent = true;
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
            hasContent = true;
        }
        if (!hasContent) {
            return null;
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            hasContent = false;
            if (node.addChild(this._parseIdent())) {
                hasContent = true;
            }
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
                hasContent = true;
            }
            if (!hasContent) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.PercentageExpected);
            }
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _tryParseKeyframeSelector() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.KeyframeSelector);
        const pos = this.mark();
        let hasContent = false;
        if (node.addChild(this._parseIdent())) {
            hasContent = true;
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
            hasContent = true;
        }
        if (!hasContent) {
            return null;
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            hasContent = false;
            if (node.addChild(this._parseIdent())) {
                hasContent = true;
            }
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage)) {
                hasContent = true;
            }
            if (!hasContent) {
                this.restoreAtMark(pos);
                return null;
            }
        }
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
            this.restoreAtMark(pos);
            return null;
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parsePropertyAtRule() {
        // @property <custom-property-name> {
        // 	<declaration-list>
        //  }
        if (!this.peekKeyword('@property')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.PropertyAtRule);
        this.consumeToken(); // @layer
        if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^--/) || !node.setName(this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Property]))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        return this._parseBody(node, this._parseDeclaration.bind(this));
    }
    _parseLayer(isNested = false) {
        // @layer layer-name {rules}
        // @layer layer-name;
        // @layer layer-name, layer-name, layer-name;
        // @layer {rules}
        if (!this.peekKeyword('@layer')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Layer);
        this.consumeToken(); // @layer
        const names = this._parseLayerNameList();
        if (names) {
            node.setNames(names);
        }
        if ((!names || names.getChildren().length === 1) && this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL)) {
            return this._parseBody(node, this._parseLayerDeclaration.bind(this, isNested));
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    }
    _parseLayerDeclaration(isNested = false) {
        if (isNested) {
            // if nested, the body can contain rulesets, but also declarations
            return this._tryParseRuleset(true)
                || this._tryToParseDeclaration()
                || this._parseStylesheetStatement(true);
        }
        return this._parseStylesheetStatement(false);
    }
    _parseLayerNameList() {
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.LayerNameList);
        if (!node.addChild(this._parseLayerName())) {
            return null;
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            if (!node.addChild(this._parseLayerName())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
            }
        }
        return this.finish(node);
    }
    _parseLayerName() {
        // <layer-name> = <ident> [ '.' <ident> ]*
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.LayerName);
        if (!node.addChild(this._parseIdent())) {
            return null;
        }
        while (!this.hasWhitespace() && this.acceptDelim('.')) {
            if (this.hasWhitespace() || !node.addChild(this._parseIdent())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
            }
        }
        return this.finish(node);
    }
    _parseSupports(isNested = false) {
        // SUPPORTS_SYM S* supports_condition '{' S* ruleset* '}' S*
        if (!this.peekKeyword('@supports')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Supports);
        this.consumeToken(); // @supports
        node.addChild(this._parseSupportsCondition());
        return this._parseBody(node, this._parseSupportsDeclaration.bind(this, isNested));
    }
    _parseSupportsDeclaration(isNested = false) {
        if (isNested) {
            // if nested, the body can contain rulesets, but also declarations
            return this._tryParseRuleset(true)
                || this._tryToParseDeclaration()
                || this._parseStylesheetStatement(true);
        }
        return this._parseStylesheetStatement(false);
    }
    _parseSupportsCondition() {
        // supports_condition : supports_negation | supports_conjunction | supports_disjunction | supports_condition_in_parens ;
        // supports_condition_in_parens: ( '(' S* supports_condition S* ')' ) | supports_declaration_condition | general_enclosed ;
        // supports_negation: NOT S+ supports_condition_in_parens ;
        // supports_conjunction: supports_condition_in_parens ( S+ AND S+ supports_condition_in_parens )+;
        // supports_disjunction: supports_condition_in_parens ( S+ OR S+ supports_condition_in_parens )+;
        // supports_declaration_condition: '(' S* declaration ')';
        // general_enclosed: ( FUNCTION | '(' ) ( any | unused )* ')' ;
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.SupportsCondition);
        if (this.acceptIdent('not')) {
            node.addChild(this._parseSupportsConditionInParens());
        }
        else {
            node.addChild(this._parseSupportsConditionInParens());
            if (this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^(and|or)$/i)) {
                const text = this.token.text.toLowerCase();
                while (this.acceptIdent(text)) {
                    node.addChild(this._parseSupportsConditionInParens());
                }
            }
        }
        return this.finish(node);
    }
    _parseSupportsConditionInParens() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.SupportsCondition);
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            if (this.prevToken) {
                node.lParent = this.prevToken.offset;
            }
            if (!node.addChild(this._tryToParseDeclaration([_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR]))) {
                if (!this._parseSupportsCondition()) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.ConditionExpected);
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR], []);
            }
            if (this.prevToken) {
                node.rParent = this.prevToken.offset;
            }
            return this.finish(node);
        }
        else if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            const pos = this.mark();
            this.consumeToken();
            if (!this.hasWhitespace() && this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                let openParentCount = 1;
                while (this.token.type !== _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF && openParentCount !== 0) {
                    if (this.token.type === _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL) {
                        openParentCount++;
                    }
                    else if (this.token.type === _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR) {
                        openParentCount--;
                    }
                    this.consumeToken();
                }
                return this.finish(node);
            }
            else {
                this.restoreAtMark(pos);
            }
        }
        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL]);
    }
    _parseMediaDeclaration(isNested = false) {
        if (isNested) {
            // if nested, the body can contain rulesets, but also declarations
            return this._tryParseRuleset(true)
                || this._tryToParseDeclaration()
                || this._parseStylesheetStatement(true);
        }
        return this._parseStylesheetStatement(false);
    }
    _parseMedia(isNested = false) {
        // MEDIA_SYM S* media_query_list '{' S* ruleset* '}' S*
        // media_query_list : S* [media_query [ ',' S* media_query ]* ]?
        if (!this.peekKeyword('@media')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Media);
        this.consumeToken(); // @media
        if (!node.addChild(this._parseMediaQueryList())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.MediaQueryExpected);
        }
        return this._parseBody(node, this._parseMediaDeclaration.bind(this, isNested));
    }
    _parseMediaQueryList() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Medialist);
        if (!node.addChild(this._parseMediaQuery())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.MediaQueryExpected);
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
            if (!node.addChild(this._parseMediaQuery())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.MediaQueryExpected);
            }
        }
        return this.finish(node);
    }
    _parseMediaQuery() {
        // <media-query> = <media-condition> | [ not | only ]? <media-type> [ and <media-condition-without-or> ]?
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.MediaQuery);
        const pos = this.mark();
        this.acceptIdent('not');
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            if (this.acceptIdent('only')) {
                // optional
            }
            if (!node.addChild(this._parseIdent())) {
                return null;
            }
            if (this.acceptIdent('and')) {
                node.addChild(this._parseMediaCondition());
            }
        }
        else {
            this.restoreAtMark(pos); // 'not' is part of the MediaCondition
            node.addChild(this._parseMediaCondition());
        }
        return this.finish(node);
    }
    _parseRatio() {
        const pos = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.RatioValue);
        if (!this._parseNumeric()) {
            return null;
        }
        if (!this.acceptDelim('/')) {
            this.restoreAtMark(pos);
            return null;
        }
        if (!this._parseNumeric()) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.NumberExpected);
        }
        return this.finish(node);
    }
    _parseMediaCondition() {
        // <media-condition> = <media-not> | <media-and> | <media-or> | <media-in-parens>
        // <media-not> = not <media-in-parens>
        // <media-and> = <media-in-parens> [ and <media-in-parens> ]+
        // <media-or> = <media-in-parens> [ or <media-in-parens> ]+
        // <media-in-parens> = ( <media-condition> ) | <media-feature> | <general-enclosed>
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.MediaCondition);
        this.acceptIdent('not');
        let parseExpression = true;
        while (parseExpression) {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]);
            }
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL) || this.peekIdent('not')) {
                // <media-condition>
                node.addChild(this._parseMediaCondition());
            }
            else {
                node.addChild(this._parseMediaFeature());
            }
            // not yet implemented: general enclosed
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]);
            }
            parseExpression = this.acceptIdent('and') || this.acceptIdent('or');
        }
        return this.finish(node);
    }
    _parseMediaFeature() {
        const resyncStopToken = [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR];
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.MediaFeature);
        // <media-feature> = ( [ <mf-plain> | <mf-boolean> | <mf-range> ] )
        // <mf-plain> = <mf-name> : <mf-value>
        // <mf-boolean> = <mf-name>
        // <mf-range> = <mf-name> [ '<' | '>' ]? '='? <mf-value> | <mf-value> [ '<' | '>' ]? '='? <mf-name> | <mf-value> '<' '='? <mf-name> '<' '='? <mf-value> | <mf-value> '>' '='? <mf-name> '>' '='? <mf-value>
        if (node.addChild(this._parseMediaFeatureName())) {
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
                if (!node.addChild(this._parseMediaFeatureValue())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected, [], resyncStopToken);
                }
            }
            else if (this._parseMediaFeatureRangeOperator()) {
                if (!node.addChild(this._parseMediaFeatureValue())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected, [], resyncStopToken);
                }
                if (this._parseMediaFeatureRangeOperator()) {
                    if (!node.addChild(this._parseMediaFeatureValue())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected, [], resyncStopToken);
                    }
                }
            }
            else {
                // <mf-boolean> = <mf-name>
            }
        }
        else if (node.addChild(this._parseMediaFeatureValue())) {
            if (!this._parseMediaFeatureRangeOperator()) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.OperatorExpected, [], resyncStopToken);
            }
            if (!node.addChild(this._parseMediaFeatureName())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected, [], resyncStopToken);
            }
            if (this._parseMediaFeatureRangeOperator()) {
                if (!node.addChild(this._parseMediaFeatureValue())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected, [], resyncStopToken);
                }
            }
        }
        else {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected, [], resyncStopToken);
        }
        return this.finish(node);
    }
    _parseMediaFeatureRangeOperator() {
        if (this.acceptDelim('<') || this.acceptDelim('>')) {
            if (!this.hasWhitespace()) {
                this.acceptDelim('=');
            }
            return true;
        }
        else if (this.acceptDelim('=')) {
            return true;
        }
        return false;
    }
    _parseMediaFeatureName() {
        return this._parseIdent();
    }
    _parseMediaFeatureValue() {
        return this._parseRatio() || this._parseTermExpression();
    }
    _parseMedium() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (node.addChild(this._parseIdent())) {
            return this.finish(node);
        }
        else {
            return null;
        }
    }
    _parsePageDeclaration() {
        return this._parsePageMarginBox() || this._parseRuleSetDeclaration();
    }
    _parsePage() {
        // http://www.w3.org/TR/css3-page/
        // page_rule : PAGE_SYM S* page_selector_list '{' S* page_body '}' S*
        // page_body :  /* Can be empty */ declaration? [ ';' S* page_body ]? | page_margin_box page_body
        if (!this.peekKeyword('@page')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Page);
        this.consumeToken();
        if (node.addChild(this._parsePageSelector())) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
                if (!node.addChild(this._parsePageSelector())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
                }
            }
        }
        return this._parseBody(node, this._parsePageDeclaration.bind(this));
    }
    _parsePageMarginBox() {
        // page_margin_box :  margin_sym S* '{' S* declaration? [ ';' S* declaration? ]* '}' S*
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.PageBoxMarginBox);
        if (!this.acceptOneKeyword(_languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__.pageBoxDirectives)) {
            this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.UnknownAtRule, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]);
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parsePageSelector() {
        // page_selector : pseudo_page+ | IDENT pseudo_page*
        // pseudo_page :  ':' [ "left" | "right" | "first" | "blank" ];
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        node.addChild(this._parseIdent()); // optional ident
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            if (!node.addChild(this._parseIdent())) { // optional ident
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
            }
        }
        return this.finish(node);
    }
    _parseDocument() {
        // -moz-document is experimental but has been pushed to css4
        if (!this.peekKeyword('@-moz-document')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Document);
        this.consumeToken(); // @-moz-document
        this.resync([], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]); // ignore all the rules
        return this._parseBody(node, this._parseStylesheetStatement.bind(this));
    }
    _parseContainer() {
        if (!this.peekKeyword('@container')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Container);
        this.consumeToken(); // @container
        node.addChild(this._parseIdent()); // optional container name
        node.addChild(this._parseContainerQuery());
        return this._parseBody(node, this._parseStylesheetStatement.bind(this));
    }
    _parseContainerQuery() {
        // <container-query>     = not <query-in-parens>
        //                         | <query-in-parens> [ [ and <query-in-parens> ]* | [ or <query-in-parens> ]* ]
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.acceptIdent('not')) {
            node.addChild(this._parseContainerQueryInParens());
        }
        else {
            node.addChild(this._parseContainerQueryInParens());
            if (this.peekIdent('and')) {
                while (this.acceptIdent('and')) {
                    node.addChild(this._parseContainerQueryInParens());
                }
            }
            else if (this.peekIdent('or')) {
                while (this.acceptIdent('or')) {
                    node.addChild(this._parseContainerQueryInParens());
                }
            }
        }
        return this.finish(node);
    }
    _parseContainerQueryInParens() {
        // <query-in-parens>     = ( <container-query> )
        // 					  | ( <size-feature> )
        // 					  | style( <style-query> )
        // 					  | <general-enclosed>
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            if (this.peekIdent('not') || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                node.addChild(this._parseContainerQuery());
            }
            else {
                node.addChild(this._parseMediaFeature());
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]);
            }
        }
        else if (this.acceptIdent('style')) {
            if (this.hasWhitespace() || !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]);
            }
            node.addChild(this._parseStyleQuery());
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]);
            }
        }
        else {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]);
        }
        return this.finish(node);
    }
    _parseStyleQuery() {
        // <style-query>         = not <style-in-parens>
        // 					  | <style-in-parens> [ [ and <style-in-parens> ]* | [ or <style-in-parens> ]* ]
        // 					  | <style-feature>
        // <style-in-parens>     = ( <style-query> )
        // 					  | ( <style-feature> )
        // 					  | <general-enclosed>
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.acceptIdent('not')) {
            node.addChild(this._parseStyleInParens());
        }
        else if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            node.addChild(this._parseStyleInParens());
            if (this.peekIdent('and')) {
                while (this.acceptIdent('and')) {
                    node.addChild(this._parseStyleInParens());
                }
            }
            else if (this.peekIdent('or')) {
                while (this.acceptIdent('or')) {
                    node.addChild(this._parseStyleInParens());
                }
            }
        }
        else {
            node.addChild(this._parseDeclaration([_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR]));
        }
        return this.finish(node);
    }
    _parseStyleInParens() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            node.addChild(this._parseStyleQuery());
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]);
            }
        }
        else {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL]);
        }
        return this.finish(node);
    }
    // https://www.w3.org/TR/css-syntax-3/#consume-an-at-rule
    _parseUnknownAtRule() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.UnknownAtRule);
        node.addChild(this._parseUnknownAtRuleName());
        const isTopLevel = () => curlyDepth === 0 && parensDepth === 0 && bracketsDepth === 0;
        let curlyLCount = 0;
        let curlyDepth = 0;
        let parensDepth = 0;
        let bracketsDepth = 0;
        done: while (true) {
            switch (this.token.type) {
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SemiColon:
                    if (isTopLevel()) {
                        break done;
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF:
                    if (curlyDepth > 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightCurlyExpected);
                    }
                    else if (bracketsDepth > 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
                    }
                    else if (parensDepth > 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
                    }
                    else {
                        return this.finish(node);
                    }
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL:
                    curlyLCount++;
                    curlyDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR:
                    curlyDepth--;
                    // End of at-rule, consume CurlyR and return node
                    if (curlyLCount > 0 && curlyDepth === 0) {
                        this.consumeToken();
                        if (bracketsDepth > 0) {
                            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
                        }
                        else if (parensDepth > 0) {
                            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
                        }
                        break done;
                    }
                    if (curlyDepth < 0) {
                        // The property value has been terminated without a semicolon, and
                        // this is the last declaration in the ruleset.
                        if (parensDepth === 0 && bracketsDepth === 0) {
                            break done;
                        }
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftCurlyExpected);
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL:
                    parensDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR:
                    parensDepth--;
                    if (parensDepth < 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftParenthesisExpected);
                    }
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL:
                    bracketsDepth++;
                    break;
                case _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR:
                    bracketsDepth--;
                    if (bracketsDepth < 0) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.LeftSquareBracketExpected);
                    }
                    break;
            }
            this.consumeToken();
        }
        return node;
    }
    _parseUnknownAtRuleName() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.AtKeyword)) {
            return this.finish(node);
        }
        return node;
    }
    _parseOperator() {
        // these are operators for binary expressions
        if (this.peekDelim('/') ||
            this.peekDelim('*') ||
            this.peekDelim('+') ||
            this.peekDelim('-') ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dashmatch) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Includes) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SubstringOperator) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.PrefixOperator) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.SuffixOperator) ||
            this.peekDelim('=')) { // doesn't stick to the standard here
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Operator);
            this.consumeToken();
            return this.finish(node);
        }
        else {
            return null;
        }
    }
    _parseUnaryOperator() {
        if (!this.peekDelim('+') && !this.peekDelim('-')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken();
        return this.finish(node);
    }
    _parseCombinator() {
        if (this.peekDelim('>')) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            const mark = this.mark();
            if (!this.hasWhitespace() && this.acceptDelim('>')) {
                if (!this.hasWhitespace() && this.acceptDelim('>')) {
                    node.type = _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorShadowPiercingDescendant;
                    return this.finish(node);
                }
                this.restoreAtMark(mark);
            }
            node.type = _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorParent;
            return this.finish(node);
        }
        else if (this.peekDelim('+')) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            node.type = _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorSibling;
            return this.finish(node);
        }
        else if (this.peekDelim('~')) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            node.type = _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorAllSiblings;
            return this.finish(node);
        }
        else if (this.peekDelim('/')) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
            this.consumeToken();
            const mark = this.mark();
            if (!this.hasWhitespace() && this.acceptIdent('deep') && !this.hasWhitespace() && this.acceptDelim('/')) {
                node.type = _cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinatorShadowPiercingDescendant;
                return this.finish(node);
            }
            this.restoreAtMark(mark);
        }
        return null;
    }
    _parseSimpleSelector() {
        // simple_selector
        //  : element_name [ HASH | class | attrib | pseudo ]* | [ HASH | class | attrib | pseudo ]+ ;
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.SimpleSelector);
        let c = 0;
        if (node.addChild(this._parseElementName() || this._parseNestingSelector())) {
            c++;
        }
        while ((c === 0 || !this.hasWhitespace()) && node.addChild(this._parseSimpleSelectorBody())) {
            c++;
        }
        return c > 0 ? this.finish(node) : null;
    }
    _parseNestingSelector() {
        if (this.peekDelim('&')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SelectorCombinator);
            this.consumeToken();
            return this.finish(node);
        }
        return null;
    }
    _parseSimpleSelectorBody() {
        return this._parsePseudo() || this._parseHash() || this._parseClass() || this._parseAttrib();
    }
    _parseSelectorIdent() {
        return this._parseIdent();
    }
    _parseHash() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Hash) && !this.peekDelim('#')) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.IdentifierSelector);
        if (this.acceptDelim('#')) {
            if (this.hasWhitespace() || !node.addChild(this._parseSelectorIdent())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
            }
        }
        else {
            this.consumeToken(); // TokenType.Hash
        }
        return this.finish(node);
    }
    _parseClass() {
        // class: '.' IDENT ;
        if (!this.peekDelim('.')) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ClassSelector);
        this.consumeToken(); // '.'
        if (this.hasWhitespace() || !node.addChild(this._parseSelectorIdent())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        return this.finish(node);
    }
    _parseElementName() {
        // element_name: (ns? '|')? IDENT | '*';
        const pos = this.mark();
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ElementNameSelector);
        node.addChild(this._parseNamespacePrefix());
        if (!node.addChild(this._parseSelectorIdent()) && !this.acceptDelim('*')) {
            this.restoreAtMark(pos);
            return null;
        }
        return this.finish(node);
    }
    _parseNamespacePrefix() {
        const pos = this.mark();
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.NamespacePrefix);
        if (!node.addChild(this._parseIdent()) && !this.acceptDelim('*')) {
            // ns is optional
        }
        if (!this.acceptDelim('|')) {
            this.restoreAtMark(pos);
            return null;
        }
        return this.finish(node);
    }
    _parseAttrib() {
        // attrib : '[' S* IDENT S* [ [ '=' | INCLUDES | DASHMATCH ] S*   [ IDENT | STRING ] S* ]? ']'
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.AttributeSelector);
        this.consumeToken(); // BracketL
        // Optional attrib namespace
        node.setNamespacePrefix(this._parseNamespacePrefix());
        if (!node.setIdentifier(this._parseIdent())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        if (node.setOperator(this._parseOperator())) {
            node.setValue(this._parseBinaryExpr());
            this.acceptIdent('i'); // case insensitive matching
            this.acceptIdent('s'); // case sensitive matching
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
        }
        return this.finish(node);
    }
    _parsePseudo() {
        // pseudo: ':' [ IDENT | FUNCTION S* [IDENT S*]? ')' ]
        const node = this._tryParsePseudoIdentifier();
        if (node) {
            if (!this.hasWhitespace() && this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
                const tryAsSelector = () => {
                    const selectors = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
                    if (!selectors.addChild(this._parseSelector(true))) {
                        return null;
                    }
                    while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma) && selectors.addChild(this._parseSelector(true))) {
                        // loop
                    }
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                        return this.finish(selectors);
                    }
                    return null;
                };
                let hasSelector = node.addChild(this.try(tryAsSelector));
                if (!hasSelector) {
                    if (node.addChild(this._parseBinaryExpr()) &&
                        this.acceptIdent('of') &&
                        !node.addChild(this.try(tryAsSelector))) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.SelectorExpected);
                    }
                }
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
                }
            }
            return this.finish(node);
        }
        return null;
    }
    _tryParsePseudoIdentifier() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
            return null;
        }
        const pos = this.mark();
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.PseudoSelector);
        this.consumeToken(); // Colon
        if (this.hasWhitespace()) {
            this.restoreAtMark(pos);
            return null;
        }
        // optional, support ::
        this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon);
        if (this.hasWhitespace() || !node.addChild(this._parseIdent())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.IdentifierExpected);
        }
        return this.finish(node);
    }
    _tryParsePrio() {
        const mark = this.mark();
        const prio = this._parsePrio();
        if (prio) {
            return prio;
        }
        this.restoreAtMark(mark);
        return null;
    }
    _parsePrio() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Exclamation)) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Prio);
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Exclamation) && this.acceptIdent('important')) {
            return this.finish(node);
        }
        return null;
    }
    _parseExpr(stopOnComma = false) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Expression);
        if (!node.addChild(this._parseBinaryExpr())) {
            return null;
        }
        while (true) {
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) { // optional
                if (stopOnComma) {
                    return this.finish(node);
                }
                this.consumeToken();
            }
            if (!node.addChild(this._parseBinaryExpr())) {
                break;
            }
        }
        return this.finish(node);
    }
    _parseUnicodeRange() {
        if (!this.peekIdent('u')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.UnicodeRange);
        if (!this.acceptUnicodeRange()) {
            return null;
        }
        return this.finish(node);
    }
    _parseNamedLine() {
        // https://www.w3.org/TR/css-grid-1/#named-lines
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketL)) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.GridLine);
        this.consumeToken();
        while (node.addChild(this._parseIdent())) {
            // repeat
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BracketR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightSquareBracketExpected);
        }
        return this.finish(node);
    }
    _parseBinaryExpr(preparsedLeft, preparsedOper) {
        let node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.BinaryExpression);
        if (!node.setLeft((preparsedLeft || this._parseTerm()))) {
            return null;
        }
        if (!node.setOperator(preparsedOper || this._parseOperator())) {
            return this.finish(node);
        }
        if (!node.setRight(this._parseTerm())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.TermExpected);
        }
        // things needed for multiple binary expressions
        node = this.finish(node);
        const operator = this._parseOperator();
        if (operator) {
            node = this._parseBinaryExpr(node, operator);
        }
        return this.finish(node);
    }
    _parseTerm() {
        let node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Term);
        node.setOperator(this._parseUnaryOperator()); // optional
        if (node.setExpression(this._parseTermExpression())) {
            return this.finish(node);
        }
        return null;
    }
    _parseTermExpression() {
        return this._parseURILiteral() || // url before function
            this._parseUnicodeRange() ||
            this._parseFunction() || // function before ident
            this._parseIdent() ||
            this._parseStringLiteral() ||
            this._parseNumeric() ||
            this._parseHexColor() ||
            this._parseOperation() ||
            this._parseNamedLine();
    }
    _parseOperation() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        this.consumeToken(); // ParenthesisL
        node.addChild(this._parseExpr());
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseNumeric() {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Num) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Percentage) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Resolution) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Length) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EMS) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EXS) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Angle) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Time) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Dimension) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ContainerQueryLength) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Freq)) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NumericValue);
            this.consumeToken();
            return this.finish(node);
        }
        return null;
    }
    _parseStringLiteral() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.String) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadString)) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.StringLiteral);
        this.consumeToken();
        return this.finish(node);
    }
    _parseURILiteral() {
        if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^url(-prefix)?$/i)) {
            return null;
        }
        const pos = this.mark();
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.URILiteral);
        this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident);
        if (this.hasWhitespace() || !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            this.restoreAtMark(pos);
            return null;
        }
        this.scanner.inURL = true;
        this.consumeToken(); // consume ()
        node.addChild(this._parseURLArgument()); // argument is optional
        this.scanner.inURL = false;
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseURLArgument() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node);
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.String) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadString) && !this.acceptUnquotedString()) {
            return null;
        }
        return this.finish(node);
    }
    _parseIdent(referenceTypes) {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Identifier);
        if (referenceTypes) {
            node.referenceTypes = referenceTypes;
        }
        node.isCustomProperty = this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident, /^--/);
        this.consumeToken();
        return this.finish(node);
    }
    _parseFunction() {
        const pos = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Function);
        if (!node.setIdentifier(this._parseFunctionIdentifier())) {
            return null;
        }
        if (this.hasWhitespace() || !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisL)) {
            this.restoreAtMark(pos);
            return null;
        }
        if (node.getArguments().addChild(this._parseFunctionArgument())) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comma)) {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getArguments().addChild(this._parseFunctionArgument())) {
                    this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.ExpressionExpected);
                }
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_2__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseFunctionIdentifier() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Identifier);
        node.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Function];
        if (this.acceptIdent('progid')) {
            // support for IE7 specific filters: 'progid:DXImageTransform.Microsoft.MotionBlur(strength=13, direction=310)'
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Colon)) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Ident) && this.acceptDelim('.')) {
                    // loop
                }
            }
            return this.finish(node);
        }
        this.consumeToken();
        return this.finish(node);
    }
    _parseFunctionArgument() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.FunctionArgument);
        if (node.setValue(this._parseExpr(true))) {
            return this.finish(node);
        }
        return null;
    }
    _parseHexColor() {
        if (this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Hash, /^#([A-Fa-f0-9]{3}|[A-Fa-f0-9]{4}|[A-Fa-f0-9]{6}|[A-Fa-f0-9]{8})$/g)) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_1__.HexColorValue);
            this.consumeToken();
            return this.finish(node);
        }
        else {
            return null;
        }
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssScanner.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/parser/cssScanner.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   MultiLineStream: () => (/* binding */ MultiLineStream),
/* harmony export */   Scanner: () => (/* binding */ Scanner),
/* harmony export */   TokenType: () => (/* binding */ TokenType)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

var TokenType;
(function (TokenType) {
    TokenType[TokenType["Ident"] = 0] = "Ident";
    TokenType[TokenType["AtKeyword"] = 1] = "AtKeyword";
    TokenType[TokenType["String"] = 2] = "String";
    TokenType[TokenType["BadString"] = 3] = "BadString";
    TokenType[TokenType["UnquotedString"] = 4] = "UnquotedString";
    TokenType[TokenType["Hash"] = 5] = "Hash";
    TokenType[TokenType["Num"] = 6] = "Num";
    TokenType[TokenType["Percentage"] = 7] = "Percentage";
    TokenType[TokenType["Dimension"] = 8] = "Dimension";
    TokenType[TokenType["UnicodeRange"] = 9] = "UnicodeRange";
    TokenType[TokenType["CDO"] = 10] = "CDO";
    TokenType[TokenType["CDC"] = 11] = "CDC";
    TokenType[TokenType["Colon"] = 12] = "Colon";
    TokenType[TokenType["SemiColon"] = 13] = "SemiColon";
    TokenType[TokenType["CurlyL"] = 14] = "CurlyL";
    TokenType[TokenType["CurlyR"] = 15] = "CurlyR";
    TokenType[TokenType["ParenthesisL"] = 16] = "ParenthesisL";
    TokenType[TokenType["ParenthesisR"] = 17] = "ParenthesisR";
    TokenType[TokenType["BracketL"] = 18] = "BracketL";
    TokenType[TokenType["BracketR"] = 19] = "BracketR";
    TokenType[TokenType["Whitespace"] = 20] = "Whitespace";
    TokenType[TokenType["Includes"] = 21] = "Includes";
    TokenType[TokenType["Dashmatch"] = 22] = "Dashmatch";
    TokenType[TokenType["SubstringOperator"] = 23] = "SubstringOperator";
    TokenType[TokenType["PrefixOperator"] = 24] = "PrefixOperator";
    TokenType[TokenType["SuffixOperator"] = 25] = "SuffixOperator";
    TokenType[TokenType["Delim"] = 26] = "Delim";
    TokenType[TokenType["EMS"] = 27] = "EMS";
    TokenType[TokenType["EXS"] = 28] = "EXS";
    TokenType[TokenType["Length"] = 29] = "Length";
    TokenType[TokenType["Angle"] = 30] = "Angle";
    TokenType[TokenType["Time"] = 31] = "Time";
    TokenType[TokenType["Freq"] = 32] = "Freq";
    TokenType[TokenType["Exclamation"] = 33] = "Exclamation";
    TokenType[TokenType["Resolution"] = 34] = "Resolution";
    TokenType[TokenType["Comma"] = 35] = "Comma";
    TokenType[TokenType["Charset"] = 36] = "Charset";
    TokenType[TokenType["EscapedJavaScript"] = 37] = "EscapedJavaScript";
    TokenType[TokenType["BadEscapedJavaScript"] = 38] = "BadEscapedJavaScript";
    TokenType[TokenType["Comment"] = 39] = "Comment";
    TokenType[TokenType["SingleLineComment"] = 40] = "SingleLineComment";
    TokenType[TokenType["EOF"] = 41] = "EOF";
    TokenType[TokenType["ContainerQueryLength"] = 42] = "ContainerQueryLength";
    TokenType[TokenType["CustomToken"] = 43] = "CustomToken"; // must be last token type
})(TokenType || (TokenType = {}));
class MultiLineStream {
    constructor(source) {
        this.source = source;
        this.len = source.length;
        this.position = 0;
    }
    substring(from, to = this.position) {
        return this.source.substring(from, to);
    }
    eos() {
        return this.len <= this.position;
    }
    pos() {
        return this.position;
    }
    goBackTo(pos) {
        this.position = pos;
    }
    goBack(n) {
        this.position -= n;
    }
    advance(n) {
        this.position += n;
    }
    nextChar() {
        return this.source.charCodeAt(this.position++) || 0;
    }
    peekChar(n = 0) {
        return this.source.charCodeAt(this.position + n) || 0;
    }
    lookbackChar(n = 0) {
        return this.source.charCodeAt(this.position - n) || 0;
    }
    advanceIfChar(ch) {
        if (ch === this.source.charCodeAt(this.position)) {
            this.position++;
            return true;
        }
        return false;
    }
    advanceIfChars(ch) {
        if (this.position + ch.length > this.source.length) {
            return false;
        }
        let i = 0;
        for (; i < ch.length; i++) {
            if (this.source.charCodeAt(this.position + i) !== ch[i]) {
                return false;
            }
        }
        this.advance(i);
        return true;
    }
    advanceWhileChar(condition) {
        const posNow = this.position;
        while (this.position < this.len && condition(this.source.charCodeAt(this.position))) {
            this.position++;
        }
        return this.position - posNow;
    }
}
const _a = 'a'.charCodeAt(0);
const _f = 'f'.charCodeAt(0);
const _z = 'z'.charCodeAt(0);
const _u = 'u'.charCodeAt(0);
const _A = 'A'.charCodeAt(0);
const _F = 'F'.charCodeAt(0);
const _Z = 'Z'.charCodeAt(0);
const _0 = '0'.charCodeAt(0);
const _9 = '9'.charCodeAt(0);
const _TLD = '~'.charCodeAt(0);
const _HAT = '^'.charCodeAt(0);
const _EQS = '='.charCodeAt(0);
const _PIP = '|'.charCodeAt(0);
const _MIN = '-'.charCodeAt(0);
const _USC = '_'.charCodeAt(0);
const _PRC = '%'.charCodeAt(0);
const _MUL = '*'.charCodeAt(0);
const _LPA = '('.charCodeAt(0);
const _RPA = ')'.charCodeAt(0);
const _LAN = '<'.charCodeAt(0);
const _RAN = '>'.charCodeAt(0);
const _ATS = '@'.charCodeAt(0);
const _HSH = '#'.charCodeAt(0);
const _DLR = '$'.charCodeAt(0);
const _BSL = '\\'.charCodeAt(0);
const _FSL = '/'.charCodeAt(0);
const _NWL = '\n'.charCodeAt(0);
const _CAR = '\r'.charCodeAt(0);
const _LFD = '\f'.charCodeAt(0);
const _DQO = '"'.charCodeAt(0);
const _SQO = '\''.charCodeAt(0);
const _WSP = ' '.charCodeAt(0);
const _TAB = '\t'.charCodeAt(0);
const _SEM = ';'.charCodeAt(0);
const _COL = ':'.charCodeAt(0);
const _CUL = '{'.charCodeAt(0);
const _CUR = '}'.charCodeAt(0);
const _BRL = '['.charCodeAt(0);
const _BRR = ']'.charCodeAt(0);
const _CMA = ','.charCodeAt(0);
const _DOT = '.'.charCodeAt(0);
const _BNG = '!'.charCodeAt(0);
const _QSM = '?'.charCodeAt(0);
const _PLS = '+'.charCodeAt(0);
const staticTokenTable = {};
staticTokenTable[_SEM] = TokenType.SemiColon;
staticTokenTable[_COL] = TokenType.Colon;
staticTokenTable[_CUL] = TokenType.CurlyL;
staticTokenTable[_CUR] = TokenType.CurlyR;
staticTokenTable[_BRR] = TokenType.BracketR;
staticTokenTable[_BRL] = TokenType.BracketL;
staticTokenTable[_LPA] = TokenType.ParenthesisL;
staticTokenTable[_RPA] = TokenType.ParenthesisR;
staticTokenTable[_CMA] = TokenType.Comma;
const staticUnitTable = {};
staticUnitTable['em'] = TokenType.EMS;
staticUnitTable['ex'] = TokenType.EXS;
staticUnitTable['px'] = TokenType.Length;
staticUnitTable['cm'] = TokenType.Length;
staticUnitTable['mm'] = TokenType.Length;
staticUnitTable['in'] = TokenType.Length;
staticUnitTable['pt'] = TokenType.Length;
staticUnitTable['pc'] = TokenType.Length;
staticUnitTable['deg'] = TokenType.Angle;
staticUnitTable['rad'] = TokenType.Angle;
staticUnitTable['grad'] = TokenType.Angle;
staticUnitTable['ms'] = TokenType.Time;
staticUnitTable['s'] = TokenType.Time;
staticUnitTable['hz'] = TokenType.Freq;
staticUnitTable['khz'] = TokenType.Freq;
staticUnitTable['%'] = TokenType.Percentage;
staticUnitTable['fr'] = TokenType.Percentage;
staticUnitTable['dpi'] = TokenType.Resolution;
staticUnitTable['dpcm'] = TokenType.Resolution;
staticUnitTable['cqw'] = TokenType.ContainerQueryLength;
staticUnitTable['cqh'] = TokenType.ContainerQueryLength;
staticUnitTable['cqi'] = TokenType.ContainerQueryLength;
staticUnitTable['cqb'] = TokenType.ContainerQueryLength;
staticUnitTable['cqmin'] = TokenType.ContainerQueryLength;
staticUnitTable['cqmax'] = TokenType.ContainerQueryLength;
class Scanner {
    constructor() {
        this.stream = new MultiLineStream('');
        this.ignoreComment = true;
        this.ignoreWhitespace = true;
        this.inURL = false;
    }
    setSource(input) {
        this.stream = new MultiLineStream(input);
    }
    finishToken(offset, type, text) {
        return {
            offset: offset,
            len: this.stream.pos() - offset,
            type: type,
            text: text || this.stream.substring(offset)
        };
    }
    substring(offset, len) {
        return this.stream.substring(offset, offset + len);
    }
    pos() {
        return this.stream.pos();
    }
    goBackTo(pos) {
        this.stream.goBackTo(pos);
    }
    scanUnquotedString() {
        const offset = this.stream.pos();
        const content = [];
        if (this._unquotedString(content)) {
            return this.finishToken(offset, TokenType.UnquotedString, content.join(''));
        }
        return null;
    }
    scan() {
        // processes all whitespaces and comments
        const triviaToken = this.trivia();
        if (triviaToken !== null) {
            return triviaToken;
        }
        const offset = this.stream.pos();
        // End of file/input
        if (this.stream.eos()) {
            return this.finishToken(offset, TokenType.EOF);
        }
        return this.scanNext(offset);
    }
    /**
     * Read the range as described in https://www.w3.org/TR/CSS21/syndata.html#tokenization
     * Assume the `u` has aleady been consumed
     * @returns if reading the unicode was successful
     */
    tryScanUnicode() {
        const offset = this.stream.pos();
        if (!this.stream.eos() && this._unicodeRange()) {
            return this.finishToken(offset, TokenType.UnicodeRange);
        }
        this.stream.goBackTo(offset);
        return undefined;
    }
    scanNext(offset) {
        // CDO <!--
        if (this.stream.advanceIfChars([_LAN, _BNG, _MIN, _MIN])) {
            return this.finishToken(offset, TokenType.CDO);
        }
        // CDC -->
        if (this.stream.advanceIfChars([_MIN, _MIN, _RAN])) {
            return this.finishToken(offset, TokenType.CDC);
        }
        let content = [];
        if (this.ident(content)) {
            return this.finishToken(offset, TokenType.Ident, content.join(''));
        }
        // at-keyword
        if (this.stream.advanceIfChar(_ATS)) {
            content = ['@'];
            if (this._name(content)) {
                const keywordText = content.join('');
                if (keywordText === '@charset') {
                    return this.finishToken(offset, TokenType.Charset, keywordText);
                }
                return this.finishToken(offset, TokenType.AtKeyword, keywordText);
            }
            else {
                return this.finishToken(offset, TokenType.Delim);
            }
        }
        // hash
        if (this.stream.advanceIfChar(_HSH)) {
            content = ['#'];
            if (this._name(content)) {
                return this.finishToken(offset, TokenType.Hash, content.join(''));
            }
            else {
                return this.finishToken(offset, TokenType.Delim);
            }
        }
        // Important
        if (this.stream.advanceIfChar(_BNG)) {
            return this.finishToken(offset, TokenType.Exclamation);
        }
        // Numbers
        if (this._number()) {
            const pos = this.stream.pos();
            content = [this.stream.substring(offset, pos)];
            if (this.stream.advanceIfChar(_PRC)) {
                // Percentage 43%
                return this.finishToken(offset, TokenType.Percentage);
            }
            else if (this.ident(content)) {
                const dim = this.stream.substring(pos).toLowerCase();
                const tokenType = staticUnitTable[dim];
                if (typeof tokenType !== 'undefined') {
                    // Known dimension 43px
                    return this.finishToken(offset, tokenType, content.join(''));
                }
                else {
                    // Unknown dimension 43ft
                    return this.finishToken(offset, TokenType.Dimension, content.join(''));
                }
            }
            return this.finishToken(offset, TokenType.Num);
        }
        // String, BadString
        content = [];
        let tokenType = this._string(content);
        if (tokenType !== null) {
            return this.finishToken(offset, tokenType, content.join(''));
        }
        // single character tokens
        tokenType = staticTokenTable[this.stream.peekChar()];
        if (typeof tokenType !== 'undefined') {
            this.stream.advance(1);
            return this.finishToken(offset, tokenType);
        }
        // includes ~=
        if (this.stream.peekChar(0) === _TLD && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.Includes);
        }
        // DashMatch |=
        if (this.stream.peekChar(0) === _PIP && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.Dashmatch);
        }
        // Substring operator *=
        if (this.stream.peekChar(0) === _MUL && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.SubstringOperator);
        }
        // Substring operator ^=
        if (this.stream.peekChar(0) === _HAT && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.PrefixOperator);
        }
        // Substring operator $=
        if (this.stream.peekChar(0) === _DLR && this.stream.peekChar(1) === _EQS) {
            this.stream.advance(2);
            return this.finishToken(offset, TokenType.SuffixOperator);
        }
        // Delim
        this.stream.nextChar();
        return this.finishToken(offset, TokenType.Delim);
    }
    trivia() {
        while (true) {
            const offset = this.stream.pos();
            if (this._whitespace()) {
                if (!this.ignoreWhitespace) {
                    return this.finishToken(offset, TokenType.Whitespace);
                }
            }
            else if (this.comment()) {
                if (!this.ignoreComment) {
                    return this.finishToken(offset, TokenType.Comment);
                }
            }
            else {
                return null;
            }
        }
    }
    comment() {
        if (this.stream.advanceIfChars([_FSL, _MUL])) {
            let success = false, hot = false;
            this.stream.advanceWhileChar((ch) => {
                if (hot && ch === _FSL) {
                    success = true;
                    return false;
                }
                hot = ch === _MUL;
                return true;
            });
            if (success) {
                this.stream.advance(1);
            }
            return true;
        }
        return false;
    }
    _number() {
        let npeek = 0, ch;
        if (this.stream.peekChar() === _DOT) {
            npeek = 1;
        }
        ch = this.stream.peekChar(npeek);
        if (ch >= _0 && ch <= _9) {
            this.stream.advance(npeek + 1);
            this.stream.advanceWhileChar((ch) => {
                return ch >= _0 && ch <= _9 || npeek === 0 && ch === _DOT;
            });
            return true;
        }
        return false;
    }
    _newline(result) {
        const ch = this.stream.peekChar();
        switch (ch) {
            case _CAR:
            case _LFD:
            case _NWL:
                this.stream.advance(1);
                result.push(String.fromCharCode(ch));
                if (ch === _CAR && this.stream.advanceIfChar(_NWL)) {
                    result.push('\n');
                }
                return true;
        }
        return false;
    }
    _escape(result, includeNewLines) {
        let ch = this.stream.peekChar();
        if (ch === _BSL) {
            this.stream.advance(1);
            ch = this.stream.peekChar();
            let hexNumCount = 0;
            while (hexNumCount < 6 && (ch >= _0 && ch <= _9 || ch >= _a && ch <= _f || ch >= _A && ch <= _F)) {
                this.stream.advance(1);
                ch = this.stream.peekChar();
                hexNumCount++;
            }
            if (hexNumCount > 0) {
                try {
                    const hexVal = parseInt(this.stream.substring(this.stream.pos() - hexNumCount), 16);
                    if (hexVal) {
                        result.push(String.fromCharCode(hexVal));
                    }
                }
                catch (e) {
                    // ignore
                }
                // optional whitespace or new line, not part of result text
                if (ch === _WSP || ch === _TAB) {
                    this.stream.advance(1);
                }
                else {
                    this._newline([]);
                }
                return true;
            }
            if (ch !== _CAR && ch !== _LFD && ch !== _NWL) {
                this.stream.advance(1);
                result.push(String.fromCharCode(ch));
                return true;
            }
            else if (includeNewLines) {
                return this._newline(result);
            }
        }
        return false;
    }
    _stringChar(closeQuote, result) {
        // not closeQuote, not backslash, not newline
        const ch = this.stream.peekChar();
        if (ch !== 0 && ch !== closeQuote && ch !== _BSL && ch !== _CAR && ch !== _LFD && ch !== _NWL) {
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    }
    _string(result) {
        if (this.stream.peekChar() === _SQO || this.stream.peekChar() === _DQO) {
            const closeQuote = this.stream.nextChar();
            result.push(String.fromCharCode(closeQuote));
            while (this._stringChar(closeQuote, result) || this._escape(result, true)) {
                // loop
            }
            if (this.stream.peekChar() === closeQuote) {
                this.stream.nextChar();
                result.push(String.fromCharCode(closeQuote));
                return TokenType.String;
            }
            else {
                return TokenType.BadString;
            }
        }
        return null;
    }
    _unquotedChar(result) {
        // not closeQuote, not backslash, not newline
        const ch = this.stream.peekChar();
        if (ch !== 0 && ch !== _BSL && ch !== _SQO && ch !== _DQO && ch !== _LPA && ch !== _RPA && ch !== _WSP && ch !== _TAB && ch !== _NWL && ch !== _LFD && ch !== _CAR) {
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    }
    _unquotedString(result) {
        let hasContent = false;
        while (this._unquotedChar(result) || this._escape(result)) {
            hasContent = true;
        }
        return hasContent;
    }
    _whitespace() {
        const n = this.stream.advanceWhileChar((ch) => {
            return ch === _WSP || ch === _TAB || ch === _NWL || ch === _LFD || ch === _CAR;
        });
        return n > 0;
    }
    _name(result) {
        let matched = false;
        while (this._identChar(result) || this._escape(result)) {
            matched = true;
        }
        return matched;
    }
    ident(result) {
        const pos = this.stream.pos();
        const hasMinus = this._minus(result);
        if (hasMinus) {
            if (this._minus(result) /* -- */ || this._identFirstChar(result) || this._escape(result)) {
                while (this._identChar(result) || this._escape(result)) {
                    // loop
                }
                return true;
            }
        }
        else if (this._identFirstChar(result) || this._escape(result)) {
            while (this._identChar(result) || this._escape(result)) {
                // loop
            }
            return true;
        }
        this.stream.goBackTo(pos);
        return false;
    }
    _identFirstChar(result) {
        const ch = this.stream.peekChar();
        if (ch === _USC || // _
            ch >= _a && ch <= _z || // a-z
            ch >= _A && ch <= _Z || // A-Z
            ch >= 0x80 && ch <= 0xFFFF) { // nonascii
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    }
    _minus(result) {
        const ch = this.stream.peekChar();
        if (ch === _MIN) {
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    }
    _identChar(result) {
        const ch = this.stream.peekChar();
        if (ch === _USC || // _
            ch === _MIN || // -
            ch >= _a && ch <= _z || // a-z
            ch >= _A && ch <= _Z || // A-Z
            ch >= _0 && ch <= _9 || // 0/9
            ch >= 0x80 && ch <= 0xFFFF) { // nonascii
            this.stream.advance(1);
            result.push(String.fromCharCode(ch));
            return true;
        }
        return false;
    }
    _unicodeRange() {
        // follow https://www.w3.org/TR/CSS21/syndata.html#tokenization and https://www.w3.org/TR/css-syntax-3/#urange-syntax
        // assume u has already been parsed
        if (this.stream.advanceIfChar(_PLS)) {
            const isHexDigit = (ch) => (ch >= _0 && ch <= _9 || ch >= _a && ch <= _f || ch >= _A && ch <= _F);
            const codePoints = this.stream.advanceWhileChar(isHexDigit) + this.stream.advanceWhileChar(ch => ch === _QSM);
            if (codePoints >= 1 && codePoints <= 6) {
                if (this.stream.advanceIfChar(_MIN)) {
                    const digits = this.stream.advanceWhileChar(isHexDigit);
                    if (digits >= 1 && digits <= 6) {
                        return true;
                    }
                }
                else {
                    return true;
                }
            }
        }
        return false;
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssSymbolScope.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/parser/cssSymbolScope.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GlobalScope: () => (/* binding */ GlobalScope),
/* harmony export */   Scope: () => (/* binding */ Scope),
/* harmony export */   ScopeBuilder: () => (/* binding */ ScopeBuilder),
/* harmony export */   Symbol: () => (/* binding */ Symbol),
/* harmony export */   Symbols: () => (/* binding */ Symbols)
/* harmony export */ });
/* harmony import */ var _cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _utils_arrays__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/arrays */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/arrays.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



class Scope {
    constructor(offset, length) {
        this.offset = offset;
        this.length = length;
        this.symbols = [];
        this.parent = null;
        this.children = [];
    }
    addChild(scope) {
        this.children.push(scope);
        scope.setParent(this);
    }
    setParent(scope) {
        this.parent = scope;
    }
    findScope(offset, length = 0) {
        if (this.offset <= offset && this.offset + this.length > offset + length || this.offset === offset && this.length === length) {
            return this.findInScope(offset, length);
        }
        return null;
    }
    findInScope(offset, length = 0) {
        // find the first scope child that has an offset larger than offset + length
        const end = offset + length;
        const idx = (0,_utils_arrays__WEBPACK_IMPORTED_MODULE_1__.findFirst)(this.children, s => s.offset > end);
        if (idx === 0) {
            // all scopes have offsets larger than our end
            return this;
        }
        const res = this.children[idx - 1];
        if (res.offset <= offset && res.offset + res.length >= offset + length) {
            return res.findInScope(offset, length);
        }
        return this;
    }
    addSymbol(symbol) {
        this.symbols.push(symbol);
    }
    getSymbol(name, type) {
        for (let index = 0; index < this.symbols.length; index++) {
            const symbol = this.symbols[index];
            if (symbol.name === name && symbol.type === type) {
                return symbol;
            }
        }
        return null;
    }
    getSymbols() {
        return this.symbols;
    }
}
class GlobalScope extends Scope {
    constructor() {
        super(0, Number.MAX_VALUE);
    }
}
class Symbol {
    constructor(name, value, node, type) {
        this.name = name;
        this.value = value;
        this.node = node;
        this.type = type;
    }
}
class ScopeBuilder {
    constructor(scope) {
        this.scope = scope;
    }
    addSymbol(node, name, value, type) {
        if (node.offset !== -1) {
            const current = this.scope.findScope(node.offset, node.length);
            if (current) {
                current.addSymbol(new Symbol(name, value, node, type));
            }
        }
    }
    addScope(node) {
        if (node.offset !== -1) {
            const current = this.scope.findScope(node.offset, node.length);
            if (current && (current.offset !== node.offset || current.length !== node.length)) { // scope already known?
                const newScope = new Scope(node.offset, node.length);
                current.addChild(newScope);
                return newScope;
            }
            return current;
        }
        return null;
    }
    addSymbolToChildScope(scopeNode, node, name, value, type) {
        if (scopeNode && scopeNode.offset !== -1) {
            const current = this.addScope(scopeNode); // create the scope or gets the existing one
            if (current) {
                current.addSymbol(new Symbol(name, value, node, type));
            }
        }
    }
    visitNode(node) {
        switch (node.type) {
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Keyframe:
                this.addSymbol(node, node.getName(), void 0, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Keyframe);
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.CustomPropertyDeclaration:
                return this.visitCustomPropertyDeclarationNode(node);
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.VariableDeclaration:
                return this.visitVariableDeclarationNode(node);
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Ruleset:
                return this.visitRuleSet(node);
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration:
                this.addSymbol(node, node.getName(), void 0, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Mixin);
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.FunctionDeclaration:
                this.addSymbol(node, node.getName(), void 0, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Function);
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.FunctionParameter: {
                return this.visitFunctionParameterNode(node);
            }
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Declarations:
                this.addScope(node);
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.For:
                const forNode = node;
                const scopeNode = forNode.getDeclarations();
                if (scopeNode && forNode.variable) {
                    this.addSymbolToChildScope(scopeNode, forNode.variable, forNode.variable.getName(), void 0, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
                }
                return true;
            case _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Each: {
                const eachNode = node;
                const scopeNode = eachNode.getDeclarations();
                if (scopeNode) {
                    const variables = eachNode.getVariables().getChildren();
                    for (const variable of variables) {
                        this.addSymbolToChildScope(scopeNode, variable, variable.getName(), void 0, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
                    }
                }
                return true;
            }
        }
        return true;
    }
    visitRuleSet(node) {
        const current = this.scope.findScope(node.offset, node.length);
        if (current) {
            for (const child of node.getSelectors().getChildren()) {
                if (child instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.Selector) {
                    if (child.getChildren().length === 1) { // only selectors with a single element can be extended
                        current.addSymbol(new Symbol(child.getChild(0).getText(), void 0, child, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Rule));
                    }
                }
            }
        }
        return true;
    }
    visitVariableDeclarationNode(node) {
        const value = node.getValue() ? node.getValue().getText() : void 0;
        this.addSymbol(node, node.getName(), value, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        return true;
    }
    visitFunctionParameterNode(node) {
        // parameters are part of the body scope
        const scopeNode = node.getParent().getDeclarations();
        if (scopeNode) {
            const valueNode = node.getDefaultValue();
            const value = valueNode ? valueNode.getText() : void 0;
            this.addSymbolToChildScope(scopeNode, node, node.getName(), value, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        }
        return true;
    }
    visitCustomPropertyDeclarationNode(node) {
        const value = node.getValue() ? node.getValue().getText() : '';
        this.addCSSVariable(node.getProperty(), node.getProperty().getName(), value, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        return true;
    }
    addCSSVariable(node, name, value, type) {
        if (node.offset !== -1) {
            this.scope.addSymbol(new Symbol(name, value, node, type));
        }
    }
}
class Symbols {
    constructor(node) {
        this.global = new GlobalScope();
        node.acceptVisitor(new ScopeBuilder(this.global));
    }
    findSymbolsAtOffset(offset, referenceType) {
        let scope = this.global.findScope(offset, 0);
        const result = [];
        const names = {};
        while (scope) {
            const symbols = scope.getSymbols();
            for (let i = 0; i < symbols.length; i++) {
                const symbol = symbols[i];
                if (symbol.type === referenceType && !names[symbol.name]) {
                    result.push(symbol);
                    names[symbol.name] = true;
                }
            }
            scope = scope.parent;
        }
        return result;
    }
    internalFindSymbol(node, referenceTypes) {
        let scopeNode = node;
        if (node.parent instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionParameter && node.parent.getParent() instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.BodyDeclaration) {
            scopeNode = node.parent.getParent().getDeclarations();
        }
        if (node.parent instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionArgument && node.parent.getParent() instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.Function) {
            const funcId = node.parent.getParent().getIdentifier();
            if (funcId) {
                const functionSymbol = this.internalFindSymbol(funcId, [_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Function]);
                if (functionSymbol) {
                    scopeNode = functionSymbol.node.getDeclarations();
                }
            }
        }
        if (!scopeNode) {
            return null;
        }
        const name = node.getText();
        let scope = this.global.findScope(scopeNode.offset, scopeNode.length);
        while (scope) {
            for (let index = 0; index < referenceTypes.length; index++) {
                const type = referenceTypes[index];
                const symbol = scope.getSymbol(name, type);
                if (symbol) {
                    return symbol;
                }
            }
            scope = scope.parent;
        }
        return null;
    }
    evaluateReferenceTypes(node) {
        if (node instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.Identifier) {
            const referenceTypes = node.referenceTypes;
            if (referenceTypes) {
                return referenceTypes;
            }
            else {
                if (node.isCustomProperty) {
                    return [_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable];
                }
                // are a reference to a keyframe?
                const decl = _cssNodes__WEBPACK_IMPORTED_MODULE_0__.getParentDeclaration(node);
                if (decl) {
                    const propertyName = decl.getNonPrefixedPropertyName();
                    if ((propertyName === 'animation' || propertyName === 'animation-name')
                        && decl.getValue() && decl.getValue().offset === node.offset) {
                        return [_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Keyframe];
                    }
                }
            }
        }
        else if (node instanceof _cssNodes__WEBPACK_IMPORTED_MODULE_0__.Variable) {
            return [_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable];
        }
        const selector = node.findAParent(_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Selector, _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ExtendsReference);
        if (selector) {
            return [_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Rule];
        }
        return null;
    }
    findSymbolFromNode(node) {
        if (!node) {
            return null;
        }
        while (node.type === _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Interpolation) {
            node = node.getParent();
        }
        const referenceTypes = this.evaluateReferenceTypes(node);
        if (referenceTypes) {
            return this.internalFindSymbol(node, referenceTypes);
        }
        return null;
    }
    matchesSymbol(node, symbol) {
        if (!node) {
            return false;
        }
        while (node.type === _cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Interpolation) {
            node = node.getParent();
        }
        if (!node.matches(symbol.name)) {
            return false;
        }
        const referenceTypes = this.evaluateReferenceTypes(node);
        if (!referenceTypes || referenceTypes.indexOf(symbol.type) === -1) {
            return false;
        }
        const nodeSymbol = this.internalFindSymbol(node, referenceTypes);
        return nodeSymbol === symbol;
    }
    findSymbol(name, type, offset) {
        let scope = this.global.findScope(offset);
        while (scope) {
            const symbol = scope.getSymbol(name, type);
            if (symbol) {
                return symbol;
            }
            scope = scope.parent;
        }
        return null;
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/parser/lessParser.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/parser/lessParser.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LESSParser: () => (/* binding */ LESSParser)
/* harmony export */ });
/* harmony import */ var _lessScanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lessScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/lessScanner.js");
/* harmony import */ var _cssScanner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cssScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/* harmony import */ var _cssParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cssParser */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssParser.js");
/* harmony import */ var _cssNodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _cssErrors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./cssErrors */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssErrors.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/






/// <summary>
/// A parser for LESS
/// http://lesscss.org/
/// </summary>
class LESSParser extends _cssParser__WEBPACK_IMPORTED_MODULE_2__.Parser {
    constructor() {
        super(new _lessScanner__WEBPACK_IMPORTED_MODULE_0__.LESSScanner());
    }
    _parseStylesheetStatement(isNested = false) {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return this._parseVariableDeclaration()
                || this._parsePlugin()
                || super._parseStylesheetAtStatement(isNested);
        }
        return this._tryParseMixinDeclaration()
            || this._tryParseMixinReference()
            || this._parseFunction()
            || this._parseRuleset(true);
    }
    _parseImport() {
        if (!this.peekKeyword('@import') && !this.peekKeyword('@import-once') /* deprecated in less 1.4.1 */) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Import);
        this.consumeToken();
        // less 1.4.1: @import (css) "lib"
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon]);
            }
            do {
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    break;
                }
            } while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident));
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon]);
            }
        }
        if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.URIOrStringExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon]);
        }
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            node.setMedialist(this._parseMediaQueryList());
        }
        return this._completeParseImport(node);
    }
    _parsePlugin() {
        if (!this.peekKeyword('@plugin')) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.Plugin);
        this.consumeToken(); // @import
        if (!node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.StringLiteralExpected);
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    }
    _parseMediaQuery() {
        const node = super._parseMediaQuery();
        if (!node) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MediaQuery);
            if (node.addChild(this._parseVariable())) {
                return this.finish(node);
            }
            return null;
        }
        return node;
    }
    _parseMediaDeclaration(isNested = false) {
        return this._tryParseRuleset(isNested)
            || this._tryToParseDeclaration()
            || this._tryParseMixinDeclaration()
            || this._tryParseMixinReference()
            || this._parseDetachedRuleSetMixin()
            || this._parseStylesheetStatement(isNested);
    }
    _parseMediaFeatureName() {
        return this._parseIdent() || this._parseVariable();
    }
    _parseVariableDeclaration(panic = []) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.VariableDeclaration);
        const mark = this.mark();
        if (!node.setVariable(this._parseVariable(true))) {
            return null;
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            if (this.prevToken) {
                node.colonPosition = this.prevToken.offset;
            }
            if (node.setValue(this._parseDetachedRuleSet())) {
                node.needsSemicolon = false;
            }
            else if (!node.setValue(this._parseExpr())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.VariableValueExpected, [], panic);
            }
            node.addChild(this._parsePrio());
        }
        else {
            this.restoreAtMark(mark);
            return null; // at keyword, but no ':', not a variable declaration but some at keyword
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
            node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
        }
        return this.finish(node);
    }
    _parseDetachedRuleSet() {
        let mark = this.mark();
        // "Anonymous mixin" used in each() and possibly a generic type in the future
        if (this.peekDelim('#') || this.peekDelim('.')) {
            this.consumeToken();
            if (!this.hasWhitespace() && this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
                let node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinDeclaration);
                if (node.getParameters().addChild(this._parseMixinParameter())) {
                    while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma) || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                            break;
                        }
                        if (!node.getParameters().addChild(this._parseMixinParameter())) {
                            this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.IdentifierExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
                        }
                    }
                }
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    this.restoreAtMark(mark);
                    return null;
                }
            }
            else {
                this.restoreAtMark(mark);
                return null;
            }
        }
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
            return null;
        }
        const content = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.BodyDeclaration);
        this._parseBody(content, this._parseDetachedRuleSetBody.bind(this));
        return this.finish(content);
    }
    _parseDetachedRuleSetBody() {
        return this._tryParseKeyframeSelector() || this._parseRuleSetDeclaration();
    }
    _addLookupChildren(node) {
        if (!node.addChild(this._parseLookupValue())) {
            return false;
        }
        let expectsValue = false;
        while (true) {
            if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketL)) {
                expectsValue = true;
            }
            if (!node.addChild(this._parseLookupValue())) {
                break;
            }
            expectsValue = false;
        }
        return !expectsValue;
    }
    _parseLookupValue() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Node);
        const mark = this.mark();
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketL)) {
            this.restoreAtMark(mark);
            return null;
        }
        if (((node.addChild(this._parseVariable(false, true)) ||
            node.addChild(this._parsePropertyIdentifier())) &&
            this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketR)) || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketR)) {
            return node;
        }
        this.restoreAtMark(mark);
        return null;
    }
    _parseVariable(declaration = false, insideLookup = false) {
        const isPropertyReference = !declaration && this.peekDelim('$');
        if (!this.peekDelim('@') && !isPropertyReference && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Variable);
        const mark = this.mark();
        while (this.acceptDelim('@') || (!declaration && this.acceptDelim('$'))) {
            if (this.hasWhitespace()) {
                this.restoreAtMark(mark);
                return null;
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident)) {
            this.restoreAtMark(mark);
            return null;
        }
        if (!insideLookup && this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketL)) {
            if (!this._addLookupChildren(node)) {
                this.restoreAtMark(mark);
                return null;
            }
        }
        return node;
    }
    _parseTermExpression() {
        return this._parseVariable() ||
            this._parseEscaped() ||
            super._parseTermExpression() || // preference for colors before mixin references
            this._tryParseMixinReference(false);
    }
    _parseEscaped() {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.EscapedJavaScript) ||
            this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.BadEscapedJavaScript)) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.EscapedValue);
            this.consumeToken();
            return this.finish(node);
        }
        if (this.peekDelim('~')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.EscapedValue);
            this.consumeToken();
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.String) || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.EscapedJavaScript)) {
                return this.finish(node);
            }
            else {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.TermExpected);
            }
        }
        return null;
    }
    _parseOperator() {
        const node = this._parseGuardOperator();
        if (node) {
            return node;
        }
        else {
            return super._parseOperator();
        }
    }
    _parseGuardOperator() {
        if (this.peekDelim('>')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.Operator);
            this.consumeToken();
            this.acceptDelim('=');
            return node;
        }
        else if (this.peekDelim('=')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.Operator);
            this.consumeToken();
            this.acceptDelim('<');
            return node;
        }
        else if (this.peekDelim('<')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.Operator);
            this.consumeToken();
            this.acceptDelim('=');
            return node;
        }
        return null;
    }
    _parseRuleSetDeclaration() {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return this._parseKeyframe()
                || this._parseMedia(true)
                || this._parseImport()
                || this._parseSupports(true) // @supports
                || this._parseLayer() // @layer
                || this._parsePropertyAtRule() // @property
                || this._parseDetachedRuleSetMixin() // less detached ruleset mixin
                || this._parseVariableDeclaration() // Variable declarations
                || this._parseRuleSetDeclarationAtStatement();
        }
        return this._tryParseMixinDeclaration()
            || this._tryParseRuleset(true) // nested ruleset
            || this._tryParseMixinReference() // less mixin reference
            || this._parseFunction()
            || this._parseExtend() // less extend declaration
            || this._parseDeclaration(); // try css ruleset declaration as the last option
    }
    _parseKeyframeIdent() {
        return this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Keyframe]) || this._parseVariable();
    }
    _parseKeyframeSelector() {
        return this._parseDetachedRuleSetMixin() // less detached ruleset mixin
            || super._parseKeyframeSelector();
    }
    // public _parseSimpleSelectorBody(): nodes.Node | null {
    // 	return this._parseNestingSelector() || super._parseSimpleSelectorBody();
    // }
    _parseSelector(isNested) {
        // CSS Guards
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Selector);
        let hasContent = false;
        if (isNested) {
            // nested selectors can start with a combinator
            hasContent = node.addChild(this._parseCombinator());
        }
        while (node.addChild(this._parseSimpleSelector())) {
            hasContent = true;
            const mark = this.mark();
            if (node.addChild(this._parseGuard()) && this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
                break;
            }
            this.restoreAtMark(mark);
            node.addChild(this._parseCombinator()); // optional
        }
        return hasContent ? this.finish(node) : null;
    }
    _parseNestingSelector() {
        if (this.peekDelim('&')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorCombinator);
            this.consumeToken();
            while (!this.hasWhitespace() && (this.acceptDelim('-') || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Num) || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Dimension) || node.addChild(this._parseIdent()) || this.acceptDelim('&'))) {
                //  support &-foo
            }
            return this.finish(node);
        }
        return null;
    }
    _parseSelectorIdent() {
        if (!this.peekInterpolatedIdent()) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorInterpolation);
        const hasContent = this._acceptInterpolatedIdent(node);
        return hasContent ? this.finish(node) : null;
    }
    _parsePropertyIdentifier(inLookup = false) {
        const propertyRegex = /^[\w-]+/;
        if (!this.peekInterpolatedIdent() && !this.peekRegExp(this.token.type, propertyRegex)) {
            return null;
        }
        const mark = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Identifier);
        node.isCustomProperty = this.acceptDelim('-') && this.acceptDelim('-');
        let childAdded = false;
        if (!inLookup) {
            if (node.isCustomProperty) {
                childAdded = this._acceptInterpolatedIdent(node);
            }
            else {
                childAdded = this._acceptInterpolatedIdent(node, propertyRegex);
            }
        }
        else {
            if (node.isCustomProperty) {
                childAdded = node.addChild(this._parseIdent());
            }
            else {
                childAdded = node.addChild(this._parseRegexp(propertyRegex));
            }
        }
        if (!childAdded) {
            this.restoreAtMark(mark);
            return null;
        }
        if (!inLookup && !this.hasWhitespace()) {
            this.acceptDelim('+');
            if (!this.hasWhitespace()) {
                this.acceptIdent('_');
            }
        }
        return this.finish(node);
    }
    peekInterpolatedIdent() {
        return this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident) ||
            this.peekDelim('@') ||
            this.peekDelim('$') ||
            this.peekDelim('-');
    }
    _acceptInterpolatedIdent(node, identRegex) {
        let hasContent = false;
        const indentInterpolation = () => {
            const pos = this.mark();
            if (this.acceptDelim('-')) {
                if (!this.hasWhitespace()) {
                    this.acceptDelim('-');
                }
                if (this.hasWhitespace()) {
                    this.restoreAtMark(pos);
                    return null;
                }
            }
            return this._parseInterpolation();
        };
        const accept = identRegex ?
            () => this.acceptRegexp(identRegex) :
            () => this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident);
        while (accept() ||
            node.addChild(this._parseInterpolation() ||
                this.try(indentInterpolation))) {
            hasContent = true;
            if (this.hasWhitespace()) {
                break;
            }
        }
        return hasContent;
    }
    _parseInterpolation() {
        // @{name} Variable or
        // ${name} Property
        const mark = this.mark();
        if (this.peekDelim('@') || this.peekDelim('$')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.Interpolation);
            this.consumeToken();
            if (this.hasWhitespace() || !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
                this.restoreAtMark(mark);
                return null;
            }
            if (!node.addChild(this._parseIdent())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.IdentifierExpected);
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightCurlyExpected);
            }
            return this.finish(node);
        }
        return null;
    }
    _tryParseMixinDeclaration() {
        const mark = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinDeclaration);
        if (!node.setIdentifier(this._parseMixinDeclarationIdentifier()) || !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            this.restoreAtMark(mark);
            return null;
        }
        if (node.getParameters().addChild(this._parseMixinParameter())) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma) || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getParameters().addChild(this._parseMixinParameter())) {
                    this.markError(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.IdentifierExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
                }
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            this.restoreAtMark(mark);
            return null;
        }
        node.setGuard(this._parseGuard());
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
            this.restoreAtMark(mark);
            return null;
        }
        return this._parseBody(node, this._parseMixInBodyDeclaration.bind(this));
    }
    _parseMixInBodyDeclaration() {
        return this._parseFontFace() || this._parseRuleSetDeclaration();
    }
    _parseMixinDeclarationIdentifier() {
        let identifier;
        if (this.peekDelim('#') || this.peekDelim('.')) {
            identifier = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Identifier);
            this.consumeToken(); // # or .
            if (this.hasWhitespace() || !identifier.addChild(this._parseIdent())) {
                return null;
            }
        }
        else if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Hash)) {
            identifier = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Identifier);
            this.consumeToken(); // TokenType.Hash
        }
        else {
            return null;
        }
        identifier.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin];
        return this.finish(identifier);
    }
    _parsePseudo() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            return null;
        }
        const mark = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ExtendsReference);
        this.consumeToken(); // :
        if (this.acceptIdent('extend')) {
            return this._completeExtends(node);
        }
        this.restoreAtMark(mark);
        return super._parsePseudo();
    }
    _parseExtend() {
        if (!this.peekDelim('&')) {
            return null;
        }
        const mark = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ExtendsReference);
        this.consumeToken(); // &
        if (this.hasWhitespace() || !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon) || !this.acceptIdent('extend')) {
            this.restoreAtMark(mark);
            return null;
        }
        return this._completeExtends(node);
    }
    _completeExtends(node) {
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.LeftParenthesisExpected);
        }
        const selectors = node.getSelectors();
        if (!selectors.addChild(this._parseSelector(true))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.SelectorExpected);
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (!selectors.addChild(this._parseSelector(true))) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.SelectorExpected);
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseDetachedRuleSetMixin() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return null;
        }
        const mark = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinReference);
        if (node.addChild(this._parseVariable(true)) && (this.hasWhitespace() || !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL))) {
            this.restoreAtMark(mark);
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _tryParseMixinReference(atRoot = true) {
        const mark = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinReference);
        let identifier = this._parseMixinDeclarationIdentifier();
        while (identifier) {
            this.acceptDelim('>');
            const nextId = this._parseMixinDeclarationIdentifier();
            if (nextId) {
                node.getNamespaces().addChild(identifier);
                identifier = nextId;
            }
            else {
                break;
            }
        }
        if (!node.setIdentifier(identifier)) {
            this.restoreAtMark(mark);
            return null;
        }
        let hasArguments = false;
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            hasArguments = true;
            if (node.getArguments().addChild(this._parseMixinArgument())) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma) || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getArguments().addChild(this._parseMixinArgument())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.ExpressionExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected);
            }
            identifier.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin];
        }
        else {
            identifier.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin, _cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Rule];
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.BracketL)) {
            if (!atRoot) {
                this._addLookupChildren(node);
            }
        }
        else {
            node.addChild(this._parsePrio());
        }
        if (!hasArguments && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            this.restoreAtMark(mark);
            return null;
        }
        return this.finish(node);
    }
    _parseMixinArgument() {
        // [variableName ':'] expression | variableName '...'
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.FunctionArgument);
        const pos = this.mark();
        const argument = this._parseVariable();
        if (argument) {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
                this.restoreAtMark(pos);
            }
            else {
                node.setIdentifier(argument);
            }
        }
        if (node.setValue(this._parseDetachedRuleSet() || this._parseExpr(true))) {
            return this.finish(node);
        }
        this.restoreAtMark(pos);
        return null;
    }
    _parseMixinParameter() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.FunctionParameter);
        // special rest variable: @rest...
        if (this.peekKeyword('@rest')) {
            const restNode = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Node);
            this.consumeToken();
            if (!this.accept(_lessScanner__WEBPACK_IMPORTED_MODULE_0__.Ellipsis)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.DotExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma, _cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
            }
            node.setIdentifier(this.finish(restNode));
            return this.finish(node);
        }
        // special const args: ...
        if (this.peek(_lessScanner__WEBPACK_IMPORTED_MODULE_0__.Ellipsis)) {
            const varargsNode = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Node);
            this.consumeToken();
            node.setIdentifier(this.finish(varargsNode));
            return this.finish(node);
        }
        let hasContent = false;
        // default variable declaration: @param: 12 or @name
        if (node.setIdentifier(this._parseVariable())) {
            this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon);
            hasContent = true;
        }
        if (!node.setDefaultValue(this._parseDetachedRuleSet() || this._parseExpr(true)) && !hasContent) {
            return null;
        }
        return this.finish(node);
    }
    _parseGuard() {
        if (!this.peekIdent('when')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.LessGuard);
        this.consumeToken(); // when
        if (!node.getConditions().addChild(this._parseGuardCondition())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.ConditionExpected);
        }
        while (this.acceptIdent('and') || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (!node.getConditions().addChild(this._parseGuardCondition())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.ConditionExpected);
            }
        }
        return this.finish(node);
    }
    _parseGuardCondition() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.GuardCondition);
        node.isNegated = this.acceptIdent('not');
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (node.isNegated) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.LeftParenthesisExpected);
            }
            return null;
        }
        if (!node.addChild(this._parseExpr())) {
            // empty (?)
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseFunction() {
        const pos = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Function);
        if (!node.setIdentifier(this._parseFunctionIdentifier())) {
            return null;
        }
        if (this.hasWhitespace() || !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            this.restoreAtMark(pos);
            return null;
        }
        if (node.getArguments().addChild(this._parseMixinArgument())) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma) || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getArguments().addChild(this._parseMixinArgument())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.ExpressionExpected);
                }
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_4__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseFunctionIdentifier() {
        if (this.peekDelim('%')) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Identifier);
            node.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Function];
            this.consumeToken();
            return this.finish(node);
        }
        return super._parseFunctionIdentifier();
    }
    _parseURLArgument() {
        const pos = this.mark();
        const node = super._parseURLArgument();
        if (!node || !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            this.restoreAtMark(pos);
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Node);
            node.addChild(this._parseBinaryExpr());
            return this.finish(node);
        }
        return node;
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/parser/lessScanner.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/parser/lessScanner.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ellipsis: () => (/* binding */ Ellipsis),
/* harmony export */   LESSScanner: () => (/* binding */ LESSScanner)
/* harmony export */ });
/* harmony import */ var _cssScanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


const _FSL = '/'.charCodeAt(0);
const _NWL = '\n'.charCodeAt(0);
const _CAR = '\r'.charCodeAt(0);
const _LFD = '\f'.charCodeAt(0);
const _TIC = '`'.charCodeAt(0);
const _DOT = '.'.charCodeAt(0);
let customTokenValue = _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CustomToken;
const Ellipsis = customTokenValue++;
class LESSScanner extends _cssScanner__WEBPACK_IMPORTED_MODULE_0__.Scanner {
    scanNext(offset) {
        // LESS: escaped JavaScript code `const a = "dddd"`
        const tokenType = this.escapedJavaScript();
        if (tokenType !== null) {
            return this.finishToken(offset, tokenType);
        }
        if (this.stream.advanceIfChars([_DOT, _DOT, _DOT])) {
            return this.finishToken(offset, Ellipsis);
        }
        return super.scanNext(offset);
    }
    comment() {
        if (super.comment()) {
            return true;
        }
        if (!this.inURL && this.stream.advanceIfChars([_FSL, _FSL])) {
            this.stream.advanceWhileChar((ch) => {
                switch (ch) {
                    case _NWL:
                    case _CAR:
                    case _LFD:
                        return false;
                    default:
                        return true;
                }
            });
            return true;
        }
        else {
            return false;
        }
    }
    escapedJavaScript() {
        const ch = this.stream.peekChar();
        if (ch === _TIC) {
            this.stream.advance(1);
            this.stream.advanceWhileChar((ch) => { return ch !== _TIC; });
            return this.stream.advanceIfChar(_TIC) ? _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EscapedJavaScript : _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.BadEscapedJavaScript;
        }
        return null;
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/parser/scssErrors.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/parser/scssErrors.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SCSSIssueType: () => (/* binding */ SCSSIssueType),
/* harmony export */   SCSSParseError: () => (/* binding */ SCSSParseError)
/* harmony export */ });
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_0__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


class SCSSIssueType {
    constructor(id, message) {
        this.id = id;
        this.message = message;
    }
}
const SCSSParseError = {
    FromExpected: new SCSSIssueType('scss-fromexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("'from' expected")),
    ThroughOrToExpected: new SCSSIssueType('scss-throughexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("'through' or 'to' expected")),
    InExpected: new SCSSIssueType('scss-fromexpected', _vscode_l10n__WEBPACK_IMPORTED_MODULE_0__.t("'in' expected")),
};


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/parser/scssParser.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/parser/scssParser.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SCSSParser: () => (/* binding */ SCSSParser)
/* harmony export */ });
/* harmony import */ var _scssScanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scssScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/scssScanner.js");
/* harmony import */ var _cssScanner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./cssScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/* harmony import */ var _cssParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cssParser */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssParser.js");
/* harmony import */ var _cssNodes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _scssErrors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./scssErrors */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/scssErrors.js");
/* harmony import */ var _cssErrors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cssErrors */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssErrors.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







/// <summary>
/// A parser for scss
/// http://sass-lang.com/documentation/file.SASS_REFERENCE.html
/// </summary>
class SCSSParser extends _cssParser__WEBPACK_IMPORTED_MODULE_2__.Parser {
    constructor() {
        super(new _scssScanner__WEBPACK_IMPORTED_MODULE_0__.SCSSScanner());
    }
    _parseStylesheetStatement(isNested = false) {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return this._parseWarnAndDebug() // @warn, @debug and @error statements
                || this._parseControlStatement() // @if, @while, @for, @each
                || this._parseMixinDeclaration() // @mixin
                || this._parseMixinContent() // @content
                || this._parseMixinReference() // @include
                || this._parseFunctionDeclaration() // @function
                || this._parseForward() // @forward
                || this._parseUse() // @use
                || this._parseRuleset(isNested) // @at-rule
                || super._parseStylesheetAtStatement(isNested);
        }
        return this._parseRuleset(true) || this._parseVariableDeclaration();
    }
    _parseImport() {
        if (!this.peekKeyword('@import')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Import);
        this.consumeToken();
        if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.URIOrStringExpected);
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (!node.addChild(this._parseURILiteral()) && !node.addChild(this._parseStringLiteral())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.URIOrStringExpected);
            }
        }
        return this._completeParseImport(node);
    }
    // scss variables: $font-size: 12px;
    _parseVariableDeclaration(panic = []) {
        if (!this.peek(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.VariableName)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.VariableDeclaration);
        if (!node.setVariable(this._parseVariable())) {
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ColonExpected);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        if (!node.setValue(this._parseExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableValueExpected, [], panic);
        }
        while (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Exclamation)) {
            if (node.addChild(this._tryParsePrio())) {
                // !important
            }
            else {
                this.consumeToken();
                if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident, /^(default|global)$/)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
                }
                this.consumeToken();
            }
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
            node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
        }
        return this.finish(node);
    }
    _parseMediaCondition() {
        return this._parseInterpolation() || super._parseMediaCondition();
    }
    _parseMediaFeatureRangeOperator() {
        return this.accept(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.SmallerEqualsOperator) || this.accept(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.GreaterEqualsOperator) || super._parseMediaFeatureRangeOperator();
    }
    _parseMediaFeatureName() {
        return this._parseModuleMember()
            || this._parseFunction() // function before ident
            || this._parseIdent()
            || this._parseVariable();
    }
    _parseKeyframeSelector() {
        return this._tryParseKeyframeSelector()
            || this._parseControlStatement(this._parseKeyframeSelector.bind(this))
            || this._parseWarnAndDebug() // @warn, @debug and @error statements
            || this._parseMixinReference() // @include
            || this._parseFunctionDeclaration() // @function
            || this._parseVariableDeclaration()
            || this._parseMixinContent();
    }
    _parseVariable() {
        if (!this.peek(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.VariableName)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Variable);
        this.consumeToken();
        return node;
    }
    _parseModuleMember() {
        const pos = this.mark();
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Module);
        if (!node.setIdentifier(this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Module]))) {
            return null;
        }
        if (this.hasWhitespace()
            || !this.acceptDelim('.')
            || this.hasWhitespace()) {
            this.restoreAtMark(pos);
            return null;
        }
        if (!node.addChild(this._parseVariable() || this._parseFunction())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierOrVariableExpected);
        }
        return node;
    }
    _parseIdent(referenceTypes) {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident) && !this.peek(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.InterpolationFunction) && !this.peekDelim('-')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Identifier);
        node.referenceTypes = referenceTypes;
        node.isCustomProperty = this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident, /^--/);
        let hasContent = false;
        const indentInterpolation = () => {
            const pos = this.mark();
            if (this.acceptDelim('-')) {
                if (!this.hasWhitespace()) {
                    this.acceptDelim('-');
                }
                if (this.hasWhitespace()) {
                    this.restoreAtMark(pos);
                    return null;
                }
            }
            return this._parseInterpolation();
        };
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident) || node.addChild(indentInterpolation()) || (hasContent && this.acceptRegexp(/^[\w-]/))) {
            hasContent = true;
            if (this.hasWhitespace()) {
                break;
            }
        }
        return hasContent ? this.finish(node) : null;
    }
    _parseTermExpression() {
        return this._parseModuleMember() ||
            this._parseVariable() ||
            this._parseNestingSelector() ||
            //this._tryParsePrio() ||
            super._parseTermExpression();
    }
    _parseInterpolation() {
        if (this.peek(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.InterpolationFunction)) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Interpolation);
            this.consumeToken();
            if (!node.addChild(this._parseExpr()) && !this._parseNestingSelector()) {
                if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR)) {
                    return this.finish(node);
                }
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightCurlyExpected);
            }
            return this.finish(node);
        }
        return null;
    }
    _parseOperator() {
        if (this.peek(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.EqualsOperator) || this.peek(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.NotEqualsOperator)
            || this.peek(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.GreaterEqualsOperator) || this.peek(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.SmallerEqualsOperator)
            || this.peekDelim('>') || this.peekDelim('<')
            || this.peekIdent('and') || this.peekIdent('or')
            || this.peekDelim('%')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.Operator);
            this.consumeToken();
            return this.finish(node);
        }
        return super._parseOperator();
    }
    _parseUnaryOperator() {
        if (this.peekIdent('not')) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Node);
            this.consumeToken();
            return this.finish(node);
        }
        return super._parseUnaryOperator();
    }
    _parseRuleSetDeclaration() {
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return this._parseKeyframe() // nested @keyframe
                || this._parseImport() // nested @import
                || this._parseMedia(true) // nested @media
                || this._parseFontFace() // nested @font-face
                || this._parseWarnAndDebug() // @warn, @debug and @error statements
                || this._parseControlStatement() // @if, @while, @for, @each
                || this._parseFunctionDeclaration() // @function
                || this._parseExtends() // @extends
                || this._parseMixinReference() // @include
                || this._parseMixinContent() // @content
                || this._parseMixinDeclaration() // nested @mixin
                || this._parseRuleset(true) // @at-rule
                || this._parseSupports(true) // @supports
                || this._parseLayer() // @layer
                || this._parsePropertyAtRule() // @property
                || this._parseRuleSetDeclarationAtStatement();
        }
        return this._parseVariableDeclaration() // variable declaration
            || this._tryParseRuleset(true) // nested ruleset
            || this._parseDeclaration(); // try css ruleset declaration as last so in the error case, the ast will contain a declaration
    }
    _parseDeclaration(stopTokens) {
        const custonProperty = this._tryParseCustomPropertyDeclaration(stopTokens);
        if (custonProperty) {
            return custonProperty;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Declaration);
        if (!node.setProperty(this._parseProperty())) {
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ColonExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon], stopTokens || [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon]);
        }
        if (this.prevToken) {
            node.colonPosition = this.prevToken.offset;
        }
        let hasContent = false;
        if (node.setValue(this._parseExpr())) {
            hasContent = true;
            node.addChild(this._parsePrio());
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
            node.setNestedProperties(this._parseNestedProperties());
        }
        else {
            if (!hasContent) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.PropertyValueExpected);
            }
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon)) {
            node.semicolonPosition = this.token.offset; // not part of the declaration, but useful information for code assist
        }
        return this.finish(node);
    }
    _parseNestedProperties() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NestedProperties);
        return this._parseBody(node, this._parseDeclaration.bind(this));
    }
    _parseExtends() {
        if (this.peekKeyword('@extend')) {
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ExtendsReference);
            this.consumeToken();
            if (!node.getSelectors().addChild(this._parseSimpleSelector())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.SelectorExpected);
            }
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                node.getSelectors().addChild(this._parseSimpleSelector());
            }
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Exclamation)) {
                if (!this.acceptIdent('optional')) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
                }
            }
            return this.finish(node);
        }
        return null;
    }
    _parseSimpleSelectorBody() {
        return this._parseSelectorPlaceholder() || super._parseSimpleSelectorBody();
    }
    _parseNestingSelector() {
        if (this.peekDelim('&')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorCombinator);
            this.consumeToken();
            while (!this.hasWhitespace() && (this.acceptDelim('-') || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Num) || this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Dimension) || node.addChild(this._parseIdent()) || this.acceptDelim('&'))) {
                //  support &-foo-1
            }
            return this.finish(node);
        }
        return null;
    }
    _parseSelectorPlaceholder() {
        if (this.peekDelim('%')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorPlaceholder);
            this.consumeToken();
            this._parseIdent();
            return this.finish(node);
        }
        else if (this.peekKeyword('@at-root')) {
            const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.SelectorPlaceholder);
            this.consumeToken();
            if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
                if (!this.acceptIdent('with') && !this.acceptIdent('without')) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected);
                }
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ColonExpected);
                }
                if (!node.addChild(this._parseIdent())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected);
                }
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
                }
            }
            return this.finish(node);
        }
        return null;
    }
    _parseElementName() {
        const pos = this.mark();
        const node = super._parseElementName();
        if (node && !this.hasWhitespace() && this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) { // for #49589
            this.restoreAtMark(pos);
            return null;
        }
        return node;
    }
    _tryParsePseudoIdentifier() {
        return this._parseInterpolation() || super._tryParsePseudoIdentifier(); // for #49589
    }
    _parseWarnAndDebug() {
        if (!this.peekKeyword('@debug')
            && !this.peekKeyword('@warn')
            && !this.peekKeyword('@error')) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.Debug);
        this.consumeToken(); // @debug, @warn or @error
        node.addChild(this._parseExpr()); // optional
        return this.finish(node);
    }
    _parseControlStatement(parseStatement = this._parseRuleSetDeclaration.bind(this)) {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.AtKeyword)) {
            return null;
        }
        return this._parseIfStatement(parseStatement) || this._parseForStatement(parseStatement)
            || this._parseEachStatement(parseStatement) || this._parseWhileStatement(parseStatement);
    }
    _parseIfStatement(parseStatement) {
        if (!this.peekKeyword('@if')) {
            return null;
        }
        return this._internalParseIfStatement(parseStatement);
    }
    _internalParseIfStatement(parseStatement) {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.IfStatement);
        this.consumeToken(); // @if or if
        if (!node.setExpression(this._parseExpr(true))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
        }
        this._parseBody(node, parseStatement);
        if (this.acceptKeyword('@else')) {
            if (this.peekIdent('if')) {
                node.setElseClause(this._internalParseIfStatement(parseStatement));
            }
            else if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
                const elseNode = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ElseStatement);
                this._parseBody(elseNode, parseStatement);
                node.setElseClause(elseNode);
            }
        }
        return this.finish(node);
    }
    _parseForStatement(parseStatement) {
        if (!this.peekKeyword('@for')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ForStatement);
        this.consumeToken(); // @for
        if (!node.setVariable(this._parseVariable())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!this.acceptIdent('from')) {
            return this.finish(node, _scssErrors__WEBPACK_IMPORTED_MODULE_4__.SCSSParseError.FromExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!node.addChild(this._parseBinaryExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!this.acceptIdent('to') && !this.acceptIdent('through')) {
            return this.finish(node, _scssErrors__WEBPACK_IMPORTED_MODULE_4__.SCSSParseError.ThroughOrToExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!node.addChild(this._parseBinaryExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, parseStatement);
    }
    _parseEachStatement(parseStatement) {
        if (!this.peekKeyword('@each')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.EachStatement);
        this.consumeToken(); // @each
        const variables = node.getVariables();
        if (!variables.addChild(this._parseVariable())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
            if (!variables.addChild(this._parseVariable())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
            }
        }
        this.finish(variables);
        if (!this.acceptIdent('in')) {
            return this.finish(node, _scssErrors__WEBPACK_IMPORTED_MODULE_4__.SCSSParseError.InExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!node.addChild(this._parseExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, parseStatement);
    }
    _parseWhileStatement(parseStatement) {
        if (!this.peekKeyword('@while')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.WhileStatement);
        this.consumeToken(); // @while
        if (!node.addChild(this._parseBinaryExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, parseStatement);
    }
    _parseFunctionBodyDeclaration() {
        return this._parseVariableDeclaration() || this._parseReturnStatement() || this._parseWarnAndDebug()
            || this._parseControlStatement(this._parseFunctionBodyDeclaration.bind(this));
    }
    _parseFunctionDeclaration() {
        if (!this.peekKeyword('@function')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.FunctionDeclaration);
        this.consumeToken(); // @function
        if (!node.setIdentifier(this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Function]))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (node.getParameters().addChild(this._parseParameterDeclaration())) {
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getParameters().addChild(this._parseParameterDeclaration())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                }
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        return this._parseBody(node, this._parseFunctionBodyDeclaration.bind(this));
    }
    _parseReturnStatement() {
        if (!this.peekKeyword('@return')) {
            return null;
        }
        const node = this.createNode(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.NodeType.ReturnStatement);
        this.consumeToken(); // @function
        if (!node.addChild(this._parseExpr())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
        }
        return this.finish(node);
    }
    _parseMixinDeclaration() {
        if (!this.peekKeyword('@mixin')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinDeclaration);
        this.consumeToken();
        if (!node.setIdentifier(this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin]))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (node.getParameters().addChild(this._parseParameterDeclaration())) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getParameters().addChild(this._parseParameterDeclaration())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
            }
        }
        return this._parseBody(node, this._parseRuleSetDeclaration.bind(this));
    }
    _parseParameterDeclaration() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.FunctionParameter);
        if (!node.setIdentifier(this._parseVariable())) {
            return null;
        }
        if (this.accept(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.Ellipsis)) {
            // ok
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            if (!node.setDefaultValue(this._parseExpr(true))) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableValueExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma, _cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
            }
        }
        return this.finish(node);
    }
    _parseMixinContent() {
        if (!this.peekKeyword('@content')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinContentReference);
        this.consumeToken();
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (node.getArguments().addChild(this._parseFunctionArgument())) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getArguments().addChild(this._parseFunctionArgument())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
            }
        }
        return this.finish(node);
    }
    _parseMixinReference() {
        if (!this.peekKeyword('@include')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinReference);
        this.consumeToken();
        // Could be module or mixin identifier, set as mixin as default.
        const firstIdent = this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin]);
        if (!node.setIdentifier(firstIdent)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
        }
        // Is a module accessor.
        if (!this.hasWhitespace() && this.acceptDelim('.') && !this.hasWhitespace()) {
            const secondIdent = this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Mixin]);
            if (!secondIdent) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyR]);
            }
            const moduleToken = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Module);
            // Re-purpose first matched ident as identifier for module token.
            firstIdent.referenceTypes = [_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Module];
            moduleToken.setIdentifier(firstIdent);
            // Override identifier with second ident.
            node.setIdentifier(secondIdent);
            node.addChild(moduleToken);
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            if (node.getArguments().addChild(this._parseFunctionArgument())) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getArguments().addChild(this._parseFunctionArgument())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
            }
        }
        if (this.peekIdent('using') || this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
            node.setContent(this._parseMixinContentDeclaration());
        }
        return this.finish(node);
    }
    _parseMixinContentDeclaration() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.MixinContentDeclaration);
        if (this.acceptIdent('using')) {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL]);
            }
            if (node.getParameters().addChild(this._parseParameterDeclaration())) {
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getParameters().addChild(this._parseParameterDeclaration())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                    }
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL]);
            }
        }
        if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.CurlyL)) {
            this._parseBody(node, this._parseMixinReferenceBodyStatement.bind(this));
        }
        return this.finish(node);
    }
    _parseMixinReferenceBodyStatement() {
        return this._tryParseKeyframeSelector() || this._parseRuleSetDeclaration();
    }
    _parseFunctionArgument() {
        // [variableName ':'] expression | variableName '...'
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.FunctionArgument);
        const pos = this.mark();
        const argument = this._parseVariable();
        if (argument) {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
                if (this.accept(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.Ellipsis)) { // optional
                    node.setValue(argument);
                    return this.finish(node);
                }
                else {
                    this.restoreAtMark(pos);
                }
            }
            else {
                node.setIdentifier(argument);
            }
        }
        if (node.setValue(this._parseExpr(true))) {
            this.accept(_scssScanner__WEBPACK_IMPORTED_MODULE_0__.Ellipsis); // #43746
            node.addChild(this._parsePrio()); // #9859
            return this.finish(node);
        }
        else if (node.setValue(this._tryParsePrio())) {
            return this.finish(node);
        }
        return null;
    }
    _parseURLArgument() {
        const pos = this.mark();
        const node = super._parseURLArgument();
        if (!node || !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            this.restoreAtMark(pos);
            const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Node);
            node.addChild(this._parseBinaryExpr());
            return this.finish(node);
        }
        return node;
    }
    _parseOperation() {
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Node);
        this.consumeToken();
        while (node.addChild(this._parseListElement())) {
            this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma); // optional
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
        }
        return this.finish(node);
    }
    _parseListElement() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ListEntry);
        const child = this._parseBinaryExpr();
        if (!child) {
            return null;
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon)) {
            node.setKey(child);
            if (!node.setValue(this._parseBinaryExpr())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.ExpressionExpected);
            }
        }
        else {
            node.setValue(child);
        }
        return this.finish(node);
    }
    _parseUse() {
        if (!this.peekKeyword('@use')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Use);
        this.consumeToken(); // @use
        if (!node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.StringLiteralExpected);
        }
        if (!this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            if (!this.peekRegExp(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Ident, /as|with/)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
            }
            if (this.acceptIdent('as') &&
                (!node.setIdentifier(this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Module])) && !this.acceptDelim('*'))) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierOrWildcardExpected);
            }
            if (this.acceptIdent('with')) {
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
                }
                // First variable statement, no comma.
                if (!node.getParameters().addChild(this._parseModuleConfigDeclaration())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                }
                while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                    if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                        break;
                    }
                    if (!node.getParameters().addChild(this._parseModuleConfigDeclaration())) {
                        return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                    }
                }
                if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
                }
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    }
    _parseModuleConfigDeclaration() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ModuleConfiguration);
        if (!node.setIdentifier(this._parseVariable())) {
            return null;
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Colon) || !node.setValue(this._parseExpr(true))) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableValueExpected, [], [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma, _cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
        }
        if (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Exclamation)) {
            if (this.hasWhitespace() || !this.acceptIdent('default')) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.UnknownKeyword);
            }
        }
        return this.finish(node);
    }
    _parseForward() {
        if (!this.peekKeyword('@forward')) {
            return null;
        }
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.Forward);
        this.consumeToken();
        if (!node.addChild(this._parseStringLiteral())) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.StringLiteralExpected);
        }
        if (this.acceptIdent('as')) {
            const identifier = this._parseIdent([_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ReferenceType.Forward]);
            if (!node.setIdentifier(identifier)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierExpected);
            }
            // Wildcard must be the next character after the identifier string.
            if (this.hasWhitespace() || !this.acceptDelim('*')) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.WildcardExpected);
            }
        }
        if (this.acceptIdent('with')) {
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisL)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.LeftParenthesisExpected, [_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR]);
            }
            // First variable statement, no comma.
            if (!node.getParameters().addChild(this._parseModuleConfigDeclaration())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
            }
            while (this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma)) {
                if (this.peek(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                    break;
                }
                if (!node.getParameters().addChild(this._parseModuleConfigDeclaration())) {
                    return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.VariableNameExpected);
                }
            }
            if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.ParenthesisR)) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.RightParenthesisExpected);
            }
        }
        else if (this.peekIdent('hide') || this.peekIdent('show')) {
            if (!node.addChild(this._parseForwardVisibility())) {
                return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.IdentifierOrVariableExpected);
            }
        }
        if (!this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.SemiColon) && !this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.EOF)) {
            return this.finish(node, _cssErrors__WEBPACK_IMPORTED_MODULE_5__.ParseError.SemiColonExpected);
        }
        return this.finish(node);
    }
    _parseForwardVisibility() {
        const node = this.create(_cssNodes__WEBPACK_IMPORTED_MODULE_3__.ForwardVisibility);
        // Assume to be "hide" or "show".
        node.setIdentifier(this._parseIdent());
        while (node.addChild(this._parseVariable() || this._parseIdent())) {
            // Consume all variables and idents ahead.
            this.accept(_cssScanner__WEBPACK_IMPORTED_MODULE_1__.TokenType.Comma);
        }
        // More than just identifier 
        return node.getChildren().length > 1 ? node : null;
    }
    _parseSupportsCondition() {
        return this._parseInterpolation() || super._parseSupportsCondition();
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/parser/scssScanner.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/parser/scssScanner.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   Ellipsis: () => (/* binding */ Ellipsis),
/* harmony export */   EqualsOperator: () => (/* binding */ EqualsOperator),
/* harmony export */   GreaterEqualsOperator: () => (/* binding */ GreaterEqualsOperator),
/* harmony export */   InterpolationFunction: () => (/* binding */ InterpolationFunction),
/* harmony export */   Module: () => (/* binding */ Module),
/* harmony export */   NotEqualsOperator: () => (/* binding */ NotEqualsOperator),
/* harmony export */   SCSSScanner: () => (/* binding */ SCSSScanner),
/* harmony export */   SmallerEqualsOperator: () => (/* binding */ SmallerEqualsOperator),
/* harmony export */   VariableName: () => (/* binding */ VariableName)
/* harmony export */ });
/* harmony import */ var _cssScanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


const _FSL = '/'.charCodeAt(0);
const _NWL = '\n'.charCodeAt(0);
const _CAR = '\r'.charCodeAt(0);
const _LFD = '\f'.charCodeAt(0);
const _DLR = '$'.charCodeAt(0);
const _HSH = '#'.charCodeAt(0);
const _CUL = '{'.charCodeAt(0);
const _EQS = '='.charCodeAt(0);
const _BNG = '!'.charCodeAt(0);
const _LAN = '<'.charCodeAt(0);
const _RAN = '>'.charCodeAt(0);
const _DOT = '.'.charCodeAt(0);
const _ATS = '@'.charCodeAt(0);
let customTokenValue = _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CustomToken;
const VariableName = customTokenValue++;
const InterpolationFunction = customTokenValue++;
const Default = customTokenValue++;
const EqualsOperator = customTokenValue++;
const NotEqualsOperator = customTokenValue++;
const GreaterEqualsOperator = customTokenValue++;
const SmallerEqualsOperator = customTokenValue++;
const Ellipsis = customTokenValue++;
const Module = customTokenValue++;
class SCSSScanner extends _cssScanner__WEBPACK_IMPORTED_MODULE_0__.Scanner {
    scanNext(offset) {
        // scss variable
        if (this.stream.advanceIfChar(_DLR)) {
            const content = ['$'];
            if (this.ident(content)) {
                return this.finishToken(offset, VariableName, content.join(''));
            }
            else {
                this.stream.goBackTo(offset);
            }
        }
        // scss: interpolation function #{..})
        if (this.stream.advanceIfChars([_HSH, _CUL])) {
            return this.finishToken(offset, InterpolationFunction);
        }
        // operator ==
        if (this.stream.advanceIfChars([_EQS, _EQS])) {
            return this.finishToken(offset, EqualsOperator);
        }
        // operator !=
        if (this.stream.advanceIfChars([_BNG, _EQS])) {
            return this.finishToken(offset, NotEqualsOperator);
        }
        // operators <, <=
        if (this.stream.advanceIfChar(_LAN)) {
            if (this.stream.advanceIfChar(_EQS)) {
                return this.finishToken(offset, SmallerEqualsOperator);
            }
            return this.finishToken(offset, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Delim);
        }
        // ooperators >, >=
        if (this.stream.advanceIfChar(_RAN)) {
            if (this.stream.advanceIfChar(_EQS)) {
                return this.finishToken(offset, GreaterEqualsOperator);
            }
            return this.finishToken(offset, _cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Delim);
        }
        // ellipis
        if (this.stream.advanceIfChars([_DOT, _DOT, _DOT])) {
            return this.finishToken(offset, Ellipsis);
        }
        return super.scanNext(offset);
    }
    comment() {
        if (super.comment()) {
            return true;
        }
        if (!this.inURL && this.stream.advanceIfChars([_FSL, _FSL])) {
            this.stream.advanceWhileChar((ch) => {
                switch (ch) {
                    case _NWL:
                    case _CAR:
                    case _LFD:
                        return false;
                    default:
                        return true;
                }
            });
            return true;
        }
        else {
            return false;
        }
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssCodeActions.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/cssCodeActions.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSCodeActions: () => (/* binding */ CSSCodeActions)
/* harmony export */ });
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _utils_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/strings */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/strings.js");
/* harmony import */ var _services_lintRules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/lintRules */ "../../node_modules/vscode-css-languageservice/lib/esm/services/lintRules.js");
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_4__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/






class CSSCodeActions {
    constructor(cssDataManager) {
        this.cssDataManager = cssDataManager;
    }
    doCodeActions(document, range, context, stylesheet) {
        return this.doCodeActions2(document, range, context, stylesheet).map(ca => {
            const textDocumentEdit = ca.edit && ca.edit.documentChanges && ca.edit.documentChanges[0];
            return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.Command.create(ca.title, '_css.applyCodeAction', document.uri, document.version, textDocumentEdit && textDocumentEdit.edits);
        });
    }
    doCodeActions2(document, range, context, stylesheet) {
        const result = [];
        if (context.diagnostics) {
            for (const diagnostic of context.diagnostics) {
                this.appendFixesForMarker(document, stylesheet, diagnostic, result);
            }
        }
        return result;
    }
    getFixesForUnknownProperty(document, property, marker, result) {
        const propertyName = property.getName();
        const candidates = [];
        this.cssDataManager.getProperties().forEach(p => {
            const score = (0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.difference)(propertyName, p.name);
            if (score >= propertyName.length / 2 /*score_lim*/) {
                candidates.push({ property: p.name, score });
            }
        });
        // Sort in descending order.
        candidates.sort((a, b) => {
            return b.score - a.score || a.property.localeCompare(b.property);
        });
        let maxActions = 3;
        for (const candidate of candidates) {
            const propertyName = candidate.property;
            const title = _vscode_l10n__WEBPACK_IMPORTED_MODULE_4__.t("Rename to '{0}'", propertyName);
            const edit = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.TextEdit.replace(marker.range, propertyName);
            const documentIdentifier = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.VersionedTextDocumentIdentifier.create(document.uri, document.version);
            const workspaceEdit = { documentChanges: [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.TextDocumentEdit.create(documentIdentifier, [edit])] };
            const codeAction = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.CodeAction.create(title, workspaceEdit, _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.CodeActionKind.QuickFix);
            codeAction.diagnostics = [marker];
            result.push(codeAction);
            if (--maxActions <= 0) {
                return;
            }
        }
    }
    appendFixesForMarker(document, stylesheet, marker, result) {
        if (marker.code !== _services_lintRules__WEBPACK_IMPORTED_MODULE_2__.Rules.UnknownProperty.id) {
            return;
        }
        const offset = document.offsetAt(marker.range.start);
        const end = document.offsetAt(marker.range.end);
        const nodepath = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.getNodePath(stylesheet, offset);
        for (let i = nodepath.length - 1; i >= 0; i--) {
            const node = nodepath[i];
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                const property = node.getProperty();
                if (property && property.offset === offset && property.end === end) {
                    this.getFixesForUnknownProperty(document, property, marker, result);
                    return;
                }
            }
        }
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssCompletion.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/cssCompletion.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSCompletion: () => (/* binding */ CSSCompletion)
/* harmony export */ });
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _parser_cssSymbolScope__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssSymbolScope */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssSymbolScope.js");
/* harmony import */ var _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../languageFacts/facts */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/facts.js");
/* harmony import */ var _utils_strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/strings */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/strings.js");
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _utils_objects__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/objects */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/objects.js");
/* harmony import */ var _pathCompletion__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./pathCompletion */ "../../node_modules/vscode-css-languageservice/lib/esm/services/pathCompletion.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/









const SnippetFormat = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.InsertTextFormat.Snippet;
const retriggerCommand = {
    title: 'Suggest',
    command: 'editor.action.triggerSuggest'
};
var SortTexts;
(function (SortTexts) {
    // char code 32, comes before everything
    SortTexts["Enums"] = " ";
    SortTexts["Normal"] = "d";
    SortTexts["VendorPrefixed"] = "x";
    SortTexts["Term"] = "y";
    SortTexts["Variable"] = "z";
})(SortTexts || (SortTexts = {}));
class CSSCompletion {
    constructor(variablePrefix = null, lsOptions, cssDataManager) {
        this.variablePrefix = variablePrefix;
        this.lsOptions = lsOptions;
        this.cssDataManager = cssDataManager;
        this.completionParticipants = [];
    }
    configure(settings) {
        this.defaultSettings = settings;
    }
    getSymbolContext() {
        if (!this.symbolContext) {
            this.symbolContext = new _parser_cssSymbolScope__WEBPACK_IMPORTED_MODULE_1__.Symbols(this.styleSheet);
        }
        return this.symbolContext;
    }
    setCompletionParticipants(registeredCompletionParticipants) {
        this.completionParticipants = registeredCompletionParticipants || [];
    }
    async doComplete2(document, position, styleSheet, documentContext, completionSettings = this.defaultSettings) {
        if (!this.lsOptions.fileSystemProvider || !this.lsOptions.fileSystemProvider.readDirectory) {
            return this.doComplete(document, position, styleSheet, completionSettings);
        }
        const participant = new _pathCompletion__WEBPACK_IMPORTED_MODULE_6__.PathCompletionParticipant(this.lsOptions.fileSystemProvider.readDirectory);
        const contributedParticipants = this.completionParticipants;
        this.completionParticipants = [participant].concat(contributedParticipants);
        const result = this.doComplete(document, position, styleSheet, completionSettings);
        try {
            const pathCompletionResult = await participant.computeCompletions(document, documentContext);
            return {
                isIncomplete: result.isIncomplete || pathCompletionResult.isIncomplete,
                itemDefaults: result.itemDefaults,
                items: pathCompletionResult.items.concat(result.items)
            };
        }
        finally {
            this.completionParticipants = contributedParticipants;
        }
    }
    doComplete(document, position, styleSheet, documentSettings) {
        this.offset = document.offsetAt(position);
        this.position = position;
        this.currentWord = getCurrentWord(document, this.offset);
        this.defaultReplaceRange = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Range.create(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);
        this.textDocument = document;
        this.styleSheet = styleSheet;
        this.documentSettings = documentSettings;
        try {
            const result = {
                isIncomplete: false,
                itemDefaults: {
                    editRange: {
                        start: { line: position.line, character: position.character - this.currentWord.length },
                        end: position
                    }
                },
                items: []
            };
            this.nodePath = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.getNodePath(this.styleSheet, this.offset);
            for (let i = this.nodePath.length - 1; i >= 0; i--) {
                const node = this.nodePath[i];
                if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Property) {
                    this.getCompletionsForDeclarationProperty(node.getParent(), result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Expression) {
                    if (node.parent instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Interpolation) {
                        this.getVariableProposals(null, result);
                    }
                    else {
                        this.getCompletionsForExpression(node, result);
                    }
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                    const parentRef = node.findAParent(_parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ExtendsReference, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Ruleset);
                    if (parentRef) {
                        if (parentRef.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ExtendsReference) {
                            this.getCompletionsForExtendsReference(parentRef, node, result);
                        }
                        else {
                            const parentRuleSet = parentRef;
                            this.getCompletionsForSelector(parentRuleSet, parentRuleSet && parentRuleSet.isNested(), result);
                        }
                    }
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionArgument) {
                    this.getCompletionsForFunctionArgument(node, node.getParent(), result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declarations) {
                    this.getCompletionsForDeclarations(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.VariableDeclaration) {
                    this.getCompletionsForVariableDeclaration(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
                    this.getCompletionsForRuleSet(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Interpolation) {
                    this.getCompletionsForInterpolation(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionDeclaration) {
                    this.getCompletionsForFunctionDeclaration(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.MixinReference) {
                    this.getCompletionsForMixinReference(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Function) {
                    this.getCompletionsForFunctionArgument(null, node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Supports) {
                    this.getCompletionsForSupports(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SupportsCondition) {
                    this.getCompletionsForSupportsCondition(node, result);
                }
                else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ExtendsReference) {
                    this.getCompletionsForExtendsReference(node, null, result);
                }
                else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.URILiteral) {
                    this.getCompletionForUriLiteralValue(node, result);
                }
                else if (node.parent === null) {
                    this.getCompletionForTopLevel(result);
                }
                else if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.StringLiteral && this.isImportPathParent(node.parent.type)) {
                    this.getCompletionForImportPath(node, result);
                    // } else if (node instanceof nodes.Variable) {
                    // this.getCompletionsForVariableDeclaration()
                }
                else {
                    continue;
                }
                if (result.items.length > 0 || this.offset > node.offset) {
                    return this.finalize(result);
                }
            }
            this.getCompletionsForStylesheet(result);
            if (result.items.length === 0) {
                if (this.variablePrefix && this.currentWord.indexOf(this.variablePrefix) === 0) {
                    this.getVariableProposals(null, result);
                }
            }
            return this.finalize(result);
        }
        finally {
            // don't hold on any state, clear symbolContext
            this.position = null;
            this.currentWord = null;
            this.textDocument = null;
            this.styleSheet = null;
            this.symbolContext = null;
            this.defaultReplaceRange = null;
            this.nodePath = null;
        }
    }
    isImportPathParent(type) {
        return type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Import;
    }
    finalize(result) {
        return result;
    }
    findInNodePath(...types) {
        for (let i = this.nodePath.length - 1; i >= 0; i--) {
            const node = this.nodePath[i];
            if (types.indexOf(node.type) !== -1) {
                return node;
            }
        }
        return null;
    }
    getCompletionsForDeclarationProperty(declaration, result) {
        return this.getPropertyProposals(declaration, result);
    }
    getPropertyProposals(declaration, result) {
        const triggerPropertyValueCompletion = this.isTriggerPropertyValueCompletionEnabled;
        const completePropertyWithSemicolon = this.isCompletePropertyWithSemicolonEnabled;
        const properties = this.cssDataManager.getProperties();
        properties.forEach(entry => {
            let range;
            let insertText;
            let retrigger = false;
            if (declaration) {
                range = this.getCompletionRange(declaration.getProperty());
                insertText = entry.name;
                if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(declaration.colonPosition)) {
                    insertText += ': ';
                    retrigger = true;
                }
            }
            else {
                range = this.getCompletionRange(null);
                insertText = entry.name + ': ';
                retrigger = true;
            }
            // Empty .selector { | } case
            if (!declaration && completePropertyWithSemicolon) {
                insertText += '$0;';
            }
            // Cases such as .selector { p; } or .selector { p:; }
            if (declaration && !declaration.semicolonPosition) {
                if (completePropertyWithSemicolon && this.offset >= this.textDocument.offsetAt(range.end)) {
                    insertText += '$0;';
                }
            }
            const item = {
                label: entry.name,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(range, insertText),
                insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.InsertTextFormat.Snippet,
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Property
            };
            if (!entry.restrictions) {
                retrigger = false;
            }
            if (triggerPropertyValueCompletion && retrigger) {
                item.command = retriggerCommand;
            }
            const relevance = typeof entry.relevance === 'number' ? Math.min(Math.max(entry.relevance, 0), 99) : 50;
            const sortTextSuffix = (255 - relevance).toString(16);
            const sortTextPrefix = _utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(entry.name, '-') ? SortTexts.VendorPrefixed : SortTexts.Normal;
            item.sortText = sortTextPrefix + '_' + sortTextSuffix;
            result.items.push(item);
        });
        this.completionParticipants.forEach(participant => {
            if (participant.onCssProperty) {
                participant.onCssProperty({
                    propertyName: this.currentWord,
                    range: this.defaultReplaceRange
                });
            }
        });
        return result;
    }
    get isTriggerPropertyValueCompletionEnabled() {
        return this.documentSettings?.triggerPropertyValueCompletion ?? true;
    }
    get isCompletePropertyWithSemicolonEnabled() {
        return this.documentSettings?.completePropertyWithSemicolon ?? true;
    }
    getCompletionsForDeclarationValue(node, result) {
        const propertyName = node.getFullPropertyName();
        const entry = this.cssDataManager.getProperty(propertyName);
        let existingNode = node.getValue() || null;
        while (existingNode && existingNode.hasChildren()) {
            existingNode = existingNode.findChildAtOffset(this.offset, false);
        }
        this.completionParticipants.forEach(participant => {
            if (participant.onCssPropertyValue) {
                participant.onCssPropertyValue({
                    propertyName,
                    propertyValue: this.currentWord,
                    range: this.getCompletionRange(existingNode)
                });
            }
        });
        if (entry) {
            if (entry.restrictions) {
                for (const restriction of entry.restrictions) {
                    switch (restriction) {
                        case 'color':
                            this.getColorProposals(entry, existingNode, result);
                            break;
                        case 'position':
                            this.getPositionProposals(entry, existingNode, result);
                            break;
                        case 'repeat':
                            this.getRepeatStyleProposals(entry, existingNode, result);
                            break;
                        case 'line-style':
                            this.getLineStyleProposals(entry, existingNode, result);
                            break;
                        case 'line-width':
                            this.getLineWidthProposals(entry, existingNode, result);
                            break;
                        case 'geometry-box':
                            this.getGeometryBoxProposals(entry, existingNode, result);
                            break;
                        case 'box':
                            this.getBoxProposals(entry, existingNode, result);
                            break;
                        case 'image':
                            this.getImageProposals(entry, existingNode, result);
                            break;
                        case 'timing-function':
                            this.getTimingFunctionProposals(entry, existingNode, result);
                            break;
                        case 'shape':
                            this.getBasicShapeProposals(entry, existingNode, result);
                            break;
                    }
                }
            }
            this.getValueEnumProposals(entry, existingNode, result);
            this.getCSSWideKeywordProposals(entry, existingNode, result);
            this.getUnitProposals(entry, existingNode, result);
        }
        else {
            const existingValues = collectValues(this.styleSheet, node);
            for (const existingValue of existingValues.getEntries()) {
                result.items.push({
                    label: existingValue,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), existingValue),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
                });
            }
        }
        this.getVariableProposals(existingNode, result);
        this.getTermProposals(entry, existingNode, result);
        return result;
    }
    getValueEnumProposals(entry, existingNode, result) {
        if (entry.values) {
            for (const value of entry.values) {
                let insertString = value.name;
                let insertTextFormat;
                if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.endsWith(insertString, ')')) {
                    const from = insertString.lastIndexOf('(');
                    if (from !== -1) {
                        insertString = insertString.substring(0, from + 1) + '$1' + insertString.substring(from + 1);
                        insertTextFormat = SnippetFormat;
                    }
                }
                let sortText = SortTexts.Enums;
                if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(value.name, '-')) {
                    sortText += SortTexts.VendorPrefixed;
                }
                const item = {
                    label: value.name,
                    documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(value, this.doesSupportMarkdown()),
                    tags: isDeprecated(entry) ? [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertString),
                    sortText,
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value,
                    insertTextFormat
                };
                result.items.push(item);
            }
        }
        return result;
    }
    getCSSWideKeywordProposals(entry, existingNode, result) {
        for (const keywords in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.cssWideKeywords) {
            result.items.push({
                label: keywords,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.cssWideKeywords[keywords],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), keywords),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        for (const func in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.cssWideFunctions) {
            const insertText = moveCursorInsideParenthesis(func);
            result.items.push({
                label: func,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.cssWideFunctions[func],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: SnippetFormat,
                command: _utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(func, 'var') ? retriggerCommand : undefined
            });
        }
        return result;
    }
    getCompletionsForInterpolation(node, result) {
        if (this.offset >= node.offset + 2) {
            this.getVariableProposals(null, result);
        }
        return result;
    }
    getVariableProposals(existingNode, result) {
        const symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        for (const symbol of symbols) {
            const insertText = _utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(symbol.name, '--') ? `var(${symbol.name})` : symbol.name;
            const completionItem = {
                label: symbol.name,
                documentation: symbol.value ? _utils_strings__WEBPACK_IMPORTED_MODULE_3__.getLimitedString(symbol.value) : symbol.value,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Variable,
                sortText: SortTexts.Variable
            };
            if (typeof completionItem.documentation === 'string' && _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.isColorString(completionItem.documentation)) {
                completionItem.kind = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color;
            }
            if (symbol.node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.FunctionParameter) {
                const mixinNode = (symbol.node.getParent());
                if (mixinNode.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration) {
                    completionItem.detail = _vscode_l10n__WEBPACK_IMPORTED_MODULE_7__.t('argument from \'{0}\'', mixinNode.getName());
                }
            }
            result.items.push(completionItem);
        }
        return result;
    }
    getVariableProposalsForCSSVarFunction(result) {
        const allReferencedVariables = new Set();
        this.styleSheet.acceptVisitor(new VariableCollector(allReferencedVariables, this.offset));
        let symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Variable);
        for (const symbol of symbols) {
            if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(symbol.name, '--')) {
                const completionItem = {
                    label: symbol.name,
                    documentation: symbol.value ? _utils_strings__WEBPACK_IMPORTED_MODULE_3__.getLimitedString(symbol.value) : symbol.value,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(null), symbol.name),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Variable
                };
                if (typeof completionItem.documentation === 'string' && _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.isColorString(completionItem.documentation)) {
                    completionItem.kind = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color;
                }
                result.items.push(completionItem);
            }
            allReferencedVariables.remove(symbol.name);
        }
        for (const name of allReferencedVariables.getEntries()) {
            if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(name, '--')) {
                const completionItem = {
                    label: name,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(null), name),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Variable
                };
                result.items.push(completionItem);
            }
        }
        return result;
    }
    getUnitProposals(entry, existingNode, result) {
        let currentWord = '0';
        if (this.currentWord.length > 0) {
            const numMatch = this.currentWord.match(/^-?\d[\.\d+]*/);
            if (numMatch) {
                currentWord = numMatch[0];
                result.isIncomplete = currentWord.length === this.currentWord.length;
            }
        }
        else if (this.currentWord.length === 0) {
            result.isIncomplete = true;
        }
        if (existingNode && existingNode.parent && existingNode.parent.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Term) {
            existingNode = existingNode.getParent(); // include the unary operator
        }
        if (entry.restrictions) {
            for (const restriction of entry.restrictions) {
                const units = _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.units[restriction];
                if (units) {
                    for (const unit of units) {
                        const insertText = currentWord + unit;
                        result.items.push({
                            label: insertText,
                            textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                            kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Unit
                        });
                    }
                }
            }
        }
        return result;
    }
    getCompletionRange(existingNode) {
        if (existingNode && existingNode.offset <= this.offset && this.offset <= existingNode.end) {
            const end = existingNode.end !== -1 ? this.textDocument.positionAt(existingNode.end) : this.position;
            const start = this.textDocument.positionAt(existingNode.offset);
            if (start.line === end.line) {
                return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Range.create(start, end); // multi line edits are not allowed
            }
        }
        return this.defaultReplaceRange;
    }
    getColorProposals(entry, existingNode, result) {
        for (const color in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.colors) {
            result.items.push({
                label: color,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.colors[color],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), color),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color
            });
        }
        for (const color in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.colorKeywords) {
            result.items.push({
                label: color,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.colorKeywords[color],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), color),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        const colorValues = new Set();
        this.styleSheet.acceptVisitor(new ColorValueCollector(colorValues, this.offset));
        for (const color of colorValues.getEntries()) {
            result.items.push({
                label: color,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), color),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Color
            });
        }
        for (const p of _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.colorFunctions) {
            result.items.push({
                label: p.label,
                detail: p.func,
                documentation: p.desc,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), p.insertText),
                insertTextFormat: SnippetFormat,
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function
            });
        }
        return result;
    }
    getPositionProposals(entry, existingNode, result) {
        for (const position in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.positionKeywords) {
            result.items.push({
                label: position,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.positionKeywords[position],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), position),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    }
    getRepeatStyleProposals(entry, existingNode, result) {
        for (const repeat in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.repeatStyleKeywords) {
            result.items.push({
                label: repeat,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.repeatStyleKeywords[repeat],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), repeat),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    }
    getLineStyleProposals(entry, existingNode, result) {
        for (const lineStyle in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.lineStyleKeywords) {
            result.items.push({
                label: lineStyle,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.lineStyleKeywords[lineStyle],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), lineStyle),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    }
    getLineWidthProposals(entry, existingNode, result) {
        for (const lineWidth of _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.lineWidthKeywords) {
            result.items.push({
                label: lineWidth,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), lineWidth),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    }
    getGeometryBoxProposals(entry, existingNode, result) {
        for (const box in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.geometryBoxKeywords) {
            result.items.push({
                label: box,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.geometryBoxKeywords[box],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), box),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    }
    getBoxProposals(entry, existingNode, result) {
        for (const box in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.boxKeywords) {
            result.items.push({
                label: box,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.boxKeywords[box],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), box),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Value
            });
        }
        return result;
    }
    getImageProposals(entry, existingNode, result) {
        for (const image in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.imageFunctions) {
            const insertText = moveCursorInsideParenthesis(image);
            result.items.push({
                label: image,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.imageFunctions[image],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: image !== insertText ? SnippetFormat : void 0
            });
        }
        return result;
    }
    getTimingFunctionProposals(entry, existingNode, result) {
        for (const timing in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.transitionTimingFunctions) {
            const insertText = moveCursorInsideParenthesis(timing);
            result.items.push({
                label: timing,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.transitionTimingFunctions[timing],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: timing !== insertText ? SnippetFormat : void 0
            });
        }
        return result;
    }
    getBasicShapeProposals(entry, existingNode, result) {
        for (const shape in _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.basicShapeFunctions) {
            const insertText = moveCursorInsideParenthesis(shape);
            result.items.push({
                label: shape,
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.basicShapeFunctions[shape],
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: shape !== insertText ? SnippetFormat : void 0
            });
        }
        return result;
    }
    getCompletionsForStylesheet(result) {
        const node = this.styleSheet.findFirstChildBeforeOffset(this.offset);
        if (!node) {
            return this.getCompletionForTopLevel(result);
        }
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
            return this.getCompletionsForRuleSet(node, result);
        }
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Supports) {
            return this.getCompletionsForSupports(node, result);
        }
        return result;
    }
    getCompletionForTopLevel(result) {
        this.cssDataManager.getAtDirectives().forEach(entry => {
            result.items.push({
                label: entry.name,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(null), entry.name),
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword
            });
        });
        this.getCompletionsForSelector(null, false, result);
        return result;
    }
    getCompletionsForRuleSet(ruleSet, result) {
        const declarations = ruleSet.getDeclarations();
        const isAfter = declarations && declarations.endsWith('}') && this.offset >= declarations.end;
        if (isAfter) {
            return this.getCompletionForTopLevel(result);
        }
        const isInSelectors = !declarations || this.offset <= declarations.offset;
        if (isInSelectors) {
            return this.getCompletionsForSelector(ruleSet, ruleSet.isNested(), result);
        }
        return this.getCompletionsForDeclarations(ruleSet.getDeclarations(), result);
    }
    getCompletionsForSelector(ruleSet, isNested, result) {
        const existingNode = this.findInNodePath(_parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.IdentifierSelector, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ClassSelector, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ElementNameSelector);
        if (!existingNode && this.hasCharacterAtPosition(this.offset - this.currentWord.length - 1, ':')) {
            // after the ':' of a pseudo selector, no node generated for just ':'
            this.currentWord = ':' + this.currentWord;
            if (this.hasCharacterAtPosition(this.offset - this.currentWord.length - 1, ':')) {
                this.currentWord = ':' + this.currentWord; // for '::'
            }
            this.defaultReplaceRange = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Range.create(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Position.create(this.position.line, this.position.character - this.currentWord.length), this.position);
        }
        const pseudoClasses = this.cssDataManager.getPseudoClasses();
        pseudoClasses.forEach(entry => {
            const insertText = moveCursorInsideParenthesis(entry.name);
            const item = {
                label: entry.name,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0
            };
            if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(entry.name, ':-')) {
                item.sortText = SortTexts.VendorPrefixed;
            }
            result.items.push(item);
        });
        const pseudoElements = this.cssDataManager.getPseudoElements();
        pseudoElements.forEach(entry => {
            const insertText = moveCursorInsideParenthesis(entry.name);
            const item = {
                label: entry.name,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                documentation: _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.getEntryDescription(entry, this.doesSupportMarkdown()),
                tags: isDeprecated(entry) ? [_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemTag.Deprecated] : [],
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
                insertTextFormat: entry.name !== insertText ? SnippetFormat : void 0
            };
            if (_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith(entry.name, '::-')) {
                item.sortText = SortTexts.VendorPrefixed;
            }
            result.items.push(item);
        });
        if (!isNested) { // show html tags only for top level
            for (const entry of _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.html5Tags) {
                result.items.push({
                    label: entry,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), entry),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword
                });
            }
            for (const entry of _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.svgElements) {
                result.items.push({
                    label: entry,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), entry),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword
                });
            }
        }
        const visited = {};
        visited[this.currentWord] = true;
        const docText = this.textDocument.getText();
        this.styleSheet.accept(n => {
            if (n.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SimpleSelector && n.length > 0) {
                const selector = docText.substr(n.offset, n.length);
                if (selector.charAt(0) === '.' && !visited[selector]) {
                    visited[selector] = true;
                    result.items.push({
                        label: selector,
                        textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), selector),
                        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Keyword
                    });
                }
                return false;
            }
            return true;
        });
        if (ruleSet && ruleSet.isNested()) {
            const selector = ruleSet.getSelectors().findFirstChildBeforeOffset(this.offset);
            if (selector && ruleSet.getSelectors().getChildren().indexOf(selector) === 0) {
                this.getPropertyProposals(null, result);
            }
        }
        return result;
    }
    getCompletionsForDeclarations(declarations, result) {
        if (!declarations || this.offset === declarations.offset) { // incomplete nodes
            return result;
        }
        const node = declarations.findFirstChildBeforeOffset(this.offset);
        if (!node) {
            return this.getCompletionsForDeclarationProperty(null, result);
        }
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.AbstractDeclaration) {
            const declaration = node;
            if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(declaration.colonPosition) || this.offset <= declaration.colonPosition) {
                // complete property
                return this.getCompletionsForDeclarationProperty(declaration, result);
            }
            else if (((0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(declaration.semicolonPosition) && declaration.semicolonPosition < this.offset)) {
                if (this.offset === declaration.semicolonPosition + 1) {
                    return result; // don't show new properties right after semicolon (see Bug 15421:[intellisense] [css] Be less aggressive when manually typing CSS)
                }
                // complete next property
                return this.getCompletionsForDeclarationProperty(null, result);
            }
            if (declaration instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                // complete value
                return this.getCompletionsForDeclarationValue(declaration, result);
            }
        }
        else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ExtendsReference) {
            this.getCompletionsForExtendsReference(node, null, result);
        }
        else if (this.currentWord && this.currentWord[0] === '@') {
            this.getCompletionsForDeclarationProperty(null, result);
        }
        else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
            this.getCompletionsForDeclarationProperty(null, result);
        }
        return result;
    }
    getCompletionsForVariableDeclaration(declaration, result) {
        if (this.offset && (0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(declaration.colonPosition) && this.offset > declaration.colonPosition) {
            this.getVariableProposals(declaration.getValue() || null, result);
        }
        return result;
    }
    getCompletionsForExpression(expression, result) {
        const parent = expression.getParent();
        if (parent instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionArgument) {
            this.getCompletionsForFunctionArgument(parent, parent.getParent(), result);
            return result;
        }
        const declaration = expression.findParent(_parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Declaration);
        if (!declaration) {
            this.getTermProposals(undefined, null, result);
            return result;
        }
        const node = expression.findChildAtOffset(this.offset, true);
        if (!node) {
            return this.getCompletionsForDeclarationValue(declaration, result);
        }
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NumericValue || node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Identifier) {
            return this.getCompletionsForDeclarationValue(declaration, result);
        }
        return result;
    }
    getCompletionsForFunctionArgument(arg, func, result) {
        const identifier = func.getIdentifier();
        if (identifier && identifier.matches('var')) {
            if (!func.getArguments().hasChildren() || func.getArguments().getChild(0) === arg) {
                this.getVariableProposalsForCSSVarFunction(result);
            }
        }
        return result;
    }
    getCompletionsForFunctionDeclaration(decl, result) {
        const declarations = decl.getDeclarations();
        if (declarations && this.offset > declarations.offset && this.offset < declarations.end) {
            this.getTermProposals(undefined, null, result);
        }
        return result;
    }
    getCompletionsForMixinReference(ref, result) {
        const allMixins = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Mixin);
        for (const mixinSymbol of allMixins) {
            if (mixinSymbol.node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.MixinDeclaration) {
                result.items.push(this.makeTermProposal(mixinSymbol, mixinSymbol.node.getParameters(), null));
            }
        }
        const identifierNode = ref.getIdentifier() || null;
        this.completionParticipants.forEach(participant => {
            if (participant.onCssMixinReference) {
                participant.onCssMixinReference({
                    mixinName: this.currentWord,
                    range: this.getCompletionRange(identifierNode)
                });
            }
        });
        return result;
    }
    getTermProposals(entry, existingNode, result) {
        const allFunctions = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ReferenceType.Function);
        for (const functionSymbol of allFunctions) {
            if (functionSymbol.node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionDeclaration) {
                result.items.push(this.makeTermProposal(functionSymbol, functionSymbol.node.getParameters(), existingNode));
            }
        }
        return result;
    }
    makeTermProposal(symbol, parameters, existingNode) {
        const decl = symbol.node;
        const params = parameters.getChildren().map((c) => {
            return (c instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.FunctionParameter) ? c.getName() : c.getText();
        });
        const insertText = symbol.name + '(' + params.map((p, index) => '${' + (index + 1) + ':' + p + '}').join(', ') + ')';
        return {
            label: symbol.name,
            detail: symbol.name + '(' + params.join(', ') + ')',
            textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
            insertTextFormat: SnippetFormat,
            kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.CompletionItemKind.Function,
            sortText: SortTexts.Term
        };
    }
    getCompletionsForSupportsCondition(supportsCondition, result) {
        const child = supportsCondition.findFirstChildBeforeOffset(this.offset);
        if (child) {
            if (child instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(child.colonPosition) || this.offset <= child.colonPosition) {
                    return this.getCompletionsForDeclarationProperty(child, result);
                }
                else {
                    return this.getCompletionsForDeclarationValue(child, result);
                }
            }
            else if (child instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SupportsCondition) {
                return this.getCompletionsForSupportsCondition(child, result);
            }
        }
        if ((0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(supportsCondition.lParent) && this.offset > supportsCondition.lParent && (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(supportsCondition.rParent) || this.offset <= supportsCondition.rParent)) {
            return this.getCompletionsForDeclarationProperty(null, result);
        }
        return result;
    }
    getCompletionsForSupports(supports, result) {
        const declarations = supports.getDeclarations();
        const inInCondition = !declarations || this.offset <= declarations.offset;
        if (inInCondition) {
            const child = supports.findFirstChildBeforeOffset(this.offset);
            if (child instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SupportsCondition) {
                return this.getCompletionsForSupportsCondition(child, result);
            }
            return result;
        }
        return this.getCompletionForTopLevel(result);
    }
    getCompletionsForExtendsReference(extendsRef, existingNode, result) {
        return result;
    }
    getCompletionForUriLiteralValue(uriLiteralNode, result) {
        let uriValue;
        let position;
        let range;
        // No children, empty value
        if (!uriLiteralNode.hasChildren()) {
            uriValue = '';
            position = this.position;
            const emptyURIValuePosition = this.textDocument.positionAt(uriLiteralNode.offset + 'url('.length);
            range = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Range.create(emptyURIValuePosition, emptyURIValuePosition);
        }
        else {
            const uriValueNode = uriLiteralNode.getChild(0);
            uriValue = uriValueNode.getText();
            position = this.position;
            range = this.getCompletionRange(uriValueNode);
        }
        this.completionParticipants.forEach(participant => {
            if (participant.onCssURILiteralValue) {
                participant.onCssURILiteralValue({
                    uriValue,
                    position,
                    range
                });
            }
        });
        return result;
    }
    getCompletionForImportPath(importPathNode, result) {
        this.completionParticipants.forEach(participant => {
            if (participant.onCssImportPath) {
                participant.onCssImportPath({
                    pathValue: importPathNode.getText(),
                    position: this.position,
                    range: this.getCompletionRange(importPathNode)
                });
            }
        });
        return result;
    }
    hasCharacterAtPosition(offset, char) {
        const text = this.textDocument.getText();
        return (offset >= 0 && offset < text.length) && text.charAt(offset) === char;
    }
    doesSupportMarkdown() {
        if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.supportsMarkdown)) {
            if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.lsOptions.clientCapabilities)) {
                this.supportsMarkdown = true;
                return this.supportsMarkdown;
            }
            const documentationFormat = this.lsOptions.clientCapabilities.textDocument?.completion?.completionItem?.documentationFormat;
            this.supportsMarkdown = Array.isArray(documentationFormat) && documentationFormat.indexOf(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    }
}
function isDeprecated(entry) {
    if (entry.status && (entry.status === 'nonstandard' || entry.status === 'obsolete')) {
        return true;
    }
    return false;
}
class Set {
    constructor() {
        this.entries = {};
    }
    add(entry) {
        this.entries[entry] = true;
    }
    remove(entry) {
        delete this.entries[entry];
    }
    getEntries() {
        return Object.keys(this.entries);
    }
}
function moveCursorInsideParenthesis(text) {
    return text.replace(/\(\)$/, "($1)");
}
function collectValues(styleSheet, declaration) {
    const fullPropertyName = declaration.getFullPropertyName();
    const entries = new Set();
    function visitValue(node) {
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Identifier || node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NumericValue || node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.HexColorValue) {
            entries.add(node.getText());
        }
        return true;
    }
    function matchesProperty(decl) {
        const propertyName = decl.getFullPropertyName();
        return fullPropertyName === propertyName;
    }
    function vistNode(node) {
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declaration && node !== declaration) {
            if (matchesProperty(node)) {
                const value = node.getValue();
                if (value) {
                    value.accept(visitValue);
                }
            }
        }
        return true;
    }
    styleSheet.accept(vistNode);
    return entries;
}
class ColorValueCollector {
    constructor(entries, currentOffset) {
        this.entries = entries;
        this.currentOffset = currentOffset;
        // nothing to do
    }
    visitNode(node) {
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.HexColorValue || (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Function && _languageFacts_facts__WEBPACK_IMPORTED_MODULE_2__.isColorConstructor(node))) {
            if (this.currentOffset < node.offset || node.end < this.currentOffset) {
                this.entries.add(node.getText());
            }
        }
        return true;
    }
}
class VariableCollector {
    constructor(entries, currentOffset) {
        this.entries = entries;
        this.currentOffset = currentOffset;
        // nothing to do
    }
    visitNode(node) {
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Identifier && node.isCustomProperty) {
            if (this.currentOffset < node.offset || node.end < this.currentOffset) {
                this.entries.add(node.getText());
            }
        }
        return true;
    }
}
function getCurrentWord(document, offset) {
    let i = offset - 1;
    const text = document.getText();
    while (i >= 0 && ' \t\n\r":{[()]},*>+'.indexOf(text.charAt(i)) === -1) {
        i--;
    }
    return text.substring(i + 1, offset);
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssFolding.js":
/*!************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/cssFolding.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getFoldingRanges: () => (/* binding */ getFoldingRanges)
/* harmony export */ });
/* harmony import */ var _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/* harmony import */ var _parser_scssScanner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/scssScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/scssScanner.js");
/* harmony import */ var _parser_lessScanner__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/lessScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/lessScanner.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




function getFoldingRanges(document, context) {
    const ranges = computeFoldingRanges(document);
    return limitFoldingRanges(ranges, context);
}
function computeFoldingRanges(document) {
    function getStartLine(t) {
        return document.positionAt(t.offset).line;
    }
    function getEndLine(t) {
        return document.positionAt(t.offset + t.len).line;
    }
    function getScanner() {
        switch (document.languageId) {
            case 'scss':
                return new _parser_scssScanner__WEBPACK_IMPORTED_MODULE_1__.SCSSScanner();
            case 'less':
                return new _parser_lessScanner__WEBPACK_IMPORTED_MODULE_2__.LESSScanner();
            default:
                return new _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.Scanner();
        }
    }
    function tokenToRange(t, kind) {
        const startLine = getStartLine(t);
        const endLine = getEndLine(t);
        if (startLine !== endLine) {
            return {
                startLine,
                endLine,
                kind
            };
        }
        else {
            return null;
        }
    }
    const ranges = [];
    const delimiterStack = [];
    const scanner = getScanner();
    scanner.ignoreComment = false;
    scanner.setSource(document.getText());
    let token = scanner.scan();
    let prevToken = null;
    while (token.type !== _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.EOF) {
        switch (token.type) {
            case _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyL:
            case _parser_scssScanner__WEBPACK_IMPORTED_MODULE_1__.InterpolationFunction:
                {
                    delimiterStack.push({ line: getStartLine(token), type: 'brace', isStart: true });
                    break;
                }
            case _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.CurlyR: {
                if (delimiterStack.length !== 0) {
                    const prevDelimiter = popPrevStartDelimiterOfType(delimiterStack, 'brace');
                    if (!prevDelimiter) {
                        break;
                    }
                    let endLine = getEndLine(token);
                    if (prevDelimiter.type === 'brace') {
                        /**
                         * Other than the case when curly brace is not on a new line by itself, for example
                         * .foo {
                         *   color: red; }
                         * Use endLine minus one to show ending curly brace
                         */
                        if (prevToken && getEndLine(prevToken) !== endLine) {
                            endLine--;
                        }
                        if (prevDelimiter.line !== endLine) {
                            ranges.push({
                                startLine: prevDelimiter.line,
                                endLine,
                                kind: undefined
                            });
                        }
                    }
                }
                break;
            }
            /**
             * In CSS, there is no single line comment prefixed with //
             * All comments are marked as `Comment`
             */
            case _parser_cssScanner__WEBPACK_IMPORTED_MODULE_0__.TokenType.Comment: {
                const commentRegionMarkerToDelimiter = (marker) => {
                    if (marker === '#region') {
                        return { line: getStartLine(token), type: 'comment', isStart: true };
                    }
                    else {
                        return { line: getEndLine(token), type: 'comment', isStart: false };
                    }
                };
                const getCurrDelimiter = (token) => {
                    const matches = token.text.match(/^\s*\/\*\s*(#region|#endregion)\b\s*(.*?)\s*\*\//);
                    if (matches) {
                        return commentRegionMarkerToDelimiter(matches[1]);
                    }
                    else if (document.languageId === 'scss' || document.languageId === 'less') {
                        const matches = token.text.match(/^\s*\/\/\s*(#region|#endregion)\b\s*(.*?)\s*/);
                        if (matches) {
                            return commentRegionMarkerToDelimiter(matches[1]);
                        }
                    }
                    return null;
                };
                const currDelimiter = getCurrDelimiter(token);
                // /* */ comment region folding
                // All #region and #endregion cases
                if (currDelimiter) {
                    if (currDelimiter.isStart) {
                        delimiterStack.push(currDelimiter);
                    }
                    else {
                        const prevDelimiter = popPrevStartDelimiterOfType(delimiterStack, 'comment');
                        if (!prevDelimiter) {
                            break;
                        }
                        if (prevDelimiter.type === 'comment') {
                            if (prevDelimiter.line !== currDelimiter.line) {
                                ranges.push({
                                    startLine: prevDelimiter.line,
                                    endLine: currDelimiter.line,
                                    kind: 'region'
                                });
                            }
                        }
                    }
                }
                // Multiline comment case
                else {
                    const range = tokenToRange(token, 'comment');
                    if (range) {
                        ranges.push(range);
                    }
                }
                break;
            }
        }
        prevToken = token;
        token = scanner.scan();
    }
    return ranges;
}
function popPrevStartDelimiterOfType(stack, type) {
    if (stack.length === 0) {
        return null;
    }
    for (let i = stack.length - 1; i >= 0; i--) {
        if (stack[i].type === type && stack[i].isStart) {
            return stack.splice(i, 1)[0];
        }
    }
    return null;
}
/**
 * - Sort regions
 * - Remove invalid regions (intersections)
 * - If limit exceeds, only return `rangeLimit` amount of ranges
 */
function limitFoldingRanges(ranges, context) {
    const maxRanges = context && context.rangeLimit || Number.MAX_VALUE;
    const sortedRanges = ranges.sort((r1, r2) => {
        let diff = r1.startLine - r2.startLine;
        if (diff === 0) {
            diff = r1.endLine - r2.endLine;
        }
        return diff;
    });
    const validRanges = [];
    let prevEndLine = -1;
    sortedRanges.forEach(r => {
        if (!(r.startLine < prevEndLine && prevEndLine < r.endLine)) {
            validRanges.push(r);
            prevEndLine = r.endLine;
        }
    });
    if (validRanges.length < maxRanges) {
        return validRanges;
    }
    else {
        return validRanges.slice(0, maxRanges);
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssFormatter.js":
/*!**************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/cssFormatter.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   format: () => (/* binding */ format)
/* harmony export */ });
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* harmony import */ var _beautify_beautify_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../beautify/beautify-css */ "../../node_modules/vscode-css-languageservice/lib/esm/beautify/beautify-css.js");
/* harmony import */ var _utils_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/strings */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/strings.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



function format(document, range, options) {
    let value = document.getText();
    let includesEnd = true;
    let initialIndentLevel = 0;
    let inRule = false;
    const tabSize = options.tabSize || 4;
    if (range) {
        let startOffset = document.offsetAt(range.start);
        // include all leading whitespace iff at the beginning of the line
        let extendedStart = startOffset;
        while (extendedStart > 0 && isWhitespace(value, extendedStart - 1)) {
            extendedStart--;
        }
        if (extendedStart === 0 || isEOL(value, extendedStart - 1)) {
            startOffset = extendedStart;
        }
        else {
            // else keep at least one whitespace
            if (extendedStart < startOffset) {
                startOffset = extendedStart + 1;
            }
        }
        // include all following whitespace until the end of the line
        let endOffset = document.offsetAt(range.end);
        let extendedEnd = endOffset;
        while (extendedEnd < value.length && isWhitespace(value, extendedEnd)) {
            extendedEnd++;
        }
        if (extendedEnd === value.length || isEOL(value, extendedEnd)) {
            endOffset = extendedEnd;
        }
        range = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(startOffset), document.positionAt(endOffset));
        // Test if inside a rule
        inRule = isInRule(value, startOffset);
        includesEnd = endOffset === value.length;
        value = value.substring(startOffset, endOffset);
        if (startOffset !== 0) {
            const startOfLineOffset = document.offsetAt(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Position.create(range.start.line, 0));
            initialIndentLevel = computeIndentLevel(document.getText(), startOfLineOffset, options);
        }
        if (inRule) {
            value = `{\n${trimLeft(value)}`;
        }
    }
    else {
        range = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Position.create(0, 0), document.positionAt(value.length));
    }
    const cssOptions = {
        indent_size: tabSize,
        indent_char: options.insertSpaces ? ' ' : '\t',
        end_with_newline: includesEnd && getFormatOption(options, 'insertFinalNewline', false),
        selector_separator_newline: getFormatOption(options, 'newlineBetweenSelectors', true),
        newline_between_rules: getFormatOption(options, 'newlineBetweenRules', true),
        space_around_selector_separator: getFormatOption(options, 'spaceAroundSelectorSeparator', false),
        brace_style: getFormatOption(options, 'braceStyle', 'collapse'),
        indent_empty_lines: getFormatOption(options, 'indentEmptyLines', false),
        max_preserve_newlines: getFormatOption(options, 'maxPreserveNewLines', undefined),
        preserve_newlines: getFormatOption(options, 'preserveNewLines', true),
        wrap_line_length: getFormatOption(options, 'wrapLineLength', undefined),
        eol: '\n'
    };
    let result = (0,_beautify_beautify_css__WEBPACK_IMPORTED_MODULE_1__.css_beautify)(value, cssOptions);
    if (inRule) {
        result = trimLeft(result.substring(2));
    }
    if (initialIndentLevel > 0) {
        const indent = options.insertSpaces ? (0,_utils_strings__WEBPACK_IMPORTED_MODULE_2__.repeat)(' ', tabSize * initialIndentLevel) : (0,_utils_strings__WEBPACK_IMPORTED_MODULE_2__.repeat)('\t', initialIndentLevel);
        result = result.split('\n').join('\n' + indent);
        if (range.start.character === 0) {
            result = indent + result; // keep the indent
        }
    }
    return [{
            range: range,
            newText: result
        }];
}
function trimLeft(str) {
    return str.replace(/^\s+/, '');
}
const _CUL = '{'.charCodeAt(0);
const _CUR = '}'.charCodeAt(0);
function isInRule(str, offset) {
    while (offset >= 0) {
        const ch = str.charCodeAt(offset);
        if (ch === _CUL) {
            return true;
        }
        else if (ch === _CUR) {
            return false;
        }
        offset--;
    }
    return false;
}
function getFormatOption(options, key, dflt) {
    if (options && options.hasOwnProperty(key)) {
        const value = options[key];
        if (value !== null) {
            return value;
        }
    }
    return dflt;
}
function computeIndentLevel(content, offset, options) {
    let i = offset;
    let nChars = 0;
    const tabSize = options.tabSize || 4;
    while (i < content.length) {
        const ch = content.charAt(i);
        if (ch === ' ') {
            nChars++;
        }
        else if (ch === '\t') {
            nChars += tabSize;
        }
        else {
            break;
        }
        i++;
    }
    return Math.floor(nChars / tabSize);
}
function isEOL(text, offset) {
    return '\r\n'.indexOf(text.charAt(offset)) !== -1;
}
function isWhitespace(text, offset) {
    return ' \t'.indexOf(text.charAt(offset)) !== -1;
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssHover.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/cssHover.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSHover: () => (/* binding */ CSSHover)
/* harmony export */ });
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _languageFacts_facts__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../languageFacts/facts */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/facts.js");
/* harmony import */ var _selectorPrinting__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./selectorPrinting */ "../../node_modules/vscode-css-languageservice/lib/esm/services/selectorPrinting.js");
/* harmony import */ var _utils_strings__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/strings */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/strings.js");
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* harmony import */ var _utils_objects__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/objects */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/objects.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







class CSSHover {
    constructor(clientCapabilities, cssDataManager) {
        this.clientCapabilities = clientCapabilities;
        this.cssDataManager = cssDataManager;
        this.selectorPrinting = new _selectorPrinting__WEBPACK_IMPORTED_MODULE_2__.SelectorPrinting(cssDataManager);
    }
    configure(settings) {
        this.defaultSettings = settings;
    }
    doHover(document, position, stylesheet, settings = this.defaultSettings) {
        function getRange(node) {
            return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.Range.create(document.positionAt(node.offset), document.positionAt(node.end));
        }
        const offset = document.offsetAt(position);
        const nodepath = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.getNodePath(stylesheet, offset);
        /**
         * nodepath is top-down
         * Build up the hover by appending inner node's information
         */
        let hover = null;
        for (let i = 0; i < nodepath.length; i++) {
            const node = nodepath[i];
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Selector) {
                hover = {
                    contents: this.selectorPrinting.selectorToMarkedString(node),
                    range: getRange(node)
                };
                break;
            }
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                /**
                 * Some sass specific at rules such as `@at-root` are parsed as `SimpleSelector`
                 */
                if (!(0,_utils_strings__WEBPACK_IMPORTED_MODULE_3__.startsWith)(node.getText(), '@')) {
                    hover = {
                        contents: this.selectorPrinting.simpleSelectorToMarkedString(node),
                        range: getRange(node)
                    };
                }
                break;
            }
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Declaration) {
                const propertyName = node.getFullPropertyName();
                const entry = this.cssDataManager.getProperty(propertyName);
                if (entry) {
                    const contents = _languageFacts_facts__WEBPACK_IMPORTED_MODULE_1__.getEntryDescription(entry, this.doesSupportMarkdown(), settings);
                    if (contents) {
                        hover = {
                            contents,
                            range: getRange(node)
                        };
                    }
                    else {
                        hover = null;
                    }
                }
                continue;
            }
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.UnknownAtRule) {
                const atRuleName = node.getText();
                const entry = this.cssDataManager.getAtDirective(atRuleName);
                if (entry) {
                    const contents = _languageFacts_facts__WEBPACK_IMPORTED_MODULE_1__.getEntryDescription(entry, this.doesSupportMarkdown(), settings);
                    if (contents) {
                        hover = {
                            contents,
                            range: getRange(node)
                        };
                    }
                    else {
                        hover = null;
                    }
                }
                continue;
            }
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Node && node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector) {
                const selectorName = node.getText();
                const entry = selectorName.slice(0, 2) === '::'
                    ? this.cssDataManager.getPseudoElement(selectorName)
                    : this.cssDataManager.getPseudoClass(selectorName);
                if (entry) {
                    const contents = _languageFacts_facts__WEBPACK_IMPORTED_MODULE_1__.getEntryDescription(entry, this.doesSupportMarkdown(), settings);
                    if (contents) {
                        hover = {
                            contents,
                            range: getRange(node)
                        };
                    }
                    else {
                        hover = null;
                    }
                }
                continue;
            }
        }
        if (hover) {
            hover.contents = this.convertContents(hover.contents);
        }
        return hover;
    }
    convertContents(contents) {
        if (!this.doesSupportMarkdown()) {
            if (typeof contents === 'string') {
                return contents;
            }
            // MarkupContent
            else if ('kind' in contents) {
                return {
                    kind: 'plaintext',
                    value: contents.value
                };
            }
            // MarkedString[]
            else if (Array.isArray(contents)) {
                return contents.map(c => {
                    return typeof c === 'string' ? c : c.value;
                });
            }
            // MarkedString
            else {
                return contents.value;
            }
        }
        return contents;
    }
    doesSupportMarkdown() {
        if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.supportsMarkdown)) {
            if (!(0,_utils_objects__WEBPACK_IMPORTED_MODULE_5__.isDefined)(this.clientCapabilities)) {
                this.supportsMarkdown = true;
                return this.supportsMarkdown;
            }
            const hover = this.clientCapabilities.textDocument && this.clientCapabilities.textDocument.hover;
            this.supportsMarkdown = hover && hover.contentFormat && Array.isArray(hover.contentFormat) && hover.contentFormat.indexOf(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_4__.MarkupKind.Markdown) !== -1;
        }
        return this.supportsMarkdown;
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssNavigation.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/cssNavigation.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSNavigation: () => (/* binding */ CSSNavigation)
/* harmony export */ });
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _parser_cssSymbolScope__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/cssSymbolScope */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssSymbolScope.js");
/* harmony import */ var _languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../languageFacts/facts */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/facts.js");
/* harmony import */ var _utils_strings__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/strings */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/strings.js");
/* harmony import */ var _utils_resources__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/resources */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/resources.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/








const startsWithSchemeRegex = /^\w+:\/\//;
const startsWithData = /^data:/;
class CSSNavigation {
    constructor(fileSystemProvider, resolveModuleReferences) {
        this.fileSystemProvider = fileSystemProvider;
        this.resolveModuleReferences = resolveModuleReferences;
    }
    configure(settings) {
        this.defaultSettings = settings;
    }
    findDefinition(document, position, stylesheet) {
        const symbols = new _parser_cssSymbolScope__WEBPACK_IMPORTED_MODULE_2__.Symbols(stylesheet);
        const offset = document.offsetAt(position);
        const node = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.getNodeAtOffset(stylesheet, offset);
        if (!node) {
            return null;
        }
        const symbol = symbols.findSymbolFromNode(node);
        if (!symbol) {
            return null;
        }
        return {
            uri: document.uri,
            range: getRange(symbol.node, document)
        };
    }
    findReferences(document, position, stylesheet) {
        const highlights = this.findDocumentHighlights(document, position, stylesheet);
        return highlights.map(h => {
            return {
                uri: document.uri,
                range: h.range
            };
        });
    }
    getHighlightNode(document, position, stylesheet) {
        const offset = document.offsetAt(position);
        let node = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.getNodeAtOffset(stylesheet, offset);
        if (!node || node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Stylesheet || node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Declarations) {
            return;
        }
        if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Identifier && node.parent && node.parent.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.ClassSelector) {
            node = node.parent;
        }
        return node;
    }
    findDocumentHighlights(document, position, stylesheet) {
        const result = [];
        const node = this.getHighlightNode(document, position, stylesheet);
        if (!node) {
            return result;
        }
        const symbols = new _parser_cssSymbolScope__WEBPACK_IMPORTED_MODULE_2__.Symbols(stylesheet);
        const symbol = symbols.findSymbolFromNode(node);
        const name = node.getText();
        stylesheet.accept(candidate => {
            if (symbol) {
                if (symbols.matchesSymbol(candidate, symbol)) {
                    result.push({
                        kind: getHighlightKind(candidate),
                        range: getRange(candidate, document)
                    });
                    return false;
                }
            }
            else if (node && node.type === candidate.type && candidate.matches(name)) {
                // Same node type and data
                result.push({
                    kind: getHighlightKind(candidate),
                    range: getRange(candidate, document)
                });
            }
            return true;
        });
        return result;
    }
    isRawStringDocumentLinkNode(node) {
        return node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Import;
    }
    findDocumentLinks(document, stylesheet, documentContext) {
        const linkData = this.findUnresolvedLinks(document, stylesheet);
        const resolvedLinks = [];
        for (let data of linkData) {
            const link = data.link;
            const target = link.target;
            if (!target || startsWithData.test(target)) {
                // no links for data:
            }
            else if (startsWithSchemeRegex.test(target)) {
                resolvedLinks.push(link);
            }
            else {
                const resolved = documentContext.resolveReference(target, document.uri);
                if (resolved) {
                    link.target = resolved;
                }
                resolvedLinks.push(link);
            }
        }
        return resolvedLinks;
    }
    async findDocumentLinks2(document, stylesheet, documentContext) {
        const linkData = this.findUnresolvedLinks(document, stylesheet);
        const resolvedLinks = [];
        for (let data of linkData) {
            const link = data.link;
            const target = link.target;
            if (!target || startsWithData.test(target)) {
                // no links for data:
            }
            else if (startsWithSchemeRegex.test(target)) {
                resolvedLinks.push(link);
            }
            else {
                const resolvedTarget = await this.resolveReference(target, document.uri, documentContext, data.isRawLink);
                if (resolvedTarget !== undefined) {
                    link.target = resolvedTarget;
                    resolvedLinks.push(link);
                }
            }
        }
        return resolvedLinks;
    }
    findUnresolvedLinks(document, stylesheet) {
        const result = [];
        const collect = (uriStringNode) => {
            let rawUri = uriStringNode.getText();
            const range = getRange(uriStringNode, document);
            // Make sure the range is not empty
            if (range.start.line === range.end.line && range.start.character === range.end.character) {
                return;
            }
            if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_4__.startsWith)(rawUri, `'`) || (0,_utils_strings__WEBPACK_IMPORTED_MODULE_4__.startsWith)(rawUri, `"`)) {
                rawUri = rawUri.slice(1, -1);
            }
            const isRawLink = uriStringNode.parent ? this.isRawStringDocumentLinkNode(uriStringNode.parent) : false;
            result.push({ link: { target: rawUri, range }, isRawLink });
        };
        stylesheet.accept(candidate => {
            if (candidate.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.URILiteral) {
                const first = candidate.getChild(0);
                if (first) {
                    collect(first);
                }
                return false;
            }
            /**
             * In @import, it is possible to include links that do not use `url()`
             * For example, `@import 'foo.css';`
             */
            if (candidate.parent && this.isRawStringDocumentLinkNode(candidate.parent)) {
                const rawText = candidate.getText();
                if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_4__.startsWith)(rawText, `'`) || (0,_utils_strings__WEBPACK_IMPORTED_MODULE_4__.startsWith)(rawText, `"`)) {
                    collect(candidate);
                }
                return false;
            }
            return true;
        });
        return result;
    }
    findSymbolInformations(document, stylesheet) {
        const result = [];
        const addSymbolInformation = (name, kind, symbolNodeOrRange) => {
            const range = symbolNodeOrRange instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node ? getRange(symbolNodeOrRange, document) : symbolNodeOrRange;
            const entry = {
                name: name || _vscode_l10n__WEBPACK_IMPORTED_MODULE_6__.t('<undefined>'),
                kind,
                location: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Location.create(document.uri, range)
            };
            result.push(entry);
        };
        this.collectDocumentSymbols(document, stylesheet, addSymbolInformation);
        return result;
    }
    findDocumentSymbols(document, stylesheet) {
        const result = [];
        const parents = [];
        const addDocumentSymbol = (name, kind, symbolNodeOrRange, nameNodeOrRange, bodyNode) => {
            const range = symbolNodeOrRange instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node ? getRange(symbolNodeOrRange, document) : symbolNodeOrRange;
            let selectionRange = nameNodeOrRange instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Node ? getRange(nameNodeOrRange, document) : nameNodeOrRange;
            if (!selectionRange || !containsRange(range, selectionRange)) {
                selectionRange = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(range.start, range.start);
            }
            const entry = {
                name: name || _vscode_l10n__WEBPACK_IMPORTED_MODULE_6__.t('<undefined>'),
                kind,
                range,
                selectionRange
            };
            let top = parents.pop();
            while (top && !containsRange(top[1], range)) {
                top = parents.pop();
            }
            if (top) {
                const topSymbol = top[0];
                if (!topSymbol.children) {
                    topSymbol.children = [];
                }
                topSymbol.children.push(entry);
                parents.push(top); // put back top
            }
            else {
                result.push(entry);
            }
            if (bodyNode) {
                parents.push([entry, getRange(bodyNode, document)]);
            }
        };
        this.collectDocumentSymbols(document, stylesheet, addDocumentSymbol);
        return result;
    }
    collectDocumentSymbols(document, stylesheet, collect) {
        stylesheet.accept(node => {
            if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.RuleSet) {
                for (const selector of node.getSelectors().getChildren()) {
                    if (selector instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Selector) {
                        const range = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(selector.offset), document.positionAt(node.end));
                        collect(selector.getText(), _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class, range, selector, node.getDeclarations());
                    }
                }
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.VariableDeclaration) {
                collect(node.getName(), _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Variable, node, node.getVariable(), undefined);
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.MixinDeclaration) {
                collect(node.getName(), _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Method, node, node.getIdentifier(), node.getDeclarations());
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.FunctionDeclaration) {
                collect(node.getName(), _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Function, node, node.getIdentifier(), node.getDeclarations());
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Keyframe) {
                const name = _vscode_l10n__WEBPACK_IMPORTED_MODULE_6__.t("@keyframes {0}", node.getName());
                collect(name, _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class, node, node.getIdentifier(), node.getDeclarations());
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.FontFace) {
                const name = _vscode_l10n__WEBPACK_IMPORTED_MODULE_6__.t("@font-face");
                collect(name, _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Class, node, undefined, node.getDeclarations());
            }
            else if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Media) {
                const mediaList = node.getChild(0);
                if (mediaList instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Medialist) {
                    const name = '@media ' + mediaList.getText();
                    collect(name, _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SymbolKind.Module, node, mediaList, node.getDeclarations());
                }
            }
            return true;
        });
    }
    findDocumentColors(document, stylesheet) {
        const result = [];
        stylesheet.accept((node) => {
            const colorInfo = getColorInformation(node, document);
            if (colorInfo) {
                result.push(colorInfo);
            }
            return true;
        });
        return result;
    }
    getColorPresentations(document, stylesheet, color, range) {
        const result = [];
        const red256 = Math.round(color.red * 255), green256 = Math.round(color.green * 255), blue256 = Math.round(color.blue * 255);
        let label;
        if (color.alpha === 1) {
            label = `rgb(${red256}, ${green256}, ${blue256})`;
        }
        else {
            label = `rgba(${red256}, ${green256}, ${blue256}, ${color.alpha})`;
        }
        result.push({ label: label, textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        if (color.alpha === 1) {
            label = `#${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}`;
        }
        else {
            label = `#${toTwoDigitHex(red256)}${toTwoDigitHex(green256)}${toTwoDigitHex(blue256)}${toTwoDigitHex(Math.round(color.alpha * 255))}`;
        }
        result.push({ label: label, textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        const hsl = (0,_languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__.hslFromColor)(color);
        if (hsl.a === 1) {
            label = `hsl(${hsl.h}, ${Math.round(hsl.s * 100)}%, ${Math.round(hsl.l * 100)}%)`;
        }
        else {
            label = `hsla(${hsl.h}, ${Math.round(hsl.s * 100)}%, ${Math.round(hsl.l * 100)}%, ${hsl.a})`;
        }
        result.push({ label: label, textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        const hwb = (0,_languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__.hwbFromColor)(color);
        if (hwb.a === 1) {
            label = `hwb(${hwb.h} ${Math.round(hwb.w * 100)}% ${Math.round(hwb.b * 100)}%)`;
        }
        else {
            label = `hwb(${hwb.h} ${Math.round(hwb.w * 100)}% ${Math.round(hwb.b * 100)}% / ${hwb.a})`;
        }
        result.push({ label: label, textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(range, label) });
        return result;
    }
    prepareRename(document, position, stylesheet) {
        const node = this.getHighlightNode(document, position, stylesheet);
        if (node) {
            return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(node.offset), document.positionAt(node.end));
        }
    }
    doRename(document, position, newName, stylesheet) {
        const highlights = this.findDocumentHighlights(document, position, stylesheet);
        const edits = highlights.map(h => _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(h.range, newName));
        return {
            changes: { [document.uri]: edits }
        };
    }
    async resolveModuleReference(ref, documentUri, documentContext) {
        if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_4__.startsWith)(documentUri, 'file://')) {
            const moduleName = getModuleNameFromPath(ref);
            if (moduleName && moduleName !== '.' && moduleName !== '..') {
                const rootFolderUri = documentContext.resolveReference('/', documentUri);
                const documentFolderUri = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.dirname)(documentUri);
                const modulePath = await this.resolvePathToModule(moduleName, documentFolderUri, rootFolderUri);
                if (modulePath) {
                    const pathWithinModule = ref.substring(moduleName.length + 1);
                    return (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(modulePath, pathWithinModule);
                }
            }
        }
        return undefined;
    }
    async mapReference(target, isRawLink) {
        return target;
    }
    async resolveReference(target, documentUri, documentContext, isRawLink = false, settings = this.defaultSettings) {
        // Following [css-loader](https://github.com/webpack-contrib/css-loader#url)
        // and [sass-loader's](https://github.com/webpack-contrib/sass-loader#imports)
        // convention, if an import path starts with ~ then use node module resolution
        // *unless* it starts with "~/" as this refers to the user's home directory.
        if (target[0] === '~' && target[1] !== '/' && this.fileSystemProvider) {
            target = target.substring(1);
            return this.mapReference(await this.resolveModuleReference(target, documentUri, documentContext), isRawLink);
        }
        const ref = await this.mapReference(documentContext.resolveReference(target, documentUri), isRawLink);
        // Following [less-loader](https://github.com/webpack-contrib/less-loader#imports)
        // and [sass-loader's](https://github.com/webpack-contrib/sass-loader#resolving-import-at-rules)
        // new resolving import at-rules (~ is deprecated). The loader will first try to resolve @import as a relative path. If it cannot be resolved,
        // then the loader will try to resolve @import inside node_modules.
        if (this.resolveModuleReferences) {
            if (ref && await this.fileExists(ref)) {
                return ref;
            }
            const moduleReference = await this.mapReference(await this.resolveModuleReference(target, documentUri, documentContext), isRawLink);
            if (moduleReference) {
                return moduleReference;
            }
        }
        // Try resolving the reference from the language configuration alias settings
        if (ref && !(await this.fileExists(ref))) {
            const rootFolderUri = documentContext.resolveReference('/', documentUri);
            if (settings && rootFolderUri) {
                // Specific file reference
                if (target in settings) {
                    return this.mapReference((0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(rootFolderUri, settings[target]), isRawLink);
                }
                // Reference folder
                const firstSlash = target.indexOf('/');
                const prefix = `${target.substring(0, firstSlash)}/`;
                if (prefix in settings) {
                    const aliasPath = (settings[prefix]).slice(0, -1);
                    let newPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(rootFolderUri, aliasPath);
                    return this.mapReference(newPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(newPath, target.substring(prefix.length - 1)), isRawLink);
                }
            }
        }
        // fall back. it might not exists
        return ref;
    }
    async resolvePathToModule(_moduleName, documentFolderUri, rootFolderUri) {
        // resolve the module relative to the document. We can't use `require` here as the code is webpacked.
        const packPath = (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.joinPath)(documentFolderUri, 'node_modules', _moduleName, 'package.json');
        if (await this.fileExists(packPath)) {
            return (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.dirname)(packPath);
        }
        else if (rootFolderUri && documentFolderUri.startsWith(rootFolderUri) && (documentFolderUri.length !== rootFolderUri.length)) {
            return this.resolvePathToModule(_moduleName, (0,_utils_resources__WEBPACK_IMPORTED_MODULE_5__.dirname)(documentFolderUri), rootFolderUri);
        }
        return undefined;
    }
    async fileExists(uri) {
        if (!this.fileSystemProvider) {
            return false;
        }
        try {
            const stat = await this.fileSystemProvider.stat(uri);
            if (stat.type === _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.FileType.Unknown && stat.size === -1) {
                return false;
            }
            return true;
        }
        catch (err) {
            return false;
        }
    }
}
function getColorInformation(node, document) {
    const color = (0,_languageFacts_facts__WEBPACK_IMPORTED_MODULE_3__.getColorValue)(node);
    if (color) {
        const range = getRange(node, document);
        return { color, range };
    }
    return null;
}
function getRange(node, document) {
    return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(node.offset), document.positionAt(node.end));
}
/**
 * Test if `otherRange` is in `range`. If the ranges are equal, will return true.
 */
function containsRange(range, otherRange) {
    const otherStartLine = otherRange.start.line, otherEndLine = otherRange.end.line;
    const rangeStartLine = range.start.line, rangeEndLine = range.end.line;
    if (otherStartLine < rangeStartLine || otherEndLine < rangeStartLine) {
        return false;
    }
    if (otherStartLine > rangeEndLine || otherEndLine > rangeEndLine) {
        return false;
    }
    if (otherStartLine === rangeStartLine && otherRange.start.character < range.start.character) {
        return false;
    }
    if (otherEndLine === rangeEndLine && otherRange.end.character > range.end.character) {
        return false;
    }
    return true;
}
function getHighlightKind(node) {
    if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Selector) {
        return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Write;
    }
    if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Identifier) {
        if (node.parent && node.parent instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Property) {
            if (node.isCustomProperty) {
                return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Write;
            }
        }
    }
    if (node.parent) {
        switch (node.parent.type) {
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.FunctionDeclaration:
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.MixinDeclaration:
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Keyframe:
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.VariableDeclaration:
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.FunctionParameter:
                return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Write;
        }
    }
    return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.DocumentHighlightKind.Read;
}
function toTwoDigitHex(n) {
    const r = n.toString(16);
    return r.length !== 2 ? '0' + r : r;
}
function getModuleNameFromPath(path) {
    const firstSlash = path.indexOf('/');
    if (firstSlash === -1) {
        return '';
    }
    // If a scoped module (starts with @) then get up until second instance of '/', or to the end of the string for root-level imports.
    if (path[0] === '@') {
        const secondSlash = path.indexOf('/', firstSlash + 1);
        if (secondSlash === -1) {
            return path;
        }
        return path.substring(0, secondSlash);
    }
    // Otherwise get until first instance of '/'
    return path.substring(0, firstSlash);
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssSelectionRange.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/cssSelectionRange.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   getSelectionRanges: () => (/* binding */ getSelectionRanges)
/* harmony export */ });
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



function getSelectionRanges(document, positions, stylesheet) {
    function getSelectionRange(position) {
        const applicableRanges = getApplicableRanges(position);
        let current = undefined;
        for (let index = applicableRanges.length - 1; index >= 0; index--) {
            current = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SelectionRange.create(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(document.positionAt(applicableRanges[index][0]), document.positionAt(applicableRanges[index][1])), current);
        }
        if (!current) {
            current = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.SelectionRange.create(_cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(position, position));
        }
        return current;
    }
    return positions.map(getSelectionRange);
    function getApplicableRanges(position) {
        const offset = document.offsetAt(position);
        let currNode = stylesheet.findChildAtOffset(offset, true);
        if (!currNode) {
            return [];
        }
        const result = [];
        while (currNode) {
            if (currNode.parent &&
                currNode.offset === currNode.parent.offset &&
                currNode.end === currNode.parent.end) {
                currNode = currNode.parent;
                continue;
            }
            // The `{ }` part of `.a { }`
            if (currNode.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Declarations) {
                if (offset > currNode.offset && offset < currNode.end) {
                    // Return `{ }` and the range inside `{` and `}`
                    result.push([currNode.offset + 1, currNode.end - 1]);
                }
            }
            result.push([currNode.offset, currNode.end]);
            currNode = currNode.parent;
        }
        return result;
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssValidation.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/cssValidation.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CSSValidation: () => (/* binding */ CSSValidation)
/* harmony export */ });
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _lintRules__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lintRules */ "../../node_modules/vscode-css-languageservice/lib/esm/services/lintRules.js");
/* harmony import */ var _lint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lint */ "../../node_modules/vscode-css-languageservice/lib/esm/services/lint.js");
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





class CSSValidation {
    constructor(cssDataManager) {
        this.cssDataManager = cssDataManager;
    }
    configure(settings) {
        this.settings = settings;
    }
    doValidation(document, stylesheet, settings = this.settings) {
        if (settings && settings.validate === false) {
            return [];
        }
        const entries = [];
        entries.push.apply(entries, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.ParseErrorCollector.entries(stylesheet));
        entries.push.apply(entries, _lint__WEBPACK_IMPORTED_MODULE_2__.LintVisitor.entries(stylesheet, document, new _lintRules__WEBPACK_IMPORTED_MODULE_1__.LintConfigurationSettings(settings && settings.lint), this.cssDataManager));
        const ruleIds = [];
        for (const r in _lintRules__WEBPACK_IMPORTED_MODULE_1__.Rules) {
            ruleIds.push(_lintRules__WEBPACK_IMPORTED_MODULE_1__.Rules[r].id);
        }
        function toDiagnostic(marker) {
            const range = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.Range.create(document.positionAt(marker.getOffset()), document.positionAt(marker.getOffset() + marker.getLength()));
            const source = document.languageId;
            return {
                code: marker.getRule().id,
                source: source,
                message: marker.getMessage(),
                severity: marker.getLevel() === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Warning ? _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.DiagnosticSeverity.Warning : _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_3__.DiagnosticSeverity.Error,
                range: range
            };
        }
        return entries.filter(entry => entry.getLevel() !== _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Ignore).map(toDiagnostic);
    }
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/lessCompletion.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/lessCompletion.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LESSCompletion: () => (/* binding */ LESSCompletion)
/* harmony export */ });
/* harmony import */ var _cssCompletion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssCompletion */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssCompletion.js");
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_2__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/




class LESSCompletion extends _cssCompletion__WEBPACK_IMPORTED_MODULE_0__.CSSCompletion {
    constructor(lsOptions, cssDataManager) {
        super('@', lsOptions, cssDataManager);
    }
    createFunctionProposals(proposals, existingNode, sortToEnd, result) {
        for (const p of proposals) {
            const item = {
                label: p.name,
                detail: p.example,
                documentation: p.description,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_1__.TextEdit.replace(this.getCompletionRange(existingNode), p.name + '($0)'),
                insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_1__.InsertTextFormat.Snippet,
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_1__.CompletionItemKind.Function
            };
            if (sortToEnd) {
                item.sortText = 'z';
            }
            result.items.push(item);
        }
        return result;
    }
    getTermProposals(entry, existingNode, result) {
        let functions = LESSCompletion.builtInProposals;
        if (entry) {
            functions = functions.filter(f => !f.type || !entry.restrictions || entry.restrictions.indexOf(f.type) !== -1);
        }
        this.createFunctionProposals(functions, existingNode, true, result);
        return super.getTermProposals(entry, existingNode, result);
    }
    getColorProposals(entry, existingNode, result) {
        this.createFunctionProposals(LESSCompletion.colorProposals, existingNode, false, result);
        return super.getColorProposals(entry, existingNode, result);
    }
    getCompletionsForDeclarationProperty(declaration, result) {
        this.getCompletionsForSelector(null, true, result);
        return super.getCompletionsForDeclarationProperty(declaration, result);
    }
}
LESSCompletion.builtInProposals = [
    // Boolean functions
    {
        'name': 'if',
        'example': 'if(condition, trueValue [, falseValue]);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns one of two values depending on a condition.')
    },
    {
        'name': 'boolean',
        'example': 'boolean(condition);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('"store" a boolean test for later evaluation in a guard or if().')
    },
    // List functions
    {
        'name': 'length',
        'example': 'length(@list);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the number of elements in a value list')
    },
    {
        'name': 'extract',
        'example': 'extract(@list, index);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns a value at the specified position in the list')
    },
    {
        'name': 'range',
        'example': 'range([start, ] end [, step]);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('generate a list spanning a range of values')
    },
    {
        'name': 'each',
        'example': 'each(@list, ruleset);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('bind the evaluation of a ruleset to each member of a list.')
    },
    // Other built-ins
    {
        'name': 'escape',
        'example': 'escape(@string);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('URL encodes a string')
    },
    {
        'name': 'e',
        'example': 'e(@string);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('escape string content')
    },
    {
        'name': 'replace',
        'example': 'replace(@string, @pattern, @replacement[, @flags]);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('string replace')
    },
    {
        'name': 'unit',
        'example': 'unit(@dimension, [@unit: \'\']);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('remove or change the unit of a dimension')
    },
    {
        'name': 'color',
        'example': 'color(@string);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('parses a string to a color'),
        'type': 'color'
    },
    {
        'name': 'convert',
        'example': 'convert(@value, unit);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('converts numbers from one type into another')
    },
    {
        'name': 'data-uri',
        'example': 'data-uri([mimetype,] url);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('inlines a resource and falls back to `url()`'),
        'type': 'url'
    },
    {
        'name': 'abs',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('absolute value of a number'),
        'example': 'abs(number);'
    },
    {
        'name': 'acos',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('arccosine - inverse of cosine function'),
        'example': 'acos(number);'
    },
    {
        'name': 'asin',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('arcsine - inverse of sine function'),
        'example': 'asin(number);'
    },
    {
        'name': 'ceil',
        'example': 'ceil(@number);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('rounds up to an integer')
    },
    {
        'name': 'cos',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('cosine function'),
        'example': 'cos(number);'
    },
    {
        'name': 'floor',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('rounds down to an integer'),
        'example': 'floor(@number);'
    },
    {
        'name': 'percentage',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('converts to a %, e.g. 0.5 > 50%'),
        'example': 'percentage(@number);',
        'type': 'percentage'
    },
    {
        'name': 'round',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('rounds a number to a number of places'),
        'example': 'round(number, [places: 0]);'
    },
    {
        'name': 'sqrt',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('calculates square root of a number'),
        'example': 'sqrt(number);'
    },
    {
        'name': 'sin',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('sine function'),
        'example': 'sin(number);'
    },
    {
        'name': 'tan',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('tangent function'),
        'example': 'tan(number);'
    },
    {
        'name': 'atan',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('arctangent - inverse of tangent function'),
        'example': 'atan(number);'
    },
    {
        'name': 'pi',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns pi'),
        'example': 'pi();'
    },
    {
        'name': 'pow',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('first argument raised to the power of the second argument'),
        'example': 'pow(@base, @exponent);'
    },
    {
        'name': 'mod',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('first argument modulus second argument'),
        'example': 'mod(number, number);'
    },
    {
        'name': 'min',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the lowest of one or more values'),
        'example': 'min(@x, @y);'
    },
    {
        'name': 'max',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the lowest of one or more values'),
        'example': 'max(@x, @y);'
    }
];
LESSCompletion.colorProposals = [
    {
        'name': 'argb',
        'example': 'argb(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('creates a #AARRGGBB')
    },
    {
        'name': 'hsl',
        'example': 'hsl(@hue, @saturation, @lightness);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('creates a color')
    },
    {
        'name': 'hsla',
        'example': 'hsla(@hue, @saturation, @lightness, @alpha);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('creates a color')
    },
    {
        'name': 'hsv',
        'example': 'hsv(@hue, @saturation, @value);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('creates a color')
    },
    {
        'name': 'hsva',
        'example': 'hsva(@hue, @saturation, @value, @alpha);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('creates a color')
    },
    {
        'name': 'hue',
        'example': 'hue(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `hue` channel of `@color` in the HSL space')
    },
    {
        'name': 'saturation',
        'example': 'saturation(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `saturation` channel of `@color` in the HSL space')
    },
    {
        'name': 'lightness',
        'example': 'lightness(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `lightness` channel of `@color` in the HSL space')
    },
    {
        'name': 'hsvhue',
        'example': 'hsvhue(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `hue` channel of `@color` in the HSV space')
    },
    {
        'name': 'hsvsaturation',
        'example': 'hsvsaturation(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `saturation` channel of `@color` in the HSV space')
    },
    {
        'name': 'hsvvalue',
        'example': 'hsvvalue(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `value` channel of `@color` in the HSV space')
    },
    {
        'name': 'red',
        'example': 'red(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `red` channel of `@color`')
    },
    {
        'name': 'green',
        'example': 'green(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `green` channel of `@color`')
    },
    {
        'name': 'blue',
        'example': 'blue(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `blue` channel of `@color`')
    },
    {
        'name': 'alpha',
        'example': 'alpha(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `alpha` channel of `@color`')
    },
    {
        'name': 'luma',
        'example': 'luma(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns the `luma` value (perceptual brightness) of `@color`')
    },
    {
        'name': 'saturate',
        'example': 'saturate(@color, 10%);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('return `@color` 10% points more saturated')
    },
    {
        'name': 'desaturate',
        'example': 'desaturate(@color, 10%);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('return `@color` 10% points less saturated')
    },
    {
        'name': 'lighten',
        'example': 'lighten(@color, 10%);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('return `@color` 10% points lighter')
    },
    {
        'name': 'darken',
        'example': 'darken(@color, 10%);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('return `@color` 10% points darker')
    },
    {
        'name': 'fadein',
        'example': 'fadein(@color, 10%);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('return `@color` 10% points less transparent')
    },
    {
        'name': 'fadeout',
        'example': 'fadeout(@color, 10%);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('return `@color` 10% points more transparent')
    },
    {
        'name': 'fade',
        'example': 'fade(@color, 50%);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('return `@color` with 50% transparency')
    },
    {
        'name': 'spin',
        'example': 'spin(@color, 10);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('return `@color` with a 10 degree larger in hue')
    },
    {
        'name': 'mix',
        'example': 'mix(@color1, @color2, [@weight: 50%]);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('return a mix of `@color1` and `@color2`')
    },
    {
        'name': 'greyscale',
        'example': 'greyscale(@color);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('returns a grey, 100% desaturated color'),
    },
    {
        'name': 'contrast',
        'example': 'contrast(@color1, [@darkcolor: black], [@lightcolor: white], [@threshold: 43%]);',
        'description': _vscode_l10n__WEBPACK_IMPORTED_MODULE_2__.t('return `@darkcolor` if `@color1 is> 43% luma` otherwise return `@lightcolor`, see notes')
    },
    {
        'name': 'multiply',
        'example': 'multiply(@color1, @color2);'
    },
    {
        'name': 'screen',
        'example': 'screen(@color1, @color2);'
    },
    {
        'name': 'overlay',
        'example': 'overlay(@color1, @color2);'
    },
    {
        'name': 'softlight',
        'example': 'softlight(@color1, @color2);'
    },
    {
        'name': 'hardlight',
        'example': 'hardlight(@color1, @color2);'
    },
    {
        'name': 'difference',
        'example': 'difference(@color1, @color2);'
    },
    {
        'name': 'exclusion',
        'example': 'exclusion(@color1, @color2);'
    },
    {
        'name': 'average',
        'example': 'average(@color1, @color2);'
    },
    {
        'name': 'negation',
        'example': 'negation(@color1, @color2);'
    }
];


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/lint.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/lint.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LintVisitor: () => (/* binding */ LintVisitor)
/* harmony export */ });
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _languageFacts_facts__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../languageFacts/facts */ "../../node_modules/vscode-css-languageservice/lib/esm/languageFacts/facts.js");
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _utils_arrays__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arrays */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/arrays.js");
/* harmony import */ var _lintRules__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lintRules */ "../../node_modules/vscode-css-languageservice/lib/esm/services/lintRules.js");
/* harmony import */ var _lintUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lintUtil */ "../../node_modules/vscode-css-languageservice/lib/esm/services/lintUtil.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/







class NodesByRootMap {
    constructor() {
        this.data = {};
    }
    add(root, name, node) {
        let entry = this.data[root];
        if (!entry) {
            entry = { nodes: [], names: [] };
            this.data[root] = entry;
        }
        entry.names.push(name);
        if (node) {
            entry.nodes.push(node);
        }
    }
}
class LintVisitor {
    static entries(node, document, settings, cssDataManager, entryFilter) {
        const visitor = new LintVisitor(document, settings, cssDataManager);
        node.acceptVisitor(visitor);
        visitor.completeValidations();
        return visitor.getEntries(entryFilter);
    }
    constructor(document, settings, cssDataManager) {
        this.cssDataManager = cssDataManager;
        this.warnings = [];
        this.settings = settings;
        this.documentText = document.getText();
        this.keyframes = new NodesByRootMap();
        this.validProperties = {};
        const properties = settings.getSetting(_lintRules__WEBPACK_IMPORTED_MODULE_3__.Settings.ValidProperties);
        if (Array.isArray(properties)) {
            properties.forEach((p) => {
                if (typeof p === 'string') {
                    const name = p.trim().toLowerCase();
                    if (name.length) {
                        this.validProperties[name] = true;
                    }
                }
            });
        }
    }
    isValidPropertyDeclaration(element) {
        const propertyName = element.fullPropertyName;
        return this.validProperties[propertyName];
    }
    fetch(input, s) {
        const elements = [];
        for (const curr of input) {
            if (curr.fullPropertyName === s) {
                elements.push(curr);
            }
        }
        return elements;
    }
    fetchWithValue(input, s, v) {
        const elements = [];
        for (const inputElement of input) {
            if (inputElement.fullPropertyName === s) {
                const expression = inputElement.node.getValue();
                if (expression && this.findValueInExpression(expression, v)) {
                    elements.push(inputElement);
                }
            }
        }
        return elements;
    }
    findValueInExpression(expression, v) {
        let found = false;
        expression.accept(node => {
            if (node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Identifier && node.matches(v)) {
                found = true;
            }
            return !found;
        });
        return found;
    }
    getEntries(filter = (_parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Level.Warning | _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Level.Error)) {
        return this.warnings.filter(entry => {
            return (entry.getLevel() & filter) !== 0;
        });
    }
    addEntry(node, rule, details) {
        const entry = new _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Marker(node, rule, this.settings.getRule(rule), details);
        this.warnings.push(entry);
    }
    getMissingNames(expected, actual) {
        const expectedClone = expected.slice(0); // clone
        for (let i = 0; i < actual.length; i++) {
            const k = expectedClone.indexOf(actual[i]);
            if (k !== -1) {
                expectedClone[k] = null;
            }
        }
        let result = null;
        for (let i = 0; i < expectedClone.length; i++) {
            const curr = expectedClone[i];
            if (curr) {
                if (result === null) {
                    result = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("'{0}'", curr);
                }
                else {
                    result = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("{0}, '{1}'", result, curr);
                }
            }
        }
        return result;
    }
    visitNode(node) {
        switch (node.type) {
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.UnknownAtRule:
                return this.visitUnknownAtRule(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Keyframe:
                return this.visitKeyframe(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.FontFace:
                return this.visitFontFace(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Ruleset:
                return this.visitRuleSet(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.SimpleSelector:
                return this.visitSimpleSelector(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Function:
                return this.visitFunction(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.NumericValue:
                return this.visitNumericValue(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Import:
                return this.visitImport(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.HexColorValue:
                return this.visitHexColorValue(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Prio:
                return this.visitPrio(node);
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.IdentifierSelector:
                return this.visitIdentifierSelector(node);
        }
        return true;
    }
    completeValidations() {
        this.validateKeyframes();
    }
    visitUnknownAtRule(node) {
        const atRuleName = node.getChild(0);
        if (!atRuleName) {
            return false;
        }
        const atDirective = this.cssDataManager.getAtDirective(atRuleName.getText());
        if (atDirective) {
            return false;
        }
        this.addEntry(atRuleName, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.UnknownAtRules, `Unknown at rule ${atRuleName.getText()}`);
        return true;
    }
    visitKeyframe(node) {
        const keyword = node.getKeyword();
        if (!keyword) {
            return false;
        }
        const text = keyword.getText();
        this.keyframes.add(node.getName(), text, (text !== '@keyframes') ? keyword : null);
        return true;
    }
    validateKeyframes() {
        // @keyframe and it's vendor specific alternatives
        // @keyframe should be included
        const expected = ['@-webkit-keyframes', '@-moz-keyframes', '@-o-keyframes'];
        for (const name in this.keyframes.data) {
            const actual = this.keyframes.data[name].names;
            const needsStandard = (actual.indexOf('@keyframes') === -1);
            if (!needsStandard && actual.length === 1) {
                continue; // only the non-vendor specific keyword is used, that's fine, no warning
            }
            const missingVendorSpecific = this.getMissingNames(expected, actual);
            if (missingVendorSpecific || needsStandard) {
                for (const node of this.keyframes.data[name].nodes) {
                    if (needsStandard) {
                        const message = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Always define standard rule '@keyframes' when defining keyframes.");
                        this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.IncludeStandardPropertyWhenUsingVendorPrefix, message);
                    }
                    if (missingVendorSpecific) {
                        const message = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Always include all vendor specific rules: Missing: {0}", missingVendorSpecific);
                        this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.AllVendorPrefixes, message);
                    }
                }
            }
        }
        return true;
    }
    visitSimpleSelector(node) {
        /////////////////////////////////////////////////////////////
        //	Lint - The universal selector (*) is known to be slow.
        /////////////////////////////////////////////////////////////
        const firstChar = this.documentText.charAt(node.offset);
        if (node.length === 1 && firstChar === '*') {
            this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.UniversalSelector);
        }
        return true;
    }
    visitIdentifierSelector(node) {
        /////////////////////////////////////////////////////////////
        //	Lint - Avoid id selectors
        /////////////////////////////////////////////////////////////
        this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.AvoidIdSelector);
        return true;
    }
    visitImport(node) {
        /////////////////////////////////////////////////////////////
        //	Lint - Import statements shouldn't be used, because they aren't offering parallel downloads.
        /////////////////////////////////////////////////////////////
        this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.ImportStatemement);
        return true;
    }
    visitRuleSet(node) {
        /////////////////////////////////////////////////////////////
        //	Lint - Don't use empty rulesets.
        /////////////////////////////////////////////////////////////
        const declarations = node.getDeclarations();
        if (!declarations) {
            // syntax error
            return false;
        }
        if (!declarations.hasChildren()) {
            this.addEntry(node.getSelectors(), _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.EmptyRuleSet);
        }
        const propertyTable = [];
        for (const element of declarations.getChildren()) {
            if (element instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Declaration) {
                propertyTable.push(new _lintUtil__WEBPACK_IMPORTED_MODULE_4__.Element(element));
            }
        }
        /////////////////////////////////////////////////////////////
        // the rule warns when it finds:
        // width being used with border, border-left, border-right, padding, padding-left, or padding-right
        // height being used with border, border-top, border-bottom, padding, padding-top, or padding-bottom
        // No error when box-sizing property is specified, as it assumes the user knows what he's doing.
        // see https://github.com/CSSLint/csslint/wiki/Beware-of-box-model-size
        /////////////////////////////////////////////////////////////
        const boxModel = (0,_lintUtil__WEBPACK_IMPORTED_MODULE_4__["default"])(propertyTable);
        if (boxModel.width) {
            let properties = [];
            if (boxModel.right.value) {
                properties = (0,_utils_arrays__WEBPACK_IMPORTED_MODULE_2__.union)(properties, boxModel.right.properties);
            }
            if (boxModel.left.value) {
                properties = (0,_utils_arrays__WEBPACK_IMPORTED_MODULE_2__.union)(properties, boxModel.left.properties);
            }
            if (properties.length !== 0) {
                for (const item of properties) {
                    this.addEntry(item.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.BewareOfBoxModelSize);
                }
                this.addEntry(boxModel.width.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.BewareOfBoxModelSize);
            }
        }
        if (boxModel.height) {
            let properties = [];
            if (boxModel.top.value) {
                properties = (0,_utils_arrays__WEBPACK_IMPORTED_MODULE_2__.union)(properties, boxModel.top.properties);
            }
            if (boxModel.bottom.value) {
                properties = (0,_utils_arrays__WEBPACK_IMPORTED_MODULE_2__.union)(properties, boxModel.bottom.properties);
            }
            if (properties.length !== 0) {
                for (const item of properties) {
                    this.addEntry(item.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.BewareOfBoxModelSize);
                }
                this.addEntry(boxModel.height.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.BewareOfBoxModelSize);
            }
        }
        /////////////////////////////////////////////////////////////
        //	Properties ignored due to display
        /////////////////////////////////////////////////////////////
        // With 'display: inline-block', 'float' has no effect
        let displayElems = this.fetchWithValue(propertyTable, 'display', 'inline-block');
        if (displayElems.length > 0) {
            const elem = this.fetch(propertyTable, 'float');
            for (let index = 0; index < elem.length; index++) {
                const node = elem[index].node;
                const value = node.getValue();
                if (value && !value.matches('none')) {
                    this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.PropertyIgnoredDueToDisplay, _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("inline-block is ignored due to the float. If 'float' has a value other than 'none', the box is floated and 'display' is treated as 'block'"));
                }
            }
        }
        // With 'display: block', 'vertical-align' has no effect
        displayElems = this.fetchWithValue(propertyTable, 'display', 'block');
        if (displayElems.length > 0) {
            const elem = this.fetch(propertyTable, 'vertical-align');
            for (let index = 0; index < elem.length; index++) {
                this.addEntry(elem[index].node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.PropertyIgnoredDueToDisplay, _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Property is ignored due to the display. With 'display: block', vertical-align should not be used."));
            }
        }
        /////////////////////////////////////////////////////////////
        //	Avoid 'float'
        /////////////////////////////////////////////////////////////
        const elements = this.fetch(propertyTable, 'float');
        for (let index = 0; index < elements.length; index++) {
            const element = elements[index];
            if (!this.isValidPropertyDeclaration(element)) {
                this.addEntry(element.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.AvoidFloat);
            }
        }
        /////////////////////////////////////////////////////////////
        //	Don't use duplicate declarations.
        /////////////////////////////////////////////////////////////
        for (let i = 0; i < propertyTable.length; i++) {
            const element = propertyTable[i];
            if (element.fullPropertyName !== 'background' && !this.validProperties[element.fullPropertyName]) {
                const value = element.node.getValue();
                if (value && this.documentText.charAt(value.offset) !== '-') {
                    const elements = this.fetch(propertyTable, element.fullPropertyName);
                    if (elements.length > 1) {
                        for (let k = 0; k < elements.length; k++) {
                            const value = elements[k].node.getValue();
                            if (value && this.documentText.charAt(value.offset) !== '-' && elements[k] !== element) {
                                this.addEntry(element.node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.DuplicateDeclarations);
                            }
                        }
                    }
                }
            }
        }
        /////////////////////////////////////////////////////////////
        //	Unknown propery & When using a vendor-prefixed gradient, make sure to use them all.
        /////////////////////////////////////////////////////////////
        const isExportBlock = node.getSelectors().matches(":export");
        if (!isExportBlock) {
            const propertiesBySuffix = new NodesByRootMap();
            let containsUnknowns = false;
            for (const element of propertyTable) {
                const decl = element.node;
                if (this.isCSSDeclaration(decl)) {
                    let name = element.fullPropertyName;
                    const firstChar = name.charAt(0);
                    if (firstChar === '-') {
                        if (name.charAt(1) !== '-') { // avoid css variables
                            if (!this.cssDataManager.isKnownProperty(name) && !this.validProperties[name]) {
                                this.addEntry(decl.getProperty(), _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.UnknownVendorSpecificProperty);
                            }
                            const nonPrefixedName = decl.getNonPrefixedPropertyName();
                            propertiesBySuffix.add(nonPrefixedName, name, decl.getProperty());
                        }
                    }
                    else {
                        const fullName = name;
                        if (firstChar === '*' || firstChar === '_') {
                            this.addEntry(decl.getProperty(), _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.IEStarHack);
                            name = name.substr(1);
                        }
                        // _property and *property might be contributed via custom data
                        if (!this.cssDataManager.isKnownProperty(fullName) && !this.cssDataManager.isKnownProperty(name)) {
                            if (!this.validProperties[name]) {
                                this.addEntry(decl.getProperty(), _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.UnknownProperty, _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Unknown property: '{0}'", decl.getFullPropertyName()));
                            }
                        }
                        propertiesBySuffix.add(name, name, null); // don't pass the node as we don't show errors on the standard
                    }
                }
                else {
                    containsUnknowns = true;
                }
            }
            if (!containsUnknowns) { // don't perform this test if there are
                for (const suffix in propertiesBySuffix.data) {
                    const entry = propertiesBySuffix.data[suffix];
                    const actual = entry.names;
                    const needsStandard = this.cssDataManager.isStandardProperty(suffix) && (actual.indexOf(suffix) === -1);
                    if (!needsStandard && actual.length === 1) {
                        continue; // only the non-vendor specific rule is used, that's fine, no warning
                    }
                    /**
                     * We should ignore missing standard properties, if there's an explicit contextual reference to a
                     * vendor specific pseudo-element selector with the same vendor (prefix)
                     *
                     * (See https://github.com/microsoft/vscode/issues/164350)
                     */
                    const entriesThatNeedStandard = new Set(needsStandard ? entry.nodes : []);
                    if (needsStandard) {
                        const pseudoElements = this.getContextualVendorSpecificPseudoElements(node);
                        for (const node of entry.nodes) {
                            const propertyName = node.getName();
                            const prefix = propertyName.substring(0, propertyName.length - suffix.length);
                            if (pseudoElements.some(x => x.startsWith(prefix))) {
                                entriesThatNeedStandard.delete(node);
                            }
                        }
                    }
                    const expected = [];
                    for (let i = 0, len = LintVisitor.prefixes.length; i < len; i++) {
                        const prefix = LintVisitor.prefixes[i];
                        if (this.cssDataManager.isStandardProperty(prefix + suffix)) {
                            expected.push(prefix + suffix);
                        }
                    }
                    const missingVendorSpecific = this.getMissingNames(expected, actual);
                    if (missingVendorSpecific || needsStandard) {
                        for (const node of entry.nodes) {
                            if (needsStandard && entriesThatNeedStandard.has(node)) {
                                const message = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Also define the standard property '{0}' for compatibility", suffix);
                                this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.IncludeStandardPropertyWhenUsingVendorPrefix, message);
                            }
                            if (missingVendorSpecific) {
                                const message = _vscode_l10n__WEBPACK_IMPORTED_MODULE_5__.t("Always include all vendor specific properties: Missing: {0}", missingVendorSpecific);
                                this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.AllVendorPrefixes, message);
                            }
                        }
                    }
                }
            }
        }
        return true;
    }
    /**
     * Walks up the syntax tree (starting from given `node`) and captures vendor
     * specific pseudo-element selectors.
     * @returns An array of vendor specific pseudo-elements; or empty if none
     * was found.
     */
    getContextualVendorSpecificPseudoElements(node) {
        function walkDown(s, n) {
            for (const child of n.getChildren()) {
                if (child.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.PseudoSelector) {
                    const pseudoElement = child.getChildren()[0]?.getText();
                    if (pseudoElement) {
                        s.add(pseudoElement);
                    }
                }
                walkDown(s, child);
            }
        }
        function walkUp(s, n) {
            if (n.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Ruleset) {
                for (const selector of n.getSelectors().getChildren()) {
                    walkDown(s, selector);
                }
            }
            return n.parent ? walkUp(s, n.parent) : undefined;
        }
        const result = new Set();
        walkUp(result, node);
        return Array.from(result);
    }
    visitPrio(node) {
        /////////////////////////////////////////////////////////////
        //	Don't use !important
        /////////////////////////////////////////////////////////////
        this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.AvoidImportant);
        return true;
    }
    visitNumericValue(node) {
        /////////////////////////////////////////////////////////////
        //	0 has no following unit
        /////////////////////////////////////////////////////////////
        const funcDecl = node.findParent(_parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Function);
        if (funcDecl && funcDecl.getName() === 'calc') {
            return true;
        }
        const decl = node.findParent(_parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Declaration);
        if (decl) {
            const declValue = decl.getValue();
            if (declValue) {
                const value = node.getValue();
                if (!value.unit || _languageFacts_facts__WEBPACK_IMPORTED_MODULE_0__.units.length.indexOf(value.unit.toLowerCase()) === -1) {
                    return true;
                }
                if (parseFloat(value.value) === 0.0 && !!value.unit && !this.validProperties[decl.getFullPropertyName()]) {
                    this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.ZeroWithUnit);
                }
            }
        }
        return true;
    }
    visitFontFace(node) {
        const declarations = node.getDeclarations();
        if (!declarations) {
            // syntax error
            return false;
        }
        let definesSrc = false, definesFontFamily = false;
        let containsUnknowns = false;
        for (const node of declarations.getChildren()) {
            if (this.isCSSDeclaration(node)) {
                const name = node.getProperty().getName().toLowerCase();
                if (name === 'src') {
                    definesSrc = true;
                }
                if (name === 'font-family') {
                    definesFontFamily = true;
                }
            }
            else {
                containsUnknowns = true;
            }
        }
        if (!containsUnknowns && (!definesSrc || !definesFontFamily)) {
            this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.RequiredPropertiesForFontFace);
        }
        return true;
    }
    isCSSDeclaration(node) {
        if (node instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.Declaration) {
            if (!node.getValue()) {
                return false;
            }
            const property = node.getProperty();
            if (!property) {
                return false;
            }
            const identifier = property.getIdentifier();
            if (!identifier || identifier.containsInterpolation()) {
                return false;
            }
            return true;
        }
        return false;
    }
    visitHexColorValue(node) {
        // Rule: #eeff0011 or #eeff00 or #ef01 or #ef0
        const length = node.length;
        if (length !== 9 && length !== 7 && length !== 5 && length !== 4) {
            this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.HexColorLength);
        }
        return false;
    }
    visitFunction(node) {
        const fnName = node.getName().toLowerCase();
        let expectedAttrCount = -1;
        let actualAttrCount = 0;
        switch (fnName) {
            case 'rgb(':
            case 'hsl(':
                expectedAttrCount = 3;
                break;
            case 'rgba(':
            case 'hsla(':
                expectedAttrCount = 4;
                break;
        }
        if (expectedAttrCount !== -1) {
            node.getArguments().accept(n => {
                if (n instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.BinaryExpression) {
                    actualAttrCount += 1;
                    return false;
                }
                return true;
            });
            if (actualAttrCount !== expectedAttrCount) {
                this.addEntry(node, _lintRules__WEBPACK_IMPORTED_MODULE_3__.Rules.ArgsInColorFunction);
            }
        }
        return true;
    }
}
LintVisitor.prefixes = [
    '-ms-', '-moz-', '-o-', '-webkit-', // Quite common
    //		'-xv-', '-atsc-', '-wap-', '-khtml-', 'mso-', 'prince-', '-ah-', '-hp-', '-ro-', '-rim-', '-tc-' // Quite un-common
];


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/lintRules.js":
/*!***********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/lintRules.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LintConfigurationSettings: () => (/* binding */ LintConfigurationSettings),
/* harmony export */   Rule: () => (/* binding */ Rule),
/* harmony export */   Rules: () => (/* binding */ Rules),
/* harmony export */   Setting: () => (/* binding */ Setting),
/* harmony export */   Settings: () => (/* binding */ Settings)
/* harmony export */ });
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_1__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



const Warning = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Warning;
const Error = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Error;
const Ignore = _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Ignore;
class Rule {
    constructor(id, message, defaultValue) {
        this.id = id;
        this.message = message;
        this.defaultValue = defaultValue;
        // nothing to do
    }
}
class Setting {
    constructor(id, message, defaultValue) {
        this.id = id;
        this.message = message;
        this.defaultValue = defaultValue;
        // nothing to do
    }
}
const Rules = {
    AllVendorPrefixes: new Rule('compatibleVendorPrefixes', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("When using a vendor-specific prefix make sure to also include all other vendor-specific properties"), Ignore),
    IncludeStandardPropertyWhenUsingVendorPrefix: new Rule('vendorPrefix', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("When using a vendor-specific prefix also include the standard property"), Warning),
    DuplicateDeclarations: new Rule('duplicateProperties', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Do not use duplicate style definitions"), Ignore),
    EmptyRuleSet: new Rule('emptyRules', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Do not use empty rulesets"), Warning),
    ImportStatemement: new Rule('importStatement', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Import statements do not load in parallel"), Ignore),
    BewareOfBoxModelSize: new Rule('boxModel', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Do not use width or height when using padding or border"), Ignore),
    UniversalSelector: new Rule('universalSelector', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("The universal selector (*) is known to be slow"), Ignore),
    ZeroWithUnit: new Rule('zeroUnits', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("No unit for zero needed"), Ignore),
    RequiredPropertiesForFontFace: new Rule('fontFaceProperties', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("@font-face rule must define 'src' and 'font-family' properties"), Warning),
    HexColorLength: new Rule('hexColorLength', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Hex colors must consist of three, four, six or eight hex numbers"), Error),
    ArgsInColorFunction: new Rule('argumentsInColorFunction', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Invalid number of parameters"), Error),
    UnknownProperty: new Rule('unknownProperties', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Unknown property."), Warning),
    UnknownAtRules: new Rule('unknownAtRules', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Unknown at-rule."), Warning),
    IEStarHack: new Rule('ieHack', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("IE hacks are only necessary when supporting IE7 and older"), Ignore),
    UnknownVendorSpecificProperty: new Rule('unknownVendorSpecificProperties', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Unknown vendor specific property."), Ignore),
    PropertyIgnoredDueToDisplay: new Rule('propertyIgnoredDueToDisplay', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Property is ignored due to the display."), Warning),
    AvoidImportant: new Rule('important', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Avoid using !important. It is an indication that the specificity of the entire CSS has gotten out of control and needs to be refactored."), Ignore),
    AvoidFloat: new Rule('float', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Avoid using 'float'. Floats lead to fragile CSS that is easy to break if one aspect of the layout changes."), Ignore),
    AvoidIdSelector: new Rule('idSelector', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("Selectors should not contain IDs because these rules are too tightly coupled with the HTML."), Ignore),
};
const Settings = {
    ValidProperties: new Setting('validProperties', _vscode_l10n__WEBPACK_IMPORTED_MODULE_1__.t("A list of properties that are not validated against the `unknownProperties` rule."), [])
};
class LintConfigurationSettings {
    constructor(conf = {}) {
        this.conf = conf;
    }
    getRule(rule) {
        if (this.conf.hasOwnProperty(rule.id)) {
            const level = toLevel(this.conf[rule.id]);
            if (level) {
                return level;
            }
        }
        return rule.defaultValue;
    }
    getSetting(setting) {
        return this.conf[setting.id];
    }
}
function toLevel(level) {
    switch (level) {
        case 'ignore': return _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Ignore;
        case 'warning': return _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Warning;
        case 'error': return _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.Level.Error;
    }
    return null;
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/lintUtil.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/lintUtil.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Element: () => (/* binding */ Element),
/* harmony export */   "default": () => (/* binding */ calculateBoxModel)
/* harmony export */ });
/* harmony import */ var _utils_arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arrays */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/arrays.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/


class Element {
    constructor(decl) {
        this.fullPropertyName = decl.getFullPropertyName().toLowerCase();
        this.node = decl;
    }
}
function setSide(model, side, value, property) {
    const state = model[side];
    state.value = value;
    if (value) {
        if (!(0,_utils_arrays__WEBPACK_IMPORTED_MODULE_0__.includes)(state.properties, property)) {
            state.properties.push(property);
        }
    }
}
function setAllSides(model, value, property) {
    setSide(model, 'top', value, property);
    setSide(model, 'right', value, property);
    setSide(model, 'bottom', value, property);
    setSide(model, 'left', value, property);
}
function updateModelWithValue(model, side, value, property) {
    if (side === 'top' || side === 'right' ||
        side === 'bottom' || side === 'left') {
        setSide(model, side, value, property);
    }
    else {
        setAllSides(model, value, property);
    }
}
function updateModelWithList(model, values, property) {
    switch (values.length) {
        case 1:
            updateModelWithValue(model, undefined, values[0], property);
            break;
        case 2:
            updateModelWithValue(model, 'top', values[0], property);
            updateModelWithValue(model, 'bottom', values[0], property);
            updateModelWithValue(model, 'right', values[1], property);
            updateModelWithValue(model, 'left', values[1], property);
            break;
        case 3:
            updateModelWithValue(model, 'top', values[0], property);
            updateModelWithValue(model, 'right', values[1], property);
            updateModelWithValue(model, 'left', values[1], property);
            updateModelWithValue(model, 'bottom', values[2], property);
            break;
        case 4:
            updateModelWithValue(model, 'top', values[0], property);
            updateModelWithValue(model, 'right', values[1], property);
            updateModelWithValue(model, 'bottom', values[2], property);
            updateModelWithValue(model, 'left', values[3], property);
            break;
    }
}
function matches(value, candidates) {
    for (let candidate of candidates) {
        if (value.matches(candidate)) {
            return true;
        }
    }
    return false;
}
/**
 * @param allowsKeywords whether the initial value of property is zero, so keywords `initial` and `unset` count as zero
 * @return `true` if this node represents a non-zero border; otherwise, `false`
 */
function checkLineWidth(value, allowsKeywords = true) {
    if (allowsKeywords && matches(value, ['initial', 'unset'])) {
        return false;
    }
    // a <length> is a value and a unit
    // so use `parseFloat` to strip the unit
    return parseFloat(value.getText()) !== 0;
}
function checkLineWidthList(nodes, allowsKeywords = true) {
    return nodes.map(node => checkLineWidth(node, allowsKeywords));
}
/**
 * @param allowsKeywords whether keywords `initial` and `unset` count as zero
 * @return `true` if this node represents a non-zero border; otherwise, `false`
 */
function checkLineStyle(valueNode, allowsKeywords = true) {
    if (matches(valueNode, ['none', 'hidden'])) {
        return false;
    }
    if (allowsKeywords && matches(valueNode, ['initial', 'unset'])) {
        return false;
    }
    return true;
}
function checkLineStyleList(nodes, allowsKeywords = true) {
    return nodes.map(node => checkLineStyle(node, allowsKeywords));
}
function checkBorderShorthand(node) {
    const children = node.getChildren();
    // the only child can be a keyword, a <line-width>, or a <line-style>
    // if either check returns false, the result is no border
    if (children.length === 1) {
        const value = children[0];
        return checkLineWidth(value) && checkLineStyle(value);
    }
    // multiple children can't contain keywords
    // if any child means no border, the result is no border
    for (const child of children) {
        const value = child;
        if (!checkLineWidth(value, /* allowsKeywords: */ false) ||
            !checkLineStyle(value, /* allowsKeywords: */ false)) {
            return false;
        }
    }
    return true;
}
function calculateBoxModel(propertyTable) {
    const model = {
        top: { value: false, properties: [] },
        right: { value: false, properties: [] },
        bottom: { value: false, properties: [] },
        left: { value: false, properties: [] },
    };
    for (const property of propertyTable) {
        const value = property.node.value;
        if (typeof value === 'undefined') {
            continue;
        }
        switch (property.fullPropertyName) {
            case 'box-sizing':
                // has `box-sizing`, bail out
                return {
                    top: { value: false, properties: [] },
                    right: { value: false, properties: [] },
                    bottom: { value: false, properties: [] },
                    left: { value: false, properties: [] },
                };
            case 'width':
                model.width = property;
                break;
            case 'height':
                model.height = property;
                break;
            default:
                const segments = property.fullPropertyName.split('-');
                switch (segments[0]) {
                    case 'border':
                        switch (segments[1]) {
                            case undefined:
                            case 'top':
                            case 'right':
                            case 'bottom':
                            case 'left':
                                switch (segments[2]) {
                                    case undefined:
                                        updateModelWithValue(model, segments[1], checkBorderShorthand(value), property);
                                        break;
                                    case 'width':
                                        // the initial value of `border-width` is `medium`, not zero
                                        updateModelWithValue(model, segments[1], checkLineWidth(value, false), property);
                                        break;
                                    case 'style':
                                        // the initial value of `border-style` is `none`
                                        updateModelWithValue(model, segments[1], checkLineStyle(value, true), property);
                                        break;
                                }
                                break;
                            case 'width':
                                // the initial value of `border-width` is `medium`, not zero
                                updateModelWithList(model, checkLineWidthList(value.getChildren(), false), property);
                                break;
                            case 'style':
                                // the initial value of `border-style` is `none`
                                updateModelWithList(model, checkLineStyleList(value.getChildren(), true), property);
                                break;
                        }
                        break;
                    case 'padding':
                        if (segments.length === 1) {
                            // the initial value of `padding` is zero
                            updateModelWithList(model, checkLineWidthList(value.getChildren(), true), property);
                        }
                        else {
                            // the initial value of `padding` is zero
                            updateModelWithValue(model, segments[1], checkLineWidth(value, true), property);
                        }
                        break;
                }
                break;
        }
    }
    return model;
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/pathCompletion.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/pathCompletion.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PathCompletionParticipant: () => (/* binding */ PathCompletionParticipant)
/* harmony export */ });
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* harmony import */ var _utils_strings__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/strings */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/strings.js");
/* harmony import */ var _utils_resources__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/resources */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/resources.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/



class PathCompletionParticipant {
    constructor(readDirectory) {
        this.readDirectory = readDirectory;
        this.literalCompletions = [];
        this.importCompletions = [];
    }
    onCssURILiteralValue(context) {
        this.literalCompletions.push(context);
    }
    onCssImportPath(context) {
        this.importCompletions.push(context);
    }
    async computeCompletions(document, documentContext) {
        const result = { items: [], isIncomplete: false };
        for (const literalCompletion of this.literalCompletions) {
            const uriValue = literalCompletion.uriValue;
            const fullValue = stripQuotes(uriValue);
            if (fullValue === '.' || fullValue === '..') {
                result.isIncomplete = true;
            }
            else {
                const items = await this.providePathSuggestions(uriValue, literalCompletion.position, literalCompletion.range, document, documentContext);
                for (let item of items) {
                    result.items.push(item);
                }
            }
        }
        for (const importCompletion of this.importCompletions) {
            const pathValue = importCompletion.pathValue;
            const fullValue = stripQuotes(pathValue);
            if (fullValue === '.' || fullValue === '..') {
                result.isIncomplete = true;
            }
            else {
                let suggestions = await this.providePathSuggestions(pathValue, importCompletion.position, importCompletion.range, document, documentContext);
                if (document.languageId === 'scss') {
                    suggestions.forEach(s => {
                        if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.startsWith)(s.label, '_') && (0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.endsWith)(s.label, '.scss')) {
                            if (s.textEdit) {
                                s.textEdit.newText = s.label.slice(1, -5);
                            }
                            else {
                                s.label = s.label.slice(1, -5);
                            }
                        }
                    });
                }
                for (let item of suggestions) {
                    result.items.push(item);
                }
            }
        }
        return result;
    }
    async providePathSuggestions(pathValue, position, range, document, documentContext) {
        const fullValue = stripQuotes(pathValue);
        const isValueQuoted = (0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.startsWith)(pathValue, `'`) || (0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.startsWith)(pathValue, `"`);
        const valueBeforeCursor = isValueQuoted
            ? fullValue.slice(0, position.character - (range.start.character + 1))
            : fullValue.slice(0, position.character - range.start.character);
        const currentDocUri = document.uri;
        const fullValueRange = isValueQuoted ? shiftRange(range, 1, -1) : range;
        const replaceRange = pathToReplaceRange(valueBeforeCursor, fullValue, fullValueRange);
        const valueBeforeLastSlash = valueBeforeCursor.substring(0, valueBeforeCursor.lastIndexOf('/') + 1); // keep the last slash
        let parentDir = documentContext.resolveReference(valueBeforeLastSlash || '.', currentDocUri);
        if (parentDir) {
            try {
                const result = [];
                const infos = await this.readDirectory(parentDir);
                for (const [name, type] of infos) {
                    // Exclude paths that start with `.`
                    if (name.charCodeAt(0) !== CharCode_dot && (type === _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.FileType.Directory || (0,_utils_resources__WEBPACK_IMPORTED_MODULE_2__.joinPath)(parentDir, name) !== currentDocUri)) {
                        result.push(createCompletionItem(name, type === _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.FileType.Directory, replaceRange));
                    }
                }
                return result;
            }
            catch (e) {
                // ignore
            }
        }
        return [];
    }
}
const CharCode_dot = '.'.charCodeAt(0);
function stripQuotes(fullValue) {
    if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.startsWith)(fullValue, `'`) || (0,_utils_strings__WEBPACK_IMPORTED_MODULE_1__.startsWith)(fullValue, `"`)) {
        return fullValue.slice(1, -1);
    }
    else {
        return fullValue;
    }
}
function pathToReplaceRange(valueBeforeCursor, fullValue, fullValueRange) {
    let replaceRange;
    const lastIndexOfSlash = valueBeforeCursor.lastIndexOf('/');
    if (lastIndexOfSlash === -1) {
        replaceRange = fullValueRange;
    }
    else {
        // For cases where cursor is in the middle of attribute value, like <script src="./s|rc/test.js">
        // Find the last slash before cursor, and calculate the start of replace range from there
        const valueAfterLastSlash = fullValue.slice(lastIndexOfSlash + 1);
        const startPos = shiftPosition(fullValueRange.end, -valueAfterLastSlash.length);
        // If whitespace exists, replace until it
        const whitespaceIndex = valueAfterLastSlash.indexOf(' ');
        let endPos;
        if (whitespaceIndex !== -1) {
            endPos = shiftPosition(startPos, whitespaceIndex);
        }
        else {
            endPos = fullValueRange.end;
        }
        replaceRange = _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(startPos, endPos);
    }
    return replaceRange;
}
function createCompletionItem(name, isDir, replaceRange) {
    if (isDir) {
        name = name + '/';
        return {
            label: escapePath(name),
            kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.Folder,
            textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(replaceRange, escapePath(name)),
            command: {
                title: 'Suggest',
                command: 'editor.action.triggerSuggest'
            }
        };
    }
    else {
        return {
            label: escapePath(name),
            kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.CompletionItemKind.File,
            textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.TextEdit.replace(replaceRange, escapePath(name))
        };
    }
}
// Escape https://www.w3.org/TR/CSS1/#url
function escapePath(p) {
    return p.replace(/(\s|\(|\)|,|"|')/g, '\\$1');
}
function shiftPosition(pos, offset) {
    return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Position.create(pos.line, pos.character + offset);
}
function shiftRange(range, startOffset, endOffset) {
    const start = shiftPosition(range.start, startOffset);
    const end = shiftPosition(range.end, endOffset);
    return _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_0__.Range.create(start, end);
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/scssCompletion.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/scssCompletion.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SCSSCompletion: () => (/* binding */ SCSSCompletion)
/* harmony export */ });
/* harmony import */ var _cssCompletion__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssCompletion */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssCompletion.js");
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../cssLanguageTypes */ "../../node_modules/vscode-css-languageservice/lib/esm/cssLanguageTypes.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_3__);
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





const sassDocumentationName = _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Sass documentation');
class SCSSCompletion extends _cssCompletion__WEBPACK_IMPORTED_MODULE_0__.CSSCompletion {
    constructor(lsServiceOptions, cssDataManager) {
        super('$', lsServiceOptions, cssDataManager);
        addReferencesToDocumentation(SCSSCompletion.scssModuleLoaders);
        addReferencesToDocumentation(SCSSCompletion.scssModuleBuiltIns);
    }
    isImportPathParent(type) {
        return type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Forward
            || type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Use
            || super.isImportPathParent(type);
    }
    getCompletionForImportPath(importPathNode, result) {
        const parentType = importPathNode.getParent().type;
        if (parentType === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Forward || parentType === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Use) {
            for (let p of SCSSCompletion.scssModuleBuiltIns) {
                const item = {
                    label: p.label,
                    documentation: p.documentation,
                    textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.TextEdit.replace(this.getCompletionRange(importPathNode), `'${p.label}'`),
                    kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Module
                };
                result.items.push(item);
            }
        }
        return super.getCompletionForImportPath(importPathNode, result);
    }
    createReplaceFunction() {
        let tabStopCounter = 1;
        return (_match, p1) => {
            return '\\' + p1 + ': ${' + tabStopCounter++ + ':' + (SCSSCompletion.variableDefaults[p1] || '') + '}';
        };
    }
    createFunctionProposals(proposals, existingNode, sortToEnd, result) {
        for (const p of proposals) {
            const insertText = p.func.replace(/\[?(\$\w+)\]?/g, this.createReplaceFunction());
            const label = p.func.substr(0, p.func.indexOf('('));
            const item = {
                label: label,
                detail: p.func,
                documentation: p.desc,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.TextEdit.replace(this.getCompletionRange(existingNode), insertText),
                insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Function
            };
            if (sortToEnd) {
                item.sortText = 'z';
            }
            result.items.push(item);
        }
        return result;
    }
    getCompletionsForSelector(ruleSet, isNested, result) {
        this.createFunctionProposals(SCSSCompletion.selectorFuncs, null, true, result);
        return super.getCompletionsForSelector(ruleSet, isNested, result);
    }
    getTermProposals(entry, existingNode, result) {
        let functions = SCSSCompletion.builtInFuncs;
        if (entry) {
            functions = functions.filter(f => !f.type || !entry.restrictions || entry.restrictions.indexOf(f.type) !== -1);
        }
        this.createFunctionProposals(functions, existingNode, true, result);
        return super.getTermProposals(entry, existingNode, result);
    }
    getColorProposals(entry, existingNode, result) {
        this.createFunctionProposals(SCSSCompletion.colorProposals, existingNode, false, result);
        return super.getColorProposals(entry, existingNode, result);
    }
    getCompletionsForDeclarationProperty(declaration, result) {
        this.getCompletionForAtDirectives(result);
        this.getCompletionsForSelector(null, true, result);
        return super.getCompletionsForDeclarationProperty(declaration, result);
    }
    getCompletionsForExtendsReference(_extendsRef, existingNode, result) {
        const symbols = this.getSymbolContext().findSymbolsAtOffset(this.offset, _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.ReferenceType.Rule);
        for (const symbol of symbols) {
            const suggest = {
                label: symbol.name,
                textEdit: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.TextEdit.replace(this.getCompletionRange(existingNode), symbol.name),
                kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Function,
            };
            result.items.push(suggest);
        }
        return result;
    }
    getCompletionForAtDirectives(result) {
        result.items.push(...SCSSCompletion.scssAtDirectives);
        return result;
    }
    getCompletionForTopLevel(result) {
        this.getCompletionForAtDirectives(result);
        this.getCompletionForModuleLoaders(result);
        super.getCompletionForTopLevel(result);
        return result;
    }
    getCompletionForModuleLoaders(result) {
        result.items.push(...SCSSCompletion.scssModuleLoaders);
        return result;
    }
}
SCSSCompletion.variableDefaults = {
    '$red': '1',
    '$green': '2',
    '$blue': '3',
    '$alpha': '1.0',
    '$color': '#000000',
    '$weight': '0.5',
    '$hue': '0',
    '$saturation': '0%',
    '$lightness': '0%',
    '$degrees': '0',
    '$amount': '0',
    '$string': '""',
    '$substring': '"s"',
    '$number': '0',
    '$limit': '1'
};
SCSSCompletion.colorProposals = [
    { func: 'red($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Gets the red component of a color.') },
    { func: 'green($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Gets the green component of a color.') },
    { func: 'blue($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Gets the blue component of a color.') },
    { func: 'mix($color, $color, [$weight])', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Mixes two colors together.') },
    { func: 'hue($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Gets the hue component of a color.') },
    { func: 'saturation($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Gets the saturation component of a color.') },
    { func: 'lightness($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Gets the lightness component of a color.') },
    { func: 'adjust-hue($color, $degrees)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Changes the hue of a color.') },
    { func: 'lighten($color, $amount)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Makes a color lighter.') },
    { func: 'darken($color, $amount)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Makes a color darker.') },
    { func: 'saturate($color, $amount)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Makes a color more saturated.') },
    { func: 'desaturate($color, $amount)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Makes a color less saturated.') },
    { func: 'grayscale($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Converts a color to grayscale.') },
    { func: 'complement($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the complement of a color.') },
    { func: 'invert($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the inverse of a color.') },
    { func: 'alpha($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Gets the opacity component of a color.') },
    { func: 'opacity($color)', desc: 'Gets the alpha component (opacity) of a color.' },
    { func: 'rgba($color, $alpha)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Changes the alpha component for a color.') },
    { func: 'opacify($color, $amount)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Makes a color more opaque.') },
    { func: 'fade-in($color, $amount)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Makes a color more opaque.') },
    { func: 'transparentize($color, $amount)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Makes a color more transparent.') },
    { func: 'fade-out($color, $amount)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Makes a color more transparent.') },
    { func: 'adjust-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Increases or decreases one or more components of a color.') },
    { func: 'scale-color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Fluidly scales one or more properties of a color.') },
    { func: 'change-color($color, [$red], [$green], [$blue], [$hue], [$saturation], [$lightness], [$alpha])', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Changes one or more properties of a color.') },
    { func: 'ie-hex-str($color)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Converts a color into the format understood by IE filters.') }
];
SCSSCompletion.selectorFuncs = [
    { func: 'selector-nest($selectors…)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Nests selector beneath one another like they would be nested in the stylesheet.') },
    { func: 'selector-append($selectors…)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Appends selectors to one another without spaces in between.') },
    { func: 'selector-extend($selector, $extendee, $extender)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Extends $extendee with $extender within $selector.') },
    { func: 'selector-replace($selector, $original, $replacement)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Replaces $original with $replacement within $selector.') },
    { func: 'selector-unify($selector1, $selector2)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Unifies two selectors to produce a selector that matches elements matched by both.') },
    { func: 'is-superselector($super, $sub)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns whether $super matches all the elements $sub does, and possibly more.') },
    { func: 'simple-selectors($selector)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the simple selectors that comprise a compound selector.') },
    { func: 'selector-parse($selector)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Parses a selector into the format returned by &.') }
];
SCSSCompletion.builtInFuncs = [
    { func: 'unquote($string)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Removes quotes from a string.') },
    { func: 'quote($string)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Adds quotes to a string.') },
    { func: 'str-length($string)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the number of characters in a string.') },
    { func: 'str-insert($string, $insert, $index)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Inserts $insert into $string at $index.') },
    { func: 'str-index($string, $substring)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the index of the first occurance of $substring in $string.') },
    { func: 'str-slice($string, $start-at, [$end-at])', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Extracts a substring from $string.') },
    { func: 'to-upper-case($string)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Converts a string to upper case.') },
    { func: 'to-lower-case($string)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Converts a string to lower case.') },
    { func: 'percentage($number)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Converts a unitless number to a percentage.'), type: 'percentage' },
    { func: 'round($number)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Rounds a number to the nearest whole number.') },
    { func: 'ceil($number)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Rounds a number up to the next whole number.') },
    { func: 'floor($number)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Rounds a number down to the previous whole number.') },
    { func: 'abs($number)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the absolute value of a number.') },
    { func: 'min($numbers)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Finds the minimum of several numbers.') },
    { func: 'max($numbers)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Finds the maximum of several numbers.') },
    { func: 'random([$limit])', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns a random number.') },
    { func: 'length($list)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the length of a list.') },
    { func: 'nth($list, $n)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns a specific item in a list.') },
    { func: 'set-nth($list, $n, $value)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Replaces the nth item in a list.') },
    { func: 'join($list1, $list2, [$separator])', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Joins together two lists into one.') },
    { func: 'append($list1, $val, [$separator])', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Appends a single value onto the end of a list.') },
    { func: 'zip($lists)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Combines several lists into a single multidimensional list.') },
    { func: 'index($list, $value)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the position of a value within a list.') },
    { func: 'list-separator(#list)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the separator of a list.') },
    { func: 'map-get($map, $key)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the value in a map associated with a given key.') },
    { func: 'map-merge($map1, $map2)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Merges two maps together into a new map.') },
    { func: 'map-remove($map, $keys)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns a new map with keys removed.') },
    { func: 'map-keys($map)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns a list of all keys in a map.') },
    { func: 'map-values($map)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns a list of all values in a map.') },
    { func: 'map-has-key($map, $key)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns whether a map has a value associated with a given key.') },
    { func: 'keywords($args)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the keywords passed to a function that takes variable arguments.') },
    { func: 'feature-exists($feature)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns whether a feature exists in the current Sass runtime.') },
    { func: 'variable-exists($name)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns whether a variable with the given name exists in the current scope.') },
    { func: 'global-variable-exists($name)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns whether a variable with the given name exists in the global scope.') },
    { func: 'function-exists($name)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns whether a function with the given name exists.') },
    { func: 'mixin-exists($name)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns whether a mixin with the given name exists.') },
    { func: 'inspect($value)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the string representation of a value as it would be represented in Sass.') },
    { func: 'type-of($value)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the type of a value.') },
    { func: 'unit($number)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns the unit(s) associated with a number.') },
    { func: 'unitless($number)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns whether a number has units.') },
    { func: 'comparable($number1, $number2)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Returns whether two numbers can be added, subtracted, or compared.') },
    { func: 'call($name, $args…)', desc: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Dynamically calls a Sass function.') }
];
SCSSCompletion.scssAtDirectives = [
    {
        label: "@extend",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Inherits the styles of another selector."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@at-root",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Causes one or more rules to be emitted at the root of the document."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@debug",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Prints the value of an expression to the standard error output stream. Useful for debugging complicated Sass files."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@warn",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Prints the value of an expression to the standard error output stream. Useful for libraries that need to warn users of deprecations or recovering from minor mixin usage mistakes. Warnings can be turned off with the `--quiet` command-line option or the `:quiet` Sass option."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@error",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Throws the value of an expression as a fatal error with stack trace. Useful for validating arguments to mixins and functions."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@if",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Includes the body if the expression does not evaluate to `false` or `null`."),
        insertText: "@if ${1:expr} {\n\t$0\n}",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@for",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("For loop that repeatedly outputs a set of styles for each `$var` in the `from/through` or `from/to` clause."),
        insertText: "@for \\$${1:var} from ${2:start} ${3|to,through|} ${4:end} {\n\t$0\n}",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@each",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Each loop that sets `$var` to each item in the list or map, then outputs the styles it contains using that value of `$var`."),
        insertText: "@each \\$${1:var} in ${2:list} {\n\t$0\n}",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@while",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("While loop that takes an expression and repeatedly outputs the nested styles until the statement evaluates to `false`."),
        insertText: "@while ${1:condition} {\n\t$0\n}",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@mixin",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Defines styles that can be re-used throughout the stylesheet with `@include`."),
        insertText: "@mixin ${1:name} {\n\t$0\n}",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@include",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Includes the styles defined by another mixin into the current rule."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@function",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Defines complex operations that can be re-used throughout stylesheets."),
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    }
];
SCSSCompletion.scssModuleLoaders = [
    {
        label: "@use",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Loads mixins, functions, and variables from other Sass stylesheets as 'modules', and combines CSS from multiple stylesheets together."),
        references: [{ name: sassDocumentationName, url: 'https://sass-lang.com/documentation/at-rules/use' }],
        insertText: "@use $0;",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
    {
        label: "@forward",
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Loads a Sass stylesheet and makes its mixins, functions, and variables available when this stylesheet is loaded with the @use rule."),
        references: [{ name: sassDocumentationName, url: 'https://sass-lang.com/documentation/at-rules/forward' }],
        insertText: "@forward $0;",
        insertTextFormat: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.InsertTextFormat.Snippet,
        kind: _cssLanguageTypes__WEBPACK_IMPORTED_MODULE_2__.CompletionItemKind.Keyword
    },
];
SCSSCompletion.scssModuleBuiltIns = [
    {
        label: 'sass:math',
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Provides functions that operate on numbers.'),
        references: [{ name: sassDocumentationName, url: 'https://sass-lang.com/documentation/modules/math' }]
    },
    {
        label: 'sass:string',
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Makes it easy to combine, search, or split apart strings.'),
        references: [{ name: sassDocumentationName, url: 'https://sass-lang.com/documentation/modules/string' }]
    },
    {
        label: 'sass:color',
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Generates new colors based on existing ones, making it easy to build color themes.'),
        references: [{ name: sassDocumentationName, url: 'https://sass-lang.com/documentation/modules/color' }]
    },
    {
        label: 'sass:list',
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Lets you access and modify values in lists.'),
        references: [{ name: sassDocumentationName, url: 'https://sass-lang.com/documentation/modules/list' }]
    },
    {
        label: 'sass:map',
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Makes it possible to look up the value associated with a key in a map, and much more.'),
        references: [{ name: sassDocumentationName, url: 'https://sass-lang.com/documentation/modules/map' }]
    },
    {
        label: 'sass:selector',
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Provides access to Sass’s powerful selector engine.'),
        references: [{ name: sassDocumentationName, url: 'https://sass-lang.com/documentation/modules/selector' }]
    },
    {
        label: 'sass:meta',
        documentation: _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t('Exposes the details of Sass’s inner workings.'),
        references: [{ name: sassDocumentationName, url: 'https://sass-lang.com/documentation/modules/meta' }]
    },
];
/**
 * Todo @Pine: Remove this and do it through custom data
 */
function addReferencesToDocumentation(items) {
    items.forEach(i => {
        if (i.documentation && i.references && i.references.length > 0) {
            const markdownDoc = typeof i.documentation === 'string'
                ? { kind: 'markdown', value: i.documentation }
                : { kind: 'markdown', value: i.documentation.value };
            markdownDoc.value += '\n\n';
            markdownDoc.value += i.references
                .map(r => {
                return `[${r.name}](${r.url})`;
            })
                .join(' | ');
            i.documentation = markdownDoc;
        }
    });
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/scssNavigation.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/scssNavigation.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   SCSSNavigation: () => (/* binding */ SCSSNavigation)
/* harmony export */ });
/* harmony import */ var _cssNavigation__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cssNavigation */ "../../node_modules/vscode-css-languageservice/lib/esm/services/cssNavigation.js");
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/* harmony import */ var _utils_strings__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/strings */ "../../node_modules/vscode-css-languageservice/lib/esm/utils/strings.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





class SCSSNavigation extends _cssNavigation__WEBPACK_IMPORTED_MODULE_0__.CSSNavigation {
    constructor(fileSystemProvider) {
        super(fileSystemProvider, true);
    }
    isRawStringDocumentLinkNode(node) {
        return (super.isRawStringDocumentLinkNode(node) ||
            node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Use ||
            node.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_1__.NodeType.Forward);
    }
    async mapReference(target, isRawLink) {
        if (this.fileSystemProvider && target && isRawLink) {
            const pathVariations = toPathVariations(target);
            for (const variation of pathVariations) {
                if (await this.fileExists(variation)) {
                    return variation;
                }
            }
        }
        return target;
    }
    async resolveReference(target, documentUri, documentContext, isRawLink = false) {
        if ((0,_utils_strings__WEBPACK_IMPORTED_MODULE_2__.startsWith)(target, 'sass:')) {
            return undefined; // sass library
        }
        return super.resolveReference(target, documentUri, documentContext, isRawLink);
    }
}
function toPathVariations(target) {
    // No variation for links that ends with .css suffix
    if (target.endsWith('.css')) {
        return [target];
    }
    // If a link is like a/, try resolving a/index.scss and a/_index.scss
    if (target.endsWith('/')) {
        return [target + 'index.scss', target + '_index.scss'];
    }
    const targetUri = vscode_uri__WEBPACK_IMPORTED_MODULE_3__.URI.parse(target.replace(/\.scss$/, ''));
    const basename = vscode_uri__WEBPACK_IMPORTED_MODULE_3__.Utils.basename(targetUri);
    const dirname = vscode_uri__WEBPACK_IMPORTED_MODULE_3__.Utils.dirname(targetUri);
    if (basename.startsWith('_')) {
        // No variation for links such as _a
        return [vscode_uri__WEBPACK_IMPORTED_MODULE_3__.Utils.joinPath(dirname, basename + '.scss').toString(true)];
    }
    return [
        vscode_uri__WEBPACK_IMPORTED_MODULE_3__.Utils.joinPath(dirname, basename + '.scss').toString(true),
        vscode_uri__WEBPACK_IMPORTED_MODULE_3__.Utils.joinPath(dirname, '_' + basename + '.scss').toString(true),
        target + '/index.scss',
        target + '/_index.scss',
        vscode_uri__WEBPACK_IMPORTED_MODULE_3__.Utils.joinPath(dirname, basename + '.css').toString(true)
    ];
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/services/selectorPrinting.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/services/selectorPrinting.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Element: () => (/* binding */ Element),
/* harmony export */   LabelElement: () => (/* binding */ LabelElement),
/* harmony export */   RootElement: () => (/* binding */ RootElement),
/* harmony export */   SelectorPrinting: () => (/* binding */ SelectorPrinting),
/* harmony export */   selectorToElement: () => (/* binding */ selectorToElement),
/* harmony export */   toElement: () => (/* binding */ toElement)
/* harmony export */ });
/* harmony import */ var _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../parser/cssNodes */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssNodes.js");
/* harmony import */ var _parser_cssScanner__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../parser/cssScanner */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssScanner.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @vscode/l10n */ "../../node_modules/@vscode/l10n/dist/main.js");
/* harmony import */ var _vscode_l10n__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_vscode_l10n__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _parser_cssParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../parser/cssParser */ "../../node_modules/vscode-css-languageservice/lib/esm/parser/cssParser.js");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/





class Element {
    constructor() {
        this.parent = null;
        this.children = null;
        this.attributes = null;
    }
    findAttribute(name) {
        if (this.attributes) {
            for (const attribute of this.attributes) {
                if (attribute.name === name) {
                    return attribute.value;
                }
            }
        }
        return null;
    }
    addChild(child) {
        if (child instanceof Element) {
            child.parent = this;
        }
        if (!this.children) {
            this.children = [];
        }
        this.children.push(child);
    }
    append(text) {
        if (this.attributes) {
            const last = this.attributes[this.attributes.length - 1];
            last.value = last.value + text;
        }
    }
    prepend(text) {
        if (this.attributes) {
            const first = this.attributes[0];
            first.value = text + first.value;
        }
    }
    findRoot() {
        let curr = this;
        while (curr.parent && !(curr.parent instanceof RootElement)) {
            curr = curr.parent;
        }
        return curr;
    }
    removeChild(child) {
        if (this.children) {
            const index = this.children.indexOf(child);
            if (index !== -1) {
                this.children.splice(index, 1);
                return true;
            }
        }
        return false;
    }
    addAttr(name, value) {
        if (!this.attributes) {
            this.attributes = [];
        }
        for (const attribute of this.attributes) {
            if (attribute.name === name) {
                attribute.value += ' ' + value;
                return;
            }
        }
        this.attributes.push({ name, value });
    }
    clone(cloneChildren = true) {
        const elem = new Element();
        if (this.attributes) {
            elem.attributes = [];
            for (const attribute of this.attributes) {
                elem.addAttr(attribute.name, attribute.value);
            }
        }
        if (cloneChildren && this.children) {
            elem.children = [];
            for (let index = 0; index < this.children.length; index++) {
                elem.addChild(this.children[index].clone());
            }
        }
        return elem;
    }
    cloneWithParent() {
        const clone = this.clone(false);
        if (this.parent && !(this.parent instanceof RootElement)) {
            const parentClone = this.parent.cloneWithParent();
            parentClone.addChild(clone);
        }
        return clone;
    }
}
class RootElement extends Element {
}
class LabelElement extends Element {
    constructor(label) {
        super();
        this.addAttr('name', label);
    }
}
class MarkedStringPrinter {
    constructor(quote) {
        this.quote = quote;
        this.result = [];
        // empty
    }
    print(element) {
        this.result = [];
        if (element instanceof RootElement) {
            if (element.children) {
                this.doPrint(element.children, 0);
            }
        }
        else {
            this.doPrint([element], 0);
        }
        const value = this.result.join('\n');
        return [{ language: 'html', value }];
    }
    doPrint(elements, indent) {
        for (const element of elements) {
            this.doPrintElement(element, indent);
            if (element.children) {
                this.doPrint(element.children, indent + 1);
            }
        }
    }
    writeLine(level, content) {
        const indent = new Array(level + 1).join('  ');
        this.result.push(indent + content);
    }
    doPrintElement(element, indent) {
        const name = element.findAttribute('name');
        // special case: a simple label
        if (element instanceof LabelElement || name === '\u2026') {
            this.writeLine(indent, name);
            return;
        }
        // the real deal
        const content = ['<'];
        // element name
        if (name) {
            content.push(name);
        }
        else {
            content.push('element');
        }
        // attributes
        if (element.attributes) {
            for (const attr of element.attributes) {
                if (attr.name !== 'name') {
                    content.push(' ');
                    content.push(attr.name);
                    const value = attr.value;
                    if (value) {
                        content.push('=');
                        content.push(quotes.ensure(value, this.quote));
                    }
                }
            }
        }
        content.push('>');
        this.writeLine(indent, content.join(''));
    }
}
var quotes;
(function (quotes) {
    function ensure(value, which) {
        return which + remove(value) + which;
    }
    quotes.ensure = ensure;
    function remove(value) {
        const match = value.match(/^['"](.*)["']$/);
        if (match) {
            return match[1];
        }
        return value;
    }
    quotes.remove = remove;
})(quotes || (quotes = {}));
class Specificity {
    constructor() {
        /** Count of identifiers (e.g., `#app`) */
        this.id = 0;
        /** Count of attributes (`[type="number"]`), classes (`.container-fluid`), and pseudo-classes (`:hover`) */
        this.attr = 0;
        /** Count of tag names (`div`), and pseudo-elements (`::before`) */
        this.tag = 0;
    }
}
function toElement(node, parentElement) {
    let result = new Element();
    for (const child of node.getChildren()) {
        switch (child.type) {
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinator:
                if (parentElement) {
                    const segments = child.getText().split('&');
                    if (segments.length === 1) {
                        // should not happen
                        result.addAttr('name', segments[0]);
                        break;
                    }
                    result = parentElement.cloneWithParent();
                    if (segments[0]) {
                        const root = result.findRoot();
                        root.prepend(segments[0]);
                    }
                    for (let i = 1; i < segments.length; i++) {
                        if (i > 1) {
                            const clone = parentElement.cloneWithParent();
                            result.addChild(clone.findRoot());
                            result = clone;
                        }
                        result.append(segments[i]);
                    }
                }
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorPlaceholder:
                if (child.matches('@at-root')) {
                    return result;
                }
            // fall through
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ElementNameSelector:
                const text = child.getText();
                result.addAttr('name', text === '*' ? 'element' : unescape(text));
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ClassSelector:
                result.addAttr('class', unescape(child.getText().substring(1)));
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.IdentifierSelector:
                result.addAttr('id', unescape(child.getText().substring(1)));
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration:
                result.addAttr('class', child.getName());
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector:
                result.addAttr(unescape(child.getText()), '');
                break;
            case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.AttributeSelector:
                const selector = child;
                const identifier = selector.getIdentifier();
                if (identifier) {
                    const expression = selector.getValue();
                    const operator = selector.getOperator();
                    let value;
                    if (expression && operator) {
                        switch (unescape(operator.getText())) {
                            case '|=':
                                // excatly or followed by -words
                                value = `${quotes.remove(unescape(expression.getText()))}-\u2026`;
                                break;
                            case '^=':
                                // prefix
                                value = `${quotes.remove(unescape(expression.getText()))}\u2026`;
                                break;
                            case '$=':
                                // suffix
                                value = `\u2026${quotes.remove(unescape(expression.getText()))}`;
                                break;
                            case '~=':
                                // one of a list of words
                                value = ` \u2026 ${quotes.remove(unescape(expression.getText()))} \u2026 `;
                                break;
                            case '*=':
                                // substring
                                value = `\u2026${quotes.remove(unescape(expression.getText()))}\u2026`;
                                break;
                            default:
                                value = quotes.remove(unescape(expression.getText()));
                                break;
                        }
                    }
                    result.addAttr(unescape(identifier.getText()), value);
                }
                break;
        }
    }
    return result;
}
function unescape(content) {
    const scanner = new _parser_cssScanner__WEBPACK_IMPORTED_MODULE_1__.Scanner();
    scanner.setSource(content);
    const token = scanner.scanUnquotedString();
    if (token) {
        return token.text;
    }
    return content;
}
class SelectorPrinting {
    constructor(cssDataManager) {
        this.cssDataManager = cssDataManager;
    }
    selectorToMarkedString(node) {
        const root = selectorToElement(node);
        if (root) {
            const markedStrings = new MarkedStringPrinter('"').print(root);
            markedStrings.push(this.selectorToSpecificityMarkedString(node));
            return markedStrings;
        }
        else {
            return [];
        }
    }
    simpleSelectorToMarkedString(node) {
        const element = toElement(node);
        const markedStrings = new MarkedStringPrinter('"').print(element);
        markedStrings.push(this.selectorToSpecificityMarkedString(node));
        return markedStrings;
    }
    isPseudoElementIdentifier(text) {
        const match = text.match(/^::?([\w-]+)/);
        if (!match) {
            return false;
        }
        return !!this.cssDataManager.getPseudoElement("::" + match[1]);
    }
    selectorToSpecificityMarkedString(node) {
        const calculateMostSpecificListItem = (childElements) => {
            const specificity = new Specificity();
            let mostSpecificListItem = new Specificity();
            for (const containerElement of childElements) {
                for (const childElement of containerElement.getChildren()) {
                    const itemSpecificity = calculateScore(childElement);
                    if (itemSpecificity.id > mostSpecificListItem.id) {
                        mostSpecificListItem = itemSpecificity;
                        continue;
                    }
                    else if (itemSpecificity.id < mostSpecificListItem.id) {
                        continue;
                    }
                    if (itemSpecificity.attr > mostSpecificListItem.attr) {
                        mostSpecificListItem = itemSpecificity;
                        continue;
                    }
                    else if (itemSpecificity.attr < mostSpecificListItem.attr) {
                        continue;
                    }
                    if (itemSpecificity.tag > mostSpecificListItem.tag) {
                        mostSpecificListItem = itemSpecificity;
                        continue;
                    }
                }
            }
            specificity.id += mostSpecificListItem.id;
            specificity.attr += mostSpecificListItem.attr;
            specificity.tag += mostSpecificListItem.tag;
            return specificity;
        };
        //https://www.w3.org/TR/selectors-3/#specificity
        const calculateScore = (node) => {
            const specificity = new Specificity();
            elementLoop: for (const element of node.getChildren()) {
                switch (element.type) {
                    case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.IdentifierSelector:
                        specificity.id++;
                        break;
                    case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ClassSelector:
                    case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.AttributeSelector:
                        specificity.attr++;
                        break;
                    case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.ElementNameSelector:
                        //ignore universal selector
                        if (element.matches("*")) {
                            break;
                        }
                        specificity.tag++;
                        break;
                    case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.PseudoSelector:
                        const text = element.getText();
                        const childElements = element.getChildren();
                        if (this.isPseudoElementIdentifier(text)) {
                            if (text.match(/^::slotted/i) && childElements.length > 0) {
                                // The specificity of ::slotted() is that of a pseudo-element, plus the specificity of its argument.
                                // ::slotted() does not allow a selector list as its argument, but this isn't the right place to give feedback on validity.
                                // Reporting the most specific child will be correct for correct CSS and will be forgiving in case of mistakes.
                                specificity.tag++;
                                let mostSpecificListItem = calculateMostSpecificListItem(childElements);
                                specificity.id += mostSpecificListItem.id;
                                specificity.attr += mostSpecificListItem.attr;
                                specificity.tag += mostSpecificListItem.tag;
                                continue elementLoop;
                            }
                            specificity.tag++; // pseudo element
                            continue elementLoop;
                        }
                        // where and child selectors have zero specificity
                        if (text.match(/^:where/i)) {
                            continue elementLoop;
                        }
                        // the most specific child selector
                        if (text.match(/^:(?:not|has|is)/i) && childElements.length > 0) {
                            let mostSpecificListItem = calculateMostSpecificListItem(childElements);
                            specificity.id += mostSpecificListItem.id;
                            specificity.attr += mostSpecificListItem.attr;
                            specificity.tag += mostSpecificListItem.tag;
                            continue elementLoop;
                        }
                        if (text.match(/^:(?:host|host-context)/i) && childElements.length > 0) {
                            // The specificity of :host() is that of a pseudo-class, plus the specificity of its argument.
                            // The specificity of :host-context() is that of a pseudo-class, plus the specificity of its argument.
                            specificity.attr++;
                            let mostSpecificListItem = calculateMostSpecificListItem(childElements);
                            specificity.id += mostSpecificListItem.id;
                            specificity.attr += mostSpecificListItem.attr;
                            specificity.tag += mostSpecificListItem.tag;
                            continue elementLoop;
                        }
                        if (text.match(/^:(?:nth-child|nth-last-child)/i) && childElements.length > 0) {
                            /* The specificity of the :nth-child(An+B [of S]?) pseudo-class is the specificity of a single pseudo-class plus, if S is specified, the specificity of the most specific complex selector in S */
                            // https://www.w3.org/TR/selectors-4/#the-nth-child-pseudo
                            specificity.attr++;
                            // 23 = Binary Expression. 
                            if (childElements.length === 3 && childElements[1].type === 23) {
                                let mostSpecificListItem = calculateMostSpecificListItem(childElements[2].getChildren());
                                specificity.id += mostSpecificListItem.id;
                                specificity.attr += mostSpecificListItem.attr;
                                specificity.tag += mostSpecificListItem.tag;
                                continue elementLoop;
                            }
                            // Edge case: 'n' without integer prefix A, with B integer non-existent, is not regarded as a binary expression token.
                            const parser = new _parser_cssParser__WEBPACK_IMPORTED_MODULE_2__.Parser();
                            const pseudoSelectorText = childElements[1].getText();
                            parser.scanner.setSource(pseudoSelectorText);
                            const firstToken = parser.scanner.scan();
                            const secondToken = parser.scanner.scan();
                            if (firstToken.text === 'n' || firstToken.text === '-n' && secondToken.text === 'of') {
                                const complexSelectorListNodes = [];
                                const complexSelectorText = pseudoSelectorText.slice(secondToken.offset + 2);
                                const complexSelectorArray = complexSelectorText.split(',');
                                for (const selector of complexSelectorArray) {
                                    const node = parser.internalParse(selector, parser._parseSelector);
                                    if (node) {
                                        complexSelectorListNodes.push(node);
                                    }
                                }
                                let mostSpecificListItem = calculateMostSpecificListItem(complexSelectorListNodes);
                                specificity.id += mostSpecificListItem.id;
                                specificity.attr += mostSpecificListItem.attr;
                                specificity.tag += mostSpecificListItem.tag;
                                continue elementLoop;
                            }
                            continue elementLoop;
                        }
                        specificity.attr++; //pseudo class
                        continue elementLoop;
                }
                if (element.getChildren().length > 0) {
                    const itemSpecificity = calculateScore(element);
                    specificity.id += itemSpecificity.id;
                    specificity.attr += itemSpecificity.attr;
                    specificity.tag += itemSpecificity.tag;
                }
            }
            return specificity;
        };
        const specificity = calculateScore(node);
        return `[${_vscode_l10n__WEBPACK_IMPORTED_MODULE_3__.t("Selector Specificity")}](https://developer.mozilla.org/docs/Web/CSS/Specificity): (${specificity.id}, ${specificity.attr}, ${specificity.tag})`;
    }
}
class SelectorElementBuilder {
    constructor(element) {
        this.prev = null;
        this.element = element;
    }
    processSelector(selector) {
        let parentElement = null;
        if (!(this.element instanceof RootElement)) {
            if (selector.getChildren().some((c) => c.hasChildren() && c.getChild(0).type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinator)) {
                const curr = this.element.findRoot();
                if (curr.parent instanceof RootElement) {
                    parentElement = this.element;
                    this.element = curr.parent;
                    this.element.removeChild(curr);
                    this.prev = null;
                }
            }
        }
        for (const selectorChild of selector.getChildren()) {
            if (selectorChild instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                if (this.prev instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector) {
                    const labelElement = new LabelElement('\u2026');
                    this.element.addChild(labelElement);
                    this.element = labelElement;
                }
                else if (this.prev && (this.prev.matches('+') || this.prev.matches('~')) && this.element.parent) {
                    this.element = this.element.parent;
                }
                if (this.prev && this.prev.matches('~')) {
                    this.element.addChild(new LabelElement('\u22EE'));
                }
                const thisElement = toElement(selectorChild, parentElement);
                const root = thisElement.findRoot();
                this.element.addChild(root);
                this.element = thisElement;
            }
            if (selectorChild instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.SimpleSelector ||
                selectorChild.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorParent ||
                selectorChild.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorShadowPiercingDescendant ||
                selectorChild.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorSibling ||
                selectorChild.type === _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.SelectorCombinatorAllSiblings) {
                this.prev = selectorChild;
            }
        }
    }
}
function isNewSelectorContext(node) {
    switch (node.type) {
        case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.MixinDeclaration:
        case _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.NodeType.Stylesheet:
            return true;
    }
    return false;
}
function selectorToElement(node) {
    if (node.matches('@at-root')) {
        return null;
    }
    const root = new RootElement();
    const parentRuleSets = [];
    const ruleSet = node.getParent();
    if (ruleSet instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
        let parent = ruleSet.getParent(); // parent of the selector's ruleset
        while (parent && !isNewSelectorContext(parent)) {
            if (parent instanceof _parser_cssNodes__WEBPACK_IMPORTED_MODULE_0__.RuleSet) {
                if (parent.getSelectors().matches('@at-root')) {
                    break;
                }
                parentRuleSets.push(parent);
            }
            parent = parent.getParent();
        }
    }
    const builder = new SelectorElementBuilder(root);
    for (let i = parentRuleSets.length - 1; i >= 0; i--) {
        const selector = parentRuleSets[i].getSelectors().getChild(0);
        if (selector) {
            builder.processSelector(selector);
        }
    }
    builder.processSelector(node);
    return root;
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/utils/arrays.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/utils/arrays.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   findFirst: () => (/* binding */ findFirst),
/* harmony export */   includes: () => (/* binding */ includes),
/* harmony export */   union: () => (/* binding */ union)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

/**
 * Takes a sorted array and a function p. The array is sorted in such a way that all elements where p(x) is false
 * are located before all elements where p(x) is true.
 * @returns the least x for which p(x) is true or array.length if no element fullfills the given function.
 */
function findFirst(array, p) {
    let low = 0, high = array.length;
    if (high === 0) {
        return 0; // no children
    }
    while (low < high) {
        let mid = Math.floor((low + high) / 2);
        if (p(array[mid])) {
            high = mid;
        }
        else {
            low = mid + 1;
        }
    }
    return low;
}
function includes(array, item) {
    return array.indexOf(item) !== -1;
}
function union(...arrays) {
    const result = [];
    for (const array of arrays) {
        for (const item of array) {
            if (!includes(result, item)) {
                result.push(item);
            }
        }
    }
    return result;
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/utils/objects.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/utils/objects.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   isDefined: () => (/* binding */ isDefined),
/* harmony export */   values: () => (/* binding */ values)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function values(obj) {
    return Object.keys(obj).map(key => obj[key]);
}
function isDefined(obj) {
    return typeof obj !== 'undefined';
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/utils/resources.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/utils/resources.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   dirname: () => (/* binding */ dirname),
/* harmony export */   joinPath: () => (/* binding */ joinPath)
/* harmony export */ });
/* harmony import */ var vscode_uri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-uri */ "../../node_modules/vscode-uri/lib/esm/index.mjs");
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function dirname(uriString) {
    return vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.dirname(vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI.parse(uriString)).toString(true);
}
function joinPath(uriString, ...paths) {
    return vscode_uri__WEBPACK_IMPORTED_MODULE_0__.Utils.joinPath(vscode_uri__WEBPACK_IMPORTED_MODULE_0__.URI.parse(uriString), ...paths).toString(true);
}


/***/ }),

/***/ "../../node_modules/vscode-css-languageservice/lib/esm/utils/strings.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/vscode-css-languageservice/lib/esm/utils/strings.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   difference: () => (/* binding */ difference),
/* harmony export */   endsWith: () => (/* binding */ endsWith),
/* harmony export */   getLimitedString: () => (/* binding */ getLimitedString),
/* harmony export */   repeat: () => (/* binding */ repeat),
/* harmony export */   startsWith: () => (/* binding */ startsWith),
/* harmony export */   trim: () => (/* binding */ trim)
/* harmony export */ });
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

function startsWith(haystack, needle) {
    if (haystack.length < needle.length) {
        return false;
    }
    for (let i = 0; i < needle.length; i++) {
        if (haystack[i] !== needle[i]) {
            return false;
        }
    }
    return true;
}
/**
 * Determines if haystack ends with needle.
 */
function endsWith(haystack, needle) {
    let diff = haystack.length - needle.length;
    if (diff > 0) {
        return haystack.lastIndexOf(needle) === diff;
    }
    else if (diff === 0) {
        return haystack === needle;
    }
    else {
        return false;
    }
}
/**
 * Computes the difference score for two strings. More similar strings have a higher score.
 * We use largest common subsequence dynamic programming approach but penalize in the end for length differences.
 * Strings that have a large length difference will get a bad default score 0.
 * Complexity - both time and space O(first.length * second.length)
 * Dynamic programming LCS computation http://en.wikipedia.org/wiki/Longest_common_subsequence_problem
 *
 * @param first a string
 * @param second a string
 */
function difference(first, second, maxLenDelta = 4) {
    let lengthDifference = Math.abs(first.length - second.length);
    // We only compute score if length of the currentWord and length of entry.name are similar.
    if (lengthDifference > maxLenDelta) {
        return 0;
    }
    // Initialize LCS (largest common subsequence) matrix.
    let LCS = [];
    let zeroArray = [];
    let i, j;
    for (i = 0; i < second.length + 1; ++i) {
        zeroArray.push(0);
    }
    for (i = 0; i < first.length + 1; ++i) {
        LCS.push(zeroArray);
    }
    for (i = 1; i < first.length + 1; ++i) {
        for (j = 1; j < second.length + 1; ++j) {
            if (first[i - 1] === second[j - 1]) {
                LCS[i][j] = LCS[i - 1][j - 1] + 1;
            }
            else {
                LCS[i][j] = Math.max(LCS[i - 1][j], LCS[i][j - 1]);
            }
        }
    }
    return LCS[first.length][second.length] - Math.sqrt(lengthDifference);
}
/**
 * Limit of string length.
 */
function getLimitedString(str, ellipsis = true) {
    if (!str) {
        return '';
    }
    if (str.length < 140) {
        return str;
    }
    return str.slice(0, 140) + (ellipsis ? '\u2026' : '');
}
/**
 * Limit of string length.
 */
function trim(str, regexp) {
    const m = regexp.exec(str);
    if (m && m[0].length) {
        return str.substr(0, str.length - m[0].length);
    }
    return str;
}
function repeat(value, count) {
    let s = '';
    while (count > 0) {
        if ((count & 1) === 1) {
            s += value;
        }
        value += value;
        count = count >>> 1;
    }
    return s;
}


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/api.js":
/*!***********************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/api.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="../../typings/thenable.d.ts" />
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProgressType = exports.ProgressToken = exports.createMessageConnection = exports.NullLogger = exports.ConnectionOptions = exports.ConnectionStrategy = exports.AbstractMessageBuffer = exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = exports.CancellationToken = exports.CancellationTokenSource = exports.Emitter = exports.Event = exports.Disposable = exports.LRUCache = exports.Touch = exports.LinkedMap = exports.ParameterStructures = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.ErrorCodes = exports.ResponseError = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType0 = exports.RequestType = exports.Message = exports.RAL = void 0;
exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-jsonrpc/lib/common/messages.js");
Object.defineProperty(exports, "Message", ({ enumerable: true, get: function () { return messages_1.Message; } }));
Object.defineProperty(exports, "RequestType", ({ enumerable: true, get: function () { return messages_1.RequestType; } }));
Object.defineProperty(exports, "RequestType0", ({ enumerable: true, get: function () { return messages_1.RequestType0; } }));
Object.defineProperty(exports, "RequestType1", ({ enumerable: true, get: function () { return messages_1.RequestType1; } }));
Object.defineProperty(exports, "RequestType2", ({ enumerable: true, get: function () { return messages_1.RequestType2; } }));
Object.defineProperty(exports, "RequestType3", ({ enumerable: true, get: function () { return messages_1.RequestType3; } }));
Object.defineProperty(exports, "RequestType4", ({ enumerable: true, get: function () { return messages_1.RequestType4; } }));
Object.defineProperty(exports, "RequestType5", ({ enumerable: true, get: function () { return messages_1.RequestType5; } }));
Object.defineProperty(exports, "RequestType6", ({ enumerable: true, get: function () { return messages_1.RequestType6; } }));
Object.defineProperty(exports, "RequestType7", ({ enumerable: true, get: function () { return messages_1.RequestType7; } }));
Object.defineProperty(exports, "RequestType8", ({ enumerable: true, get: function () { return messages_1.RequestType8; } }));
Object.defineProperty(exports, "RequestType9", ({ enumerable: true, get: function () { return messages_1.RequestType9; } }));
Object.defineProperty(exports, "ResponseError", ({ enumerable: true, get: function () { return messages_1.ResponseError; } }));
Object.defineProperty(exports, "ErrorCodes", ({ enumerable: true, get: function () { return messages_1.ErrorCodes; } }));
Object.defineProperty(exports, "NotificationType", ({ enumerable: true, get: function () { return messages_1.NotificationType; } }));
Object.defineProperty(exports, "NotificationType0", ({ enumerable: true, get: function () { return messages_1.NotificationType0; } }));
Object.defineProperty(exports, "NotificationType1", ({ enumerable: true, get: function () { return messages_1.NotificationType1; } }));
Object.defineProperty(exports, "NotificationType2", ({ enumerable: true, get: function () { return messages_1.NotificationType2; } }));
Object.defineProperty(exports, "NotificationType3", ({ enumerable: true, get: function () { return messages_1.NotificationType3; } }));
Object.defineProperty(exports, "NotificationType4", ({ enumerable: true, get: function () { return messages_1.NotificationType4; } }));
Object.defineProperty(exports, "NotificationType5", ({ enumerable: true, get: function () { return messages_1.NotificationType5; } }));
Object.defineProperty(exports, "NotificationType6", ({ enumerable: true, get: function () { return messages_1.NotificationType6; } }));
Object.defineProperty(exports, "NotificationType7", ({ enumerable: true, get: function () { return messages_1.NotificationType7; } }));
Object.defineProperty(exports, "NotificationType8", ({ enumerable: true, get: function () { return messages_1.NotificationType8; } }));
Object.defineProperty(exports, "NotificationType9", ({ enumerable: true, get: function () { return messages_1.NotificationType9; } }));
Object.defineProperty(exports, "ParameterStructures", ({ enumerable: true, get: function () { return messages_1.ParameterStructures; } }));
const linkedMap_1 = __webpack_require__(/*! ./linkedMap */ "../../node_modules/vscode-jsonrpc/lib/common/linkedMap.js");
Object.defineProperty(exports, "LinkedMap", ({ enumerable: true, get: function () { return linkedMap_1.LinkedMap; } }));
Object.defineProperty(exports, "LRUCache", ({ enumerable: true, get: function () { return linkedMap_1.LRUCache; } }));
Object.defineProperty(exports, "Touch", ({ enumerable: true, get: function () { return linkedMap_1.Touch; } }));
const disposable_1 = __webpack_require__(/*! ./disposable */ "../../node_modules/vscode-jsonrpc/lib/common/disposable.js");
Object.defineProperty(exports, "Disposable", ({ enumerable: true, get: function () { return disposable_1.Disposable; } }));
const events_1 = __webpack_require__(/*! ./events */ "../../node_modules/vscode-jsonrpc/lib/common/events.js");
Object.defineProperty(exports, "Event", ({ enumerable: true, get: function () { return events_1.Event; } }));
Object.defineProperty(exports, "Emitter", ({ enumerable: true, get: function () { return events_1.Emitter; } }));
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "../../node_modules/vscode-jsonrpc/lib/common/cancellation.js");
Object.defineProperty(exports, "CancellationTokenSource", ({ enumerable: true, get: function () { return cancellation_1.CancellationTokenSource; } }));
Object.defineProperty(exports, "CancellationToken", ({ enumerable: true, get: function () { return cancellation_1.CancellationToken; } }));
const sharedArrayCancellation_1 = __webpack_require__(/*! ./sharedArrayCancellation */ "../../node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js");
Object.defineProperty(exports, "SharedArraySenderStrategy", ({ enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArraySenderStrategy; } }));
Object.defineProperty(exports, "SharedArrayReceiverStrategy", ({ enumerable: true, get: function () { return sharedArrayCancellation_1.SharedArrayReceiverStrategy; } }));
const messageReader_1 = __webpack_require__(/*! ./messageReader */ "../../node_modules/vscode-jsonrpc/lib/common/messageReader.js");
Object.defineProperty(exports, "MessageReader", ({ enumerable: true, get: function () { return messageReader_1.MessageReader; } }));
Object.defineProperty(exports, "AbstractMessageReader", ({ enumerable: true, get: function () { return messageReader_1.AbstractMessageReader; } }));
Object.defineProperty(exports, "ReadableStreamMessageReader", ({ enumerable: true, get: function () { return messageReader_1.ReadableStreamMessageReader; } }));
const messageWriter_1 = __webpack_require__(/*! ./messageWriter */ "../../node_modules/vscode-jsonrpc/lib/common/messageWriter.js");
Object.defineProperty(exports, "MessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.MessageWriter; } }));
Object.defineProperty(exports, "AbstractMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.AbstractMessageWriter; } }));
Object.defineProperty(exports, "WriteableStreamMessageWriter", ({ enumerable: true, get: function () { return messageWriter_1.WriteableStreamMessageWriter; } }));
const messageBuffer_1 = __webpack_require__(/*! ./messageBuffer */ "../../node_modules/vscode-jsonrpc/lib/common/messageBuffer.js");
Object.defineProperty(exports, "AbstractMessageBuffer", ({ enumerable: true, get: function () { return messageBuffer_1.AbstractMessageBuffer; } }));
const connection_1 = __webpack_require__(/*! ./connection */ "../../node_modules/vscode-jsonrpc/lib/common/connection.js");
Object.defineProperty(exports, "ConnectionStrategy", ({ enumerable: true, get: function () { return connection_1.ConnectionStrategy; } }));
Object.defineProperty(exports, "ConnectionOptions", ({ enumerable: true, get: function () { return connection_1.ConnectionOptions; } }));
Object.defineProperty(exports, "NullLogger", ({ enumerable: true, get: function () { return connection_1.NullLogger; } }));
Object.defineProperty(exports, "createMessageConnection", ({ enumerable: true, get: function () { return connection_1.createMessageConnection; } }));
Object.defineProperty(exports, "ProgressToken", ({ enumerable: true, get: function () { return connection_1.ProgressToken; } }));
Object.defineProperty(exports, "ProgressType", ({ enumerable: true, get: function () { return connection_1.ProgressType; } }));
Object.defineProperty(exports, "Trace", ({ enumerable: true, get: function () { return connection_1.Trace; } }));
Object.defineProperty(exports, "TraceValues", ({ enumerable: true, get: function () { return connection_1.TraceValues; } }));
Object.defineProperty(exports, "TraceFormat", ({ enumerable: true, get: function () { return connection_1.TraceFormat; } }));
Object.defineProperty(exports, "SetTraceNotification", ({ enumerable: true, get: function () { return connection_1.SetTraceNotification; } }));
Object.defineProperty(exports, "LogTraceNotification", ({ enumerable: true, get: function () { return connection_1.LogTraceNotification; } }));
Object.defineProperty(exports, "ConnectionErrors", ({ enumerable: true, get: function () { return connection_1.ConnectionErrors; } }));
Object.defineProperty(exports, "ConnectionError", ({ enumerable: true, get: function () { return connection_1.ConnectionError; } }));
Object.defineProperty(exports, "CancellationReceiverStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationReceiverStrategy; } }));
Object.defineProperty(exports, "CancellationSenderStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationSenderStrategy; } }));
Object.defineProperty(exports, "CancellationStrategy", ({ enumerable: true, get: function () { return connection_1.CancellationStrategy; } }));
Object.defineProperty(exports, "MessageStrategy", ({ enumerable: true, get: function () { return connection_1.MessageStrategy; } }));
const ral_1 = __webpack_require__(/*! ./ral */ "../../node_modules/vscode-jsonrpc/lib/common/ral.js");
exports.RAL = ral_1.default;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/cancellation.js":
/*!********************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/cancellation.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CancellationTokenSource = exports.CancellationToken = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "../../node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "../../node_modules/vscode-jsonrpc/lib/common/is.js");
const events_1 = __webpack_require__(/*! ./events */ "../../node_modules/vscode-jsonrpc/lib/common/events.js");
var CancellationToken;
(function (CancellationToken) {
    CancellationToken.None = Object.freeze({
        isCancellationRequested: false,
        onCancellationRequested: events_1.Event.None
    });
    CancellationToken.Cancelled = Object.freeze({
        isCancellationRequested: true,
        onCancellationRequested: events_1.Event.None
    });
    function is(value) {
        const candidate = value;
        return candidate && (candidate === CancellationToken.None
            || candidate === CancellationToken.Cancelled
            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));
    }
    CancellationToken.is = is;
})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));
const shortcutEvent = Object.freeze(function (callback, context) {
    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);
    return { dispose() { handle.dispose(); } };
});
class MutableToken {
    constructor() {
        this._isCancelled = false;
    }
    cancel() {
        if (!this._isCancelled) {
            this._isCancelled = true;
            if (this._emitter) {
                this._emitter.fire(undefined);
                this.dispose();
            }
        }
    }
    get isCancellationRequested() {
        return this._isCancelled;
    }
    get onCancellationRequested() {
        if (this._isCancelled) {
            return shortcutEvent;
        }
        if (!this._emitter) {
            this._emitter = new events_1.Emitter();
        }
        return this._emitter.event;
    }
    dispose() {
        if (this._emitter) {
            this._emitter.dispose();
            this._emitter = undefined;
        }
    }
}
class CancellationTokenSource {
    get token() {
        if (!this._token) {
            // be lazy and create the token only when
            // actually needed
            this._token = new MutableToken();
        }
        return this._token;
    }
    cancel() {
        if (!this._token) {
            // save an object by returning the default
            // cancelled token when cancellation happens
            // before someone asks for the token
            this._token = CancellationToken.Cancelled;
        }
        else {
            this._token.cancel();
        }
    }
    dispose() {
        if (!this._token) {
            // ensure to initialize with an empty token if we had none
            this._token = CancellationToken.None;
        }
        else if (this._token instanceof MutableToken) {
            // actually dispose
            this._token.dispose();
        }
    }
}
exports.CancellationTokenSource = CancellationTokenSource;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/connection.js":
/*!******************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/connection.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.ConnectionOptions = exports.MessageStrategy = exports.CancellationStrategy = exports.CancellationSenderStrategy = exports.CancellationReceiverStrategy = exports.RequestCancellationReceiverStrategy = exports.IdCancellationReceiverStrategy = exports.ConnectionStrategy = exports.ConnectionError = exports.ConnectionErrors = exports.LogTraceNotification = exports.SetTraceNotification = exports.TraceFormat = exports.TraceValues = exports.Trace = exports.NullLogger = exports.ProgressType = exports.ProgressToken = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "../../node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "../../node_modules/vscode-jsonrpc/lib/common/is.js");
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-jsonrpc/lib/common/messages.js");
const linkedMap_1 = __webpack_require__(/*! ./linkedMap */ "../../node_modules/vscode-jsonrpc/lib/common/linkedMap.js");
const events_1 = __webpack_require__(/*! ./events */ "../../node_modules/vscode-jsonrpc/lib/common/events.js");
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "../../node_modules/vscode-jsonrpc/lib/common/cancellation.js");
var CancelNotification;
(function (CancelNotification) {
    CancelNotification.type = new messages_1.NotificationType('$/cancelRequest');
})(CancelNotification || (CancelNotification = {}));
var ProgressToken;
(function (ProgressToken) {
    function is(value) {
        return typeof value === 'string' || typeof value === 'number';
    }
    ProgressToken.is = is;
})(ProgressToken || (exports.ProgressToken = ProgressToken = {}));
var ProgressNotification;
(function (ProgressNotification) {
    ProgressNotification.type = new messages_1.NotificationType('$/progress');
})(ProgressNotification || (ProgressNotification = {}));
class ProgressType {
    constructor() {
    }
}
exports.ProgressType = ProgressType;
var StarRequestHandler;
(function (StarRequestHandler) {
    function is(value) {
        return Is.func(value);
    }
    StarRequestHandler.is = is;
})(StarRequestHandler || (StarRequestHandler = {}));
exports.NullLogger = Object.freeze({
    error: () => { },
    warn: () => { },
    info: () => { },
    log: () => { }
});
var Trace;
(function (Trace) {
    Trace[Trace["Off"] = 0] = "Off";
    Trace[Trace["Messages"] = 1] = "Messages";
    Trace[Trace["Compact"] = 2] = "Compact";
    Trace[Trace["Verbose"] = 3] = "Verbose";
})(Trace || (exports.Trace = Trace = {}));
var TraceValues;
(function (TraceValues) {
    /**
     * Turn tracing off.
     */
    TraceValues.Off = 'off';
    /**
     * Trace messages only.
     */
    TraceValues.Messages = 'messages';
    /**
     * Compact message tracing.
     */
    TraceValues.Compact = 'compact';
    /**
     * Verbose message tracing.
     */
    TraceValues.Verbose = 'verbose';
})(TraceValues || (exports.TraceValues = TraceValues = {}));
(function (Trace) {
    function fromString(value) {
        if (!Is.string(value)) {
            return Trace.Off;
        }
        value = value.toLowerCase();
        switch (value) {
            case 'off':
                return Trace.Off;
            case 'messages':
                return Trace.Messages;
            case 'compact':
                return Trace.Compact;
            case 'verbose':
                return Trace.Verbose;
            default:
                return Trace.Off;
        }
    }
    Trace.fromString = fromString;
    function toString(value) {
        switch (value) {
            case Trace.Off:
                return 'off';
            case Trace.Messages:
                return 'messages';
            case Trace.Compact:
                return 'compact';
            case Trace.Verbose:
                return 'verbose';
            default:
                return 'off';
        }
    }
    Trace.toString = toString;
})(Trace || (exports.Trace = Trace = {}));
var TraceFormat;
(function (TraceFormat) {
    TraceFormat["Text"] = "text";
    TraceFormat["JSON"] = "json";
})(TraceFormat || (exports.TraceFormat = TraceFormat = {}));
(function (TraceFormat) {
    function fromString(value) {
        if (!Is.string(value)) {
            return TraceFormat.Text;
        }
        value = value.toLowerCase();
        if (value === 'json') {
            return TraceFormat.JSON;
        }
        else {
            return TraceFormat.Text;
        }
    }
    TraceFormat.fromString = fromString;
})(TraceFormat || (exports.TraceFormat = TraceFormat = {}));
var SetTraceNotification;
(function (SetTraceNotification) {
    SetTraceNotification.type = new messages_1.NotificationType('$/setTrace');
})(SetTraceNotification || (exports.SetTraceNotification = SetTraceNotification = {}));
var LogTraceNotification;
(function (LogTraceNotification) {
    LogTraceNotification.type = new messages_1.NotificationType('$/logTrace');
})(LogTraceNotification || (exports.LogTraceNotification = LogTraceNotification = {}));
var ConnectionErrors;
(function (ConnectionErrors) {
    /**
     * The connection is closed.
     */
    ConnectionErrors[ConnectionErrors["Closed"] = 1] = "Closed";
    /**
     * The connection got disposed.
     */
    ConnectionErrors[ConnectionErrors["Disposed"] = 2] = "Disposed";
    /**
     * The connection is already in listening mode.
     */
    ConnectionErrors[ConnectionErrors["AlreadyListening"] = 3] = "AlreadyListening";
})(ConnectionErrors || (exports.ConnectionErrors = ConnectionErrors = {}));
class ConnectionError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        Object.setPrototypeOf(this, ConnectionError.prototype);
    }
}
exports.ConnectionError = ConnectionError;
var ConnectionStrategy;
(function (ConnectionStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.cancelUndispatched);
    }
    ConnectionStrategy.is = is;
})(ConnectionStrategy || (exports.ConnectionStrategy = ConnectionStrategy = {}));
var IdCancellationReceiverStrategy;
(function (IdCancellationReceiverStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.kind === undefined || candidate.kind === 'id') && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
    }
    IdCancellationReceiverStrategy.is = is;
})(IdCancellationReceiverStrategy || (exports.IdCancellationReceiverStrategy = IdCancellationReceiverStrategy = {}));
var RequestCancellationReceiverStrategy;
(function (RequestCancellationReceiverStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && candidate.kind === 'request' && Is.func(candidate.createCancellationTokenSource) && (candidate.dispose === undefined || Is.func(candidate.dispose));
    }
    RequestCancellationReceiverStrategy.is = is;
})(RequestCancellationReceiverStrategy || (exports.RequestCancellationReceiverStrategy = RequestCancellationReceiverStrategy = {}));
var CancellationReceiverStrategy;
(function (CancellationReceiverStrategy) {
    CancellationReceiverStrategy.Message = Object.freeze({
        createCancellationTokenSource(_) {
            return new cancellation_1.CancellationTokenSource();
        }
    });
    function is(value) {
        return IdCancellationReceiverStrategy.is(value) || RequestCancellationReceiverStrategy.is(value);
    }
    CancellationReceiverStrategy.is = is;
})(CancellationReceiverStrategy || (exports.CancellationReceiverStrategy = CancellationReceiverStrategy = {}));
var CancellationSenderStrategy;
(function (CancellationSenderStrategy) {
    CancellationSenderStrategy.Message = Object.freeze({
        sendCancellation(conn, id) {
            return conn.sendNotification(CancelNotification.type, { id });
        },
        cleanup(_) { }
    });
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.sendCancellation) && Is.func(candidate.cleanup);
    }
    CancellationSenderStrategy.is = is;
})(CancellationSenderStrategy || (exports.CancellationSenderStrategy = CancellationSenderStrategy = {}));
var CancellationStrategy;
(function (CancellationStrategy) {
    CancellationStrategy.Message = Object.freeze({
        receiver: CancellationReceiverStrategy.Message,
        sender: CancellationSenderStrategy.Message
    });
    function is(value) {
        const candidate = value;
        return candidate && CancellationReceiverStrategy.is(candidate.receiver) && CancellationSenderStrategy.is(candidate.sender);
    }
    CancellationStrategy.is = is;
})(CancellationStrategy || (exports.CancellationStrategy = CancellationStrategy = {}));
var MessageStrategy;
(function (MessageStrategy) {
    function is(value) {
        const candidate = value;
        return candidate && Is.func(candidate.handleMessage);
    }
    MessageStrategy.is = is;
})(MessageStrategy || (exports.MessageStrategy = MessageStrategy = {}));
var ConnectionOptions;
(function (ConnectionOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (CancellationStrategy.is(candidate.cancellationStrategy) || ConnectionStrategy.is(candidate.connectionStrategy) || MessageStrategy.is(candidate.messageStrategy));
    }
    ConnectionOptions.is = is;
})(ConnectionOptions || (exports.ConnectionOptions = ConnectionOptions = {}));
var ConnectionState;
(function (ConnectionState) {
    ConnectionState[ConnectionState["New"] = 1] = "New";
    ConnectionState[ConnectionState["Listening"] = 2] = "Listening";
    ConnectionState[ConnectionState["Closed"] = 3] = "Closed";
    ConnectionState[ConnectionState["Disposed"] = 4] = "Disposed";
})(ConnectionState || (ConnectionState = {}));
function createMessageConnection(messageReader, messageWriter, _logger, options) {
    const logger = _logger !== undefined ? _logger : exports.NullLogger;
    let sequenceNumber = 0;
    let notificationSequenceNumber = 0;
    let unknownResponseSequenceNumber = 0;
    const version = '2.0';
    let starRequestHandler = undefined;
    const requestHandlers = new Map();
    let starNotificationHandler = undefined;
    const notificationHandlers = new Map();
    const progressHandlers = new Map();
    let timer;
    let messageQueue = new linkedMap_1.LinkedMap();
    let responsePromises = new Map();
    let knownCanceledRequests = new Set();
    let requestTokens = new Map();
    let trace = Trace.Off;
    let traceFormat = TraceFormat.Text;
    let tracer;
    let state = ConnectionState.New;
    const errorEmitter = new events_1.Emitter();
    const closeEmitter = new events_1.Emitter();
    const unhandledNotificationEmitter = new events_1.Emitter();
    const unhandledProgressEmitter = new events_1.Emitter();
    const disposeEmitter = new events_1.Emitter();
    const cancellationStrategy = (options && options.cancellationStrategy) ? options.cancellationStrategy : CancellationStrategy.Message;
    function createRequestQueueKey(id) {
        if (id === null) {
            throw new Error(`Can't send requests with id null since the response can't be correlated.`);
        }
        return 'req-' + id.toString();
    }
    function createResponseQueueKey(id) {
        if (id === null) {
            return 'res-unknown-' + (++unknownResponseSequenceNumber).toString();
        }
        else {
            return 'res-' + id.toString();
        }
    }
    function createNotificationQueueKey() {
        return 'not-' + (++notificationSequenceNumber).toString();
    }
    function addMessageToQueue(queue, message) {
        if (messages_1.Message.isRequest(message)) {
            queue.set(createRequestQueueKey(message.id), message);
        }
        else if (messages_1.Message.isResponse(message)) {
            queue.set(createResponseQueueKey(message.id), message);
        }
        else {
            queue.set(createNotificationQueueKey(), message);
        }
    }
    function cancelUndispatched(_message) {
        return undefined;
    }
    function isListening() {
        return state === ConnectionState.Listening;
    }
    function isClosed() {
        return state === ConnectionState.Closed;
    }
    function isDisposed() {
        return state === ConnectionState.Disposed;
    }
    function closeHandler() {
        if (state === ConnectionState.New || state === ConnectionState.Listening) {
            state = ConnectionState.Closed;
            closeEmitter.fire(undefined);
        }
        // If the connection is disposed don't sent close events.
    }
    function readErrorHandler(error) {
        errorEmitter.fire([error, undefined, undefined]);
    }
    function writeErrorHandler(data) {
        errorEmitter.fire(data);
    }
    messageReader.onClose(closeHandler);
    messageReader.onError(readErrorHandler);
    messageWriter.onClose(closeHandler);
    messageWriter.onError(writeErrorHandler);
    function triggerMessageQueue() {
        if (timer || messageQueue.size === 0) {
            return;
        }
        timer = (0, ral_1.default)().timer.setImmediate(() => {
            timer = undefined;
            processMessageQueue();
        });
    }
    function handleMessage(message) {
        if (messages_1.Message.isRequest(message)) {
            handleRequest(message);
        }
        else if (messages_1.Message.isNotification(message)) {
            handleNotification(message);
        }
        else if (messages_1.Message.isResponse(message)) {
            handleResponse(message);
        }
        else {
            handleInvalidMessage(message);
        }
    }
    function processMessageQueue() {
        if (messageQueue.size === 0) {
            return;
        }
        const message = messageQueue.shift();
        try {
            const messageStrategy = options?.messageStrategy;
            if (MessageStrategy.is(messageStrategy)) {
                messageStrategy.handleMessage(message, handleMessage);
            }
            else {
                handleMessage(message);
            }
        }
        finally {
            triggerMessageQueue();
        }
    }
    const callback = (message) => {
        try {
            // We have received a cancellation message. Check if the message is still in the queue
            // and cancel it if allowed to do so.
            if (messages_1.Message.isNotification(message) && message.method === CancelNotification.type.method) {
                const cancelId = message.params.id;
                const key = createRequestQueueKey(cancelId);
                const toCancel = messageQueue.get(key);
                if (messages_1.Message.isRequest(toCancel)) {
                    const strategy = options?.connectionStrategy;
                    const response = (strategy && strategy.cancelUndispatched) ? strategy.cancelUndispatched(toCancel, cancelUndispatched) : cancelUndispatched(toCancel);
                    if (response && (response.error !== undefined || response.result !== undefined)) {
                        messageQueue.delete(key);
                        requestTokens.delete(cancelId);
                        response.id = toCancel.id;
                        traceSendingResponse(response, message.method, Date.now());
                        messageWriter.write(response).catch(() => logger.error(`Sending response for canceled message failed.`));
                        return;
                    }
                }
                const cancellationToken = requestTokens.get(cancelId);
                // The request is already running. Cancel the token
                if (cancellationToken !== undefined) {
                    cancellationToken.cancel();
                    traceReceivedNotification(message);
                    return;
                }
                else {
                    // Remember the cancel but still queue the message to
                    // clean up state in process message.
                    knownCanceledRequests.add(cancelId);
                }
            }
            addMessageToQueue(messageQueue, message);
        }
        finally {
            triggerMessageQueue();
        }
    };
    function handleRequest(requestMessage) {
        if (isDisposed()) {
            // we return here silently since we fired an event when the
            // connection got disposed.
            return;
        }
        function reply(resultOrError, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id
            };
            if (resultOrError instanceof messages_1.ResponseError) {
                message.error = resultOrError.toJson();
            }
            else {
                message.result = resultOrError === undefined ? null : resultOrError;
            }
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replyError(error, method, startTime) {
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                error: error.toJson()
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        function replySuccess(result, method, startTime) {
            // The JSON RPC defines that a response must either have a result or an error
            // So we can't treat undefined as a valid response result.
            if (result === undefined) {
                result = null;
            }
            const message = {
                jsonrpc: version,
                id: requestMessage.id,
                result: result
            };
            traceSendingResponse(message, method, startTime);
            messageWriter.write(message).catch(() => logger.error(`Sending response failed.`));
        }
        traceReceivedRequest(requestMessage);
        const element = requestHandlers.get(requestMessage.method);
        let type;
        let requestHandler;
        if (element) {
            type = element.type;
            requestHandler = element.handler;
        }
        const startTime = Date.now();
        if (requestHandler || starRequestHandler) {
            const tokenKey = requestMessage.id ?? String(Date.now()); //
            const cancellationSource = IdCancellationReceiverStrategy.is(cancellationStrategy.receiver)
                ? cancellationStrategy.receiver.createCancellationTokenSource(tokenKey)
                : cancellationStrategy.receiver.createCancellationTokenSource(requestMessage);
            if (requestMessage.id !== null && knownCanceledRequests.has(requestMessage.id)) {
                cancellationSource.cancel();
            }
            if (requestMessage.id !== null) {
                requestTokens.set(tokenKey, cancellationSource);
            }
            try {
                let handlerResult;
                if (requestHandler) {
                    if (requestMessage.params === undefined) {
                        if (type !== undefined && type.numberOfParams !== 0) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines ${type.numberOfParams} params but received none.`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(cancellationSource.token);
                    }
                    else if (Array.isArray(requestMessage.params)) {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byName) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by name but received parameters by position`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(...requestMessage.params, cancellationSource.token);
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InvalidParams, `Request ${requestMessage.method} defines parameters by position but received parameters by name`), requestMessage.method, startTime);
                            return;
                        }
                        handlerResult = requestHandler(requestMessage.params, cancellationSource.token);
                    }
                }
                else if (starRequestHandler) {
                    handlerResult = starRequestHandler(requestMessage.method, requestMessage.params, cancellationSource.token);
                }
                const promise = handlerResult;
                if (!handlerResult) {
                    requestTokens.delete(tokenKey);
                    replySuccess(handlerResult, requestMessage.method, startTime);
                }
                else if (promise.then) {
                    promise.then((resultOrError) => {
                        requestTokens.delete(tokenKey);
                        reply(resultOrError, requestMessage.method, startTime);
                    }, error => {
                        requestTokens.delete(tokenKey);
                        if (error instanceof messages_1.ResponseError) {
                            replyError(error, requestMessage.method, startTime);
                        }
                        else if (error && Is.string(error.message)) {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                        }
                        else {
                            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                        }
                    });
                }
                else {
                    requestTokens.delete(tokenKey);
                    reply(handlerResult, requestMessage.method, startTime);
                }
            }
            catch (error) {
                requestTokens.delete(tokenKey);
                if (error instanceof messages_1.ResponseError) {
                    reply(error, requestMessage.method, startTime);
                }
                else if (error && Is.string(error.message)) {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed with message: ${error.message}`), requestMessage.method, startTime);
                }
                else {
                    replyError(new messages_1.ResponseError(messages_1.ErrorCodes.InternalError, `Request ${requestMessage.method} failed unexpectedly without providing any details.`), requestMessage.method, startTime);
                }
            }
        }
        else {
            replyError(new messages_1.ResponseError(messages_1.ErrorCodes.MethodNotFound, `Unhandled method ${requestMessage.method}`), requestMessage.method, startTime);
        }
    }
    function handleResponse(responseMessage) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        if (responseMessage.id === null) {
            if (responseMessage.error) {
                logger.error(`Received response message without id: Error is: \n${JSON.stringify(responseMessage.error, undefined, 4)}`);
            }
            else {
                logger.error(`Received response message without id. No further error information provided.`);
            }
        }
        else {
            const key = responseMessage.id;
            const responsePromise = responsePromises.get(key);
            traceReceivedResponse(responseMessage, responsePromise);
            if (responsePromise !== undefined) {
                responsePromises.delete(key);
                try {
                    if (responseMessage.error) {
                        const error = responseMessage.error;
                        responsePromise.reject(new messages_1.ResponseError(error.code, error.message, error.data));
                    }
                    else if (responseMessage.result !== undefined) {
                        responsePromise.resolve(responseMessage.result);
                    }
                    else {
                        throw new Error('Should never happen.');
                    }
                }
                catch (error) {
                    if (error.message) {
                        logger.error(`Response handler '${responsePromise.method}' failed with message: ${error.message}`);
                    }
                    else {
                        logger.error(`Response handler '${responsePromise.method}' failed unexpectedly.`);
                    }
                }
            }
        }
    }
    function handleNotification(message) {
        if (isDisposed()) {
            // See handle request.
            return;
        }
        let type = undefined;
        let notificationHandler;
        if (message.method === CancelNotification.type.method) {
            const cancelId = message.params.id;
            knownCanceledRequests.delete(cancelId);
            traceReceivedNotification(message);
            return;
        }
        else {
            const element = notificationHandlers.get(message.method);
            if (element) {
                notificationHandler = element.handler;
                type = element.type;
            }
        }
        if (notificationHandler || starNotificationHandler) {
            try {
                traceReceivedNotification(message);
                if (notificationHandler) {
                    if (message.params === undefined) {
                        if (type !== undefined) {
                            if (type.numberOfParams !== 0 && type.parameterStructures !== messages_1.ParameterStructures.byName) {
                                logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received none.`);
                            }
                        }
                        notificationHandler();
                    }
                    else if (Array.isArray(message.params)) {
                        // There are JSON-RPC libraries that send progress message as positional params although
                        // specified as named. So convert them if this is the case.
                        const params = message.params;
                        if (message.method === ProgressNotification.type.method && params.length === 2 && ProgressToken.is(params[0])) {
                            notificationHandler({ token: params[0], value: params[1] });
                        }
                        else {
                            if (type !== undefined) {
                                if (type.parameterStructures === messages_1.ParameterStructures.byName) {
                                    logger.error(`Notification ${message.method} defines parameters by name but received parameters by position`);
                                }
                                if (type.numberOfParams !== message.params.length) {
                                    logger.error(`Notification ${message.method} defines ${type.numberOfParams} params but received ${params.length} arguments`);
                                }
                            }
                            notificationHandler(...params);
                        }
                    }
                    else {
                        if (type !== undefined && type.parameterStructures === messages_1.ParameterStructures.byPosition) {
                            logger.error(`Notification ${message.method} defines parameters by position but received parameters by name`);
                        }
                        notificationHandler(message.params);
                    }
                }
                else if (starNotificationHandler) {
                    starNotificationHandler(message.method, message.params);
                }
            }
            catch (error) {
                if (error.message) {
                    logger.error(`Notification handler '${message.method}' failed with message: ${error.message}`);
                }
                else {
                    logger.error(`Notification handler '${message.method}' failed unexpectedly.`);
                }
            }
        }
        else {
            unhandledNotificationEmitter.fire(message);
        }
    }
    function handleInvalidMessage(message) {
        if (!message) {
            logger.error('Received empty message.');
            return;
        }
        logger.error(`Received message which is neither a response nor a notification message:\n${JSON.stringify(message, null, 4)}`);
        // Test whether we find an id to reject the promise
        const responseMessage = message;
        if (Is.string(responseMessage.id) || Is.number(responseMessage.id)) {
            const key = responseMessage.id;
            const responseHandler = responsePromises.get(key);
            if (responseHandler) {
                responseHandler.reject(new Error('The received response has neither a result nor an error property.'));
            }
        }
    }
    function stringifyTrace(params) {
        if (params === undefined || params === null) {
            return undefined;
        }
        switch (trace) {
            case Trace.Verbose:
                return JSON.stringify(params, null, 4);
            case Trace.Compact:
                return JSON.stringify(params);
            default:
                return undefined;
        }
    }
    function traceSendingRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Sending request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('send-request', message);
        }
    }
    function traceSendingNotification(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Sending notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('send-notification', message);
        }
    }
    function traceSendingResponse(message, method, startTime) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            tracer.log(`Sending response '${method} - (${message.id})'. Processing request took ${Date.now() - startTime}ms`, data);
        }
        else {
            logLSPMessage('send-response', message);
        }
    }
    function traceReceivedRequest(message) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if ((trace === Trace.Verbose || trace === Trace.Compact) && message.params) {
                data = `Params: ${stringifyTrace(message.params)}\n\n`;
            }
            tracer.log(`Received request '${message.method} - (${message.id})'.`, data);
        }
        else {
            logLSPMessage('receive-request', message);
        }
    }
    function traceReceivedNotification(message) {
        if (trace === Trace.Off || !tracer || message.method === LogTraceNotification.type.method) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.params) {
                    data = `Params: ${stringifyTrace(message.params)}\n\n`;
                }
                else {
                    data = 'No parameters provided.\n\n';
                }
            }
            tracer.log(`Received notification '${message.method}'.`, data);
        }
        else {
            logLSPMessage('receive-notification', message);
        }
    }
    function traceReceivedResponse(message, responsePromise) {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        if (traceFormat === TraceFormat.Text) {
            let data = undefined;
            if (trace === Trace.Verbose || trace === Trace.Compact) {
                if (message.error && message.error.data) {
                    data = `Error data: ${stringifyTrace(message.error.data)}\n\n`;
                }
                else {
                    if (message.result) {
                        data = `Result: ${stringifyTrace(message.result)}\n\n`;
                    }
                    else if (message.error === undefined) {
                        data = 'No result returned.\n\n';
                    }
                }
            }
            if (responsePromise) {
                const error = message.error ? ` Request failed: ${message.error.message} (${message.error.code}).` : '';
                tracer.log(`Received response '${responsePromise.method} - (${message.id})' in ${Date.now() - responsePromise.timerStart}ms.${error}`, data);
            }
            else {
                tracer.log(`Received response ${message.id} without active response promise.`, data);
            }
        }
        else {
            logLSPMessage('receive-response', message);
        }
    }
    function logLSPMessage(type, message) {
        if (!tracer || trace === Trace.Off) {
            return;
        }
        const lspMessage = {
            isLSPMessage: true,
            type,
            message,
            timestamp: Date.now()
        };
        tracer.log(lspMessage);
    }
    function throwIfClosedOrDisposed() {
        if (isClosed()) {
            throw new ConnectionError(ConnectionErrors.Closed, 'Connection is closed.');
        }
        if (isDisposed()) {
            throw new ConnectionError(ConnectionErrors.Disposed, 'Connection is disposed.');
        }
    }
    function throwIfListening() {
        if (isListening()) {
            throw new ConnectionError(ConnectionErrors.AlreadyListening, 'Connection is already listening');
        }
    }
    function throwIfNotListening() {
        if (!isListening()) {
            throw new Error('Call listen() first.');
        }
    }
    function undefinedToNull(param) {
        if (param === undefined) {
            return null;
        }
        else {
            return param;
        }
    }
    function nullToUndefined(param) {
        if (param === null) {
            return undefined;
        }
        else {
            return param;
        }
    }
    function isNamedParam(param) {
        return param !== undefined && param !== null && !Array.isArray(param) && typeof param === 'object';
    }
    function computeSingleParam(parameterStructures, param) {
        switch (parameterStructures) {
            case messages_1.ParameterStructures.auto:
                if (isNamedParam(param)) {
                    return nullToUndefined(param);
                }
                else {
                    return [undefinedToNull(param)];
                }
            case messages_1.ParameterStructures.byName:
                if (!isNamedParam(param)) {
                    throw new Error(`Received parameters by name but param is not an object literal.`);
                }
                return nullToUndefined(param);
            case messages_1.ParameterStructures.byPosition:
                return [undefinedToNull(param)];
            default:
                throw new Error(`Unknown parameter structure ${parameterStructures.toString()}`);
        }
    }
    function computeMessageParams(type, params) {
        let result;
        const numberOfParams = type.numberOfParams;
        switch (numberOfParams) {
            case 0:
                result = undefined;
                break;
            case 1:
                result = computeSingleParam(type.parameterStructures, params[0]);
                break;
            default:
                result = [];
                for (let i = 0; i < params.length && i < numberOfParams; i++) {
                    result.push(undefinedToNull(params[i]));
                }
                if (params.length < numberOfParams) {
                    for (let i = params.length; i < numberOfParams; i++) {
                        result.push(null);
                    }
                }
                break;
        }
        return result;
    }
    const connection = {
        sendNotification: (type, ...args) => {
            throwIfClosedOrDisposed();
            let method;
            let messageParams;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' notification parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
            }
            const notificationMessage = {
                jsonrpc: version,
                method: method,
                params: messageParams
            };
            traceSendingNotification(notificationMessage);
            return messageWriter.write(notificationMessage).catch((error) => {
                logger.error(`Sending notification failed.`);
                throw error;
            });
        },
        onNotification: (type, handler) => {
            throwIfClosedOrDisposed();
            let method;
            if (Is.func(type)) {
                starNotificationHandler = type;
            }
            else if (handler) {
                if (Is.string(type)) {
                    method = type;
                    notificationHandlers.set(type, { type: undefined, handler });
                }
                else {
                    method = type.method;
                    notificationHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method !== undefined) {
                        notificationHandlers.delete(method);
                    }
                    else {
                        starNotificationHandler = undefined;
                    }
                }
            };
        },
        onProgress: (_type, token, handler) => {
            if (progressHandlers.has(token)) {
                throw new Error(`Progress handler for token ${token} already registered`);
            }
            progressHandlers.set(token, handler);
            return {
                dispose: () => {
                    progressHandlers.delete(token);
                }
            };
        },
        sendProgress: (_type, token, value) => {
            // This should not await but simple return to ensure that we don't have another
            // async scheduling. Otherwise one send could overtake another send.
            return connection.sendNotification(ProgressNotification.type, { token, value });
        },
        onUnhandledProgress: unhandledProgressEmitter.event,
        sendRequest: (type, ...args) => {
            throwIfClosedOrDisposed();
            throwIfNotListening();
            let method;
            let messageParams;
            let token = undefined;
            if (Is.string(type)) {
                method = type;
                const first = args[0];
                const last = args[args.length - 1];
                let paramStart = 0;
                let parameterStructures = messages_1.ParameterStructures.auto;
                if (messages_1.ParameterStructures.is(first)) {
                    paramStart = 1;
                    parameterStructures = first;
                }
                let paramEnd = args.length;
                if (cancellation_1.CancellationToken.is(last)) {
                    paramEnd = paramEnd - 1;
                    token = last;
                }
                const numberOfParams = paramEnd - paramStart;
                switch (numberOfParams) {
                    case 0:
                        messageParams = undefined;
                        break;
                    case 1:
                        messageParams = computeSingleParam(parameterStructures, args[paramStart]);
                        break;
                    default:
                        if (parameterStructures === messages_1.ParameterStructures.byName) {
                            throw new Error(`Received ${numberOfParams} parameters for 'by Name' request parameter structure.`);
                        }
                        messageParams = args.slice(paramStart, paramEnd).map(value => undefinedToNull(value));
                        break;
                }
            }
            else {
                const params = args;
                method = type.method;
                messageParams = computeMessageParams(type, params);
                const numberOfParams = type.numberOfParams;
                token = cancellation_1.CancellationToken.is(params[numberOfParams]) ? params[numberOfParams] : undefined;
            }
            const id = sequenceNumber++;
            let disposable;
            if (token) {
                disposable = token.onCancellationRequested(() => {
                    const p = cancellationStrategy.sender.sendCancellation(connection, id);
                    if (p === undefined) {
                        logger.log(`Received no promise from cancellation strategy when cancelling id ${id}`);
                        return Promise.resolve();
                    }
                    else {
                        return p.catch(() => {
                            logger.log(`Sending cancellation messages for id ${id} failed`);
                        });
                    }
                });
            }
            const requestMessage = {
                jsonrpc: version,
                id: id,
                method: method,
                params: messageParams
            };
            traceSendingRequest(requestMessage);
            if (typeof cancellationStrategy.sender.enableCancellation === 'function') {
                cancellationStrategy.sender.enableCancellation(requestMessage);
            }
            return new Promise(async (resolve, reject) => {
                const resolveWithCleanup = (r) => {
                    resolve(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const rejectWithCleanup = (r) => {
                    reject(r);
                    cancellationStrategy.sender.cleanup(id);
                    disposable?.dispose();
                };
                const responsePromise = { method: method, timerStart: Date.now(), resolve: resolveWithCleanup, reject: rejectWithCleanup };
                try {
                    await messageWriter.write(requestMessage);
                    responsePromises.set(id, responsePromise);
                }
                catch (error) {
                    logger.error(`Sending request failed.`);
                    // Writing the message failed. So we need to reject the promise.
                    responsePromise.reject(new messages_1.ResponseError(messages_1.ErrorCodes.MessageWriteError, error.message ? error.message : 'Unknown reason'));
                    throw error;
                }
            });
        },
        onRequest: (type, handler) => {
            throwIfClosedOrDisposed();
            let method = null;
            if (StarRequestHandler.is(type)) {
                method = undefined;
                starRequestHandler = type;
            }
            else if (Is.string(type)) {
                method = null;
                if (handler !== undefined) {
                    method = type;
                    requestHandlers.set(type, { handler: handler, type: undefined });
                }
            }
            else {
                if (handler !== undefined) {
                    method = type.method;
                    requestHandlers.set(type.method, { type, handler });
                }
            }
            return {
                dispose: () => {
                    if (method === null) {
                        return;
                    }
                    if (method !== undefined) {
                        requestHandlers.delete(method);
                    }
                    else {
                        starRequestHandler = undefined;
                    }
                }
            };
        },
        hasPendingResponse: () => {
            return responsePromises.size > 0;
        },
        trace: async (_value, _tracer, sendNotificationOrTraceOptions) => {
            let _sendNotification = false;
            let _traceFormat = TraceFormat.Text;
            if (sendNotificationOrTraceOptions !== undefined) {
                if (Is.boolean(sendNotificationOrTraceOptions)) {
                    _sendNotification = sendNotificationOrTraceOptions;
                }
                else {
                    _sendNotification = sendNotificationOrTraceOptions.sendNotification || false;
                    _traceFormat = sendNotificationOrTraceOptions.traceFormat || TraceFormat.Text;
                }
            }
            trace = _value;
            traceFormat = _traceFormat;
            if (trace === Trace.Off) {
                tracer = undefined;
            }
            else {
                tracer = _tracer;
            }
            if (_sendNotification && !isClosed() && !isDisposed()) {
                await connection.sendNotification(SetTraceNotification.type, { value: Trace.toString(_value) });
            }
        },
        onError: errorEmitter.event,
        onClose: closeEmitter.event,
        onUnhandledNotification: unhandledNotificationEmitter.event,
        onDispose: disposeEmitter.event,
        end: () => {
            messageWriter.end();
        },
        dispose: () => {
            if (isDisposed()) {
                return;
            }
            state = ConnectionState.Disposed;
            disposeEmitter.fire(undefined);
            const error = new messages_1.ResponseError(messages_1.ErrorCodes.PendingResponseRejected, 'Pending response rejected since connection got disposed');
            for (const promise of responsePromises.values()) {
                promise.reject(error);
            }
            responsePromises = new Map();
            requestTokens = new Map();
            knownCanceledRequests = new Set();
            messageQueue = new linkedMap_1.LinkedMap();
            // Test for backwards compatibility
            if (Is.func(messageWriter.dispose)) {
                messageWriter.dispose();
            }
            if (Is.func(messageReader.dispose)) {
                messageReader.dispose();
            }
        },
        listen: () => {
            throwIfClosedOrDisposed();
            throwIfListening();
            state = ConnectionState.Listening;
            messageReader.listen(callback);
        },
        inspect: () => {
            // eslint-disable-next-line no-console
            (0, ral_1.default)().console.log('inspect');
        }
    };
    connection.onNotification(LogTraceNotification.type, (params) => {
        if (trace === Trace.Off || !tracer) {
            return;
        }
        const verbose = trace === Trace.Verbose || trace === Trace.Compact;
        tracer.log(params.message, verbose ? params.verbose : undefined);
    });
    connection.onNotification(ProgressNotification.type, (params) => {
        const handler = progressHandlers.get(params.token);
        if (handler) {
            handler(params.value);
        }
        else {
            unhandledProgressEmitter.fire(params);
        }
    });
    return connection;
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/disposable.js":
/*!******************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/disposable.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Disposable = void 0;
var Disposable;
(function (Disposable) {
    function create(func) {
        return {
            dispose: func
        };
    }
    Disposable.create = create;
})(Disposable || (exports.Disposable = Disposable = {}));


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/events.js":
/*!**************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/events.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Emitter = exports.Event = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "../../node_modules/vscode-jsonrpc/lib/common/ral.js");
var Event;
(function (Event) {
    const _disposable = { dispose() { } };
    Event.None = function () { return _disposable; };
})(Event || (exports.Event = Event = {}));
class CallbackList {
    add(callback, context = null, bucket) {
        if (!this._callbacks) {
            this._callbacks = [];
            this._contexts = [];
        }
        this._callbacks.push(callback);
        this._contexts.push(context);
        if (Array.isArray(bucket)) {
            bucket.push({ dispose: () => this.remove(callback, context) });
        }
    }
    remove(callback, context = null) {
        if (!this._callbacks) {
            return;
        }
        let foundCallbackWithDifferentContext = false;
        for (let i = 0, len = this._callbacks.length; i < len; i++) {
            if (this._callbacks[i] === callback) {
                if (this._contexts[i] === context) {
                    // callback & context match => remove it
                    this._callbacks.splice(i, 1);
                    this._contexts.splice(i, 1);
                    return;
                }
                else {
                    foundCallbackWithDifferentContext = true;
                }
            }
        }
        if (foundCallbackWithDifferentContext) {
            throw new Error('When adding a listener with a context, you should remove it with the same context');
        }
    }
    invoke(...args) {
        if (!this._callbacks) {
            return [];
        }
        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);
        for (let i = 0, len = callbacks.length; i < len; i++) {
            try {
                ret.push(callbacks[i].apply(contexts[i], args));
            }
            catch (e) {
                // eslint-disable-next-line no-console
                (0, ral_1.default)().console.error(e);
            }
        }
        return ret;
    }
    isEmpty() {
        return !this._callbacks || this._callbacks.length === 0;
    }
    dispose() {
        this._callbacks = undefined;
        this._contexts = undefined;
    }
}
class Emitter {
    constructor(_options) {
        this._options = _options;
    }
    /**
     * For the public to allow to subscribe
     * to events from this Emitter
     */
    get event() {
        if (!this._event) {
            this._event = (listener, thisArgs, disposables) => {
                if (!this._callbacks) {
                    this._callbacks = new CallbackList();
                }
                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {
                    this._options.onFirstListenerAdd(this);
                }
                this._callbacks.add(listener, thisArgs);
                const result = {
                    dispose: () => {
                        if (!this._callbacks) {
                            // disposable is disposed after emitter is disposed.
                            return;
                        }
                        this._callbacks.remove(listener, thisArgs);
                        result.dispose = Emitter._noop;
                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {
                            this._options.onLastListenerRemove(this);
                        }
                    }
                };
                if (Array.isArray(disposables)) {
                    disposables.push(result);
                }
                return result;
            };
        }
        return this._event;
    }
    /**
     * To be kept private to fire an event to
     * subscribers
     */
    fire(event) {
        if (this._callbacks) {
            this._callbacks.invoke.call(this._callbacks, event);
        }
    }
    dispose() {
        if (this._callbacks) {
            this._callbacks.dispose();
            this._callbacks = undefined;
        }
    }
}
exports.Emitter = Emitter;
Emitter._noop = function () { };


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/is.js":
/*!**********************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/is.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/linkedMap.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/linkedMap.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LRUCache = exports.LinkedMap = exports.Touch = void 0;
var Touch;
(function (Touch) {
    Touch.None = 0;
    Touch.First = 1;
    Touch.AsOld = Touch.First;
    Touch.Last = 2;
    Touch.AsNew = Touch.Last;
})(Touch || (exports.Touch = Touch = {}));
class LinkedMap {
    constructor() {
        this[_a] = 'LinkedMap';
        this._map = new Map();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state = 0;
    }
    clear() {
        this._map.clear();
        this._head = undefined;
        this._tail = undefined;
        this._size = 0;
        this._state++;
    }
    isEmpty() {
        return !this._head && !this._tail;
    }
    get size() {
        return this._size;
    }
    get first() {
        return this._head?.value;
    }
    get last() {
        return this._tail?.value;
    }
    has(key) {
        return this._map.has(key);
    }
    get(key, touch = Touch.None) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        if (touch !== Touch.None) {
            this.touch(item, touch);
        }
        return item.value;
    }
    set(key, value, touch = Touch.None) {
        let item = this._map.get(key);
        if (item) {
            item.value = value;
            if (touch !== Touch.None) {
                this.touch(item, touch);
            }
        }
        else {
            item = { key, value, next: undefined, previous: undefined };
            switch (touch) {
                case Touch.None:
                    this.addItemLast(item);
                    break;
                case Touch.First:
                    this.addItemFirst(item);
                    break;
                case Touch.Last:
                    this.addItemLast(item);
                    break;
                default:
                    this.addItemLast(item);
                    break;
            }
            this._map.set(key, item);
            this._size++;
        }
        return this;
    }
    delete(key) {
        return !!this.remove(key);
    }
    remove(key) {
        const item = this._map.get(key);
        if (!item) {
            return undefined;
        }
        this._map.delete(key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    shift() {
        if (!this._head && !this._tail) {
            return undefined;
        }
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        const item = this._head;
        this._map.delete(item.key);
        this.removeItem(item);
        this._size--;
        return item.value;
    }
    forEach(callbackfn, thisArg) {
        const state = this._state;
        let current = this._head;
        while (current) {
            if (thisArg) {
                callbackfn.bind(thisArg)(current.value, current.key, this);
            }
            else {
                callbackfn(current.value, current.key, this);
            }
            if (this._state !== state) {
                throw new Error(`LinkedMap got modified during iteration.`);
            }
            current = current.next;
        }
    }
    keys() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.key, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    values() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: current.value, done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    entries() {
        const state = this._state;
        let current = this._head;
        const iterator = {
            [Symbol.iterator]: () => {
                return iterator;
            },
            next: () => {
                if (this._state !== state) {
                    throw new Error(`LinkedMap got modified during iteration.`);
                }
                if (current) {
                    const result = { value: [current.key, current.value], done: false };
                    current = current.next;
                    return result;
                }
                else {
                    return { value: undefined, done: true };
                }
            }
        };
        return iterator;
    }
    [(_a = Symbol.toStringTag, Symbol.iterator)]() {
        return this.entries();
    }
    trimOld(newSize) {
        if (newSize >= this.size) {
            return;
        }
        if (newSize === 0) {
            this.clear();
            return;
        }
        let current = this._head;
        let currentSize = this.size;
        while (current && currentSize > newSize) {
            this._map.delete(current.key);
            current = current.next;
            currentSize--;
        }
        this._head = current;
        this._size = currentSize;
        if (current) {
            current.previous = undefined;
        }
        this._state++;
    }
    addItemFirst(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._tail = item;
        }
        else if (!this._head) {
            throw new Error('Invalid list');
        }
        else {
            item.next = this._head;
            this._head.previous = item;
        }
        this._head = item;
        this._state++;
    }
    addItemLast(item) {
        // First time Insert
        if (!this._head && !this._tail) {
            this._head = item;
        }
        else if (!this._tail) {
            throw new Error('Invalid list');
        }
        else {
            item.previous = this._tail;
            this._tail.next = item;
        }
        this._tail = item;
        this._state++;
    }
    removeItem(item) {
        if (item === this._head && item === this._tail) {
            this._head = undefined;
            this._tail = undefined;
        }
        else if (item === this._head) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.next) {
                throw new Error('Invalid list');
            }
            item.next.previous = undefined;
            this._head = item.next;
        }
        else if (item === this._tail) {
            // This can only happened if size === 1 which is handle
            // by the case above.
            if (!item.previous) {
                throw new Error('Invalid list');
            }
            item.previous.next = undefined;
            this._tail = item.previous;
        }
        else {
            const next = item.next;
            const previous = item.previous;
            if (!next || !previous) {
                throw new Error('Invalid list');
            }
            next.previous = previous;
            previous.next = next;
        }
        item.next = undefined;
        item.previous = undefined;
        this._state++;
    }
    touch(item, touch) {
        if (!this._head || !this._tail) {
            throw new Error('Invalid list');
        }
        if ((touch !== Touch.First && touch !== Touch.Last)) {
            return;
        }
        if (touch === Touch.First) {
            if (item === this._head) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item
            if (item === this._tail) {
                // previous must be defined since item was not head but is tail
                // So there are more than on item in the map
                previous.next = undefined;
                this._tail = previous;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            // Insert the node at head
            item.previous = undefined;
            item.next = this._head;
            this._head.previous = item;
            this._head = item;
            this._state++;
        }
        else if (touch === Touch.Last) {
            if (item === this._tail) {
                return;
            }
            const next = item.next;
            const previous = item.previous;
            // Unlink the item.
            if (item === this._head) {
                // next must be defined since item was not tail but is head
                // So there are more than on item in the map
                next.previous = undefined;
                this._head = next;
            }
            else {
                // Both next and previous are not undefined since item was neither head nor tail.
                next.previous = previous;
                previous.next = next;
            }
            item.next = undefined;
            item.previous = this._tail;
            this._tail.next = item;
            this._tail = item;
            this._state++;
        }
    }
    toJSON() {
        const data = [];
        this.forEach((value, key) => {
            data.push([key, value]);
        });
        return data;
    }
    fromJSON(data) {
        this.clear();
        for (const [key, value] of data) {
            this.set(key, value);
        }
    }
}
exports.LinkedMap = LinkedMap;
class LRUCache extends LinkedMap {
    constructor(limit, ratio = 1) {
        super();
        this._limit = limit;
        this._ratio = Math.min(Math.max(0, ratio), 1);
    }
    get limit() {
        return this._limit;
    }
    set limit(limit) {
        this._limit = limit;
        this.checkTrim();
    }
    get ratio() {
        return this._ratio;
    }
    set ratio(ratio) {
        this._ratio = Math.min(Math.max(0, ratio), 1);
        this.checkTrim();
    }
    get(key, touch = Touch.AsNew) {
        return super.get(key, touch);
    }
    peek(key) {
        return super.get(key, Touch.None);
    }
    set(key, value) {
        super.set(key, value, Touch.Last);
        this.checkTrim();
        return this;
    }
    checkTrim() {
        if (this.size > this._limit) {
            this.trimOld(Math.round(this._limit * this._ratio));
        }
    }
}
exports.LRUCache = LRUCache;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/messageBuffer.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/messageBuffer.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AbstractMessageBuffer = void 0;
const CR = 13;
const LF = 10;
const CRLF = '\r\n';
class AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        this._encoding = encoding;
        this._chunks = [];
        this._totalLength = 0;
    }
    get encoding() {
        return this._encoding;
    }
    append(chunk) {
        const toAppend = typeof chunk === 'string' ? this.fromString(chunk, this._encoding) : chunk;
        this._chunks.push(toAppend);
        this._totalLength += toAppend.byteLength;
    }
    tryReadHeaders(lowerCaseKeys = false) {
        if (this._chunks.length === 0) {
            return undefined;
        }
        let state = 0;
        let chunkIndex = 0;
        let offset = 0;
        let chunkBytesRead = 0;
        row: while (chunkIndex < this._chunks.length) {
            const chunk = this._chunks[chunkIndex];
            offset = 0;
            column: while (offset < chunk.length) {
                const value = chunk[offset];
                switch (value) {
                    case CR:
                        switch (state) {
                            case 0:
                                state = 1;
                                break;
                            case 2:
                                state = 3;
                                break;
                            default:
                                state = 0;
                        }
                        break;
                    case LF:
                        switch (state) {
                            case 1:
                                state = 2;
                                break;
                            case 3:
                                state = 4;
                                offset++;
                                break row;
                            default:
                                state = 0;
                        }
                        break;
                    default:
                        state = 0;
                }
                offset++;
            }
            chunkBytesRead += chunk.byteLength;
            chunkIndex++;
        }
        if (state !== 4) {
            return undefined;
        }
        // The buffer contains the two CRLF at the end. So we will
        // have two empty lines after the split at the end as well.
        const buffer = this._read(chunkBytesRead + offset);
        const result = new Map();
        const headers = this.toString(buffer, 'ascii').split(CRLF);
        if (headers.length < 2) {
            return result;
        }
        for (let i = 0; i < headers.length - 2; i++) {
            const header = headers[i];
            const index = header.indexOf(':');
            if (index === -1) {
                throw new Error(`Message header must separate key and value using ':'\n${header}`);
            }
            const key = header.substr(0, index);
            const value = header.substr(index + 1).trim();
            result.set(lowerCaseKeys ? key.toLowerCase() : key, value);
        }
        return result;
    }
    tryReadBody(length) {
        if (this._totalLength < length) {
            return undefined;
        }
        return this._read(length);
    }
    get numberOfBytes() {
        return this._totalLength;
    }
    _read(byteCount) {
        if (byteCount === 0) {
            return this.emptyBuffer();
        }
        if (byteCount > this._totalLength) {
            throw new Error(`Cannot read so many bytes!`);
        }
        if (this._chunks[0].byteLength === byteCount) {
            // super fast path, precisely first chunk must be returned
            const chunk = this._chunks[0];
            this._chunks.shift();
            this._totalLength -= byteCount;
            return this.asNative(chunk);
        }
        if (this._chunks[0].byteLength > byteCount) {
            // fast path, the reading is entirely within the first chunk
            const chunk = this._chunks[0];
            const result = this.asNative(chunk, byteCount);
            this._chunks[0] = chunk.slice(byteCount);
            this._totalLength -= byteCount;
            return result;
        }
        const result = this.allocNative(byteCount);
        let resultOffset = 0;
        let chunkIndex = 0;
        while (byteCount > 0) {
            const chunk = this._chunks[chunkIndex];
            if (chunk.byteLength > byteCount) {
                // this chunk will survive
                const chunkPart = chunk.slice(0, byteCount);
                result.set(chunkPart, resultOffset);
                resultOffset += byteCount;
                this._chunks[chunkIndex] = chunk.slice(byteCount);
                this._totalLength -= byteCount;
                byteCount -= byteCount;
            }
            else {
                // this chunk will be entirely read
                result.set(chunk, resultOffset);
                resultOffset += chunk.byteLength;
                this._chunks.shift();
                this._totalLength -= chunk.byteLength;
                byteCount -= chunk.byteLength;
            }
        }
        return result;
    }
}
exports.AbstractMessageBuffer = AbstractMessageBuffer;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/messageReader.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/messageReader.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ReadableStreamMessageReader = exports.AbstractMessageReader = exports.MessageReader = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "../../node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "../../node_modules/vscode-jsonrpc/lib/common/is.js");
const events_1 = __webpack_require__(/*! ./events */ "../../node_modules/vscode-jsonrpc/lib/common/events.js");
const semaphore_1 = __webpack_require__(/*! ./semaphore */ "../../node_modules/vscode-jsonrpc/lib/common/semaphore.js");
var MessageReader;
(function (MessageReader) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.listen) && Is.func(candidate.dispose) &&
            Is.func(candidate.onError) && Is.func(candidate.onClose) && Is.func(candidate.onPartialMessage);
    }
    MessageReader.is = is;
})(MessageReader || (exports.MessageReader = MessageReader = {}));
class AbstractMessageReader {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
        this.partialMessageEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error) {
        this.errorEmitter.fire(this.asError(error));
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    get onPartialMessage() {
        return this.partialMessageEmitter.event;
    }
    firePartialMessage(info) {
        this.partialMessageEmitter.fire(info);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Reader received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageReader = AbstractMessageReader;
var ResolvedMessageReaderOptions;
(function (ResolvedMessageReaderOptions) {
    function fromOptions(options) {
        let charset;
        let result;
        let contentDecoder;
        const contentDecoders = new Map();
        let contentTypeDecoder;
        const contentTypeDecoders = new Map();
        if (options === undefined || typeof options === 'string') {
            charset = options ?? 'utf-8';
        }
        else {
            charset = options.charset ?? 'utf-8';
            if (options.contentDecoder !== undefined) {
                contentDecoder = options.contentDecoder;
                contentDecoders.set(contentDecoder.name, contentDecoder);
            }
            if (options.contentDecoders !== undefined) {
                for (const decoder of options.contentDecoders) {
                    contentDecoders.set(decoder.name, decoder);
                }
            }
            if (options.contentTypeDecoder !== undefined) {
                contentTypeDecoder = options.contentTypeDecoder;
                contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
            }
            if (options.contentTypeDecoders !== undefined) {
                for (const decoder of options.contentTypeDecoders) {
                    contentTypeDecoders.set(decoder.name, decoder);
                }
            }
        }
        if (contentTypeDecoder === undefined) {
            contentTypeDecoder = (0, ral_1.default)().applicationJson.decoder;
            contentTypeDecoders.set(contentTypeDecoder.name, contentTypeDecoder);
        }
        return { charset, contentDecoder, contentDecoders, contentTypeDecoder, contentTypeDecoders };
    }
    ResolvedMessageReaderOptions.fromOptions = fromOptions;
})(ResolvedMessageReaderOptions || (ResolvedMessageReaderOptions = {}));
class ReadableStreamMessageReader extends AbstractMessageReader {
    constructor(readable, options) {
        super();
        this.readable = readable;
        this.options = ResolvedMessageReaderOptions.fromOptions(options);
        this.buffer = (0, ral_1.default)().messageBuffer.create(this.options.charset);
        this._partialMessageTimeout = 10000;
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.readSemaphore = new semaphore_1.Semaphore(1);
    }
    set partialMessageTimeout(timeout) {
        this._partialMessageTimeout = timeout;
    }
    get partialMessageTimeout() {
        return this._partialMessageTimeout;
    }
    listen(callback) {
        this.nextMessageLength = -1;
        this.messageToken = 0;
        this.partialMessageTimer = undefined;
        this.callback = callback;
        const result = this.readable.onData((data) => {
            this.onData(data);
        });
        this.readable.onError((error) => this.fireError(error));
        this.readable.onClose(() => this.fireClose());
        return result;
    }
    onData(data) {
        try {
            this.buffer.append(data);
            while (true) {
                if (this.nextMessageLength === -1) {
                    const headers = this.buffer.tryReadHeaders(true);
                    if (!headers) {
                        return;
                    }
                    const contentLength = headers.get('content-length');
                    if (!contentLength) {
                        this.fireError(new Error(`Header must provide a Content-Length property.\n${JSON.stringify(Object.fromEntries(headers))}`));
                        return;
                    }
                    const length = parseInt(contentLength);
                    if (isNaN(length)) {
                        this.fireError(new Error(`Content-Length value must be a number. Got ${contentLength}`));
                        return;
                    }
                    this.nextMessageLength = length;
                }
                const body = this.buffer.tryReadBody(this.nextMessageLength);
                if (body === undefined) {
                    /** We haven't received the full message yet. */
                    this.setPartialMessageTimer();
                    return;
                }
                this.clearPartialMessageTimer();
                this.nextMessageLength = -1;
                // Make sure that we convert one received message after the
                // other. Otherwise it could happen that a decoding of a second
                // smaller message finished before the decoding of a first larger
                // message and then we would deliver the second message first.
                this.readSemaphore.lock(async () => {
                    const bytes = this.options.contentDecoder !== undefined
                        ? await this.options.contentDecoder.decode(body)
                        : body;
                    const message = await this.options.contentTypeDecoder.decode(bytes, this.options);
                    this.callback(message);
                }).catch((error) => {
                    this.fireError(error);
                });
            }
        }
        catch (error) {
            this.fireError(error);
        }
    }
    clearPartialMessageTimer() {
        if (this.partialMessageTimer) {
            this.partialMessageTimer.dispose();
            this.partialMessageTimer = undefined;
        }
    }
    setPartialMessageTimer() {
        this.clearPartialMessageTimer();
        if (this._partialMessageTimeout <= 0) {
            return;
        }
        this.partialMessageTimer = (0, ral_1.default)().timer.setTimeout((token, timeout) => {
            this.partialMessageTimer = undefined;
            if (token === this.messageToken) {
                this.firePartialMessage({ messageToken: token, waitingTime: timeout });
                this.setPartialMessageTimer();
            }
        }, this._partialMessageTimeout, this.messageToken, this._partialMessageTimeout);
    }
}
exports.ReadableStreamMessageReader = ReadableStreamMessageReader;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/messageWriter.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/messageWriter.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WriteableStreamMessageWriter = exports.AbstractMessageWriter = exports.MessageWriter = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "../../node_modules/vscode-jsonrpc/lib/common/ral.js");
const Is = __webpack_require__(/*! ./is */ "../../node_modules/vscode-jsonrpc/lib/common/is.js");
const semaphore_1 = __webpack_require__(/*! ./semaphore */ "../../node_modules/vscode-jsonrpc/lib/common/semaphore.js");
const events_1 = __webpack_require__(/*! ./events */ "../../node_modules/vscode-jsonrpc/lib/common/events.js");
const ContentLength = 'Content-Length: ';
const CRLF = '\r\n';
var MessageWriter;
(function (MessageWriter) {
    function is(value) {
        let candidate = value;
        return candidate && Is.func(candidate.dispose) && Is.func(candidate.onClose) &&
            Is.func(candidate.onError) && Is.func(candidate.write);
    }
    MessageWriter.is = is;
})(MessageWriter || (exports.MessageWriter = MessageWriter = {}));
class AbstractMessageWriter {
    constructor() {
        this.errorEmitter = new events_1.Emitter();
        this.closeEmitter = new events_1.Emitter();
    }
    dispose() {
        this.errorEmitter.dispose();
        this.closeEmitter.dispose();
    }
    get onError() {
        return this.errorEmitter.event;
    }
    fireError(error, message, count) {
        this.errorEmitter.fire([this.asError(error), message, count]);
    }
    get onClose() {
        return this.closeEmitter.event;
    }
    fireClose() {
        this.closeEmitter.fire(undefined);
    }
    asError(error) {
        if (error instanceof Error) {
            return error;
        }
        else {
            return new Error(`Writer received error. Reason: ${Is.string(error.message) ? error.message : 'unknown'}`);
        }
    }
}
exports.AbstractMessageWriter = AbstractMessageWriter;
var ResolvedMessageWriterOptions;
(function (ResolvedMessageWriterOptions) {
    function fromOptions(options) {
        if (options === undefined || typeof options === 'string') {
            return { charset: options ?? 'utf-8', contentTypeEncoder: (0, ral_1.default)().applicationJson.encoder };
        }
        else {
            return { charset: options.charset ?? 'utf-8', contentEncoder: options.contentEncoder, contentTypeEncoder: options.contentTypeEncoder ?? (0, ral_1.default)().applicationJson.encoder };
        }
    }
    ResolvedMessageWriterOptions.fromOptions = fromOptions;
})(ResolvedMessageWriterOptions || (ResolvedMessageWriterOptions = {}));
class WriteableStreamMessageWriter extends AbstractMessageWriter {
    constructor(writable, options) {
        super();
        this.writable = writable;
        this.options = ResolvedMessageWriterOptions.fromOptions(options);
        this.errorCount = 0;
        this.writeSemaphore = new semaphore_1.Semaphore(1);
        this.writable.onError((error) => this.fireError(error));
        this.writable.onClose(() => this.fireClose());
    }
    async write(msg) {
        return this.writeSemaphore.lock(async () => {
            const payload = this.options.contentTypeEncoder.encode(msg, this.options).then((buffer) => {
                if (this.options.contentEncoder !== undefined) {
                    return this.options.contentEncoder.encode(buffer);
                }
                else {
                    return buffer;
                }
            });
            return payload.then((buffer) => {
                const headers = [];
                headers.push(ContentLength, buffer.byteLength.toString(), CRLF);
                headers.push(CRLF);
                return this.doWrite(msg, headers, buffer);
            }, (error) => {
                this.fireError(error);
                throw error;
            });
        });
    }
    async doWrite(msg, headers, data) {
        try {
            await this.writable.write(headers.join(''), 'ascii');
            return this.writable.write(data);
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
        this.writable.end();
    }
}
exports.WriteableStreamMessageWriter = WriteableStreamMessageWriter;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/messages.js":
/*!****************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/messages.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Message = exports.NotificationType9 = exports.NotificationType8 = exports.NotificationType7 = exports.NotificationType6 = exports.NotificationType5 = exports.NotificationType4 = exports.NotificationType3 = exports.NotificationType2 = exports.NotificationType1 = exports.NotificationType0 = exports.NotificationType = exports.RequestType9 = exports.RequestType8 = exports.RequestType7 = exports.RequestType6 = exports.RequestType5 = exports.RequestType4 = exports.RequestType3 = exports.RequestType2 = exports.RequestType1 = exports.RequestType = exports.RequestType0 = exports.AbstractMessageSignature = exports.ParameterStructures = exports.ResponseError = exports.ErrorCodes = void 0;
const is = __webpack_require__(/*! ./is */ "../../node_modules/vscode-jsonrpc/lib/common/is.js");
/**
 * Predefined error codes.
 */
var ErrorCodes;
(function (ErrorCodes) {
    // Defined by JSON RPC
    ErrorCodes.ParseError = -32700;
    ErrorCodes.InvalidRequest = -32600;
    ErrorCodes.MethodNotFound = -32601;
    ErrorCodes.InvalidParams = -32602;
    ErrorCodes.InternalError = -32603;
    /**
     * This is the start range of JSON RPC reserved error codes.
     * It doesn't denote a real error code. No application error codes should
     * be defined between the start and end range. For backwards
     * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
     * are left in the range.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeStart = -32099;
    /** @deprecated use  jsonrpcReservedErrorRangeStart */
    ErrorCodes.serverErrorStart = -32099;
    /**
     * An error occurred when write a message to the transport layer.
     */
    ErrorCodes.MessageWriteError = -32099;
    /**
     * An error occurred when reading a message from the transport layer.
     */
    ErrorCodes.MessageReadError = -32098;
    /**
     * The connection got disposed or lost and all pending responses got
     * rejected.
     */
    ErrorCodes.PendingResponseRejected = -32097;
    /**
     * The connection is inactive and a use of it failed.
     */
    ErrorCodes.ConnectionInactive = -32096;
    /**
     * Error code indicating that a server received a notification or
     * request before the server has received the `initialize` request.
     */
    ErrorCodes.ServerNotInitialized = -32002;
    ErrorCodes.UnknownErrorCode = -32001;
    /**
     * This is the end range of JSON RPC reserved error codes.
     * It doesn't denote a real error code.
     *
     * @since 3.16.0
    */
    ErrorCodes.jsonrpcReservedErrorRangeEnd = -32000;
    /** @deprecated use  jsonrpcReservedErrorRangeEnd */
    ErrorCodes.serverErrorEnd = -32000;
})(ErrorCodes || (exports.ErrorCodes = ErrorCodes = {}));
/**
 * An error object return in a response in case a request
 * has failed.
 */
class ResponseError extends Error {
    constructor(code, message, data) {
        super(message);
        this.code = is.number(code) ? code : ErrorCodes.UnknownErrorCode;
        this.data = data;
        Object.setPrototypeOf(this, ResponseError.prototype);
    }
    toJson() {
        const result = {
            code: this.code,
            message: this.message
        };
        if (this.data !== undefined) {
            result.data = this.data;
        }
        return result;
    }
}
exports.ResponseError = ResponseError;
class ParameterStructures {
    constructor(kind) {
        this.kind = kind;
    }
    static is(value) {
        return value === ParameterStructures.auto || value === ParameterStructures.byName || value === ParameterStructures.byPosition;
    }
    toString() {
        return this.kind;
    }
}
exports.ParameterStructures = ParameterStructures;
/**
 * The parameter structure is automatically inferred on the number of parameters
 * and the parameter type in case of a single param.
 */
ParameterStructures.auto = new ParameterStructures('auto');
/**
 * Forces `byPosition` parameter structure. This is useful if you have a single
 * parameter which has a literal type.
 */
ParameterStructures.byPosition = new ParameterStructures('byPosition');
/**
 * Forces `byName` parameter structure. This is only useful when having a single
 * parameter. The library will report errors if used with a different number of
 * parameters.
 */
ParameterStructures.byName = new ParameterStructures('byName');
/**
 * An abstract implementation of a MessageType.
 */
class AbstractMessageSignature {
    constructor(method, numberOfParams) {
        this.method = method;
        this.numberOfParams = numberOfParams;
    }
    get parameterStructures() {
        return ParameterStructures.auto;
    }
}
exports.AbstractMessageSignature = AbstractMessageSignature;
/**
 * Classes to type request response pairs
 */
class RequestType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.RequestType0 = RequestType0;
class RequestType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType = RequestType;
class RequestType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.RequestType1 = RequestType1;
class RequestType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.RequestType2 = RequestType2;
class RequestType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.RequestType3 = RequestType3;
class RequestType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.RequestType4 = RequestType4;
class RequestType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.RequestType5 = RequestType5;
class RequestType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.RequestType6 = RequestType6;
class RequestType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.RequestType7 = RequestType7;
class RequestType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.RequestType8 = RequestType8;
class RequestType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.RequestType9 = RequestType9;
class NotificationType extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType = NotificationType;
class NotificationType0 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 0);
    }
}
exports.NotificationType0 = NotificationType0;
class NotificationType1 extends AbstractMessageSignature {
    constructor(method, _parameterStructures = ParameterStructures.auto) {
        super(method, 1);
        this._parameterStructures = _parameterStructures;
    }
    get parameterStructures() {
        return this._parameterStructures;
    }
}
exports.NotificationType1 = NotificationType1;
class NotificationType2 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 2);
    }
}
exports.NotificationType2 = NotificationType2;
class NotificationType3 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 3);
    }
}
exports.NotificationType3 = NotificationType3;
class NotificationType4 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 4);
    }
}
exports.NotificationType4 = NotificationType4;
class NotificationType5 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 5);
    }
}
exports.NotificationType5 = NotificationType5;
class NotificationType6 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 6);
    }
}
exports.NotificationType6 = NotificationType6;
class NotificationType7 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 7);
    }
}
exports.NotificationType7 = NotificationType7;
class NotificationType8 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 8);
    }
}
exports.NotificationType8 = NotificationType8;
class NotificationType9 extends AbstractMessageSignature {
    constructor(method) {
        super(method, 9);
    }
}
exports.NotificationType9 = NotificationType9;
var Message;
(function (Message) {
    /**
     * Tests if the given message is a request message
     */
    function isRequest(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && (is.string(candidate.id) || is.number(candidate.id));
    }
    Message.isRequest = isRequest;
    /**
     * Tests if the given message is a notification message
     */
    function isNotification(message) {
        const candidate = message;
        return candidate && is.string(candidate.method) && message.id === void 0;
    }
    Message.isNotification = isNotification;
    /**
     * Tests if the given message is a response message
     */
    function isResponse(message) {
        const candidate = message;
        return candidate && (candidate.result !== void 0 || !!candidate.error) && (is.string(candidate.id) || is.number(candidate.id) || candidate.id === null);
    }
    Message.isResponse = isResponse;
})(Message || (exports.Message = Message = {}));


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/ral.js":
/*!***********************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/ral.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
let _ral;
function RAL() {
    if (_ral === undefined) {
        throw new Error(`No runtime abstraction layer installed`);
    }
    return _ral;
}
(function (RAL) {
    function install(ral) {
        if (ral === undefined) {
            throw new Error(`No runtime abstraction layer provided`);
        }
        _ral = ral;
    }
    RAL.install = install;
})(RAL || (RAL = {}));
exports["default"] = RAL;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/semaphore.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/semaphore.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Semaphore = void 0;
const ral_1 = __webpack_require__(/*! ./ral */ "../../node_modules/vscode-jsonrpc/lib/common/ral.js");
class Semaphore {
    constructor(capacity = 1) {
        if (capacity <= 0) {
            throw new Error('Capacity must be greater than 0');
        }
        this._capacity = capacity;
        this._active = 0;
        this._waiting = [];
    }
    lock(thunk) {
        return new Promise((resolve, reject) => {
            this._waiting.push({ thunk, resolve, reject });
            this.runNext();
        });
    }
    get active() {
        return this._active;
    }
    runNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        (0, ral_1.default)().timer.setImmediate(() => this.doRunNext());
    }
    doRunNext() {
        if (this._waiting.length === 0 || this._active === this._capacity) {
            return;
        }
        const next = this._waiting.shift();
        this._active++;
        if (this._active > this._capacity) {
            throw new Error(`To many thunks active`);
        }
        try {
            const result = next.thunk();
            if (result instanceof Promise) {
                result.then((value) => {
                    this._active--;
                    next.resolve(value);
                    this.runNext();
                }, (err) => {
                    this._active--;
                    next.reject(err);
                    this.runNext();
                });
            }
            else {
                this._active--;
                next.resolve(result);
                this.runNext();
            }
        }
        catch (err) {
            this._active--;
            next.reject(err);
            this.runNext();
        }
    }
}
exports.Semaphore = Semaphore;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/common/sharedArrayCancellation.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SharedArrayReceiverStrategy = exports.SharedArraySenderStrategy = void 0;
const cancellation_1 = __webpack_require__(/*! ./cancellation */ "../../node_modules/vscode-jsonrpc/lib/common/cancellation.js");
var CancellationState;
(function (CancellationState) {
    CancellationState.Continue = 0;
    CancellationState.Cancelled = 1;
})(CancellationState || (CancellationState = {}));
class SharedArraySenderStrategy {
    constructor() {
        this.buffers = new Map();
    }
    enableCancellation(request) {
        if (request.id === null) {
            return;
        }
        const buffer = new SharedArrayBuffer(4);
        const data = new Int32Array(buffer, 0, 1);
        data[0] = CancellationState.Continue;
        this.buffers.set(request.id, buffer);
        request.$cancellationData = buffer;
    }
    async sendCancellation(_conn, id) {
        const buffer = this.buffers.get(id);
        if (buffer === undefined) {
            return;
        }
        const data = new Int32Array(buffer, 0, 1);
        Atomics.store(data, 0, CancellationState.Cancelled);
    }
    cleanup(id) {
        this.buffers.delete(id);
    }
    dispose() {
        this.buffers.clear();
    }
}
exports.SharedArraySenderStrategy = SharedArraySenderStrategy;
class SharedArrayBufferCancellationToken {
    constructor(buffer) {
        this.data = new Int32Array(buffer, 0, 1);
    }
    get isCancellationRequested() {
        return Atomics.load(this.data, 0) === CancellationState.Cancelled;
    }
    get onCancellationRequested() {
        throw new Error(`Cancellation over SharedArrayBuffer doesn't support cancellation events`);
    }
}
class SharedArrayBufferCancellationTokenSource {
    constructor(buffer) {
        this.token = new SharedArrayBufferCancellationToken(buffer);
    }
    cancel() {
    }
    dispose() {
    }
}
class SharedArrayReceiverStrategy {
    constructor() {
        this.kind = 'request';
    }
    createCancellationTokenSource(request) {
        const buffer = request.$cancellationData;
        if (buffer === undefined) {
            return new cancellation_1.CancellationTokenSource();
        }
        return new SharedArrayBufferCancellationTokenSource(buffer);
    }
}
exports.SharedArrayReceiverStrategy = SharedArrayReceiverStrategy;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/node/main.js":
/*!**********************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/node/main.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createMessageConnection = exports.createServerSocketTransport = exports.createClientSocketTransport = exports.createServerPipeTransport = exports.createClientPipeTransport = exports.generateRandomPipeName = exports.StreamMessageWriter = exports.StreamMessageReader = exports.SocketMessageWriter = exports.SocketMessageReader = exports.PortMessageWriter = exports.PortMessageReader = exports.IPCMessageWriter = exports.IPCMessageReader = void 0;
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */
const ril_1 = __webpack_require__(/*! ./ril */ "../../node_modules/vscode-jsonrpc/lib/node/ril.js");
// Install the node runtime abstract.
ril_1.default.install();
const path = __webpack_require__(/*! path */ "path");
const os = __webpack_require__(/*! os */ "os");
const crypto_1 = __webpack_require__(/*! crypto */ "crypto");
const net_1 = __webpack_require__(/*! net */ "net");
const api_1 = __webpack_require__(/*! ../common/api */ "../../node_modules/vscode-jsonrpc/lib/common/api.js");
__exportStar(__webpack_require__(/*! ../common/api */ "../../node_modules/vscode-jsonrpc/lib/common/api.js"), exports);
class IPCMessageReader extends api_1.AbstractMessageReader {
    constructor(process) {
        super();
        this.process = process;
        let eventEmitter = this.process;
        eventEmitter.on('error', (error) => this.fireError(error));
        eventEmitter.on('close', () => this.fireClose());
    }
    listen(callback) {
        this.process.on('message', callback);
        return api_1.Disposable.create(() => this.process.off('message', callback));
    }
}
exports.IPCMessageReader = IPCMessageReader;
class IPCMessageWriter extends api_1.AbstractMessageWriter {
    constructor(process) {
        super();
        this.process = process;
        this.errorCount = 0;
        const eventEmitter = this.process;
        eventEmitter.on('error', (error) => this.fireError(error));
        eventEmitter.on('close', () => this.fireClose);
    }
    write(msg) {
        try {
            if (typeof this.process.send === 'function') {
                this.process.send(msg, undefined, undefined, (error) => {
                    if (error) {
                        this.errorCount++;
                        this.handleError(error, msg);
                    }
                    else {
                        this.errorCount = 0;
                    }
                });
            }
            return Promise.resolve();
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
    }
}
exports.IPCMessageWriter = IPCMessageWriter;
class PortMessageReader extends api_1.AbstractMessageReader {
    constructor(port) {
        super();
        this.onData = new api_1.Emitter;
        port.on('close', () => this.fireClose);
        port.on('error', (error) => this.fireError(error));
        port.on('message', (message) => {
            this.onData.fire(message);
        });
    }
    listen(callback) {
        return this.onData.event(callback);
    }
}
exports.PortMessageReader = PortMessageReader;
class PortMessageWriter extends api_1.AbstractMessageWriter {
    constructor(port) {
        super();
        this.port = port;
        this.errorCount = 0;
        port.on('close', () => this.fireClose());
        port.on('error', (error) => this.fireError(error));
    }
    write(msg) {
        try {
            this.port.postMessage(msg);
            return Promise.resolve();
        }
        catch (error) {
            this.handleError(error, msg);
            return Promise.reject(error);
        }
    }
    handleError(error, msg) {
        this.errorCount++;
        this.fireError(error, msg, this.errorCount);
    }
    end() {
    }
}
exports.PortMessageWriter = PortMessageWriter;
class SocketMessageReader extends api_1.ReadableStreamMessageReader {
    constructor(socket, encoding = 'utf-8') {
        super((0, ril_1.default)().stream.asReadableStream(socket), encoding);
    }
}
exports.SocketMessageReader = SocketMessageReader;
class SocketMessageWriter extends api_1.WriteableStreamMessageWriter {
    constructor(socket, options) {
        super((0, ril_1.default)().stream.asWritableStream(socket), options);
        this.socket = socket;
    }
    dispose() {
        super.dispose();
        this.socket.destroy();
    }
}
exports.SocketMessageWriter = SocketMessageWriter;
class StreamMessageReader extends api_1.ReadableStreamMessageReader {
    constructor(readable, encoding) {
        super((0, ril_1.default)().stream.asReadableStream(readable), encoding);
    }
}
exports.StreamMessageReader = StreamMessageReader;
class StreamMessageWriter extends api_1.WriteableStreamMessageWriter {
    constructor(writable, options) {
        super((0, ril_1.default)().stream.asWritableStream(writable), options);
    }
}
exports.StreamMessageWriter = StreamMessageWriter;
const XDG_RUNTIME_DIR = process.env['XDG_RUNTIME_DIR'];
const safeIpcPathLengths = new Map([
    ['linux', 107],
    ['darwin', 103]
]);
function generateRandomPipeName() {
    const randomSuffix = (0, crypto_1.randomBytes)(21).toString('hex');
    if (process.platform === 'win32') {
        return `\\\\.\\pipe\\vscode-jsonrpc-${randomSuffix}-sock`;
    }
    let result;
    if (XDG_RUNTIME_DIR) {
        result = path.join(XDG_RUNTIME_DIR, `vscode-ipc-${randomSuffix}.sock`);
    }
    else {
        result = path.join(os.tmpdir(), `vscode-${randomSuffix}.sock`);
    }
    const limit = safeIpcPathLengths.get(process.platform);
    if (limit !== undefined && result.length > limit) {
        (0, ril_1.default)().console.warn(`WARNING: IPC handle "${result}" is longer than ${limit} characters.`);
    }
    return result;
}
exports.generateRandomPipeName = generateRandomPipeName;
function createClientPipeTransport(pipeName, encoding = 'utf-8') {
    let connectResolve;
    const connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
    });
    return new Promise((resolve, reject) => {
        let server = (0, net_1.createServer)((socket) => {
            server.close();
            connectResolve([
                new SocketMessageReader(socket, encoding),
                new SocketMessageWriter(socket, encoding)
            ]);
        });
        server.on('error', reject);
        server.listen(pipeName, () => {
            server.removeListener('error', reject);
            resolve({
                onConnected: () => { return connected; }
            });
        });
    });
}
exports.createClientPipeTransport = createClientPipeTransport;
function createServerPipeTransport(pipeName, encoding = 'utf-8') {
    const socket = (0, net_1.createConnection)(pipeName);
    return [
        new SocketMessageReader(socket, encoding),
        new SocketMessageWriter(socket, encoding)
    ];
}
exports.createServerPipeTransport = createServerPipeTransport;
function createClientSocketTransport(port, encoding = 'utf-8') {
    let connectResolve;
    const connected = new Promise((resolve, _reject) => {
        connectResolve = resolve;
    });
    return new Promise((resolve, reject) => {
        const server = (0, net_1.createServer)((socket) => {
            server.close();
            connectResolve([
                new SocketMessageReader(socket, encoding),
                new SocketMessageWriter(socket, encoding)
            ]);
        });
        server.on('error', reject);
        server.listen(port, '127.0.0.1', () => {
            server.removeListener('error', reject);
            resolve({
                onConnected: () => { return connected; }
            });
        });
    });
}
exports.createClientSocketTransport = createClientSocketTransport;
function createServerSocketTransport(port, encoding = 'utf-8') {
    const socket = (0, net_1.createConnection)(port, '127.0.0.1');
    return [
        new SocketMessageReader(socket, encoding),
        new SocketMessageWriter(socket, encoding)
    ];
}
exports.createServerSocketTransport = createServerSocketTransport;
function isReadableStream(value) {
    const candidate = value;
    return candidate.read !== undefined && candidate.addListener !== undefined;
}
function isWritableStream(value) {
    const candidate = value;
    return candidate.write !== undefined && candidate.addListener !== undefined;
}
function createMessageConnection(input, output, logger, options) {
    if (!logger) {
        logger = api_1.NullLogger;
    }
    const reader = isReadableStream(input) ? new StreamMessageReader(input) : input;
    const writer = isWritableStream(output) ? new StreamMessageWriter(output) : output;
    if (api_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, api_1.createMessageConnection)(reader, writer, logger, options);
}
exports.createMessageConnection = createMessageConnection;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/lib/node/ril.js":
/*!*********************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/lib/node/ril.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const util_1 = __webpack_require__(/*! util */ "util");
const api_1 = __webpack_require__(/*! ../common/api */ "../../node_modules/vscode-jsonrpc/lib/common/api.js");
class MessageBuffer extends api_1.AbstractMessageBuffer {
    constructor(encoding = 'utf-8') {
        super(encoding);
    }
    emptyBuffer() {
        return MessageBuffer.emptyBuffer;
    }
    fromString(value, encoding) {
        return Buffer.from(value, encoding);
    }
    toString(value, encoding) {
        if (value instanceof Buffer) {
            return value.toString(encoding);
        }
        else {
            return new util_1.TextDecoder(encoding).decode(value);
        }
    }
    asNative(buffer, length) {
        if (length === undefined) {
            return buffer instanceof Buffer ? buffer : Buffer.from(buffer);
        }
        else {
            return buffer instanceof Buffer ? buffer.slice(0, length) : Buffer.from(buffer, 0, length);
        }
    }
    allocNative(length) {
        return Buffer.allocUnsafe(length);
    }
}
MessageBuffer.emptyBuffer = Buffer.allocUnsafe(0);
class ReadableStreamWrapper {
    constructor(stream) {
        this.stream = stream;
    }
    onClose(listener) {
        this.stream.on('close', listener);
        return api_1.Disposable.create(() => this.stream.off('close', listener));
    }
    onError(listener) {
        this.stream.on('error', listener);
        return api_1.Disposable.create(() => this.stream.off('error', listener));
    }
    onEnd(listener) {
        this.stream.on('end', listener);
        return api_1.Disposable.create(() => this.stream.off('end', listener));
    }
    onData(listener) {
        this.stream.on('data', listener);
        return api_1.Disposable.create(() => this.stream.off('data', listener));
    }
}
class WritableStreamWrapper {
    constructor(stream) {
        this.stream = stream;
    }
    onClose(listener) {
        this.stream.on('close', listener);
        return api_1.Disposable.create(() => this.stream.off('close', listener));
    }
    onError(listener) {
        this.stream.on('error', listener);
        return api_1.Disposable.create(() => this.stream.off('error', listener));
    }
    onEnd(listener) {
        this.stream.on('end', listener);
        return api_1.Disposable.create(() => this.stream.off('end', listener));
    }
    write(data, encoding) {
        return new Promise((resolve, reject) => {
            const callback = (error) => {
                if (error === undefined || error === null) {
                    resolve();
                }
                else {
                    reject(error);
                }
            };
            if (typeof data === 'string') {
                this.stream.write(data, encoding, callback);
            }
            else {
                this.stream.write(data, callback);
            }
        });
    }
    end() {
        this.stream.end();
    }
}
const _ril = Object.freeze({
    messageBuffer: Object.freeze({
        create: (encoding) => new MessageBuffer(encoding)
    }),
    applicationJson: Object.freeze({
        encoder: Object.freeze({
            name: 'application/json',
            encode: (msg, options) => {
                try {
                    return Promise.resolve(Buffer.from(JSON.stringify(msg, undefined, 0), options.charset));
                }
                catch (err) {
                    return Promise.reject(err);
                }
            }
        }),
        decoder: Object.freeze({
            name: 'application/json',
            decode: (buffer, options) => {
                try {
                    if (buffer instanceof Buffer) {
                        return Promise.resolve(JSON.parse(buffer.toString(options.charset)));
                    }
                    else {
                        return Promise.resolve(JSON.parse(new util_1.TextDecoder(options.charset).decode(buffer)));
                    }
                }
                catch (err) {
                    return Promise.reject(err);
                }
            }
        })
    }),
    stream: Object.freeze({
        asReadableStream: (stream) => new ReadableStreamWrapper(stream),
        asWritableStream: (stream) => new WritableStreamWrapper(stream)
    }),
    console: console,
    timer: Object.freeze({
        setTimeout(callback, ms, ...args) {
            const handle = setTimeout(callback, ms, ...args);
            return { dispose: () => clearTimeout(handle) };
        },
        setImmediate(callback, ...args) {
            const handle = setImmediate(callback, ...args);
            return { dispose: () => clearImmediate(handle) };
        },
        setInterval(callback, ms, ...args) {
            const handle = setInterval(callback, ms, ...args);
            return { dispose: () => clearInterval(handle) };
        }
    })
});
function RIL() {
    return _ril;
}
(function (RIL) {
    function install() {
        api_1.RAL.install(_ril);
    }
    RIL.install = install;
})(RIL || (RIL = {}));
exports["default"] = RIL;


/***/ }),

/***/ "../../node_modules/vscode-jsonrpc/node.js":
/*!*************************************************!*\
  !*** ../../node_modules/vscode-jsonrpc/node.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/node/main */ "../../node_modules/vscode-jsonrpc/lib/node/main.js");

/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/api.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/api.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LSPErrorCodes = exports.createProtocolConnection = void 0;
__exportStar(__webpack_require__(/*! vscode-jsonrpc */ "../../node_modules/vscode-jsonrpc/lib/node/main.js"), exports);
__exportStar(__webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/umd/main.js"), exports);
__exportStar(__webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js"), exports);
__exportStar(__webpack_require__(/*! ./protocol */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.js"), exports);
var connection_1 = __webpack_require__(/*! ./connection */ "../../node_modules/vscode-languageserver-protocol/lib/common/connection.js");
Object.defineProperty(exports, "createProtocolConnection", ({ enumerable: true, get: function () { return connection_1.createProtocolConnection; } }));
var LSPErrorCodes;
(function (LSPErrorCodes) {
    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeStart = -32899;
    /**
     * A request failed but it was syntactically correct, e.g the
     * method name was known and the parameters were valid. The error
     * message should contain human readable information about why
     * the request failed.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.RequestFailed = -32803;
    /**
     * The server cancelled the request. This error code should
     * only be used for requests that explicitly support being
     * server cancellable.
     *
     * @since 3.17.0
     */
    LSPErrorCodes.ServerCancelled = -32802;
    /**
     * The server detected that the content of a document got
     * modified outside normal conditions. A server should
     * NOT send this error code if it detects a content change
     * in it unprocessed messages. The result even computed
     * on an older state might still be useful for the client.
     *
     * If a client decides that a result is not of any use anymore
     * the client should cancel the request.
     */
    LSPErrorCodes.ContentModified = -32801;
    /**
     * The client has canceled a request and a server as detected
     * the cancel.
     */
    LSPErrorCodes.RequestCancelled = -32800;
    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    LSPErrorCodes.lspReservedErrorRangeEnd = -32800;
})(LSPErrorCodes || (exports.LSPErrorCodes = LSPErrorCodes = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/connection.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/connection.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "../../node_modules/vscode-jsonrpc/lib/node/main.js");
function createProtocolConnection(input, output, logger, options) {
    if (vscode_jsonrpc_1.ConnectionStrategy.is(options)) {
        options = { connectionStrategy: options };
    }
    return (0, vscode_jsonrpc_1.createMessageConnection)(input, output, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/messages.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProtocolNotificationType = exports.ProtocolNotificationType0 = exports.ProtocolRequestType = exports.ProtocolRequestType0 = exports.RegistrationType = exports.MessageDirection = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "../../node_modules/vscode-jsonrpc/lib/node/main.js");
var MessageDirection;
(function (MessageDirection) {
    MessageDirection["clientToServer"] = "clientToServer";
    MessageDirection["serverToClient"] = "serverToClient";
    MessageDirection["both"] = "both";
})(MessageDirection || (exports.MessageDirection = MessageDirection = {}));
class RegistrationType {
    constructor(method) {
        this.method = method;
    }
}
exports.RegistrationType = RegistrationType;
class ProtocolRequestType0 extends vscode_jsonrpc_1.RequestType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolRequestType0 = ProtocolRequestType0;
class ProtocolRequestType extends vscode_jsonrpc_1.RequestType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolRequestType = ProtocolRequestType;
class ProtocolNotificationType0 extends vscode_jsonrpc_1.NotificationType0 {
    constructor(method) {
        super(method);
    }
}
exports.ProtocolNotificationType0 = ProtocolNotificationType0;
class ProtocolNotificationType extends vscode_jsonrpc_1.NotificationType {
    constructor(method) {
        super(method, vscode_jsonrpc_1.ParameterStructures.byName);
    }
}
exports.ProtocolNotificationType = ProtocolNotificationType;


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.CallHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to result a `CallHierarchyItem` in a document at a given position.
 * Can be used as an input to an incoming or outgoing call hierarchy.
 *
 * @since 3.16.0
 */
var CallHierarchyPrepareRequest;
(function (CallHierarchyPrepareRequest) {
    CallHierarchyPrepareRequest.method = 'textDocument/prepareCallHierarchy';
    CallHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(CallHierarchyPrepareRequest.method);
})(CallHierarchyPrepareRequest || (exports.CallHierarchyPrepareRequest = CallHierarchyPrepareRequest = {}));
/**
 * A request to resolve the incoming calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyIncomingCallsRequest;
(function (CallHierarchyIncomingCallsRequest) {
    CallHierarchyIncomingCallsRequest.method = 'callHierarchy/incomingCalls';
    CallHierarchyIncomingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyIncomingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyIncomingCallsRequest.method);
})(CallHierarchyIncomingCallsRequest || (exports.CallHierarchyIncomingCallsRequest = CallHierarchyIncomingCallsRequest = {}));
/**
 * A request to resolve the outgoing calls for a given `CallHierarchyItem`.
 *
 * @since 3.16.0
 */
var CallHierarchyOutgoingCallsRequest;
(function (CallHierarchyOutgoingCallsRequest) {
    CallHierarchyOutgoingCallsRequest.method = 'callHierarchy/outgoingCalls';
    CallHierarchyOutgoingCallsRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CallHierarchyOutgoingCallsRequest.type = new messages_1.ProtocolRequestType(CallHierarchyOutgoingCallsRequest.method);
})(CallHierarchyOutgoingCallsRequest || (exports.CallHierarchyOutgoingCallsRequest = CallHierarchyOutgoingCallsRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ColorPresentationRequest = exports.DocumentColorRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to list all color symbols found in a given text document. The request's
 * parameter is of type {@link DocumentColorParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */
var DocumentColorRequest;
(function (DocumentColorRequest) {
    DocumentColorRequest.method = 'textDocument/documentColor';
    DocumentColorRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentColorRequest.type = new messages_1.ProtocolRequestType(DocumentColorRequest.method);
})(DocumentColorRequest || (exports.DocumentColorRequest = DocumentColorRequest = {}));
/**
 * A request to list all presentation for a color. The request's
 * parameter is of type {@link ColorPresentationParams} the
 * response is of type {@link ColorInformation ColorInformation[]} or a Thenable
 * that resolves to such.
 */
var ColorPresentationRequest;
(function (ColorPresentationRequest) {
    ColorPresentationRequest.method = 'textDocument/colorPresentation';
    ColorPresentationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ColorPresentationRequest.type = new messages_1.ProtocolRequestType(ColorPresentationRequest.method);
})(ColorPresentationRequest || (exports.ColorPresentationRequest = ColorPresentationRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigurationRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
//---- Get Configuration request ----
/**
 * The 'workspace/configuration' request is sent from the server to the client to fetch a certain
 * configuration setting.
 *
 * This pull model replaces the old push model were the client signaled configuration change via an
 * event. If the server still needs to react to configuration changes (since the server caches the
 * result of `workspace/configuration` requests) the server should register for an empty configuration
 * change event and empty the cache if such an event is received.
 */
var ConfigurationRequest;
(function (ConfigurationRequest) {
    ConfigurationRequest.method = 'workspace/configuration';
    ConfigurationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ConfigurationRequest.type = new messages_1.ProtocolRequestType(ConfigurationRequest.method);
})(ConfigurationRequest || (exports.ConfigurationRequest = ConfigurationRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DeclarationRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Declaration} or a typed array of {@link DeclarationLink}
 * or a Thenable that resolves to such.
 */
var DeclarationRequest;
(function (DeclarationRequest) {
    DeclarationRequest.method = 'textDocument/declaration';
    DeclarationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DeclarationRequest.type = new messages_1.ProtocolRequestType(DeclarationRequest.method);
})(DeclarationRequest || (exports.DeclarationRequest = DeclarationRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js":
/*!*******************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "../../node_modules/vscode-jsonrpc/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "../../node_modules/vscode-languageserver-protocol/lib/common/utils/is.js");
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * @since 3.17.0
 */
var DiagnosticServerCancellationData;
(function (DiagnosticServerCancellationData) {
    function is(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.retriggerRequest);
    }
    DiagnosticServerCancellationData.is = is;
})(DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = DiagnosticServerCancellationData = {}));
/**
 * The document diagnostic report kinds.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticReportKind;
(function (DocumentDiagnosticReportKind) {
    /**
     * A diagnostic report with a full
     * set of problems.
     */
    DocumentDiagnosticReportKind.Full = 'full';
    /**
     * A report indicating that the last
     * returned report is still accurate.
     */
    DocumentDiagnosticReportKind.Unchanged = 'unchanged';
})(DocumentDiagnosticReportKind || (exports.DocumentDiagnosticReportKind = DocumentDiagnosticReportKind = {}));
/**
 * The document diagnostic request definition.
 *
 * @since 3.17.0
 */
var DocumentDiagnosticRequest;
(function (DocumentDiagnosticRequest) {
    DocumentDiagnosticRequest.method = 'textDocument/diagnostic';
    DocumentDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentDiagnosticRequest.type = new messages_1.ProtocolRequestType(DocumentDiagnosticRequest.method);
    DocumentDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(DocumentDiagnosticRequest || (exports.DocumentDiagnosticRequest = DocumentDiagnosticRequest = {}));
/**
 * The workspace diagnostic request definition.
 *
 * @since 3.17.0
 */
var WorkspaceDiagnosticRequest;
(function (WorkspaceDiagnosticRequest) {
    WorkspaceDiagnosticRequest.method = 'workspace/diagnostic';
    WorkspaceDiagnosticRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceDiagnosticRequest.type = new messages_1.ProtocolRequestType(WorkspaceDiagnosticRequest.method);
    WorkspaceDiagnosticRequest.partialResult = new vscode_jsonrpc_1.ProgressType();
})(WorkspaceDiagnosticRequest || (exports.WorkspaceDiagnosticRequest = WorkspaceDiagnosticRequest = {}));
/**
 * The diagnostic refresh request definition.
 *
 * @since 3.17.0
 */
var DiagnosticRefreshRequest;
(function (DiagnosticRefreshRequest) {
    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
    DiagnosticRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
})(DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = DiagnosticRefreshRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.DidRenameFilesNotification = exports.WillRenameFilesRequest = exports.DidCreateFilesNotification = exports.WillCreateFilesRequest = exports.FileOperationPatternKind = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A pattern kind describing if a glob pattern matches a file a folder or
 * both.
 *
 * @since 3.16.0
 */
var FileOperationPatternKind;
(function (FileOperationPatternKind) {
    /**
     * The pattern matches a file only.
     */
    FileOperationPatternKind.file = 'file';
    /**
     * The pattern matches a folder only.
     */
    FileOperationPatternKind.folder = 'folder';
})(FileOperationPatternKind || (exports.FileOperationPatternKind = FileOperationPatternKind = {}));
/**
 * The will create files request is sent from the client to the server before files are actually
 * created as long as the creation is triggered from within the client.
 *
 * The request can return a `WorkspaceEdit` which will be applied to workspace before the
 * files are created. Hence the `WorkspaceEdit` can not manipulate the content of the file
 * to be created.
 *
 * @since 3.16.0
 */
var WillCreateFilesRequest;
(function (WillCreateFilesRequest) {
    WillCreateFilesRequest.method = 'workspace/willCreateFiles';
    WillCreateFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillCreateFilesRequest.type = new messages_1.ProtocolRequestType(WillCreateFilesRequest.method);
})(WillCreateFilesRequest || (exports.WillCreateFilesRequest = WillCreateFilesRequest = {}));
/**
 * The did create files notification is sent from the client to the server when
 * files were created from within the client.
 *
 * @since 3.16.0
 */
var DidCreateFilesNotification;
(function (DidCreateFilesNotification) {
    DidCreateFilesNotification.method = 'workspace/didCreateFiles';
    DidCreateFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCreateFilesNotification.type = new messages_1.ProtocolNotificationType(DidCreateFilesNotification.method);
})(DidCreateFilesNotification || (exports.DidCreateFilesNotification = DidCreateFilesNotification = {}));
/**
 * The will rename files request is sent from the client to the server before files are actually
 * renamed as long as the rename is triggered from within the client.
 *
 * @since 3.16.0
 */
var WillRenameFilesRequest;
(function (WillRenameFilesRequest) {
    WillRenameFilesRequest.method = 'workspace/willRenameFiles';
    WillRenameFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillRenameFilesRequest.type = new messages_1.ProtocolRequestType(WillRenameFilesRequest.method);
})(WillRenameFilesRequest || (exports.WillRenameFilesRequest = WillRenameFilesRequest = {}));
/**
 * The did rename files notification is sent from the client to the server when
 * files were renamed from within the client.
 *
 * @since 3.16.0
 */
var DidRenameFilesNotification;
(function (DidRenameFilesNotification) {
    DidRenameFilesNotification.method = 'workspace/didRenameFiles';
    DidRenameFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidRenameFilesNotification.type = new messages_1.ProtocolNotificationType(DidRenameFilesNotification.method);
})(DidRenameFilesNotification || (exports.DidRenameFilesNotification = DidRenameFilesNotification = {}));
/**
 * The will delete files request is sent from the client to the server before files are actually
 * deleted as long as the deletion is triggered from within the client.
 *
 * @since 3.16.0
 */
var DidDeleteFilesNotification;
(function (DidDeleteFilesNotification) {
    DidDeleteFilesNotification.method = 'workspace/didDeleteFiles';
    DidDeleteFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidDeleteFilesNotification.type = new messages_1.ProtocolNotificationType(DidDeleteFilesNotification.method);
})(DidDeleteFilesNotification || (exports.DidDeleteFilesNotification = DidDeleteFilesNotification = {}));
/**
 * The did delete files notification is sent from the client to the server when
 * files were deleted from within the client.
 *
 * @since 3.16.0
 */
var WillDeleteFilesRequest;
(function (WillDeleteFilesRequest) {
    WillDeleteFilesRequest.method = 'workspace/willDeleteFiles';
    WillDeleteFilesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillDeleteFilesRequest.type = new messages_1.ProtocolRequestType(WillDeleteFilesRequest.method);
})(WillDeleteFilesRequest || (exports.WillDeleteFilesRequest = WillDeleteFilesRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoldingRangeRefreshRequest = exports.FoldingRangeRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide folding ranges in a document. The request's
 * parameter is of type {@link FoldingRangeParams}, the
 * response is of type {@link FoldingRangeList} or a Thenable
 * that resolves to such.
 */
var FoldingRangeRequest;
(function (FoldingRangeRequest) {
    FoldingRangeRequest.method = 'textDocument/foldingRange';
    FoldingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    FoldingRangeRequest.type = new messages_1.ProtocolRequestType(FoldingRangeRequest.method);
})(FoldingRangeRequest || (exports.FoldingRangeRequest = FoldingRangeRequest = {}));
/**
 * @since 3.18.0
 * @proposed
 */
var FoldingRangeRefreshRequest;
(function (FoldingRangeRefreshRequest) {
    FoldingRangeRefreshRequest.method = `workspace/foldingRange/refresh`;
    FoldingRangeRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    FoldingRangeRefreshRequest.type = new messages_1.ProtocolRequestType0(FoldingRangeRefreshRequest.method);
})(FoldingRangeRefreshRequest || (exports.FoldingRangeRefreshRequest = FoldingRangeRefreshRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ImplementationRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the implementation locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Definition} or a Thenable that resolves to such.
 */
var ImplementationRequest;
(function (ImplementationRequest) {
    ImplementationRequest.method = 'textDocument/implementation';
    ImplementationRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ImplementationRequest.type = new messages_1.ProtocolRequestType(ImplementationRequest.method);
})(ImplementationRequest || (exports.ImplementationRequest = ImplementationRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js":
/*!******************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide inlay hints in a document. The request's parameter is of
 * type {@link InlayHintsParams}, the response is of type
 * {@link InlayHint InlayHint[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintRequest;
(function (InlayHintRequest) {
    InlayHintRequest.method = 'textDocument/inlayHint';
    InlayHintRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintRequest.type = new messages_1.ProtocolRequestType(InlayHintRequest.method);
})(InlayHintRequest || (exports.InlayHintRequest = InlayHintRequest = {}));
/**
 * A request to resolve additional properties for an inlay hint.
 * The request's parameter is of type {@link InlayHint}, the response is
 * of type {@link InlayHint} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlayHintResolveRequest;
(function (InlayHintResolveRequest) {
    InlayHintResolveRequest.method = 'inlayHint/resolve';
    InlayHintResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlayHintResolveRequest.type = new messages_1.ProtocolRequestType(InlayHintResolveRequest.method);
})(InlayHintResolveRequest || (exports.InlayHintResolveRequest = InlayHintResolveRequest = {}));
/**
 * @since 3.17.0
 */
var InlayHintRefreshRequest;
(function (InlayHintRefreshRequest) {
    InlayHintRefreshRequest.method = `workspace/inlayHint/refresh`;
    InlayHintRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    InlayHintRefreshRequest.type = new messages_1.ProtocolRequestType0(InlayHintRefreshRequest.method);
})(InlayHintRefreshRequest || (exports.InlayHintRefreshRequest = InlayHintRefreshRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineCompletion.js":
/*!*************************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineCompletion.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineCompletionRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide inline completions in a document. The request's parameter is of
 * type {@link InlineCompletionParams}, the response is of type
 * {@link InlineCompletion InlineCompletion[]} or a Thenable that resolves to such.
 *
 * @since 3.18.0
 * @proposed
 */
var InlineCompletionRequest;
(function (InlineCompletionRequest) {
    InlineCompletionRequest.method = 'textDocument/inlineCompletion';
    InlineCompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlineCompletionRequest.type = new messages_1.ProtocolRequestType(InlineCompletionRequest.method);
})(InlineCompletionRequest || (exports.InlineCompletionRequest = InlineCompletionRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js":
/*!********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineValueRefreshRequest = exports.InlineValueRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide inline values in a document. The request's parameter is of
 * type {@link InlineValueParams}, the response is of type
 * {@link InlineValue InlineValue[]} or a Thenable that resolves to such.
 *
 * @since 3.17.0
 */
var InlineValueRequest;
(function (InlineValueRequest) {
    InlineValueRequest.method = 'textDocument/inlineValue';
    InlineValueRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InlineValueRequest.type = new messages_1.ProtocolRequestType(InlineValueRequest.method);
})(InlineValueRequest || (exports.InlineValueRequest = InlineValueRequest = {}));
/**
 * @since 3.17.0
 */
var InlineValueRefreshRequest;
(function (InlineValueRefreshRequest) {
    InlineValueRefreshRequest.method = `workspace/inlineValue/refresh`;
    InlineValueRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    InlineValueRefreshRequest.type = new messages_1.ProtocolRequestType0(InlineValueRefreshRequest.method);
})(InlineValueRefreshRequest || (exports.InlineValueRefreshRequest = InlineValueRefreshRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceSymbolRequest = exports.CodeActionResolveRequest = exports.CodeActionRequest = exports.DocumentSymbolRequest = exports.DocumentHighlightRequest = exports.ReferencesRequest = exports.DefinitionRequest = exports.SignatureHelpRequest = exports.SignatureHelpTriggerKind = exports.HoverRequest = exports.CompletionResolveRequest = exports.CompletionRequest = exports.CompletionTriggerKind = exports.PublishDiagnosticsNotification = exports.WatchKind = exports.RelativePattern = exports.FileChangeType = exports.DidChangeWatchedFilesNotification = exports.WillSaveTextDocumentWaitUntilRequest = exports.WillSaveTextDocumentNotification = exports.TextDocumentSaveReason = exports.DidSaveTextDocumentNotification = exports.DidCloseTextDocumentNotification = exports.DidChangeTextDocumentNotification = exports.TextDocumentContentChangeEvent = exports.DidOpenTextDocumentNotification = exports.TextDocumentSyncKind = exports.TelemetryEventNotification = exports.LogMessageNotification = exports.ShowMessageRequest = exports.ShowMessageNotification = exports.MessageType = exports.DidChangeConfigurationNotification = exports.ExitNotification = exports.ShutdownRequest = exports.InitializedNotification = exports.InitializeErrorCodes = exports.InitializeRequest = exports.WorkDoneProgressOptions = exports.TextDocumentRegistrationOptions = exports.StaticRegistrationOptions = exports.PositionEncodingKind = exports.FailureHandlingKind = exports.ResourceOperationKind = exports.UnregistrationRequest = exports.RegistrationRequest = exports.DocumentSelector = exports.NotebookCellTextDocumentFilter = exports.NotebookDocumentFilter = exports.TextDocumentFilter = void 0;
exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = exports.WillDeleteFilesRequest = exports.DidDeleteFilesNotification = exports.WillRenameFilesRequest = exports.DidRenameFilesNotification = exports.WillCreateFilesRequest = exports.DidCreateFilesNotification = exports.FileOperationPatternKind = exports.LinkedEditingRangeRequest = exports.ShowDocumentRequest = exports.SemanticTokensRegistrationType = exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.TokenFormat = exports.CallHierarchyPrepareRequest = exports.CallHierarchyOutgoingCallsRequest = exports.CallHierarchyIncomingCallsRequest = exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = exports.SelectionRangeRequest = exports.DeclarationRequest = exports.FoldingRangeRefreshRequest = exports.FoldingRangeRequest = exports.ColorPresentationRequest = exports.DocumentColorRequest = exports.ConfigurationRequest = exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = exports.TypeDefinitionRequest = exports.ImplementationRequest = exports.ApplyWorkspaceEditRequest = exports.ExecuteCommandRequest = exports.PrepareRenameRequest = exports.RenameRequest = exports.PrepareSupportDefaultBehavior = exports.DocumentOnTypeFormattingRequest = exports.DocumentRangesFormattingRequest = exports.DocumentRangeFormattingRequest = exports.DocumentFormattingRequest = exports.DocumentLinkResolveRequest = exports.DocumentLinkRequest = exports.CodeLensRefreshRequest = exports.CodeLensResolveRequest = exports.CodeLensRequest = exports.WorkspaceSymbolResolveRequest = void 0;
exports.InlineCompletionRequest = exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = exports.DiagnosticRefreshRequest = exports.WorkspaceDiagnosticRequest = exports.DocumentDiagnosticRequest = exports.DocumentDiagnosticReportKind = exports.DiagnosticServerCancellationData = exports.InlayHintRefreshRequest = exports.InlayHintResolveRequest = exports.InlayHintRequest = exports.InlineValueRefreshRequest = exports.InlineValueRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchySubtypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
const vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/umd/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "../../node_modules/vscode-languageserver-protocol/lib/common/utils/is.js");
const protocol_implementation_1 = __webpack_require__(/*! ./protocol.implementation */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.implementation.js");
Object.defineProperty(exports, "ImplementationRequest", ({ enumerable: true, get: function () { return protocol_implementation_1.ImplementationRequest; } }));
const protocol_typeDefinition_1 = __webpack_require__(/*! ./protocol.typeDefinition */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js");
Object.defineProperty(exports, "TypeDefinitionRequest", ({ enumerable: true, get: function () { return protocol_typeDefinition_1.TypeDefinitionRequest; } }));
const protocol_workspaceFolder_1 = __webpack_require__(/*! ./protocol.workspaceFolder */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js");
Object.defineProperty(exports, "WorkspaceFoldersRequest", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.WorkspaceFoldersRequest; } }));
Object.defineProperty(exports, "DidChangeWorkspaceFoldersNotification", ({ enumerable: true, get: function () { return protocol_workspaceFolder_1.DidChangeWorkspaceFoldersNotification; } }));
const protocol_configuration_1 = __webpack_require__(/*! ./protocol.configuration */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.configuration.js");
Object.defineProperty(exports, "ConfigurationRequest", ({ enumerable: true, get: function () { return protocol_configuration_1.ConfigurationRequest; } }));
const protocol_colorProvider_1 = __webpack_require__(/*! ./protocol.colorProvider */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.colorProvider.js");
Object.defineProperty(exports, "DocumentColorRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.DocumentColorRequest; } }));
Object.defineProperty(exports, "ColorPresentationRequest", ({ enumerable: true, get: function () { return protocol_colorProvider_1.ColorPresentationRequest; } }));
const protocol_foldingRange_1 = __webpack_require__(/*! ./protocol.foldingRange */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.foldingRange.js");
Object.defineProperty(exports, "FoldingRangeRequest", ({ enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRequest; } }));
Object.defineProperty(exports, "FoldingRangeRefreshRequest", ({ enumerable: true, get: function () { return protocol_foldingRange_1.FoldingRangeRefreshRequest; } }));
const protocol_declaration_1 = __webpack_require__(/*! ./protocol.declaration */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.declaration.js");
Object.defineProperty(exports, "DeclarationRequest", ({ enumerable: true, get: function () { return protocol_declaration_1.DeclarationRequest; } }));
const protocol_selectionRange_1 = __webpack_require__(/*! ./protocol.selectionRange */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js");
Object.defineProperty(exports, "SelectionRangeRequest", ({ enumerable: true, get: function () { return protocol_selectionRange_1.SelectionRangeRequest; } }));
const protocol_progress_1 = __webpack_require__(/*! ./protocol.progress */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js");
Object.defineProperty(exports, "WorkDoneProgress", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgress; } }));
Object.defineProperty(exports, "WorkDoneProgressCreateRequest", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCreateRequest; } }));
Object.defineProperty(exports, "WorkDoneProgressCancelNotification", ({ enumerable: true, get: function () { return protocol_progress_1.WorkDoneProgressCancelNotification; } }));
const protocol_callHierarchy_1 = __webpack_require__(/*! ./protocol.callHierarchy */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.callHierarchy.js");
Object.defineProperty(exports, "CallHierarchyIncomingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyIncomingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyOutgoingCallsRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyOutgoingCallsRequest; } }));
Object.defineProperty(exports, "CallHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_callHierarchy_1.CallHierarchyPrepareRequest; } }));
const protocol_semanticTokens_1 = __webpack_require__(/*! ./protocol.semanticTokens */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js");
Object.defineProperty(exports, "TokenFormat", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.TokenFormat; } }));
Object.defineProperty(exports, "SemanticTokensRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRequest; } }));
Object.defineProperty(exports, "SemanticTokensDeltaRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensDeltaRequest; } }));
Object.defineProperty(exports, "SemanticTokensRangeRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRangeRequest; } }));
Object.defineProperty(exports, "SemanticTokensRefreshRequest", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRefreshRequest; } }));
Object.defineProperty(exports, "SemanticTokensRegistrationType", ({ enumerable: true, get: function () { return protocol_semanticTokens_1.SemanticTokensRegistrationType; } }));
const protocol_showDocument_1 = __webpack_require__(/*! ./protocol.showDocument */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js");
Object.defineProperty(exports, "ShowDocumentRequest", ({ enumerable: true, get: function () { return protocol_showDocument_1.ShowDocumentRequest; } }));
const protocol_linkedEditingRange_1 = __webpack_require__(/*! ./protocol.linkedEditingRange */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js");
Object.defineProperty(exports, "LinkedEditingRangeRequest", ({ enumerable: true, get: function () { return protocol_linkedEditingRange_1.LinkedEditingRangeRequest; } }));
const protocol_fileOperations_1 = __webpack_require__(/*! ./protocol.fileOperations */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.fileOperations.js");
Object.defineProperty(exports, "FileOperationPatternKind", ({ enumerable: true, get: function () { return protocol_fileOperations_1.FileOperationPatternKind; } }));
Object.defineProperty(exports, "DidCreateFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidCreateFilesNotification; } }));
Object.defineProperty(exports, "WillCreateFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillCreateFilesRequest; } }));
Object.defineProperty(exports, "DidRenameFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidRenameFilesNotification; } }));
Object.defineProperty(exports, "WillRenameFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillRenameFilesRequest; } }));
Object.defineProperty(exports, "DidDeleteFilesNotification", ({ enumerable: true, get: function () { return protocol_fileOperations_1.DidDeleteFilesNotification; } }));
Object.defineProperty(exports, "WillDeleteFilesRequest", ({ enumerable: true, get: function () { return protocol_fileOperations_1.WillDeleteFilesRequest; } }));
const protocol_moniker_1 = __webpack_require__(/*! ./protocol.moniker */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js");
Object.defineProperty(exports, "UniquenessLevel", ({ enumerable: true, get: function () { return protocol_moniker_1.UniquenessLevel; } }));
Object.defineProperty(exports, "MonikerKind", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerKind; } }));
Object.defineProperty(exports, "MonikerRequest", ({ enumerable: true, get: function () { return protocol_moniker_1.MonikerRequest; } }));
const protocol_typeHierarchy_1 = __webpack_require__(/*! ./protocol.typeHierarchy */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js");
Object.defineProperty(exports, "TypeHierarchyPrepareRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchyPrepareRequest; } }));
Object.defineProperty(exports, "TypeHierarchySubtypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySubtypesRequest; } }));
Object.defineProperty(exports, "TypeHierarchySupertypesRequest", ({ enumerable: true, get: function () { return protocol_typeHierarchy_1.TypeHierarchySupertypesRequest; } }));
const protocol_inlineValue_1 = __webpack_require__(/*! ./protocol.inlineValue */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineValue.js");
Object.defineProperty(exports, "InlineValueRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRequest; } }));
Object.defineProperty(exports, "InlineValueRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlineValue_1.InlineValueRefreshRequest; } }));
const protocol_inlayHint_1 = __webpack_require__(/*! ./protocol.inlayHint */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlayHint.js");
Object.defineProperty(exports, "InlayHintRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRequest; } }));
Object.defineProperty(exports, "InlayHintResolveRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintResolveRequest; } }));
Object.defineProperty(exports, "InlayHintRefreshRequest", ({ enumerable: true, get: function () { return protocol_inlayHint_1.InlayHintRefreshRequest; } }));
const protocol_diagnostic_1 = __webpack_require__(/*! ./protocol.diagnostic */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.diagnostic.js");
Object.defineProperty(exports, "DiagnosticServerCancellationData", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticServerCancellationData; } }));
Object.defineProperty(exports, "DocumentDiagnosticReportKind", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticReportKind; } }));
Object.defineProperty(exports, "DocumentDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DocumentDiagnosticRequest; } }));
Object.defineProperty(exports, "WorkspaceDiagnosticRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.WorkspaceDiagnosticRequest; } }));
Object.defineProperty(exports, "DiagnosticRefreshRequest", ({ enumerable: true, get: function () { return protocol_diagnostic_1.DiagnosticRefreshRequest; } }));
const protocol_notebook_1 = __webpack_require__(/*! ./protocol.notebook */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js");
Object.defineProperty(exports, "NotebookCellKind", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellKind; } }));
Object.defineProperty(exports, "ExecutionSummary", ({ enumerable: true, get: function () { return protocol_notebook_1.ExecutionSummary; } }));
Object.defineProperty(exports, "NotebookCell", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCell; } }));
Object.defineProperty(exports, "NotebookDocument", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocument; } }));
Object.defineProperty(exports, "NotebookDocumentSyncRegistrationType", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookDocumentSyncRegistrationType; } }));
Object.defineProperty(exports, "DidOpenNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidOpenNotebookDocumentNotification; } }));
Object.defineProperty(exports, "NotebookCellArrayChange", ({ enumerable: true, get: function () { return protocol_notebook_1.NotebookCellArrayChange; } }));
Object.defineProperty(exports, "DidChangeNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidChangeNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidSaveNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidSaveNotebookDocumentNotification; } }));
Object.defineProperty(exports, "DidCloseNotebookDocumentNotification", ({ enumerable: true, get: function () { return protocol_notebook_1.DidCloseNotebookDocumentNotification; } }));
const protocol_inlineCompletion_1 = __webpack_require__(/*! ./protocol.inlineCompletion */ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.inlineCompletion.js");
Object.defineProperty(exports, "InlineCompletionRequest", ({ enumerable: true, get: function () { return protocol_inlineCompletion_1.InlineCompletionRequest; } }));
// @ts-ignore: to avoid inlining LocationLink as dynamic import
let __noDynamicImport;
/**
 * The TextDocumentFilter namespace provides helper functions to work with
 * {@link TextDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var TextDocumentFilter;
(function (TextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.string(candidate) || (Is.string(candidate.language) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
    }
    TextDocumentFilter.is = is;
})(TextDocumentFilter || (exports.TextDocumentFilter = TextDocumentFilter = {}));
/**
 * The NotebookDocumentFilter namespace provides helper functions to work with
 * {@link NotebookDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var NotebookDocumentFilter;
(function (NotebookDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (Is.string(candidate.notebookType) || Is.string(candidate.scheme) || Is.string(candidate.pattern));
    }
    NotebookDocumentFilter.is = is;
})(NotebookDocumentFilter || (exports.NotebookDocumentFilter = NotebookDocumentFilter = {}));
/**
 * The NotebookCellTextDocumentFilter namespace provides helper functions to work with
 * {@link NotebookCellTextDocumentFilter} literals.
 *
 * @since 3.17.0
 */
var NotebookCellTextDocumentFilter;
(function (NotebookCellTextDocumentFilter) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && (Is.string(candidate.notebook) || NotebookDocumentFilter.is(candidate.notebook))
            && (candidate.language === undefined || Is.string(candidate.language));
    }
    NotebookCellTextDocumentFilter.is = is;
})(NotebookCellTextDocumentFilter || (exports.NotebookCellTextDocumentFilter = NotebookCellTextDocumentFilter = {}));
/**
 * The DocumentSelector namespace provides helper functions to work with
 * {@link DocumentSelector}s.
 */
var DocumentSelector;
(function (DocumentSelector) {
    function is(value) {
        if (!Array.isArray(value)) {
            return false;
        }
        for (let elem of value) {
            if (!Is.string(elem) && !TextDocumentFilter.is(elem) && !NotebookCellTextDocumentFilter.is(elem)) {
                return false;
            }
        }
        return true;
    }
    DocumentSelector.is = is;
})(DocumentSelector || (exports.DocumentSelector = DocumentSelector = {}));
/**
 * The `client/registerCapability` request is sent from the server to the client to register a new capability
 * handler on the client side.
 */
var RegistrationRequest;
(function (RegistrationRequest) {
    RegistrationRequest.method = 'client/registerCapability';
    RegistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    RegistrationRequest.type = new messages_1.ProtocolRequestType(RegistrationRequest.method);
})(RegistrationRequest || (exports.RegistrationRequest = RegistrationRequest = {}));
/**
 * The `client/unregisterCapability` request is sent from the server to the client to unregister a previously registered capability
 * handler on the client side.
 */
var UnregistrationRequest;
(function (UnregistrationRequest) {
    UnregistrationRequest.method = 'client/unregisterCapability';
    UnregistrationRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    UnregistrationRequest.type = new messages_1.ProtocolRequestType(UnregistrationRequest.method);
})(UnregistrationRequest || (exports.UnregistrationRequest = UnregistrationRequest = {}));
var ResourceOperationKind;
(function (ResourceOperationKind) {
    /**
     * Supports creating new files and folders.
     */
    ResourceOperationKind.Create = 'create';
    /**
     * Supports renaming existing files and folders.
     */
    ResourceOperationKind.Rename = 'rename';
    /**
     * Supports deleting existing files and folders.
     */
    ResourceOperationKind.Delete = 'delete';
})(ResourceOperationKind || (exports.ResourceOperationKind = ResourceOperationKind = {}));
var FailureHandlingKind;
(function (FailureHandlingKind) {
    /**
     * Applying the workspace change is simply aborted if one of the changes provided
     * fails. All operations executed before the failing operation stay executed.
     */
    FailureHandlingKind.Abort = 'abort';
    /**
     * All operations are executed transactional. That means they either all
     * succeed or no changes at all are applied to the workspace.
     */
    FailureHandlingKind.Transactional = 'transactional';
    /**
     * If the workspace edit contains only textual file changes they are executed transactional.
     * If resource changes (create, rename or delete file) are part of the change the failure
     * handling strategy is abort.
     */
    FailureHandlingKind.TextOnlyTransactional = 'textOnlyTransactional';
    /**
     * The client tries to undo the operations already executed. But there is no
     * guarantee that this is succeeding.
     */
    FailureHandlingKind.Undo = 'undo';
})(FailureHandlingKind || (exports.FailureHandlingKind = FailureHandlingKind = {}));
/**
 * A set of predefined position encoding kinds.
 *
 * @since 3.17.0
 */
var PositionEncodingKind;
(function (PositionEncodingKind) {
    /**
     * Character offsets count UTF-8 code units (e.g. bytes).
     */
    PositionEncodingKind.UTF8 = 'utf-8';
    /**
     * Character offsets count UTF-16 code units.
     *
     * This is the default and must always be supported
     * by servers
     */
    PositionEncodingKind.UTF16 = 'utf-16';
    /**
     * Character offsets count UTF-32 code units.
     *
     * Implementation note: these are the same as Unicode codepoints,
     * so this `PositionEncodingKind` may also be used for an
     * encoding-agnostic representation of character offsets.
     */
    PositionEncodingKind.UTF32 = 'utf-32';
})(PositionEncodingKind || (exports.PositionEncodingKind = PositionEncodingKind = {}));
/**
 * The StaticRegistrationOptions namespace provides helper functions to work with
 * {@link StaticRegistrationOptions} literals.
 */
var StaticRegistrationOptions;
(function (StaticRegistrationOptions) {
    function hasId(value) {
        const candidate = value;
        return candidate && Is.string(candidate.id) && candidate.id.length > 0;
    }
    StaticRegistrationOptions.hasId = hasId;
})(StaticRegistrationOptions || (exports.StaticRegistrationOptions = StaticRegistrationOptions = {}));
/**
 * The TextDocumentRegistrationOptions namespace provides helper functions to work with
 * {@link TextDocumentRegistrationOptions} literals.
 */
var TextDocumentRegistrationOptions;
(function (TextDocumentRegistrationOptions) {
    function is(value) {
        const candidate = value;
        return candidate && (candidate.documentSelector === null || DocumentSelector.is(candidate.documentSelector));
    }
    TextDocumentRegistrationOptions.is = is;
})(TextDocumentRegistrationOptions || (exports.TextDocumentRegistrationOptions = TextDocumentRegistrationOptions = {}));
/**
 * The WorkDoneProgressOptions namespace provides helper functions to work with
 * {@link WorkDoneProgressOptions} literals.
 */
var WorkDoneProgressOptions;
(function (WorkDoneProgressOptions) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.workDoneProgress === undefined || Is.boolean(candidate.workDoneProgress));
    }
    WorkDoneProgressOptions.is = is;
    function hasWorkDoneProgress(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.workDoneProgress);
    }
    WorkDoneProgressOptions.hasWorkDoneProgress = hasWorkDoneProgress;
})(WorkDoneProgressOptions || (exports.WorkDoneProgressOptions = WorkDoneProgressOptions = {}));
/**
 * The initialize request is sent from the client to the server.
 * It is sent once as the request after starting up the server.
 * The requests parameter is of type {@link InitializeParams}
 * the response if of type {@link InitializeResult} of a Thenable that
 * resolves to such.
 */
var InitializeRequest;
(function (InitializeRequest) {
    InitializeRequest.method = 'initialize';
    InitializeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializeRequest.type = new messages_1.ProtocolRequestType(InitializeRequest.method);
})(InitializeRequest || (exports.InitializeRequest = InitializeRequest = {}));
/**
 * Known error codes for an `InitializeErrorCodes`;
 */
var InitializeErrorCodes;
(function (InitializeErrorCodes) {
    /**
     * If the protocol version provided by the client can't be handled by the server.
     *
     * @deprecated This initialize error got replaced by client capabilities. There is
     * no version handshake in version 3.0x
     */
    InitializeErrorCodes.unknownProtocolVersion = 1;
})(InitializeErrorCodes || (exports.InitializeErrorCodes = InitializeErrorCodes = {}));
/**
 * The initialized notification is sent from the client to the
 * server after the client is fully initialized and the server
 * is allowed to send requests from the server to the client.
 */
var InitializedNotification;
(function (InitializedNotification) {
    InitializedNotification.method = 'initialized';
    InitializedNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    InitializedNotification.type = new messages_1.ProtocolNotificationType(InitializedNotification.method);
})(InitializedNotification || (exports.InitializedNotification = InitializedNotification = {}));
//---- Shutdown Method ----
/**
 * A shutdown request is sent from the client to the server.
 * It is sent once when the client decides to shutdown the
 * server. The only notification that is sent after a shutdown request
 * is the exit event.
 */
var ShutdownRequest;
(function (ShutdownRequest) {
    ShutdownRequest.method = 'shutdown';
    ShutdownRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ShutdownRequest.type = new messages_1.ProtocolRequestType0(ShutdownRequest.method);
})(ShutdownRequest || (exports.ShutdownRequest = ShutdownRequest = {}));
//---- Exit Notification ----
/**
 * The exit event is sent from the client to the server to
 * ask the server to exit its process.
 */
var ExitNotification;
(function (ExitNotification) {
    ExitNotification.method = 'exit';
    ExitNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    ExitNotification.type = new messages_1.ProtocolNotificationType0(ExitNotification.method);
})(ExitNotification || (exports.ExitNotification = ExitNotification = {}));
/**
 * The configuration change notification is sent from the client to the server
 * when the client's configuration has changed. The notification contains
 * the changed configuration as defined by the language client.
 */
var DidChangeConfigurationNotification;
(function (DidChangeConfigurationNotification) {
    DidChangeConfigurationNotification.method = 'workspace/didChangeConfiguration';
    DidChangeConfigurationNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeConfigurationNotification.type = new messages_1.ProtocolNotificationType(DidChangeConfigurationNotification.method);
})(DidChangeConfigurationNotification || (exports.DidChangeConfigurationNotification = DidChangeConfigurationNotification = {}));
//---- Message show and log notifications ----
/**
 * The message type
 */
var MessageType;
(function (MessageType) {
    /**
     * An error message.
     */
    MessageType.Error = 1;
    /**
     * A warning message.
     */
    MessageType.Warning = 2;
    /**
     * An information message.
     */
    MessageType.Info = 3;
    /**
     * A log message.
     */
    MessageType.Log = 4;
    /**
     * A debug message.
     *
     * @since 3.18.0
     */
    MessageType.Debug = 5;
})(MessageType || (exports.MessageType = MessageType = {}));
/**
 * The show message notification is sent from a server to a client to ask
 * the client to display a particular message in the user interface.
 */
var ShowMessageNotification;
(function (ShowMessageNotification) {
    ShowMessageNotification.method = 'window/showMessage';
    ShowMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageNotification.type = new messages_1.ProtocolNotificationType(ShowMessageNotification.method);
})(ShowMessageNotification || (exports.ShowMessageNotification = ShowMessageNotification = {}));
/**
 * The show message request is sent from the server to the client to show a message
 * and a set of options actions to the user.
 */
var ShowMessageRequest;
(function (ShowMessageRequest) {
    ShowMessageRequest.method = 'window/showMessageRequest';
    ShowMessageRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowMessageRequest.type = new messages_1.ProtocolRequestType(ShowMessageRequest.method);
})(ShowMessageRequest || (exports.ShowMessageRequest = ShowMessageRequest = {}));
/**
 * The log message notification is sent from the server to the client to ask
 * the client to log a particular message.
 */
var LogMessageNotification;
(function (LogMessageNotification) {
    LogMessageNotification.method = 'window/logMessage';
    LogMessageNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    LogMessageNotification.type = new messages_1.ProtocolNotificationType(LogMessageNotification.method);
})(LogMessageNotification || (exports.LogMessageNotification = LogMessageNotification = {}));
//---- Telemetry notification
/**
 * The telemetry event notification is sent from the server to the client to ask
 * the client to log telemetry data.
 */
var TelemetryEventNotification;
(function (TelemetryEventNotification) {
    TelemetryEventNotification.method = 'telemetry/event';
    TelemetryEventNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    TelemetryEventNotification.type = new messages_1.ProtocolNotificationType(TelemetryEventNotification.method);
})(TelemetryEventNotification || (exports.TelemetryEventNotification = TelemetryEventNotification = {}));
/**
 * Defines how the host (editor) should sync
 * document changes to the language server.
 */
var TextDocumentSyncKind;
(function (TextDocumentSyncKind) {
    /**
     * Documents should not be synced at all.
     */
    TextDocumentSyncKind.None = 0;
    /**
     * Documents are synced by always sending the full content
     * of the document.
     */
    TextDocumentSyncKind.Full = 1;
    /**
     * Documents are synced by sending the full content on open.
     * After that only incremental updates to the document are
     * send.
     */
    TextDocumentSyncKind.Incremental = 2;
})(TextDocumentSyncKind || (exports.TextDocumentSyncKind = TextDocumentSyncKind = {}));
/**
 * The document open notification is sent from the client to the server to signal
 * newly opened text documents. The document's truth is now managed by the client
 * and the server must not try to read the document's truth using the document's
 * uri. Open in this sense means it is managed by the client. It doesn't necessarily
 * mean that its content is presented in an editor. An open notification must not
 * be sent more than once without a corresponding close notification send before.
 * This means open and close notification must be balanced and the max open count
 * is one.
 */
var DidOpenTextDocumentNotification;
(function (DidOpenTextDocumentNotification) {
    DidOpenTextDocumentNotification.method = 'textDocument/didOpen';
    DidOpenTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenTextDocumentNotification.method);
})(DidOpenTextDocumentNotification || (exports.DidOpenTextDocumentNotification = DidOpenTextDocumentNotification = {}));
var TextDocumentContentChangeEvent;
(function (TextDocumentContentChangeEvent) {
    /**
     * Checks whether the information describes a delta event.
     */
    function isIncremental(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    }
    TextDocumentContentChangeEvent.isIncremental = isIncremental;
    /**
     * Checks whether the information describes a full replacement event.
     */
    function isFull(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    }
    TextDocumentContentChangeEvent.isFull = isFull;
})(TextDocumentContentChangeEvent || (exports.TextDocumentContentChangeEvent = TextDocumentContentChangeEvent = {}));
/**
 * The document change notification is sent from the client to the server to signal
 * changes to a text document.
 */
var DidChangeTextDocumentNotification;
(function (DidChangeTextDocumentNotification) {
    DidChangeTextDocumentNotification.method = 'textDocument/didChange';
    DidChangeTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeTextDocumentNotification.method);
})(DidChangeTextDocumentNotification || (exports.DidChangeTextDocumentNotification = DidChangeTextDocumentNotification = {}));
/**
 * The document close notification is sent from the client to the server when
 * the document got closed in the client. The document's truth now exists where
 * the document's uri points to (e.g. if the document's uri is a file uri the
 * truth now exists on disk). As with the open notification the close notification
 * is about managing the document's content. Receiving a close notification
 * doesn't mean that the document was open in an editor before. A close
 * notification requires a previous open notification to be sent.
 */
var DidCloseTextDocumentNotification;
(function (DidCloseTextDocumentNotification) {
    DidCloseTextDocumentNotification.method = 'textDocument/didClose';
    DidCloseTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseTextDocumentNotification.method);
})(DidCloseTextDocumentNotification || (exports.DidCloseTextDocumentNotification = DidCloseTextDocumentNotification = {}));
/**
 * The document save notification is sent from the client to the server when
 * the document got saved in the client.
 */
var DidSaveTextDocumentNotification;
(function (DidSaveTextDocumentNotification) {
    DidSaveTextDocumentNotification.method = 'textDocument/didSave';
    DidSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveTextDocumentNotification.method);
})(DidSaveTextDocumentNotification || (exports.DidSaveTextDocumentNotification = DidSaveTextDocumentNotification = {}));
/**
 * Represents reasons why a text document is saved.
 */
var TextDocumentSaveReason;
(function (TextDocumentSaveReason) {
    /**
     * Manually triggered, e.g. by the user pressing save, by starting debugging,
     * or by an API call.
     */
    TextDocumentSaveReason.Manual = 1;
    /**
     * Automatic after a delay.
     */
    TextDocumentSaveReason.AfterDelay = 2;
    /**
     * When the editor lost focus.
     */
    TextDocumentSaveReason.FocusOut = 3;
})(TextDocumentSaveReason || (exports.TextDocumentSaveReason = TextDocumentSaveReason = {}));
/**
 * A document will save notification is sent from the client to the server before
 * the document is actually saved.
 */
var WillSaveTextDocumentNotification;
(function (WillSaveTextDocumentNotification) {
    WillSaveTextDocumentNotification.method = 'textDocument/willSave';
    WillSaveTextDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentNotification.type = new messages_1.ProtocolNotificationType(WillSaveTextDocumentNotification.method);
})(WillSaveTextDocumentNotification || (exports.WillSaveTextDocumentNotification = WillSaveTextDocumentNotification = {}));
/**
 * A document will save request is sent from the client to the server before
 * the document is actually saved. The request can return an array of TextEdits
 * which will be applied to the text document before it is saved. Please note that
 * clients might drop results if computing the text edits took too long or if a
 * server constantly fails on this request. This is done to keep the save fast and
 * reliable.
 */
var WillSaveTextDocumentWaitUntilRequest;
(function (WillSaveTextDocumentWaitUntilRequest) {
    WillSaveTextDocumentWaitUntilRequest.method = 'textDocument/willSaveWaitUntil';
    WillSaveTextDocumentWaitUntilRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WillSaveTextDocumentWaitUntilRequest.type = new messages_1.ProtocolRequestType(WillSaveTextDocumentWaitUntilRequest.method);
})(WillSaveTextDocumentWaitUntilRequest || (exports.WillSaveTextDocumentWaitUntilRequest = WillSaveTextDocumentWaitUntilRequest = {}));
/**
 * The watched files notification is sent from the client to the server when
 * the client detects changes to file watched by the language client.
 */
var DidChangeWatchedFilesNotification;
(function (DidChangeWatchedFilesNotification) {
    DidChangeWatchedFilesNotification.method = 'workspace/didChangeWatchedFiles';
    DidChangeWatchedFilesNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWatchedFilesNotification.type = new messages_1.ProtocolNotificationType(DidChangeWatchedFilesNotification.method);
})(DidChangeWatchedFilesNotification || (exports.DidChangeWatchedFilesNotification = DidChangeWatchedFilesNotification = {}));
/**
 * The file event type
 */
var FileChangeType;
(function (FileChangeType) {
    /**
     * The file got created.
     */
    FileChangeType.Created = 1;
    /**
     * The file got changed.
     */
    FileChangeType.Changed = 2;
    /**
     * The file got deleted.
     */
    FileChangeType.Deleted = 3;
})(FileChangeType || (exports.FileChangeType = FileChangeType = {}));
var RelativePattern;
(function (RelativePattern) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (vscode_languageserver_types_1.URI.is(candidate.baseUri) || vscode_languageserver_types_1.WorkspaceFolder.is(candidate.baseUri)) && Is.string(candidate.pattern);
    }
    RelativePattern.is = is;
})(RelativePattern || (exports.RelativePattern = RelativePattern = {}));
var WatchKind;
(function (WatchKind) {
    /**
     * Interested in create events.
     */
    WatchKind.Create = 1;
    /**
     * Interested in change events
     */
    WatchKind.Change = 2;
    /**
     * Interested in delete events
     */
    WatchKind.Delete = 4;
})(WatchKind || (exports.WatchKind = WatchKind = {}));
/**
 * Diagnostics notification are sent from the server to the client to signal
 * results of validation runs.
 */
var PublishDiagnosticsNotification;
(function (PublishDiagnosticsNotification) {
    PublishDiagnosticsNotification.method = 'textDocument/publishDiagnostics';
    PublishDiagnosticsNotification.messageDirection = messages_1.MessageDirection.serverToClient;
    PublishDiagnosticsNotification.type = new messages_1.ProtocolNotificationType(PublishDiagnosticsNotification.method);
})(PublishDiagnosticsNotification || (exports.PublishDiagnosticsNotification = PublishDiagnosticsNotification = {}));
/**
 * How a completion was triggered
 */
var CompletionTriggerKind;
(function (CompletionTriggerKind) {
    /**
     * Completion was triggered by typing an identifier (24x7 code
     * complete), manual invocation (e.g Ctrl+Space) or via API.
     */
    CompletionTriggerKind.Invoked = 1;
    /**
     * Completion was triggered by a trigger character specified by
     * the `triggerCharacters` properties of the `CompletionRegistrationOptions`.
     */
    CompletionTriggerKind.TriggerCharacter = 2;
    /**
     * Completion was re-triggered as current completion list is incomplete
     */
    CompletionTriggerKind.TriggerForIncompleteCompletions = 3;
})(CompletionTriggerKind || (exports.CompletionTriggerKind = CompletionTriggerKind = {}));
/**
 * Request to request completion at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response
 * is of type {@link CompletionItem CompletionItem[]} or {@link CompletionList}
 * or a Thenable that resolves to such.
 *
 * The request can delay the computation of the {@link CompletionItem.detail `detail`}
 * and {@link CompletionItem.documentation `documentation`} properties to the `completionItem/resolve`
 * request. However, properties that are needed for the initial sorting and filtering, like `sortText`,
 * `filterText`, `insertText`, and `textEdit`, must not be changed during resolve.
 */
var CompletionRequest;
(function (CompletionRequest) {
    CompletionRequest.method = 'textDocument/completion';
    CompletionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionRequest.type = new messages_1.ProtocolRequestType(CompletionRequest.method);
})(CompletionRequest || (exports.CompletionRequest = CompletionRequest = {}));
/**
 * Request to resolve additional information for a given completion item.The request's
 * parameter is of type {@link CompletionItem} the response
 * is of type {@link CompletionItem} or a Thenable that resolves to such.
 */
var CompletionResolveRequest;
(function (CompletionResolveRequest) {
    CompletionResolveRequest.method = 'completionItem/resolve';
    CompletionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CompletionResolveRequest.type = new messages_1.ProtocolRequestType(CompletionResolveRequest.method);
})(CompletionResolveRequest || (exports.CompletionResolveRequest = CompletionResolveRequest = {}));
/**
 * Request to request hover information at a given text document position. The request's
 * parameter is of type {@link TextDocumentPosition} the response is of
 * type {@link Hover} or a Thenable that resolves to such.
 */
var HoverRequest;
(function (HoverRequest) {
    HoverRequest.method = 'textDocument/hover';
    HoverRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    HoverRequest.type = new messages_1.ProtocolRequestType(HoverRequest.method);
})(HoverRequest || (exports.HoverRequest = HoverRequest = {}));
/**
 * How a signature help was triggered.
 *
 * @since 3.15.0
 */
var SignatureHelpTriggerKind;
(function (SignatureHelpTriggerKind) {
    /**
     * Signature help was invoked manually by the user or by a command.
     */
    SignatureHelpTriggerKind.Invoked = 1;
    /**
     * Signature help was triggered by a trigger character.
     */
    SignatureHelpTriggerKind.TriggerCharacter = 2;
    /**
     * Signature help was triggered by the cursor moving or by the document content changing.
     */
    SignatureHelpTriggerKind.ContentChange = 3;
})(SignatureHelpTriggerKind || (exports.SignatureHelpTriggerKind = SignatureHelpTriggerKind = {}));
var SignatureHelpRequest;
(function (SignatureHelpRequest) {
    SignatureHelpRequest.method = 'textDocument/signatureHelp';
    SignatureHelpRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SignatureHelpRequest.type = new messages_1.ProtocolRequestType(SignatureHelpRequest.method);
})(SignatureHelpRequest || (exports.SignatureHelpRequest = SignatureHelpRequest = {}));
/**
 * A request to resolve the definition location of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPosition}
 * the response is of either type {@link Definition} or a typed array of
 * {@link DefinitionLink} or a Thenable that resolves to such.
 */
var DefinitionRequest;
(function (DefinitionRequest) {
    DefinitionRequest.method = 'textDocument/definition';
    DefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DefinitionRequest.type = new messages_1.ProtocolRequestType(DefinitionRequest.method);
})(DefinitionRequest || (exports.DefinitionRequest = DefinitionRequest = {}));
/**
 * A request to resolve project-wide references for the symbol denoted
 * by the given text document position. The request's parameter is of
 * type {@link ReferenceParams} the response is of type
 * {@link Location Location[]} or a Thenable that resolves to such.
 */
var ReferencesRequest;
(function (ReferencesRequest) {
    ReferencesRequest.method = 'textDocument/references';
    ReferencesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ReferencesRequest.type = new messages_1.ProtocolRequestType(ReferencesRequest.method);
})(ReferencesRequest || (exports.ReferencesRequest = ReferencesRequest = {}));
/**
 * Request to resolve a {@link DocumentHighlight} for a given
 * text document position. The request's parameter is of type {@link TextDocumentPosition}
 * the request response is an array of type {@link DocumentHighlight}
 * or a Thenable that resolves to such.
 */
var DocumentHighlightRequest;
(function (DocumentHighlightRequest) {
    DocumentHighlightRequest.method = 'textDocument/documentHighlight';
    DocumentHighlightRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentHighlightRequest.type = new messages_1.ProtocolRequestType(DocumentHighlightRequest.method);
})(DocumentHighlightRequest || (exports.DocumentHighlightRequest = DocumentHighlightRequest = {}));
/**
 * A request to list all symbols found in a given text document. The request's
 * parameter is of type {@link TextDocumentIdentifier} the
 * response is of type {@link SymbolInformation SymbolInformation[]} or a Thenable
 * that resolves to such.
 */
var DocumentSymbolRequest;
(function (DocumentSymbolRequest) {
    DocumentSymbolRequest.method = 'textDocument/documentSymbol';
    DocumentSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentSymbolRequest.type = new messages_1.ProtocolRequestType(DocumentSymbolRequest.method);
})(DocumentSymbolRequest || (exports.DocumentSymbolRequest = DocumentSymbolRequest = {}));
/**
 * A request to provide commands for the given text document and range.
 */
var CodeActionRequest;
(function (CodeActionRequest) {
    CodeActionRequest.method = 'textDocument/codeAction';
    CodeActionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionRequest.type = new messages_1.ProtocolRequestType(CodeActionRequest.method);
})(CodeActionRequest || (exports.CodeActionRequest = CodeActionRequest = {}));
/**
 * Request to resolve additional information for a given code action.The request's
 * parameter is of type {@link CodeAction} the response
 * is of type {@link CodeAction} or a Thenable that resolves to such.
 */
var CodeActionResolveRequest;
(function (CodeActionResolveRequest) {
    CodeActionResolveRequest.method = 'codeAction/resolve';
    CodeActionResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeActionResolveRequest.type = new messages_1.ProtocolRequestType(CodeActionResolveRequest.method);
})(CodeActionResolveRequest || (exports.CodeActionResolveRequest = CodeActionResolveRequest = {}));
/**
 * A request to list project-wide symbols matching the query string given
 * by the {@link WorkspaceSymbolParams}. The response is
 * of type {@link SymbolInformation SymbolInformation[]} or a Thenable that
 * resolves to such.
 *
 * @since 3.17.0 - support for WorkspaceSymbol in the returned data. Clients
 *  need to advertise support for WorkspaceSymbols via the client capability
 *  `workspace.symbol.resolveSupport`.
 *
 */
var WorkspaceSymbolRequest;
(function (WorkspaceSymbolRequest) {
    WorkspaceSymbolRequest.method = 'workspace/symbol';
    WorkspaceSymbolRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolRequest.method);
})(WorkspaceSymbolRequest || (exports.WorkspaceSymbolRequest = WorkspaceSymbolRequest = {}));
/**
 * A request to resolve the range inside the workspace
 * symbol's location.
 *
 * @since 3.17.0
 */
var WorkspaceSymbolResolveRequest;
(function (WorkspaceSymbolResolveRequest) {
    WorkspaceSymbolResolveRequest.method = 'workspaceSymbol/resolve';
    WorkspaceSymbolResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkspaceSymbolResolveRequest.type = new messages_1.ProtocolRequestType(WorkspaceSymbolResolveRequest.method);
})(WorkspaceSymbolResolveRequest || (exports.WorkspaceSymbolResolveRequest = WorkspaceSymbolResolveRequest = {}));
/**
 * A request to provide code lens for the given text document.
 */
var CodeLensRequest;
(function (CodeLensRequest) {
    CodeLensRequest.method = 'textDocument/codeLens';
    CodeLensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensRequest.type = new messages_1.ProtocolRequestType(CodeLensRequest.method);
})(CodeLensRequest || (exports.CodeLensRequest = CodeLensRequest = {}));
/**
 * A request to resolve a command for a given code lens.
 */
var CodeLensResolveRequest;
(function (CodeLensResolveRequest) {
    CodeLensResolveRequest.method = 'codeLens/resolve';
    CodeLensResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    CodeLensResolveRequest.type = new messages_1.ProtocolRequestType(CodeLensResolveRequest.method);
})(CodeLensResolveRequest || (exports.CodeLensResolveRequest = CodeLensResolveRequest = {}));
/**
 * A request to refresh all code actions
 *
 * @since 3.16.0
 */
var CodeLensRefreshRequest;
(function (CodeLensRefreshRequest) {
    CodeLensRefreshRequest.method = `workspace/codeLens/refresh`;
    CodeLensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    CodeLensRefreshRequest.type = new messages_1.ProtocolRequestType0(CodeLensRefreshRequest.method);
})(CodeLensRefreshRequest || (exports.CodeLensRefreshRequest = CodeLensRefreshRequest = {}));
/**
 * A request to provide document links
 */
var DocumentLinkRequest;
(function (DocumentLinkRequest) {
    DocumentLinkRequest.method = 'textDocument/documentLink';
    DocumentLinkRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkRequest.type = new messages_1.ProtocolRequestType(DocumentLinkRequest.method);
})(DocumentLinkRequest || (exports.DocumentLinkRequest = DocumentLinkRequest = {}));
/**
 * Request to resolve additional information for a given document link. The request's
 * parameter is of type {@link DocumentLink} the response
 * is of type {@link DocumentLink} or a Thenable that resolves to such.
 */
var DocumentLinkResolveRequest;
(function (DocumentLinkResolveRequest) {
    DocumentLinkResolveRequest.method = 'documentLink/resolve';
    DocumentLinkResolveRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentLinkResolveRequest.type = new messages_1.ProtocolRequestType(DocumentLinkResolveRequest.method);
})(DocumentLinkResolveRequest || (exports.DocumentLinkResolveRequest = DocumentLinkResolveRequest = {}));
/**
 * A request to format a whole document.
 */
var DocumentFormattingRequest;
(function (DocumentFormattingRequest) {
    DocumentFormattingRequest.method = 'textDocument/formatting';
    DocumentFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentFormattingRequest.method);
})(DocumentFormattingRequest || (exports.DocumentFormattingRequest = DocumentFormattingRequest = {}));
/**
 * A request to format a range in a document.
 */
var DocumentRangeFormattingRequest;
(function (DocumentRangeFormattingRequest) {
    DocumentRangeFormattingRequest.method = 'textDocument/rangeFormatting';
    DocumentRangeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentRangeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangeFormattingRequest.method);
})(DocumentRangeFormattingRequest || (exports.DocumentRangeFormattingRequest = DocumentRangeFormattingRequest = {}));
/**
 * A request to format ranges in a document.
 *
 * @since 3.18.0
 * @proposed
 */
var DocumentRangesFormattingRequest;
(function (DocumentRangesFormattingRequest) {
    DocumentRangesFormattingRequest.method = 'textDocument/rangesFormatting';
    DocumentRangesFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentRangesFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentRangesFormattingRequest.method);
})(DocumentRangesFormattingRequest || (exports.DocumentRangesFormattingRequest = DocumentRangesFormattingRequest = {}));
/**
 * A request to format a document on type.
 */
var DocumentOnTypeFormattingRequest;
(function (DocumentOnTypeFormattingRequest) {
    DocumentOnTypeFormattingRequest.method = 'textDocument/onTypeFormatting';
    DocumentOnTypeFormattingRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    DocumentOnTypeFormattingRequest.type = new messages_1.ProtocolRequestType(DocumentOnTypeFormattingRequest.method);
})(DocumentOnTypeFormattingRequest || (exports.DocumentOnTypeFormattingRequest = DocumentOnTypeFormattingRequest = {}));
//---- Rename ----------------------------------------------
var PrepareSupportDefaultBehavior;
(function (PrepareSupportDefaultBehavior) {
    /**
     * The client's default behavior is to select the identifier
     * according the to language's syntax rule.
     */
    PrepareSupportDefaultBehavior.Identifier = 1;
})(PrepareSupportDefaultBehavior || (exports.PrepareSupportDefaultBehavior = PrepareSupportDefaultBehavior = {}));
/**
 * A request to rename a symbol.
 */
var RenameRequest;
(function (RenameRequest) {
    RenameRequest.method = 'textDocument/rename';
    RenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    RenameRequest.type = new messages_1.ProtocolRequestType(RenameRequest.method);
})(RenameRequest || (exports.RenameRequest = RenameRequest = {}));
/**
 * A request to test and perform the setup necessary for a rename.
 *
 * @since 3.16 - support for default behavior
 */
var PrepareRenameRequest;
(function (PrepareRenameRequest) {
    PrepareRenameRequest.method = 'textDocument/prepareRename';
    PrepareRenameRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    PrepareRenameRequest.type = new messages_1.ProtocolRequestType(PrepareRenameRequest.method);
})(PrepareRenameRequest || (exports.PrepareRenameRequest = PrepareRenameRequest = {}));
/**
 * A request send from the client to the server to execute a command. The request might return
 * a workspace edit which the client will apply to the workspace.
 */
var ExecuteCommandRequest;
(function (ExecuteCommandRequest) {
    ExecuteCommandRequest.method = 'workspace/executeCommand';
    ExecuteCommandRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    ExecuteCommandRequest.type = new messages_1.ProtocolRequestType(ExecuteCommandRequest.method);
})(ExecuteCommandRequest || (exports.ExecuteCommandRequest = ExecuteCommandRequest = {}));
/**
 * A request sent from the server to the client to modified certain resources.
 */
var ApplyWorkspaceEditRequest;
(function (ApplyWorkspaceEditRequest) {
    ApplyWorkspaceEditRequest.method = 'workspace/applyEdit';
    ApplyWorkspaceEditRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ApplyWorkspaceEditRequest.type = new messages_1.ProtocolRequestType('workspace/applyEdit');
})(ApplyWorkspaceEditRequest || (exports.ApplyWorkspaceEditRequest = ApplyWorkspaceEditRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js":
/*!***************************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.linkedEditingRange.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedEditingRangeRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide ranges that can be edited together.
 *
 * @since 3.16.0
 */
var LinkedEditingRangeRequest;
(function (LinkedEditingRangeRequest) {
    LinkedEditingRangeRequest.method = 'textDocument/linkedEditingRange';
    LinkedEditingRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    LinkedEditingRangeRequest.type = new messages_1.ProtocolRequestType(LinkedEditingRangeRequest.method);
})(LinkedEditingRangeRequest || (exports.LinkedEditingRangeRequest = LinkedEditingRangeRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.moniker.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MonikerRequest = exports.MonikerKind = exports.UniquenessLevel = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * Moniker uniqueness level to define scope of the moniker.
 *
 * @since 3.16.0
 */
var UniquenessLevel;
(function (UniquenessLevel) {
    /**
     * The moniker is only unique inside a document
     */
    UniquenessLevel.document = 'document';
    /**
     * The moniker is unique inside a project for which a dump got created
     */
    UniquenessLevel.project = 'project';
    /**
     * The moniker is unique inside the group to which a project belongs
     */
    UniquenessLevel.group = 'group';
    /**
     * The moniker is unique inside the moniker scheme.
     */
    UniquenessLevel.scheme = 'scheme';
    /**
     * The moniker is globally unique
     */
    UniquenessLevel.global = 'global';
})(UniquenessLevel || (exports.UniquenessLevel = UniquenessLevel = {}));
/**
 * The moniker kind.
 *
 * @since 3.16.0
 */
var MonikerKind;
(function (MonikerKind) {
    /**
     * The moniker represent a symbol that is imported into a project
     */
    MonikerKind.$import = 'import';
    /**
     * The moniker represents a symbol that is exported from a project
     */
    MonikerKind.$export = 'export';
    /**
     * The moniker represents a symbol that is local to a project (e.g. a local
     * variable of a function, a class not visible outside the project, ...)
     */
    MonikerKind.local = 'local';
})(MonikerKind || (exports.MonikerKind = MonikerKind = {}));
/**
 * A request to get the moniker of a symbol at a given text document position.
 * The request parameter is of type {@link TextDocumentPositionParams}.
 * The response is of type {@link Moniker Moniker[]} or `null`.
 */
var MonikerRequest;
(function (MonikerRequest) {
    MonikerRequest.method = 'textDocument/moniker';
    MonikerRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    MonikerRequest.type = new messages_1.ProtocolRequestType(MonikerRequest.method);
})(MonikerRequest || (exports.MonikerRequest = MonikerRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.notebook.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidCloseNotebookDocumentNotification = exports.DidSaveNotebookDocumentNotification = exports.DidChangeNotebookDocumentNotification = exports.NotebookCellArrayChange = exports.DidOpenNotebookDocumentNotification = exports.NotebookDocumentSyncRegistrationType = exports.NotebookDocument = exports.NotebookCell = exports.ExecutionSummary = exports.NotebookCellKind = void 0;
const vscode_languageserver_types_1 = __webpack_require__(/*! vscode-languageserver-types */ "../../node_modules/vscode-languageserver-types/lib/umd/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "../../node_modules/vscode-languageserver-protocol/lib/common/utils/is.js");
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A notebook cell kind.
 *
 * @since 3.17.0
 */
var NotebookCellKind;
(function (NotebookCellKind) {
    /**
     * A markup-cell is formatted source that is used for display.
     */
    NotebookCellKind.Markup = 1;
    /**
     * A code-cell is source code.
     */
    NotebookCellKind.Code = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    NotebookCellKind.is = is;
})(NotebookCellKind || (exports.NotebookCellKind = NotebookCellKind = {}));
var ExecutionSummary;
(function (ExecutionSummary) {
    function create(executionOrder, success) {
        const result = { executionOrder };
        if (success === true || success === false) {
            result.success = success;
        }
        return result;
    }
    ExecutionSummary.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.executionOrder) && (candidate.success === undefined || Is.boolean(candidate.success));
    }
    ExecutionSummary.is = is;
    function equals(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        return one.executionOrder === other.executionOrder && one.success === other.success;
    }
    ExecutionSummary.equals = equals;
})(ExecutionSummary || (exports.ExecutionSummary = ExecutionSummary = {}));
var NotebookCell;
(function (NotebookCell) {
    function create(kind, document) {
        return { kind, document };
    }
    NotebookCell.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && NotebookCellKind.is(candidate.kind) && vscode_languageserver_types_1.DocumentUri.is(candidate.document) &&
            (candidate.metadata === undefined || Is.objectLiteral(candidate.metadata));
    }
    NotebookCell.is = is;
    function diff(one, two) {
        const result = new Set();
        if (one.document !== two.document) {
            result.add('document');
        }
        if (one.kind !== two.kind) {
            result.add('kind');
        }
        if (one.executionSummary !== two.executionSummary) {
            result.add('executionSummary');
        }
        if ((one.metadata !== undefined || two.metadata !== undefined) && !equalsMetadata(one.metadata, two.metadata)) {
            result.add('metadata');
        }
        if ((one.executionSummary !== undefined || two.executionSummary !== undefined) && !ExecutionSummary.equals(one.executionSummary, two.executionSummary)) {
            result.add('executionSummary');
        }
        return result;
    }
    NotebookCell.diff = diff;
    function equalsMetadata(one, other) {
        if (one === other) {
            return true;
        }
        if (one === null || one === undefined || other === null || other === undefined) {
            return false;
        }
        if (typeof one !== typeof other) {
            return false;
        }
        if (typeof one !== 'object') {
            return false;
        }
        const oneArray = Array.isArray(one);
        const otherArray = Array.isArray(other);
        if (oneArray !== otherArray) {
            return false;
        }
        if (oneArray && otherArray) {
            if (one.length !== other.length) {
                return false;
            }
            for (let i = 0; i < one.length; i++) {
                if (!equalsMetadata(one[i], other[i])) {
                    return false;
                }
            }
        }
        if (Is.objectLiteral(one) && Is.objectLiteral(other)) {
            const oneKeys = Object.keys(one);
            const otherKeys = Object.keys(other);
            if (oneKeys.length !== otherKeys.length) {
                return false;
            }
            oneKeys.sort();
            otherKeys.sort();
            if (!equalsMetadata(oneKeys, otherKeys)) {
                return false;
            }
            for (let i = 0; i < oneKeys.length; i++) {
                const prop = oneKeys[i];
                if (!equalsMetadata(one[prop], other[prop])) {
                    return false;
                }
            }
        }
        return true;
    }
})(NotebookCell || (exports.NotebookCell = NotebookCell = {}));
var NotebookDocument;
(function (NotebookDocument) {
    function create(uri, notebookType, version, cells) {
        return { uri, notebookType, version, cells };
    }
    NotebookDocument.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.uri) && vscode_languageserver_types_1.integer.is(candidate.version) && Is.typedArray(candidate.cells, NotebookCell.is);
    }
    NotebookDocument.is = is;
})(NotebookDocument || (exports.NotebookDocument = NotebookDocument = {}));
var NotebookDocumentSyncRegistrationType;
(function (NotebookDocumentSyncRegistrationType) {
    NotebookDocumentSyncRegistrationType.method = 'notebookDocument/sync';
    NotebookDocumentSyncRegistrationType.messageDirection = messages_1.MessageDirection.clientToServer;
    NotebookDocumentSyncRegistrationType.type = new messages_1.RegistrationType(NotebookDocumentSyncRegistrationType.method);
})(NotebookDocumentSyncRegistrationType || (exports.NotebookDocumentSyncRegistrationType = NotebookDocumentSyncRegistrationType = {}));
/**
 * A notification sent when a notebook opens.
 *
 * @since 3.17.0
 */
var DidOpenNotebookDocumentNotification;
(function (DidOpenNotebookDocumentNotification) {
    DidOpenNotebookDocumentNotification.method = 'notebookDocument/didOpen';
    DidOpenNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidOpenNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidOpenNotebookDocumentNotification.method);
    DidOpenNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidOpenNotebookDocumentNotification || (exports.DidOpenNotebookDocumentNotification = DidOpenNotebookDocumentNotification = {}));
var NotebookCellArrayChange;
(function (NotebookCellArrayChange) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && vscode_languageserver_types_1.uinteger.is(candidate.start) && vscode_languageserver_types_1.uinteger.is(candidate.deleteCount) && (candidate.cells === undefined || Is.typedArray(candidate.cells, NotebookCell.is));
    }
    NotebookCellArrayChange.is = is;
    function create(start, deleteCount, cells) {
        const result = { start, deleteCount };
        if (cells !== undefined) {
            result.cells = cells;
        }
        return result;
    }
    NotebookCellArrayChange.create = create;
})(NotebookCellArrayChange || (exports.NotebookCellArrayChange = NotebookCellArrayChange = {}));
var DidChangeNotebookDocumentNotification;
(function (DidChangeNotebookDocumentNotification) {
    DidChangeNotebookDocumentNotification.method = 'notebookDocument/didChange';
    DidChangeNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidChangeNotebookDocumentNotification.method);
    DidChangeNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidChangeNotebookDocumentNotification || (exports.DidChangeNotebookDocumentNotification = DidChangeNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook document is saved.
 *
 * @since 3.17.0
 */
var DidSaveNotebookDocumentNotification;
(function (DidSaveNotebookDocumentNotification) {
    DidSaveNotebookDocumentNotification.method = 'notebookDocument/didSave';
    DidSaveNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidSaveNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidSaveNotebookDocumentNotification.method);
    DidSaveNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidSaveNotebookDocumentNotification || (exports.DidSaveNotebookDocumentNotification = DidSaveNotebookDocumentNotification = {}));
/**
 * A notification sent when a notebook closes.
 *
 * @since 3.17.0
 */
var DidCloseNotebookDocumentNotification;
(function (DidCloseNotebookDocumentNotification) {
    DidCloseNotebookDocumentNotification.method = 'notebookDocument/didClose';
    DidCloseNotebookDocumentNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidCloseNotebookDocumentNotification.type = new messages_1.ProtocolNotificationType(DidCloseNotebookDocumentNotification.method);
    DidCloseNotebookDocumentNotification.registrationMethod = NotebookDocumentSyncRegistrationType.method;
})(DidCloseNotebookDocumentNotification || (exports.DidCloseNotebookDocumentNotification = DidCloseNotebookDocumentNotification = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js":
/*!*****************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.progress.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkDoneProgressCancelNotification = exports.WorkDoneProgressCreateRequest = exports.WorkDoneProgress = void 0;
const vscode_jsonrpc_1 = __webpack_require__(/*! vscode-jsonrpc */ "../../node_modules/vscode-jsonrpc/lib/node/main.js");
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
var WorkDoneProgress;
(function (WorkDoneProgress) {
    WorkDoneProgress.type = new vscode_jsonrpc_1.ProgressType();
    function is(value) {
        return value === WorkDoneProgress.type;
    }
    WorkDoneProgress.is = is;
})(WorkDoneProgress || (exports.WorkDoneProgress = WorkDoneProgress = {}));
/**
 * The `window/workDoneProgress/create` request is sent from the server to the client to initiate progress
 * reporting from the server.
 */
var WorkDoneProgressCreateRequest;
(function (WorkDoneProgressCreateRequest) {
    WorkDoneProgressCreateRequest.method = 'window/workDoneProgress/create';
    WorkDoneProgressCreateRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkDoneProgressCreateRequest.type = new messages_1.ProtocolRequestType(WorkDoneProgressCreateRequest.method);
})(WorkDoneProgressCreateRequest || (exports.WorkDoneProgressCreateRequest = WorkDoneProgressCreateRequest = {}));
/**
 * The `window/workDoneProgress/cancel` notification is sent from  the client to the server to cancel a progress
 * initiated on the server side.
 */
var WorkDoneProgressCancelNotification;
(function (WorkDoneProgressCancelNotification) {
    WorkDoneProgressCancelNotification.method = 'window/workDoneProgress/cancel';
    WorkDoneProgressCancelNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    WorkDoneProgressCancelNotification.type = new messages_1.ProtocolNotificationType(WorkDoneProgressCancelNotification.method);
})(WorkDoneProgressCancelNotification || (exports.WorkDoneProgressCancelNotification = WorkDoneProgressCancelNotification = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.selectionRange.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SelectionRangeRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to provide selection ranges in a document. The request's
 * parameter is of type {@link SelectionRangeParams}, the
 * response is of type {@link SelectionRange SelectionRange[]} or a Thenable
 * that resolves to such.
 */
var SelectionRangeRequest;
(function (SelectionRangeRequest) {
    SelectionRangeRequest.method = 'textDocument/selectionRange';
    SelectionRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SelectionRangeRequest.type = new messages_1.ProtocolRequestType(SelectionRangeRequest.method);
})(SelectionRangeRequest || (exports.SelectionRangeRequest = SelectionRangeRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.semanticTokens.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SemanticTokensRefreshRequest = exports.SemanticTokensRangeRequest = exports.SemanticTokensDeltaRequest = exports.SemanticTokensRequest = exports.SemanticTokensRegistrationType = exports.TokenFormat = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
//------- 'textDocument/semanticTokens' -----
var TokenFormat;
(function (TokenFormat) {
    TokenFormat.Relative = 'relative';
})(TokenFormat || (exports.TokenFormat = TokenFormat = {}));
var SemanticTokensRegistrationType;
(function (SemanticTokensRegistrationType) {
    SemanticTokensRegistrationType.method = 'textDocument/semanticTokens';
    SemanticTokensRegistrationType.type = new messages_1.RegistrationType(SemanticTokensRegistrationType.method);
})(SemanticTokensRegistrationType || (exports.SemanticTokensRegistrationType = SemanticTokensRegistrationType = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRequest;
(function (SemanticTokensRequest) {
    SemanticTokensRequest.method = 'textDocument/semanticTokens/full';
    SemanticTokensRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRequest.method);
    SemanticTokensRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRequest || (exports.SemanticTokensRequest = SemanticTokensRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensDeltaRequest;
(function (SemanticTokensDeltaRequest) {
    SemanticTokensDeltaRequest.method = 'textDocument/semanticTokens/full/delta';
    SemanticTokensDeltaRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensDeltaRequest.type = new messages_1.ProtocolRequestType(SemanticTokensDeltaRequest.method);
    SemanticTokensDeltaRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensDeltaRequest || (exports.SemanticTokensDeltaRequest = SemanticTokensDeltaRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRangeRequest;
(function (SemanticTokensRangeRequest) {
    SemanticTokensRangeRequest.method = 'textDocument/semanticTokens/range';
    SemanticTokensRangeRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    SemanticTokensRangeRequest.type = new messages_1.ProtocolRequestType(SemanticTokensRangeRequest.method);
    SemanticTokensRangeRequest.registrationMethod = SemanticTokensRegistrationType.method;
})(SemanticTokensRangeRequest || (exports.SemanticTokensRangeRequest = SemanticTokensRangeRequest = {}));
/**
 * @since 3.16.0
 */
var SemanticTokensRefreshRequest;
(function (SemanticTokensRefreshRequest) {
    SemanticTokensRefreshRequest.method = `workspace/semanticTokens/refresh`;
    SemanticTokensRefreshRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    SemanticTokensRefreshRequest.type = new messages_1.ProtocolRequestType0(SemanticTokensRefreshRequest.method);
})(SemanticTokensRefreshRequest || (exports.SemanticTokensRefreshRequest = SemanticTokensRefreshRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js":
/*!*********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.showDocument.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowDocumentRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to show a document. This request might open an
 * external program depending on the value of the URI to open.
 * For example a request to open `https://code.visualstudio.com/`
 * will very likely open the URI in a WEB browser.
 *
 * @since 3.16.0
*/
var ShowDocumentRequest;
(function (ShowDocumentRequest) {
    ShowDocumentRequest.method = 'window/showDocument';
    ShowDocumentRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    ShowDocumentRequest.type = new messages_1.ProtocolRequestType(ShowDocumentRequest.method);
})(ShowDocumentRequest || (exports.ShowDocumentRequest = ShowDocumentRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js":
/*!***********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeDefinition.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeDefinitionRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
// @ts-ignore: to avoid inlining LocatioLink as dynamic import
let __noDynamicImport;
/**
 * A request to resolve the type definition locations of a symbol at a given text
 * document position. The request's parameter is of type {@link TextDocumentPositionParams}
 * the response is of type {@link Definition} or a Thenable that resolves to such.
 */
var TypeDefinitionRequest;
(function (TypeDefinitionRequest) {
    TypeDefinitionRequest.method = 'textDocument/typeDefinition';
    TypeDefinitionRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeDefinitionRequest.type = new messages_1.ProtocolRequestType(TypeDefinitionRequest.method);
})(TypeDefinitionRequest || (exports.TypeDefinitionRequest = TypeDefinitionRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js":
/*!**********************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.typeHierarchy.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox, Microsoft and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeHierarchySubtypesRequest = exports.TypeHierarchySupertypesRequest = exports.TypeHierarchyPrepareRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * A request to result a `TypeHierarchyItem` in a document at a given position.
 * Can be used as an input to a subtypes or supertypes type hierarchy.
 *
 * @since 3.17.0
 */
var TypeHierarchyPrepareRequest;
(function (TypeHierarchyPrepareRequest) {
    TypeHierarchyPrepareRequest.method = 'textDocument/prepareTypeHierarchy';
    TypeHierarchyPrepareRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchyPrepareRequest.type = new messages_1.ProtocolRequestType(TypeHierarchyPrepareRequest.method);
})(TypeHierarchyPrepareRequest || (exports.TypeHierarchyPrepareRequest = TypeHierarchyPrepareRequest = {}));
/**
 * A request to resolve the supertypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySupertypesRequest;
(function (TypeHierarchySupertypesRequest) {
    TypeHierarchySupertypesRequest.method = 'typeHierarchy/supertypes';
    TypeHierarchySupertypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySupertypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySupertypesRequest.method);
})(TypeHierarchySupertypesRequest || (exports.TypeHierarchySupertypesRequest = TypeHierarchySupertypesRequest = {}));
/**
 * A request to resolve the subtypes for a given `TypeHierarchyItem`.
 *
 * @since 3.17.0
 */
var TypeHierarchySubtypesRequest;
(function (TypeHierarchySubtypesRequest) {
    TypeHierarchySubtypesRequest.method = 'typeHierarchy/subtypes';
    TypeHierarchySubtypesRequest.messageDirection = messages_1.MessageDirection.clientToServer;
    TypeHierarchySubtypesRequest.type = new messages_1.ProtocolRequestType(TypeHierarchySubtypesRequest.method);
})(TypeHierarchySubtypesRequest || (exports.TypeHierarchySubtypesRequest = TypeHierarchySubtypesRequest = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js":
/*!************************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/protocol.workspaceFolder.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DidChangeWorkspaceFoldersNotification = exports.WorkspaceFoldersRequest = void 0;
const messages_1 = __webpack_require__(/*! ./messages */ "../../node_modules/vscode-languageserver-protocol/lib/common/messages.js");
/**
 * The `workspace/workspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */
var WorkspaceFoldersRequest;
(function (WorkspaceFoldersRequest) {
    WorkspaceFoldersRequest.method = 'workspace/workspaceFolders';
    WorkspaceFoldersRequest.messageDirection = messages_1.MessageDirection.serverToClient;
    WorkspaceFoldersRequest.type = new messages_1.ProtocolRequestType0(WorkspaceFoldersRequest.method);
})(WorkspaceFoldersRequest || (exports.WorkspaceFoldersRequest = WorkspaceFoldersRequest = {}));
/**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */
var DidChangeWorkspaceFoldersNotification;
(function (DidChangeWorkspaceFoldersNotification) {
    DidChangeWorkspaceFoldersNotification.method = 'workspace/didChangeWorkspaceFolders';
    DidChangeWorkspaceFoldersNotification.messageDirection = messages_1.MessageDirection.clientToServer;
    DidChangeWorkspaceFoldersNotification.type = new messages_1.ProtocolNotificationType(DidChangeWorkspaceFoldersNotification.method);
})(DidChangeWorkspaceFoldersNotification || (exports.DidChangeWorkspaceFoldersNotification = DidChangeWorkspaceFoldersNotification = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/common/utils/is.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/common/utils/is.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.objectLiteral = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function objectLiteral(value) {
    // Strictly speaking class instances pass this check as well. Since the LSP
    // doesn't use classes we ignore this for now. If we do we need to add something
    // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
    return value !== null && typeof value === 'object';
}
exports.objectLiteral = objectLiteral;


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/lib/node/main.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createProtocolConnection = void 0;
const node_1 = __webpack_require__(/*! vscode-jsonrpc/node */ "../../node_modules/vscode-jsonrpc/node.js");
__exportStar(__webpack_require__(/*! vscode-jsonrpc/node */ "../../node_modules/vscode-jsonrpc/node.js"), exports);
__exportStar(__webpack_require__(/*! ../common/api */ "../../node_modules/vscode-languageserver-protocol/lib/common/api.js"), exports);
function createProtocolConnection(input, output, logger, options) {
    return (0, node_1.createMessageConnection)(input, output, logger, options);
}
exports.createProtocolConnection = createProtocolConnection;


/***/ }),

/***/ "../../node_modules/vscode-languageserver-protocol/node.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-protocol/node.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/node/main */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");

/***/ }),

/***/ "../../node_modules/vscode-languageserver-types/lib/umd/main.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-types/lib/umd/main.js ***!
  \**********************************************************************/
/***/ ((module, exports, __webpack_require__) => {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {
    if ( true && typeof module.exports === "object") {
        var v = factory(__webpack_require__("../../node_modules/vscode-languageserver-types/lib/umd sync recursive"), exports);
        if (v !== undefined) module.exports = v;
    }
    else if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
		__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
		(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    }
})(function (require, exports) {
    /* --------------------------------------------------------------------------------------------
     * Copyright (c) Microsoft Corporation. All rights reserved.
     * Licensed under the MIT License. See License.txt in the project root for license information.
     * ------------------------------------------------------------------------------------------ */
    'use strict';
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TextDocument = exports.EOL = exports.WorkspaceFolder = exports.InlineCompletionContext = exports.SelectedCompletionInfo = exports.InlineCompletionTriggerKind = exports.InlineCompletionList = exports.InlineCompletionItem = exports.StringValue = exports.InlayHint = exports.InlayHintLabelPart = exports.InlayHintKind = exports.InlineValueContext = exports.InlineValueEvaluatableExpression = exports.InlineValueVariableLookup = exports.InlineValueText = exports.SemanticTokens = exports.SemanticTokenModifiers = exports.SemanticTokenTypes = exports.SelectionRange = exports.DocumentLink = exports.FormattingOptions = exports.CodeLens = exports.CodeAction = exports.CodeActionContext = exports.CodeActionTriggerKind = exports.CodeActionKind = exports.DocumentSymbol = exports.WorkspaceSymbol = exports.SymbolInformation = exports.SymbolTag = exports.SymbolKind = exports.DocumentHighlight = exports.DocumentHighlightKind = exports.SignatureInformation = exports.ParameterInformation = exports.Hover = exports.MarkedString = exports.CompletionList = exports.CompletionItem = exports.CompletionItemLabelDetails = exports.InsertTextMode = exports.InsertReplaceEdit = exports.CompletionItemTag = exports.InsertTextFormat = exports.CompletionItemKind = exports.MarkupContent = exports.MarkupKind = exports.TextDocumentItem = exports.OptionalVersionedTextDocumentIdentifier = exports.VersionedTextDocumentIdentifier = exports.TextDocumentIdentifier = exports.WorkspaceChange = exports.WorkspaceEdit = exports.DeleteFile = exports.RenameFile = exports.CreateFile = exports.TextDocumentEdit = exports.AnnotatedTextEdit = exports.ChangeAnnotationIdentifier = exports.ChangeAnnotation = exports.TextEdit = exports.Command = exports.Diagnostic = exports.CodeDescription = exports.DiagnosticTag = exports.DiagnosticSeverity = exports.DiagnosticRelatedInformation = exports.FoldingRange = exports.FoldingRangeKind = exports.ColorPresentation = exports.ColorInformation = exports.Color = exports.LocationLink = exports.Location = exports.Range = exports.Position = exports.uinteger = exports.integer = exports.URI = exports.DocumentUri = void 0;
    var DocumentUri;
    (function (DocumentUri) {
        function is(value) {
            return typeof value === 'string';
        }
        DocumentUri.is = is;
    })(DocumentUri || (exports.DocumentUri = DocumentUri = {}));
    var URI;
    (function (URI) {
        function is(value) {
            return typeof value === 'string';
        }
        URI.is = is;
    })(URI || (exports.URI = URI = {}));
    var integer;
    (function (integer) {
        integer.MIN_VALUE = -2147483648;
        integer.MAX_VALUE = 2147483647;
        function is(value) {
            return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
        }
        integer.is = is;
    })(integer || (exports.integer = integer = {}));
    var uinteger;
    (function (uinteger) {
        uinteger.MIN_VALUE = 0;
        uinteger.MAX_VALUE = 2147483647;
        function is(value) {
            return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
        }
        uinteger.is = is;
    })(uinteger || (exports.uinteger = uinteger = {}));
    /**
     * The Position namespace provides helper functions to work with
     * {@link Position} literals.
     */
    var Position;
    (function (Position) {
        /**
         * Creates a new Position literal from the given line and character.
         * @param line The position's line.
         * @param character The position's character.
         */
        function create(line, character) {
            if (line === Number.MAX_VALUE) {
                line = uinteger.MAX_VALUE;
            }
            if (character === Number.MAX_VALUE) {
                character = uinteger.MAX_VALUE;
            }
            return { line: line, character: character };
        }
        Position.create = create;
        /**
         * Checks whether the given literal conforms to the {@link Position} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
        }
        Position.is = is;
    })(Position || (exports.Position = Position = {}));
    /**
     * The Range namespace provides helper functions to work with
     * {@link Range} literals.
     */
    var Range;
    (function (Range) {
        function create(one, two, three, four) {
            if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
                return { start: Position.create(one, two), end: Position.create(three, four) };
            }
            else if (Position.is(one) && Position.is(two)) {
                return { start: one, end: two };
            }
            else {
                throw new Error("Range#create called with invalid arguments[".concat(one, ", ").concat(two, ", ").concat(three, ", ").concat(four, "]"));
            }
        }
        Range.create = create;
        /**
         * Checks whether the given literal conforms to the {@link Range} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
        }
        Range.is = is;
    })(Range || (exports.Range = Range = {}));
    /**
     * The Location namespace provides helper functions to work with
     * {@link Location} literals.
     */
    var Location;
    (function (Location) {
        /**
         * Creates a Location literal.
         * @param uri The location's uri.
         * @param range The location's range.
         */
        function create(uri, range) {
            return { uri: uri, range: range };
        }
        Location.create = create;
        /**
         * Checks whether the given literal conforms to the {@link Location} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
        }
        Location.is = is;
    })(Location || (exports.Location = Location = {}));
    /**
     * The LocationLink namespace provides helper functions to work with
     * {@link LocationLink} literals.
     */
    var LocationLink;
    (function (LocationLink) {
        /**
         * Creates a LocationLink literal.
         * @param targetUri The definition's uri.
         * @param targetRange The full range of the definition.
         * @param targetSelectionRange The span of the symbol definition at the target.
         * @param originSelectionRange The span of the symbol being defined in the originating source file.
         */
        function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
            return { targetUri: targetUri, targetRange: targetRange, targetSelectionRange: targetSelectionRange, originSelectionRange: originSelectionRange };
        }
        LocationLink.create = create;
        /**
         * Checks whether the given literal conforms to the {@link LocationLink} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)
                && Range.is(candidate.targetSelectionRange)
                && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
        }
        LocationLink.is = is;
    })(LocationLink || (exports.LocationLink = LocationLink = {}));
    /**
     * The Color namespace provides helper functions to work with
     * {@link Color} literals.
     */
    var Color;
    (function (Color) {
        /**
         * Creates a new Color literal.
         */
        function create(red, green, blue, alpha) {
            return {
                red: red,
                green: green,
                blue: blue,
                alpha: alpha,
            };
        }
        Color.create = create;
        /**
         * Checks whether the given literal conforms to the {@link Color} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)
                && Is.numberRange(candidate.green, 0, 1)
                && Is.numberRange(candidate.blue, 0, 1)
                && Is.numberRange(candidate.alpha, 0, 1);
        }
        Color.is = is;
    })(Color || (exports.Color = Color = {}));
    /**
     * The ColorInformation namespace provides helper functions to work with
     * {@link ColorInformation} literals.
     */
    var ColorInformation;
    (function (ColorInformation) {
        /**
         * Creates a new ColorInformation literal.
         */
        function create(range, color) {
            return {
                range: range,
                color: color,
            };
        }
        ColorInformation.create = create;
        /**
         * Checks whether the given literal conforms to the {@link ColorInformation} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
        }
        ColorInformation.is = is;
    })(ColorInformation || (exports.ColorInformation = ColorInformation = {}));
    /**
     * The Color namespace provides helper functions to work with
     * {@link ColorPresentation} literals.
     */
    var ColorPresentation;
    (function (ColorPresentation) {
        /**
         * Creates a new ColorInformation literal.
         */
        function create(label, textEdit, additionalTextEdits) {
            return {
                label: label,
                textEdit: textEdit,
                additionalTextEdits: additionalTextEdits,
            };
        }
        ColorPresentation.create = create;
        /**
         * Checks whether the given literal conforms to the {@link ColorInformation} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.string(candidate.label)
                && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))
                && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
        }
        ColorPresentation.is = is;
    })(ColorPresentation || (exports.ColorPresentation = ColorPresentation = {}));
    /**
     * A set of predefined range kinds.
     */
    var FoldingRangeKind;
    (function (FoldingRangeKind) {
        /**
         * Folding range for a comment
         */
        FoldingRangeKind.Comment = 'comment';
        /**
         * Folding range for an import or include
         */
        FoldingRangeKind.Imports = 'imports';
        /**
         * Folding range for a region (e.g. `#region`)
         */
        FoldingRangeKind.Region = 'region';
    })(FoldingRangeKind || (exports.FoldingRangeKind = FoldingRangeKind = {}));
    /**
     * The folding range namespace provides helper functions to work with
     * {@link FoldingRange} literals.
     */
    var FoldingRange;
    (function (FoldingRange) {
        /**
         * Creates a new FoldingRange literal.
         */
        function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
            var result = {
                startLine: startLine,
                endLine: endLine
            };
            if (Is.defined(startCharacter)) {
                result.startCharacter = startCharacter;
            }
            if (Is.defined(endCharacter)) {
                result.endCharacter = endCharacter;
            }
            if (Is.defined(kind)) {
                result.kind = kind;
            }
            if (Is.defined(collapsedText)) {
                result.collapsedText = collapsedText;
            }
            return result;
        }
        FoldingRange.create = create;
        /**
         * Checks whether the given literal conforms to the {@link FoldingRange} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)
                && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))
                && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))
                && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
        }
        FoldingRange.is = is;
    })(FoldingRange || (exports.FoldingRange = FoldingRange = {}));
    /**
     * The DiagnosticRelatedInformation namespace provides helper functions to work with
     * {@link DiagnosticRelatedInformation} literals.
     */
    var DiagnosticRelatedInformation;
    (function (DiagnosticRelatedInformation) {
        /**
         * Creates a new DiagnosticRelatedInformation literal.
         */
        function create(location, message) {
            return {
                location: location,
                message: message
            };
        }
        DiagnosticRelatedInformation.create = create;
        /**
         * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
        }
        DiagnosticRelatedInformation.is = is;
    })(DiagnosticRelatedInformation || (exports.DiagnosticRelatedInformation = DiagnosticRelatedInformation = {}));
    /**
     * The diagnostic's severity.
     */
    var DiagnosticSeverity;
    (function (DiagnosticSeverity) {
        /**
         * Reports an error.
         */
        DiagnosticSeverity.Error = 1;
        /**
         * Reports a warning.
         */
        DiagnosticSeverity.Warning = 2;
        /**
         * Reports an information.
         */
        DiagnosticSeverity.Information = 3;
        /**
         * Reports a hint.
         */
        DiagnosticSeverity.Hint = 4;
    })(DiagnosticSeverity || (exports.DiagnosticSeverity = DiagnosticSeverity = {}));
    /**
     * The diagnostic tags.
     *
     * @since 3.15.0
     */
    var DiagnosticTag;
    (function (DiagnosticTag) {
        /**
         * Unused or unnecessary code.
         *
         * Clients are allowed to render diagnostics with this tag faded out instead of having
         * an error squiggle.
         */
        DiagnosticTag.Unnecessary = 1;
        /**
         * Deprecated or obsolete code.
         *
         * Clients are allowed to rendered diagnostics with this tag strike through.
         */
        DiagnosticTag.Deprecated = 2;
    })(DiagnosticTag || (exports.DiagnosticTag = DiagnosticTag = {}));
    /**
     * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
     *
     * @since 3.16.0
     */
    var CodeDescription;
    (function (CodeDescription) {
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.string(candidate.href);
        }
        CodeDescription.is = is;
    })(CodeDescription || (exports.CodeDescription = CodeDescription = {}));
    /**
     * The Diagnostic namespace provides helper functions to work with
     * {@link Diagnostic} literals.
     */
    var Diagnostic;
    (function (Diagnostic) {
        /**
         * Creates a new Diagnostic literal.
         */
        function create(range, message, severity, code, source, relatedInformation) {
            var result = { range: range, message: message };
            if (Is.defined(severity)) {
                result.severity = severity;
            }
            if (Is.defined(code)) {
                result.code = code;
            }
            if (Is.defined(source)) {
                result.source = source;
            }
            if (Is.defined(relatedInformation)) {
                result.relatedInformation = relatedInformation;
            }
            return result;
        }
        Diagnostic.create = create;
        /**
         * Checks whether the given literal conforms to the {@link Diagnostic} interface.
         */
        function is(value) {
            var _a;
            var candidate = value;
            return Is.defined(candidate)
                && Range.is(candidate.range)
                && Is.string(candidate.message)
                && (Is.number(candidate.severity) || Is.undefined(candidate.severity))
                && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))
                && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))
                && (Is.string(candidate.source) || Is.undefined(candidate.source))
                && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
        }
        Diagnostic.is = is;
    })(Diagnostic || (exports.Diagnostic = Diagnostic = {}));
    /**
     * The Command namespace provides helper functions to work with
     * {@link Command} literals.
     */
    var Command;
    (function (Command) {
        /**
         * Creates a new Command literal.
         */
        function create(title, command) {
            var args = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                args[_i - 2] = arguments[_i];
            }
            var result = { title: title, command: command };
            if (Is.defined(args) && args.length > 0) {
                result.arguments = args;
            }
            return result;
        }
        Command.create = create;
        /**
         * Checks whether the given literal conforms to the {@link Command} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
        }
        Command.is = is;
    })(Command || (exports.Command = Command = {}));
    /**
     * The TextEdit namespace provides helper function to create replace,
     * insert and delete edits more easily.
     */
    var TextEdit;
    (function (TextEdit) {
        /**
         * Creates a replace text edit.
         * @param range The range of text to be replaced.
         * @param newText The new text.
         */
        function replace(range, newText) {
            return { range: range, newText: newText };
        }
        TextEdit.replace = replace;
        /**
         * Creates an insert text edit.
         * @param position The position to insert the text at.
         * @param newText The text to be inserted.
         */
        function insert(position, newText) {
            return { range: { start: position, end: position }, newText: newText };
        }
        TextEdit.insert = insert;
        /**
         * Creates a delete text edit.
         * @param range The range of text to be deleted.
         */
        function del(range) {
            return { range: range, newText: '' };
        }
        TextEdit.del = del;
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate)
                && Is.string(candidate.newText)
                && Range.is(candidate.range);
        }
        TextEdit.is = is;
    })(TextEdit || (exports.TextEdit = TextEdit = {}));
    var ChangeAnnotation;
    (function (ChangeAnnotation) {
        function create(label, needsConfirmation, description) {
            var result = { label: label };
            if (needsConfirmation !== undefined) {
                result.needsConfirmation = needsConfirmation;
            }
            if (description !== undefined) {
                result.description = description;
            }
            return result;
        }
        ChangeAnnotation.create = create;
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Is.string(candidate.label) &&
                (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&
                (Is.string(candidate.description) || candidate.description === undefined);
        }
        ChangeAnnotation.is = is;
    })(ChangeAnnotation || (exports.ChangeAnnotation = ChangeAnnotation = {}));
    var ChangeAnnotationIdentifier;
    (function (ChangeAnnotationIdentifier) {
        function is(value) {
            var candidate = value;
            return Is.string(candidate);
        }
        ChangeAnnotationIdentifier.is = is;
    })(ChangeAnnotationIdentifier || (exports.ChangeAnnotationIdentifier = ChangeAnnotationIdentifier = {}));
    var AnnotatedTextEdit;
    (function (AnnotatedTextEdit) {
        /**
         * Creates an annotated replace text edit.
         *
         * @param range The range of text to be replaced.
         * @param newText The new text.
         * @param annotation The annotation.
         */
        function replace(range, newText, annotation) {
            return { range: range, newText: newText, annotationId: annotation };
        }
        AnnotatedTextEdit.replace = replace;
        /**
         * Creates an annotated insert text edit.
         *
         * @param position The position to insert the text at.
         * @param newText The text to be inserted.
         * @param annotation The annotation.
         */
        function insert(position, newText, annotation) {
            return { range: { start: position, end: position }, newText: newText, annotationId: annotation };
        }
        AnnotatedTextEdit.insert = insert;
        /**
         * Creates an annotated delete text edit.
         *
         * @param range The range of text to be deleted.
         * @param annotation The annotation.
         */
        function del(range, annotation) {
            return { range: range, newText: '', annotationId: annotation };
        }
        AnnotatedTextEdit.del = del;
        function is(value) {
            var candidate = value;
            return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
        }
        AnnotatedTextEdit.is = is;
    })(AnnotatedTextEdit || (exports.AnnotatedTextEdit = AnnotatedTextEdit = {}));
    /**
     * The TextDocumentEdit namespace provides helper function to create
     * an edit that manipulates a text document.
     */
    var TextDocumentEdit;
    (function (TextDocumentEdit) {
        /**
         * Creates a new `TextDocumentEdit`
         */
        function create(textDocument, edits) {
            return { textDocument: textDocument, edits: edits };
        }
        TextDocumentEdit.create = create;
        function is(value) {
            var candidate = value;
            return Is.defined(candidate)
                && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)
                && Array.isArray(candidate.edits);
        }
        TextDocumentEdit.is = is;
    })(TextDocumentEdit || (exports.TextDocumentEdit = TextDocumentEdit = {}));
    var CreateFile;
    (function (CreateFile) {
        function create(uri, options, annotation) {
            var result = {
                kind: 'create',
                uri: uri
            };
            if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
                result.options = options;
            }
            if (annotation !== undefined) {
                result.annotationId = annotation;
            }
            return result;
        }
        CreateFile.create = create;
        function is(value) {
            var candidate = value;
            return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||
                ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
        }
        CreateFile.is = is;
    })(CreateFile || (exports.CreateFile = CreateFile = {}));
    var RenameFile;
    (function (RenameFile) {
        function create(oldUri, newUri, options, annotation) {
            var result = {
                kind: 'rename',
                oldUri: oldUri,
                newUri: newUri
            };
            if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
                result.options = options;
            }
            if (annotation !== undefined) {
                result.annotationId = annotation;
            }
            return result;
        }
        RenameFile.create = create;
        function is(value) {
            var candidate = value;
            return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||
                ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
        }
        RenameFile.is = is;
    })(RenameFile || (exports.RenameFile = RenameFile = {}));
    var DeleteFile;
    (function (DeleteFile) {
        function create(uri, options, annotation) {
            var result = {
                kind: 'delete',
                uri: uri
            };
            if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
                result.options = options;
            }
            if (annotation !== undefined) {
                result.annotationId = annotation;
            }
            return result;
        }
        DeleteFile.create = create;
        function is(value) {
            var candidate = value;
            return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||
                ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
        }
        DeleteFile.is = is;
    })(DeleteFile || (exports.DeleteFile = DeleteFile = {}));
    var WorkspaceEdit;
    (function (WorkspaceEdit) {
        function is(value) {
            var candidate = value;
            return candidate &&
                (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&
                (candidate.documentChanges === undefined || candidate.documentChanges.every(function (change) {
                    if (Is.string(change.kind)) {
                        return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                    }
                    else {
                        return TextDocumentEdit.is(change);
                    }
                }));
        }
        WorkspaceEdit.is = is;
    })(WorkspaceEdit || (exports.WorkspaceEdit = WorkspaceEdit = {}));
    var TextEditChangeImpl = /** @class */ (function () {
        function TextEditChangeImpl(edits, changeAnnotations) {
            this.edits = edits;
            this.changeAnnotations = changeAnnotations;
        }
        TextEditChangeImpl.prototype.insert = function (position, newText, annotation) {
            var edit;
            var id;
            if (annotation === undefined) {
                edit = TextEdit.insert(position, newText);
            }
            else if (ChangeAnnotationIdentifier.is(annotation)) {
                id = annotation;
                edit = AnnotatedTextEdit.insert(position, newText, annotation);
            }
            else {
                this.assertChangeAnnotations(this.changeAnnotations);
                id = this.changeAnnotations.manage(annotation);
                edit = AnnotatedTextEdit.insert(position, newText, id);
            }
            this.edits.push(edit);
            if (id !== undefined) {
                return id;
            }
        };
        TextEditChangeImpl.prototype.replace = function (range, newText, annotation) {
            var edit;
            var id;
            if (annotation === undefined) {
                edit = TextEdit.replace(range, newText);
            }
            else if (ChangeAnnotationIdentifier.is(annotation)) {
                id = annotation;
                edit = AnnotatedTextEdit.replace(range, newText, annotation);
            }
            else {
                this.assertChangeAnnotations(this.changeAnnotations);
                id = this.changeAnnotations.manage(annotation);
                edit = AnnotatedTextEdit.replace(range, newText, id);
            }
            this.edits.push(edit);
            if (id !== undefined) {
                return id;
            }
        };
        TextEditChangeImpl.prototype.delete = function (range, annotation) {
            var edit;
            var id;
            if (annotation === undefined) {
                edit = TextEdit.del(range);
            }
            else if (ChangeAnnotationIdentifier.is(annotation)) {
                id = annotation;
                edit = AnnotatedTextEdit.del(range, annotation);
            }
            else {
                this.assertChangeAnnotations(this.changeAnnotations);
                id = this.changeAnnotations.manage(annotation);
                edit = AnnotatedTextEdit.del(range, id);
            }
            this.edits.push(edit);
            if (id !== undefined) {
                return id;
            }
        };
        TextEditChangeImpl.prototype.add = function (edit) {
            this.edits.push(edit);
        };
        TextEditChangeImpl.prototype.all = function () {
            return this.edits;
        };
        TextEditChangeImpl.prototype.clear = function () {
            this.edits.splice(0, this.edits.length);
        };
        TextEditChangeImpl.prototype.assertChangeAnnotations = function (value) {
            if (value === undefined) {
                throw new Error("Text edit change is not configured to manage change annotations.");
            }
        };
        return TextEditChangeImpl;
    }());
    /**
     * A helper class
     */
    var ChangeAnnotations = /** @class */ (function () {
        function ChangeAnnotations(annotations) {
            this._annotations = annotations === undefined ? Object.create(null) : annotations;
            this._counter = 0;
            this._size = 0;
        }
        ChangeAnnotations.prototype.all = function () {
            return this._annotations;
        };
        Object.defineProperty(ChangeAnnotations.prototype, "size", {
            get: function () {
                return this._size;
            },
            enumerable: false,
            configurable: true
        });
        ChangeAnnotations.prototype.manage = function (idOrAnnotation, annotation) {
            var id;
            if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
                id = idOrAnnotation;
            }
            else {
                id = this.nextId();
                annotation = idOrAnnotation;
            }
            if (this._annotations[id] !== undefined) {
                throw new Error("Id ".concat(id, " is already in use."));
            }
            if (annotation === undefined) {
                throw new Error("No annotation provided for id ".concat(id));
            }
            this._annotations[id] = annotation;
            this._size++;
            return id;
        };
        ChangeAnnotations.prototype.nextId = function () {
            this._counter++;
            return this._counter.toString();
        };
        return ChangeAnnotations;
    }());
    /**
     * A workspace change helps constructing changes to a workspace.
     */
    var WorkspaceChange = /** @class */ (function () {
        function WorkspaceChange(workspaceEdit) {
            var _this = this;
            this._textEditChanges = Object.create(null);
            if (workspaceEdit !== undefined) {
                this._workspaceEdit = workspaceEdit;
                if (workspaceEdit.documentChanges) {
                    this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                    workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                    workspaceEdit.documentChanges.forEach(function (change) {
                        if (TextDocumentEdit.is(change)) {
                            var textEditChange = new TextEditChangeImpl(change.edits, _this._changeAnnotations);
                            _this._textEditChanges[change.textDocument.uri] = textEditChange;
                        }
                    });
                }
                else if (workspaceEdit.changes) {
                    Object.keys(workspaceEdit.changes).forEach(function (key) {
                        var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                        _this._textEditChanges[key] = textEditChange;
                    });
                }
            }
            else {
                this._workspaceEdit = {};
            }
        }
        Object.defineProperty(WorkspaceChange.prototype, "edit", {
            /**
             * Returns the underlying {@link WorkspaceEdit} literal
             * use to be returned from a workspace edit operation like rename.
             */
            get: function () {
                this.initDocumentChanges();
                if (this._changeAnnotations !== undefined) {
                    if (this._changeAnnotations.size === 0) {
                        this._workspaceEdit.changeAnnotations = undefined;
                    }
                    else {
                        this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                    }
                }
                return this._workspaceEdit;
            },
            enumerable: false,
            configurable: true
        });
        WorkspaceChange.prototype.getTextEditChange = function (key) {
            if (OptionalVersionedTextDocumentIdentifier.is(key)) {
                this.initDocumentChanges();
                if (this._workspaceEdit.documentChanges === undefined) {
                    throw new Error('Workspace edit is not configured for document changes.');
                }
                var textDocument = { uri: key.uri, version: key.version };
                var result = this._textEditChanges[textDocument.uri];
                if (!result) {
                    var edits = [];
                    var textDocumentEdit = {
                        textDocument: textDocument,
                        edits: edits
                    };
                    this._workspaceEdit.documentChanges.push(textDocumentEdit);
                    result = new TextEditChangeImpl(edits, this._changeAnnotations);
                    this._textEditChanges[textDocument.uri] = result;
                }
                return result;
            }
            else {
                this.initChanges();
                if (this._workspaceEdit.changes === undefined) {
                    throw new Error('Workspace edit is not configured for normal text edit changes.');
                }
                var result = this._textEditChanges[key];
                if (!result) {
                    var edits = [];
                    this._workspaceEdit.changes[key] = edits;
                    result = new TextEditChangeImpl(edits);
                    this._textEditChanges[key] = result;
                }
                return result;
            }
        };
        WorkspaceChange.prototype.initDocumentChanges = function () {
            if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
                this._changeAnnotations = new ChangeAnnotations();
                this._workspaceEdit.documentChanges = [];
                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
            }
        };
        WorkspaceChange.prototype.initChanges = function () {
            if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
                this._workspaceEdit.changes = Object.create(null);
            }
        };
        WorkspaceChange.prototype.createFile = function (uri, optionsOrAnnotation, options) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            var annotation;
            if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                annotation = optionsOrAnnotation;
            }
            else {
                options = optionsOrAnnotation;
            }
            var operation;
            var id;
            if (annotation === undefined) {
                operation = CreateFile.create(uri, options);
            }
            else {
                id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                operation = CreateFile.create(uri, options, id);
            }
            this._workspaceEdit.documentChanges.push(operation);
            if (id !== undefined) {
                return id;
            }
        };
        WorkspaceChange.prototype.renameFile = function (oldUri, newUri, optionsOrAnnotation, options) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            var annotation;
            if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                annotation = optionsOrAnnotation;
            }
            else {
                options = optionsOrAnnotation;
            }
            var operation;
            var id;
            if (annotation === undefined) {
                operation = RenameFile.create(oldUri, newUri, options);
            }
            else {
                id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                operation = RenameFile.create(oldUri, newUri, options, id);
            }
            this._workspaceEdit.documentChanges.push(operation);
            if (id !== undefined) {
                return id;
            }
        };
        WorkspaceChange.prototype.deleteFile = function (uri, optionsOrAnnotation, options) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            var annotation;
            if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
                annotation = optionsOrAnnotation;
            }
            else {
                options = optionsOrAnnotation;
            }
            var operation;
            var id;
            if (annotation === undefined) {
                operation = DeleteFile.create(uri, options);
            }
            else {
                id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
                operation = DeleteFile.create(uri, options, id);
            }
            this._workspaceEdit.documentChanges.push(operation);
            if (id !== undefined) {
                return id;
            }
        };
        return WorkspaceChange;
    }());
    exports.WorkspaceChange = WorkspaceChange;
    /**
     * The TextDocumentIdentifier namespace provides helper functions to work with
     * {@link TextDocumentIdentifier} literals.
     */
    var TextDocumentIdentifier;
    (function (TextDocumentIdentifier) {
        /**
         * Creates a new TextDocumentIdentifier literal.
         * @param uri The document's uri.
         */
        function create(uri) {
            return { uri: uri };
        }
        TextDocumentIdentifier.create = create;
        /**
         * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.uri);
        }
        TextDocumentIdentifier.is = is;
    })(TextDocumentIdentifier || (exports.TextDocumentIdentifier = TextDocumentIdentifier = {}));
    /**
     * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
     * {@link VersionedTextDocumentIdentifier} literals.
     */
    var VersionedTextDocumentIdentifier;
    (function (VersionedTextDocumentIdentifier) {
        /**
         * Creates a new VersionedTextDocumentIdentifier literal.
         * @param uri The document's uri.
         * @param version The document's version.
         */
        function create(uri, version) {
            return { uri: uri, version: version };
        }
        VersionedTextDocumentIdentifier.create = create;
        /**
         * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
        }
        VersionedTextDocumentIdentifier.is = is;
    })(VersionedTextDocumentIdentifier || (exports.VersionedTextDocumentIdentifier = VersionedTextDocumentIdentifier = {}));
    /**
     * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
     * {@link OptionalVersionedTextDocumentIdentifier} literals.
     */
    var OptionalVersionedTextDocumentIdentifier;
    (function (OptionalVersionedTextDocumentIdentifier) {
        /**
         * Creates a new OptionalVersionedTextDocumentIdentifier literal.
         * @param uri The document's uri.
         * @param version The document's version.
         */
        function create(uri, version) {
            return { uri: uri, version: version };
        }
        OptionalVersionedTextDocumentIdentifier.create = create;
        /**
         * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
        }
        OptionalVersionedTextDocumentIdentifier.is = is;
    })(OptionalVersionedTextDocumentIdentifier || (exports.OptionalVersionedTextDocumentIdentifier = OptionalVersionedTextDocumentIdentifier = {}));
    /**
     * The TextDocumentItem namespace provides helper functions to work with
     * {@link TextDocumentItem} literals.
     */
    var TextDocumentItem;
    (function (TextDocumentItem) {
        /**
         * Creates a new TextDocumentItem literal.
         * @param uri The document's uri.
         * @param languageId The document's language identifier.
         * @param version The document's version number.
         * @param text The document's text.
         */
        function create(uri, languageId, version, text) {
            return { uri: uri, languageId: languageId, version: version, text: text };
        }
        TextDocumentItem.create = create;
        /**
         * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
        }
        TextDocumentItem.is = is;
    })(TextDocumentItem || (exports.TextDocumentItem = TextDocumentItem = {}));
    /**
     * Describes the content type that a client supports in various
     * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
     *
     * Please note that `MarkupKinds` must not start with a `$`. This kinds
     * are reserved for internal usage.
     */
    var MarkupKind;
    (function (MarkupKind) {
        /**
         * Plain text is supported as a content format
         */
        MarkupKind.PlainText = 'plaintext';
        /**
         * Markdown is supported as a content format
         */
        MarkupKind.Markdown = 'markdown';
        /**
         * Checks whether the given value is a value of the {@link MarkupKind} type.
         */
        function is(value) {
            var candidate = value;
            return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
        }
        MarkupKind.is = is;
    })(MarkupKind || (exports.MarkupKind = MarkupKind = {}));
    var MarkupContent;
    (function (MarkupContent) {
        /**
         * Checks whether the given value conforms to the {@link MarkupContent} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
        }
        MarkupContent.is = is;
    })(MarkupContent || (exports.MarkupContent = MarkupContent = {}));
    /**
     * The kind of a completion entry.
     */
    var CompletionItemKind;
    (function (CompletionItemKind) {
        CompletionItemKind.Text = 1;
        CompletionItemKind.Method = 2;
        CompletionItemKind.Function = 3;
        CompletionItemKind.Constructor = 4;
        CompletionItemKind.Field = 5;
        CompletionItemKind.Variable = 6;
        CompletionItemKind.Class = 7;
        CompletionItemKind.Interface = 8;
        CompletionItemKind.Module = 9;
        CompletionItemKind.Property = 10;
        CompletionItemKind.Unit = 11;
        CompletionItemKind.Value = 12;
        CompletionItemKind.Enum = 13;
        CompletionItemKind.Keyword = 14;
        CompletionItemKind.Snippet = 15;
        CompletionItemKind.Color = 16;
        CompletionItemKind.File = 17;
        CompletionItemKind.Reference = 18;
        CompletionItemKind.Folder = 19;
        CompletionItemKind.EnumMember = 20;
        CompletionItemKind.Constant = 21;
        CompletionItemKind.Struct = 22;
        CompletionItemKind.Event = 23;
        CompletionItemKind.Operator = 24;
        CompletionItemKind.TypeParameter = 25;
    })(CompletionItemKind || (exports.CompletionItemKind = CompletionItemKind = {}));
    /**
     * Defines whether the insert text in a completion item should be interpreted as
     * plain text or a snippet.
     */
    var InsertTextFormat;
    (function (InsertTextFormat) {
        /**
         * The primary text to be inserted is treated as a plain string.
         */
        InsertTextFormat.PlainText = 1;
        /**
         * The primary text to be inserted is treated as a snippet.
         *
         * A snippet can define tab stops and placeholders with `$1`, `$2`
         * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
         * the end of the snippet. Placeholders with equal identifiers are linked,
         * that is typing in one will update others too.
         *
         * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
         */
        InsertTextFormat.Snippet = 2;
    })(InsertTextFormat || (exports.InsertTextFormat = InsertTextFormat = {}));
    /**
     * Completion item tags are extra annotations that tweak the rendering of a completion
     * item.
     *
     * @since 3.15.0
     */
    var CompletionItemTag;
    (function (CompletionItemTag) {
        /**
         * Render a completion as obsolete, usually using a strike-out.
         */
        CompletionItemTag.Deprecated = 1;
    })(CompletionItemTag || (exports.CompletionItemTag = CompletionItemTag = {}));
    /**
     * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
     *
     * @since 3.16.0
     */
    var InsertReplaceEdit;
    (function (InsertReplaceEdit) {
        /**
         * Creates a new insert / replace edit
         */
        function create(newText, insert, replace) {
            return { newText: newText, insert: insert, replace: replace };
        }
        InsertReplaceEdit.create = create;
        /**
         * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.
         */
        function is(value) {
            var candidate = value;
            return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
        }
        InsertReplaceEdit.is = is;
    })(InsertReplaceEdit || (exports.InsertReplaceEdit = InsertReplaceEdit = {}));
    /**
     * How whitespace and indentation is handled during completion
     * item insertion.
     *
     * @since 3.16.0
     */
    var InsertTextMode;
    (function (InsertTextMode) {
        /**
         * The insertion or replace strings is taken as it is. If the
         * value is multi line the lines below the cursor will be
         * inserted using the indentation defined in the string value.
         * The client will not apply any kind of adjustments to the
         * string.
         */
        InsertTextMode.asIs = 1;
        /**
         * The editor adjusts leading whitespace of new lines so that
         * they match the indentation up to the cursor of the line for
         * which the item is accepted.
         *
         * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
         * multi line completion item is indented using 2 tabs and all
         * following lines inserted will be indented using 2 tabs as well.
         */
        InsertTextMode.adjustIndentation = 2;
    })(InsertTextMode || (exports.InsertTextMode = InsertTextMode = {}));
    var CompletionItemLabelDetails;
    (function (CompletionItemLabelDetails) {
        function is(value) {
            var candidate = value;
            return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&
                (Is.string(candidate.description) || candidate.description === undefined);
        }
        CompletionItemLabelDetails.is = is;
    })(CompletionItemLabelDetails || (exports.CompletionItemLabelDetails = CompletionItemLabelDetails = {}));
    /**
     * The CompletionItem namespace provides functions to deal with
     * completion items.
     */
    var CompletionItem;
    (function (CompletionItem) {
        /**
         * Create a completion item and seed it with a label.
         * @param label The completion item's label
         */
        function create(label) {
            return { label: label };
        }
        CompletionItem.create = create;
    })(CompletionItem || (exports.CompletionItem = CompletionItem = {}));
    /**
     * The CompletionList namespace provides functions to deal with
     * completion lists.
     */
    var CompletionList;
    (function (CompletionList) {
        /**
         * Creates a new completion list.
         *
         * @param items The completion items.
         * @param isIncomplete The list is not complete.
         */
        function create(items, isIncomplete) {
            return { items: items ? items : [], isIncomplete: !!isIncomplete };
        }
        CompletionList.create = create;
    })(CompletionList || (exports.CompletionList = CompletionList = {}));
    var MarkedString;
    (function (MarkedString) {
        /**
         * Creates a marked string from plain text.
         *
         * @param plainText The plain text.
         */
        function fromPlainText(plainText) {
            return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
        }
        MarkedString.fromPlainText = fromPlainText;
        /**
         * Checks whether the given value conforms to the {@link MarkedString} type.
         */
        function is(value) {
            var candidate = value;
            return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));
        }
        MarkedString.is = is;
    })(MarkedString || (exports.MarkedString = MarkedString = {}));
    var Hover;
    (function (Hover) {
        /**
         * Checks whether the given value conforms to the {@link Hover} interface.
         */
        function is(value) {
            var candidate = value;
            return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||
                MarkedString.is(candidate.contents) ||
                Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));
        }
        Hover.is = is;
    })(Hover || (exports.Hover = Hover = {}));
    /**
     * The ParameterInformation namespace provides helper functions to work with
     * {@link ParameterInformation} literals.
     */
    var ParameterInformation;
    (function (ParameterInformation) {
        /**
         * Creates a new parameter information literal.
         *
         * @param label A label string.
         * @param documentation A doc string.
         */
        function create(label, documentation) {
            return documentation ? { label: label, documentation: documentation } : { label: label };
        }
        ParameterInformation.create = create;
    })(ParameterInformation || (exports.ParameterInformation = ParameterInformation = {}));
    /**
     * The SignatureInformation namespace provides helper functions to work with
     * {@link SignatureInformation} literals.
     */
    var SignatureInformation;
    (function (SignatureInformation) {
        function create(label, documentation) {
            var parameters = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                parameters[_i - 2] = arguments[_i];
            }
            var result = { label: label };
            if (Is.defined(documentation)) {
                result.documentation = documentation;
            }
            if (Is.defined(parameters)) {
                result.parameters = parameters;
            }
            else {
                result.parameters = [];
            }
            return result;
        }
        SignatureInformation.create = create;
    })(SignatureInformation || (exports.SignatureInformation = SignatureInformation = {}));
    /**
     * A document highlight kind.
     */
    var DocumentHighlightKind;
    (function (DocumentHighlightKind) {
        /**
         * A textual occurrence.
         */
        DocumentHighlightKind.Text = 1;
        /**
         * Read-access of a symbol, like reading a variable.
         */
        DocumentHighlightKind.Read = 2;
        /**
         * Write-access of a symbol, like writing to a variable.
         */
        DocumentHighlightKind.Write = 3;
    })(DocumentHighlightKind || (exports.DocumentHighlightKind = DocumentHighlightKind = {}));
    /**
     * DocumentHighlight namespace to provide helper functions to work with
     * {@link DocumentHighlight} literals.
     */
    var DocumentHighlight;
    (function (DocumentHighlight) {
        /**
         * Create a DocumentHighlight object.
         * @param range The range the highlight applies to.
         * @param kind The highlight kind
         */
        function create(range, kind) {
            var result = { range: range };
            if (Is.number(kind)) {
                result.kind = kind;
            }
            return result;
        }
        DocumentHighlight.create = create;
    })(DocumentHighlight || (exports.DocumentHighlight = DocumentHighlight = {}));
    /**
     * A symbol kind.
     */
    var SymbolKind;
    (function (SymbolKind) {
        SymbolKind.File = 1;
        SymbolKind.Module = 2;
        SymbolKind.Namespace = 3;
        SymbolKind.Package = 4;
        SymbolKind.Class = 5;
        SymbolKind.Method = 6;
        SymbolKind.Property = 7;
        SymbolKind.Field = 8;
        SymbolKind.Constructor = 9;
        SymbolKind.Enum = 10;
        SymbolKind.Interface = 11;
        SymbolKind.Function = 12;
        SymbolKind.Variable = 13;
        SymbolKind.Constant = 14;
        SymbolKind.String = 15;
        SymbolKind.Number = 16;
        SymbolKind.Boolean = 17;
        SymbolKind.Array = 18;
        SymbolKind.Object = 19;
        SymbolKind.Key = 20;
        SymbolKind.Null = 21;
        SymbolKind.EnumMember = 22;
        SymbolKind.Struct = 23;
        SymbolKind.Event = 24;
        SymbolKind.Operator = 25;
        SymbolKind.TypeParameter = 26;
    })(SymbolKind || (exports.SymbolKind = SymbolKind = {}));
    /**
     * Symbol tags are extra annotations that tweak the rendering of a symbol.
     *
     * @since 3.16
     */
    var SymbolTag;
    (function (SymbolTag) {
        /**
         * Render a symbol as obsolete, usually using a strike-out.
         */
        SymbolTag.Deprecated = 1;
    })(SymbolTag || (exports.SymbolTag = SymbolTag = {}));
    var SymbolInformation;
    (function (SymbolInformation) {
        /**
         * Creates a new symbol information literal.
         *
         * @param name The name of the symbol.
         * @param kind The kind of the symbol.
         * @param range The range of the location of the symbol.
         * @param uri The resource of the location of symbol.
         * @param containerName The name of the symbol containing the symbol.
         */
        function create(name, kind, range, uri, containerName) {
            var result = {
                name: name,
                kind: kind,
                location: { uri: uri, range: range }
            };
            if (containerName) {
                result.containerName = containerName;
            }
            return result;
        }
        SymbolInformation.create = create;
    })(SymbolInformation || (exports.SymbolInformation = SymbolInformation = {}));
    var WorkspaceSymbol;
    (function (WorkspaceSymbol) {
        /**
         * Create a new workspace symbol.
         *
         * @param name The name of the symbol.
         * @param kind The kind of the symbol.
         * @param uri The resource of the location of the symbol.
         * @param range An options range of the location.
         * @returns A WorkspaceSymbol.
         */
        function create(name, kind, uri, range) {
            return range !== undefined
                ? { name: name, kind: kind, location: { uri: uri, range: range } }
                : { name: name, kind: kind, location: { uri: uri } };
        }
        WorkspaceSymbol.create = create;
    })(WorkspaceSymbol || (exports.WorkspaceSymbol = WorkspaceSymbol = {}));
    var DocumentSymbol;
    (function (DocumentSymbol) {
        /**
         * Creates a new symbol information literal.
         *
         * @param name The name of the symbol.
         * @param detail The detail of the symbol.
         * @param kind The kind of the symbol.
         * @param range The range of the symbol.
         * @param selectionRange The selectionRange of the symbol.
         * @param children Children of the symbol.
         */
        function create(name, detail, kind, range, selectionRange, children) {
            var result = {
                name: name,
                detail: detail,
                kind: kind,
                range: range,
                selectionRange: selectionRange
            };
            if (children !== undefined) {
                result.children = children;
            }
            return result;
        }
        DocumentSymbol.create = create;
        /**
         * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.
         */
        function is(value) {
            var candidate = value;
            return candidate &&
                Is.string(candidate.name) && Is.number(candidate.kind) &&
                Range.is(candidate.range) && Range.is(candidate.selectionRange) &&
                (candidate.detail === undefined || Is.string(candidate.detail)) &&
                (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&
                (candidate.children === undefined || Array.isArray(candidate.children)) &&
                (candidate.tags === undefined || Array.isArray(candidate.tags));
        }
        DocumentSymbol.is = is;
    })(DocumentSymbol || (exports.DocumentSymbol = DocumentSymbol = {}));
    /**
     * A set of predefined code action kinds
     */
    var CodeActionKind;
    (function (CodeActionKind) {
        /**
         * Empty kind.
         */
        CodeActionKind.Empty = '';
        /**
         * Base kind for quickfix actions: 'quickfix'
         */
        CodeActionKind.QuickFix = 'quickfix';
        /**
         * Base kind for refactoring actions: 'refactor'
         */
        CodeActionKind.Refactor = 'refactor';
        /**
         * Base kind for refactoring extraction actions: 'refactor.extract'
         *
         * Example extract actions:
         *
         * - Extract method
         * - Extract function
         * - Extract variable
         * - Extract interface from class
         * - ...
         */
        CodeActionKind.RefactorExtract = 'refactor.extract';
        /**
         * Base kind for refactoring inline actions: 'refactor.inline'
         *
         * Example inline actions:
         *
         * - Inline function
         * - Inline variable
         * - Inline constant
         * - ...
         */
        CodeActionKind.RefactorInline = 'refactor.inline';
        /**
         * Base kind for refactoring rewrite actions: 'refactor.rewrite'
         *
         * Example rewrite actions:
         *
         * - Convert JavaScript function to class
         * - Add or remove parameter
         * - Encapsulate field
         * - Make method static
         * - Move method to base class
         * - ...
         */
        CodeActionKind.RefactorRewrite = 'refactor.rewrite';
        /**
         * Base kind for source actions: `source`
         *
         * Source code actions apply to the entire file.
         */
        CodeActionKind.Source = 'source';
        /**
         * Base kind for an organize imports source action: `source.organizeImports`
         */
        CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
        /**
         * Base kind for auto-fix source actions: `source.fixAll`.
         *
         * Fix all actions automatically fix errors that have a clear fix that do not require user input.
         * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
         *
         * @since 3.15.0
         */
        CodeActionKind.SourceFixAll = 'source.fixAll';
    })(CodeActionKind || (exports.CodeActionKind = CodeActionKind = {}));
    /**
     * The reason why code actions were requested.
     *
     * @since 3.17.0
     */
    var CodeActionTriggerKind;
    (function (CodeActionTriggerKind) {
        /**
         * Code actions were explicitly requested by the user or by an extension.
         */
        CodeActionTriggerKind.Invoked = 1;
        /**
         * Code actions were requested automatically.
         *
         * This typically happens when current selection in a file changes, but can
         * also be triggered when file content changes.
         */
        CodeActionTriggerKind.Automatic = 2;
    })(CodeActionTriggerKind || (exports.CodeActionTriggerKind = CodeActionTriggerKind = {}));
    /**
     * The CodeActionContext namespace provides helper functions to work with
     * {@link CodeActionContext} literals.
     */
    var CodeActionContext;
    (function (CodeActionContext) {
        /**
         * Creates a new CodeActionContext literal.
         */
        function create(diagnostics, only, triggerKind) {
            var result = { diagnostics: diagnostics };
            if (only !== undefined && only !== null) {
                result.only = only;
            }
            if (triggerKind !== undefined && triggerKind !== null) {
                result.triggerKind = triggerKind;
            }
            return result;
        }
        CodeActionContext.create = create;
        /**
         * Checks whether the given literal conforms to the {@link CodeActionContext} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)
                && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))
                && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
        }
        CodeActionContext.is = is;
    })(CodeActionContext || (exports.CodeActionContext = CodeActionContext = {}));
    var CodeAction;
    (function (CodeAction) {
        function create(title, kindOrCommandOrEdit, kind) {
            var result = { title: title };
            var checkKind = true;
            if (typeof kindOrCommandOrEdit === 'string') {
                checkKind = false;
                result.kind = kindOrCommandOrEdit;
            }
            else if (Command.is(kindOrCommandOrEdit)) {
                result.command = kindOrCommandOrEdit;
            }
            else {
                result.edit = kindOrCommandOrEdit;
            }
            if (checkKind && kind !== undefined) {
                result.kind = kind;
            }
            return result;
        }
        CodeAction.create = create;
        function is(value) {
            var candidate = value;
            return candidate && Is.string(candidate.title) &&
                (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&
                (candidate.kind === undefined || Is.string(candidate.kind)) &&
                (candidate.edit !== undefined || candidate.command !== undefined) &&
                (candidate.command === undefined || Command.is(candidate.command)) &&
                (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&
                (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
        }
        CodeAction.is = is;
    })(CodeAction || (exports.CodeAction = CodeAction = {}));
    /**
     * The CodeLens namespace provides helper functions to work with
     * {@link CodeLens} literals.
     */
    var CodeLens;
    (function (CodeLens) {
        /**
         * Creates a new CodeLens literal.
         */
        function create(range, data) {
            var result = { range: range };
            if (Is.defined(data)) {
                result.data = data;
            }
            return result;
        }
        CodeLens.create = create;
        /**
         * Checks whether the given literal conforms to the {@link CodeLens} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
        }
        CodeLens.is = is;
    })(CodeLens || (exports.CodeLens = CodeLens = {}));
    /**
     * The FormattingOptions namespace provides helper functions to work with
     * {@link FormattingOptions} literals.
     */
    var FormattingOptions;
    (function (FormattingOptions) {
        /**
         * Creates a new FormattingOptions literal.
         */
        function create(tabSize, insertSpaces) {
            return { tabSize: tabSize, insertSpaces: insertSpaces };
        }
        FormattingOptions.create = create;
        /**
         * Checks whether the given literal conforms to the {@link FormattingOptions} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
        }
        FormattingOptions.is = is;
    })(FormattingOptions || (exports.FormattingOptions = FormattingOptions = {}));
    /**
     * The DocumentLink namespace provides helper functions to work with
     * {@link DocumentLink} literals.
     */
    var DocumentLink;
    (function (DocumentLink) {
        /**
         * Creates a new DocumentLink literal.
         */
        function create(range, target, data) {
            return { range: range, target: target, data: data };
        }
        DocumentLink.create = create;
        /**
         * Checks whether the given literal conforms to the {@link DocumentLink} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
        }
        DocumentLink.is = is;
    })(DocumentLink || (exports.DocumentLink = DocumentLink = {}));
    /**
     * The SelectionRange namespace provides helper function to work with
     * SelectionRange literals.
     */
    var SelectionRange;
    (function (SelectionRange) {
        /**
         * Creates a new SelectionRange
         * @param range the range.
         * @param parent an optional parent.
         */
        function create(range, parent) {
            return { range: range, parent: parent };
        }
        SelectionRange.create = create;
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
        }
        SelectionRange.is = is;
    })(SelectionRange || (exports.SelectionRange = SelectionRange = {}));
    /**
     * A set of predefined token types. This set is not fixed
     * an clients can specify additional token types via the
     * corresponding client capabilities.
     *
     * @since 3.16.0
     */
    var SemanticTokenTypes;
    (function (SemanticTokenTypes) {
        SemanticTokenTypes["namespace"] = "namespace";
        /**
         * Represents a generic type. Acts as a fallback for types which can't be mapped to
         * a specific type like class or enum.
         */
        SemanticTokenTypes["type"] = "type";
        SemanticTokenTypes["class"] = "class";
        SemanticTokenTypes["enum"] = "enum";
        SemanticTokenTypes["interface"] = "interface";
        SemanticTokenTypes["struct"] = "struct";
        SemanticTokenTypes["typeParameter"] = "typeParameter";
        SemanticTokenTypes["parameter"] = "parameter";
        SemanticTokenTypes["variable"] = "variable";
        SemanticTokenTypes["property"] = "property";
        SemanticTokenTypes["enumMember"] = "enumMember";
        SemanticTokenTypes["event"] = "event";
        SemanticTokenTypes["function"] = "function";
        SemanticTokenTypes["method"] = "method";
        SemanticTokenTypes["macro"] = "macro";
        SemanticTokenTypes["keyword"] = "keyword";
        SemanticTokenTypes["modifier"] = "modifier";
        SemanticTokenTypes["comment"] = "comment";
        SemanticTokenTypes["string"] = "string";
        SemanticTokenTypes["number"] = "number";
        SemanticTokenTypes["regexp"] = "regexp";
        SemanticTokenTypes["operator"] = "operator";
        /**
         * @since 3.17.0
         */
        SemanticTokenTypes["decorator"] = "decorator";
    })(SemanticTokenTypes || (exports.SemanticTokenTypes = SemanticTokenTypes = {}));
    /**
     * A set of predefined token modifiers. This set is not fixed
     * an clients can specify additional token types via the
     * corresponding client capabilities.
     *
     * @since 3.16.0
     */
    var SemanticTokenModifiers;
    (function (SemanticTokenModifiers) {
        SemanticTokenModifiers["declaration"] = "declaration";
        SemanticTokenModifiers["definition"] = "definition";
        SemanticTokenModifiers["readonly"] = "readonly";
        SemanticTokenModifiers["static"] = "static";
        SemanticTokenModifiers["deprecated"] = "deprecated";
        SemanticTokenModifiers["abstract"] = "abstract";
        SemanticTokenModifiers["async"] = "async";
        SemanticTokenModifiers["modification"] = "modification";
        SemanticTokenModifiers["documentation"] = "documentation";
        SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
    })(SemanticTokenModifiers || (exports.SemanticTokenModifiers = SemanticTokenModifiers = {}));
    /**
     * @since 3.16.0
     */
    var SemanticTokens;
    (function (SemanticTokens) {
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&
                Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
        }
        SemanticTokens.is = is;
    })(SemanticTokens || (exports.SemanticTokens = SemanticTokens = {}));
    /**
     * The InlineValueText namespace provides functions to deal with InlineValueTexts.
     *
     * @since 3.17.0
     */
    var InlineValueText;
    (function (InlineValueText) {
        /**
         * Creates a new InlineValueText literal.
         */
        function create(range, text) {
            return { range: range, text: text };
        }
        InlineValueText.create = create;
        function is(value) {
            var candidate = value;
            return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
        }
        InlineValueText.is = is;
    })(InlineValueText || (exports.InlineValueText = InlineValueText = {}));
    /**
     * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
     *
     * @since 3.17.0
     */
    var InlineValueVariableLookup;
    (function (InlineValueVariableLookup) {
        /**
         * Creates a new InlineValueText literal.
         */
        function create(range, variableName, caseSensitiveLookup) {
            return { range: range, variableName: variableName, caseSensitiveLookup: caseSensitiveLookup };
        }
        InlineValueVariableLookup.create = create;
        function is(value) {
            var candidate = value;
            return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)
                && (Is.string(candidate.variableName) || candidate.variableName === undefined);
        }
        InlineValueVariableLookup.is = is;
    })(InlineValueVariableLookup || (exports.InlineValueVariableLookup = InlineValueVariableLookup = {}));
    /**
     * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
     *
     * @since 3.17.0
     */
    var InlineValueEvaluatableExpression;
    (function (InlineValueEvaluatableExpression) {
        /**
         * Creates a new InlineValueEvaluatableExpression literal.
         */
        function create(range, expression) {
            return { range: range, expression: expression };
        }
        InlineValueEvaluatableExpression.create = create;
        function is(value) {
            var candidate = value;
            return candidate !== undefined && candidate !== null && Range.is(candidate.range)
                && (Is.string(candidate.expression) || candidate.expression === undefined);
        }
        InlineValueEvaluatableExpression.is = is;
    })(InlineValueEvaluatableExpression || (exports.InlineValueEvaluatableExpression = InlineValueEvaluatableExpression = {}));
    /**
     * The InlineValueContext namespace provides helper functions to work with
     * {@link InlineValueContext} literals.
     *
     * @since 3.17.0
     */
    var InlineValueContext;
    (function (InlineValueContext) {
        /**
         * Creates a new InlineValueContext literal.
         */
        function create(frameId, stoppedLocation) {
            return { frameId: frameId, stoppedLocation: stoppedLocation };
        }
        InlineValueContext.create = create;
        /**
         * Checks whether the given literal conforms to the {@link InlineValueContext} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Range.is(value.stoppedLocation);
        }
        InlineValueContext.is = is;
    })(InlineValueContext || (exports.InlineValueContext = InlineValueContext = {}));
    /**
     * Inlay hint kinds.
     *
     * @since 3.17.0
     */
    var InlayHintKind;
    (function (InlayHintKind) {
        /**
         * An inlay hint that for a type annotation.
         */
        InlayHintKind.Type = 1;
        /**
         * An inlay hint that is for a parameter.
         */
        InlayHintKind.Parameter = 2;
        function is(value) {
            return value === 1 || value === 2;
        }
        InlayHintKind.is = is;
    })(InlayHintKind || (exports.InlayHintKind = InlayHintKind = {}));
    var InlayHintLabelPart;
    (function (InlayHintLabelPart) {
        function create(value) {
            return { value: value };
        }
        InlayHintLabelPart.create = create;
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate)
                && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
                && (candidate.location === undefined || Location.is(candidate.location))
                && (candidate.command === undefined || Command.is(candidate.command));
        }
        InlayHintLabelPart.is = is;
    })(InlayHintLabelPart || (exports.InlayHintLabelPart = InlayHintLabelPart = {}));
    var InlayHint;
    (function (InlayHint) {
        function create(position, label, kind) {
            var result = { position: position, label: label };
            if (kind !== undefined) {
                result.kind = kind;
            }
            return result;
        }
        InlayHint.create = create;
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && Position.is(candidate.position)
                && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))
                && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))
                && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)
                && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
                && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))
                && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
        }
        InlayHint.is = is;
    })(InlayHint || (exports.InlayHint = InlayHint = {}));
    var StringValue;
    (function (StringValue) {
        function createSnippet(value) {
            return { kind: 'snippet', value: value };
        }
        StringValue.createSnippet = createSnippet;
    })(StringValue || (exports.StringValue = StringValue = {}));
    var InlineCompletionItem;
    (function (InlineCompletionItem) {
        function create(insertText, filterText, range, command) {
            return { insertText: insertText, filterText: filterText, range: range, command: command };
        }
        InlineCompletionItem.create = create;
    })(InlineCompletionItem || (exports.InlineCompletionItem = InlineCompletionItem = {}));
    var InlineCompletionList;
    (function (InlineCompletionList) {
        function create(items) {
            return { items: items };
        }
        InlineCompletionList.create = create;
    })(InlineCompletionList || (exports.InlineCompletionList = InlineCompletionList = {}));
    /**
     * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.
     *
     * @since 3.18.0
     * @proposed
     */
    var InlineCompletionTriggerKind;
    (function (InlineCompletionTriggerKind) {
        /**
         * Completion was triggered explicitly by a user gesture.
         */
        InlineCompletionTriggerKind.Invoked = 0;
        /**
         * Completion was triggered automatically while editing.
         */
        InlineCompletionTriggerKind.Automatic = 1;
    })(InlineCompletionTriggerKind || (exports.InlineCompletionTriggerKind = InlineCompletionTriggerKind = {}));
    var SelectedCompletionInfo;
    (function (SelectedCompletionInfo) {
        function create(range, text) {
            return { range: range, text: text };
        }
        SelectedCompletionInfo.create = create;
    })(SelectedCompletionInfo || (exports.SelectedCompletionInfo = SelectedCompletionInfo = {}));
    var InlineCompletionContext;
    (function (InlineCompletionContext) {
        function create(triggerKind, selectedCompletionInfo) {
            return { triggerKind: triggerKind, selectedCompletionInfo: selectedCompletionInfo };
        }
        InlineCompletionContext.create = create;
    })(InlineCompletionContext || (exports.InlineCompletionContext = InlineCompletionContext = {}));
    var WorkspaceFolder;
    (function (WorkspaceFolder) {
        function is(value) {
            var candidate = value;
            return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);
        }
        WorkspaceFolder.is = is;
    })(WorkspaceFolder || (exports.WorkspaceFolder = WorkspaceFolder = {}));
    exports.EOL = ['\n', '\r\n', '\r'];
    /**
     * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
     */
    var TextDocument;
    (function (TextDocument) {
        /**
         * Creates a new ITextDocument literal from the given uri and content.
         * @param uri The document's uri.
         * @param languageId The document's language Id.
         * @param version The document's version.
         * @param content The document's content.
         */
        function create(uri, languageId, version, content) {
            return new FullTextDocument(uri, languageId, version, content);
        }
        TextDocument.create = create;
        /**
         * Checks whether the given literal conforms to the {@link ITextDocument} interface.
         */
        function is(value) {
            var candidate = value;
            return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)
                && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
        }
        TextDocument.is = is;
        function applyEdits(document, edits) {
            var text = document.getText();
            var sortedEdits = mergeSort(edits, function (a, b) {
                var diff = a.range.start.line - b.range.start.line;
                if (diff === 0) {
                    return a.range.start.character - b.range.start.character;
                }
                return diff;
            });
            var lastModifiedOffset = text.length;
            for (var i = sortedEdits.length - 1; i >= 0; i--) {
                var e = sortedEdits[i];
                var startOffset = document.offsetAt(e.range.start);
                var endOffset = document.offsetAt(e.range.end);
                if (endOffset <= lastModifiedOffset) {
                    text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
                }
                else {
                    throw new Error('Overlapping edit');
                }
                lastModifiedOffset = startOffset;
            }
            return text;
        }
        TextDocument.applyEdits = applyEdits;
        function mergeSort(data, compare) {
            if (data.length <= 1) {
                // sorted
                return data;
            }
            var p = (data.length / 2) | 0;
            var left = data.slice(0, p);
            var right = data.slice(p);
            mergeSort(left, compare);
            mergeSort(right, compare);
            var leftIdx = 0;
            var rightIdx = 0;
            var i = 0;
            while (leftIdx < left.length && rightIdx < right.length) {
                var ret = compare(left[leftIdx], right[rightIdx]);
                if (ret <= 0) {
                    // smaller_equal -> take left to preserve order
                    data[i++] = left[leftIdx++];
                }
                else {
                    // greater -> take right
                    data[i++] = right[rightIdx++];
                }
            }
            while (leftIdx < left.length) {
                data[i++] = left[leftIdx++];
            }
            while (rightIdx < right.length) {
                data[i++] = right[rightIdx++];
            }
            return data;
        }
    })(TextDocument || (exports.TextDocument = TextDocument = {}));
    /**
     * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
     */
    var FullTextDocument = /** @class */ (function () {
        function FullTextDocument(uri, languageId, version, content) {
            this._uri = uri;
            this._languageId = languageId;
            this._version = version;
            this._content = content;
            this._lineOffsets = undefined;
        }
        Object.defineProperty(FullTextDocument.prototype, "uri", {
            get: function () {
                return this._uri;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FullTextDocument.prototype, "languageId", {
            get: function () {
                return this._languageId;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(FullTextDocument.prototype, "version", {
            get: function () {
                return this._version;
            },
            enumerable: false,
            configurable: true
        });
        FullTextDocument.prototype.getText = function (range) {
            if (range) {
                var start = this.offsetAt(range.start);
                var end = this.offsetAt(range.end);
                return this._content.substring(start, end);
            }
            return this._content;
        };
        FullTextDocument.prototype.update = function (event, version) {
            this._content = event.text;
            this._version = version;
            this._lineOffsets = undefined;
        };
        FullTextDocument.prototype.getLineOffsets = function () {
            if (this._lineOffsets === undefined) {
                var lineOffsets = [];
                var text = this._content;
                var isLineStart = true;
                for (var i = 0; i < text.length; i++) {
                    if (isLineStart) {
                        lineOffsets.push(i);
                        isLineStart = false;
                    }
                    var ch = text.charAt(i);
                    isLineStart = (ch === '\r' || ch === '\n');
                    if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                        i++;
                    }
                }
                if (isLineStart && text.length > 0) {
                    lineOffsets.push(text.length);
                }
                this._lineOffsets = lineOffsets;
            }
            return this._lineOffsets;
        };
        FullTextDocument.prototype.positionAt = function (offset) {
            offset = Math.max(Math.min(offset, this._content.length), 0);
            var lineOffsets = this.getLineOffsets();
            var low = 0, high = lineOffsets.length;
            if (high === 0) {
                return Position.create(0, offset);
            }
            while (low < high) {
                var mid = Math.floor((low + high) / 2);
                if (lineOffsets[mid] > offset) {
                    high = mid;
                }
                else {
                    low = mid + 1;
                }
            }
            // low is the least x for which the line offset is larger than the current offset
            // or array.length if no line offset is larger than the current offset
            var line = low - 1;
            return Position.create(line, offset - lineOffsets[line]);
        };
        FullTextDocument.prototype.offsetAt = function (position) {
            var lineOffsets = this.getLineOffsets();
            if (position.line >= lineOffsets.length) {
                return this._content.length;
            }
            else if (position.line < 0) {
                return 0;
            }
            var lineOffset = lineOffsets[position.line];
            var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
            return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
        };
        Object.defineProperty(FullTextDocument.prototype, "lineCount", {
            get: function () {
                return this.getLineOffsets().length;
            },
            enumerable: false,
            configurable: true
        });
        return FullTextDocument;
    }());
    var Is;
    (function (Is) {
        var toString = Object.prototype.toString;
        function defined(value) {
            return typeof value !== 'undefined';
        }
        Is.defined = defined;
        function undefined(value) {
            return typeof value === 'undefined';
        }
        Is.undefined = undefined;
        function boolean(value) {
            return value === true || value === false;
        }
        Is.boolean = boolean;
        function string(value) {
            return toString.call(value) === '[object String]';
        }
        Is.string = string;
        function number(value) {
            return toString.call(value) === '[object Number]';
        }
        Is.number = number;
        function numberRange(value, min, max) {
            return toString.call(value) === '[object Number]' && min <= value && value <= max;
        }
        Is.numberRange = numberRange;
        function integer(value) {
            return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
        }
        Is.integer = integer;
        function uinteger(value) {
            return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
        }
        Is.uinteger = uinteger;
        function func(value) {
            return toString.call(value) === '[object Function]';
        }
        Is.func = func;
        function objectLiteral(value) {
            // Strictly speaking class instances pass this check as well. Since the LSP
            // doesn't use classes we ignore this for now. If we do we need to add something
            // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
            return value !== null && typeof value === 'object';
        }
        Is.objectLiteral = objectLiteral;
        function typedArray(value, check) {
            return Array.isArray(value) && value.every(check);
        }
        Is.typedArray = typedArray;
    })(Is || (Is = {}));
});


/***/ }),

/***/ "../../node_modules/vscode-languageserver-types/lib/umd sync recursive":
/*!********************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-types/lib/umd/ sync ***!
  \********************************************************************/
/***/ ((module) => {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = () => ([]);
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "../../node_modules/vscode-languageserver-types/lib/umd sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/api.js":
/*!******************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/api.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ProposedFeatures = exports.NotebookDocuments = exports.TextDocuments = exports.SemanticTokensBuilder = void 0;
const semanticTokens_1 = __webpack_require__(/*! ./semanticTokens */ "../../node_modules/vscode-languageserver/lib/common/semanticTokens.js");
Object.defineProperty(exports, "SemanticTokensBuilder", ({ enumerable: true, get: function () { return semanticTokens_1.SemanticTokensBuilder; } }));
const ic = __webpack_require__(/*! ./inlineCompletion.proposed */ "../../node_modules/vscode-languageserver/lib/common/inlineCompletion.proposed.js");
__exportStar(__webpack_require__(/*! vscode-languageserver-protocol/ */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js"), exports);
const textDocuments_1 = __webpack_require__(/*! ./textDocuments */ "../../node_modules/vscode-languageserver/lib/common/textDocuments.js");
Object.defineProperty(exports, "TextDocuments", ({ enumerable: true, get: function () { return textDocuments_1.TextDocuments; } }));
const notebook_1 = __webpack_require__(/*! ./notebook */ "../../node_modules/vscode-languageserver/lib/common/notebook.js");
Object.defineProperty(exports, "NotebookDocuments", ({ enumerable: true, get: function () { return notebook_1.NotebookDocuments; } }));
__exportStar(__webpack_require__(/*! ./server */ "../../node_modules/vscode-languageserver/lib/common/server.js"), exports);
var ProposedFeatures;
(function (ProposedFeatures) {
    ProposedFeatures.all = {
        __brand: 'features',
        languages: ic.InlineCompletionFeature
    };
})(ProposedFeatures || (exports.ProposedFeatures = ProposedFeatures = {}));


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/callHierarchy.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/callHierarchy.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.CallHierarchyFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const CallHierarchyFeature = (Base) => {
    return class extends Base {
        get callHierarchy() {
            return {
                onPrepare: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.CallHierarchyPrepareRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);
                    });
                },
                onIncomingCalls: (handler) => {
                    const type = vscode_languageserver_protocol_1.CallHierarchyIncomingCallsRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onOutgoingCalls: (handler) => {
                    const type = vscode_languageserver_protocol_1.CallHierarchyOutgoingCallsRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                }
            };
        }
    };
};
exports.CallHierarchyFeature = CallHierarchyFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/configuration.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/configuration.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ConfigurationFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "../../node_modules/vscode-languageserver/lib/common/utils/is.js");
const ConfigurationFeature = (Base) => {
    return class extends Base {
        getConfiguration(arg) {
            if (!arg) {
                return this._getConfiguration({});
            }
            else if (Is.string(arg)) {
                return this._getConfiguration({ section: arg });
            }
            else {
                return this._getConfiguration(arg);
            }
        }
        _getConfiguration(arg) {
            let params = {
                items: Array.isArray(arg) ? arg : [arg]
            };
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ConfigurationRequest.type, params).then((result) => {
                if (Array.isArray(result)) {
                    return Array.isArray(arg) ? result : result[0];
                }
                else {
                    return Array.isArray(arg) ? [] : null;
                }
            });
        }
    };
};
exports.ConfigurationFeature = ConfigurationFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/diagnostic.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/diagnostic.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.DiagnosticFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const DiagnosticFeature = (Base) => {
    return class extends Base {
        get diagnostics() {
            return {
                refresh: () => {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.DiagnosticRefreshRequest.type);
                },
                on: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.DocumentDiagnosticRequest.partialResult, params));
                    });
                },
                onWorkspace: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(vscode_languageserver_protocol_1.WorkspaceDiagnosticRequest.partialResult, params));
                    });
                }
            };
        }
    };
};
exports.DiagnosticFeature = DiagnosticFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/fileOperations.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/fileOperations.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FileOperationsFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const FileOperationsFeature = (Base) => {
    return class extends Base {
        onDidCreateFiles(handler) {
            return this.connection.onNotification(vscode_languageserver_protocol_1.DidCreateFilesNotification.type, (params) => {
                handler(params);
            });
        }
        onDidRenameFiles(handler) {
            return this.connection.onNotification(vscode_languageserver_protocol_1.DidRenameFilesNotification.type, (params) => {
                handler(params);
            });
        }
        onDidDeleteFiles(handler) {
            return this.connection.onNotification(vscode_languageserver_protocol_1.DidDeleteFilesNotification.type, (params) => {
                handler(params);
            });
        }
        onWillCreateFiles(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.WillCreateFilesRequest.type, (params, cancel) => {
                return handler(params, cancel);
            });
        }
        onWillRenameFiles(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.WillRenameFilesRequest.type, (params, cancel) => {
                return handler(params, cancel);
            });
        }
        onWillDeleteFiles(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.WillDeleteFilesRequest.type, (params, cancel) => {
                return handler(params, cancel);
            });
        }
    };
};
exports.FileOperationsFeature = FileOperationsFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/foldingRange.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/foldingRange.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.FoldingRangeFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const FoldingRangeFeature = (Base) => {
    return class extends Base {
        get foldingRange() {
            return {
                refresh: () => {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.FoldingRangeRefreshRequest.type);
                },
                on: (handler) => {
                    const type = vscode_languageserver_protocol_1.FoldingRangeRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                }
            };
        }
    };
};
exports.FoldingRangeFeature = FoldingRangeFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/inlayHint.js":
/*!************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/inlayHint.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlayHintFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const InlayHintFeature = (Base) => {
    return class extends Base {
        get inlayHint() {
            return {
                refresh: () => {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.InlayHintRefreshRequest.type);
                },
                on: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params));
                    });
                },
                resolve: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlayHintResolveRequest.type, (params, cancel) => {
                        return handler(params, cancel);
                    });
                }
            };
        }
    };
};
exports.InlayHintFeature = InlayHintFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/inlineCompletion.proposed.js":
/*!****************************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/inlineCompletion.proposed.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineCompletionFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const InlineCompletionFeature = (Base) => {
    return class extends Base {
        get inlineCompletion() {
            return {
                on: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlineCompletionRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params));
                    });
                }
            };
        }
    };
};
exports.InlineCompletionFeature = InlineCompletionFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/inlineValue.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/inlineValue.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.InlineValueFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const InlineValueFeature = (Base) => {
    return class extends Base {
        get inlineValue() {
            return {
                refresh: () => {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.InlineValueRefreshRequest.type);
                },
                on: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.InlineValueRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params));
                    });
                }
            };
        }
    };
};
exports.InlineValueFeature = InlineValueFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/linkedEditingRange.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/linkedEditingRange.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.LinkedEditingRangeFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const LinkedEditingRangeFeature = (Base) => {
    return class extends Base {
        onLinkedEditingRange(handler) {
            return this.connection.onRequest(vscode_languageserver_protocol_1.LinkedEditingRangeRequest.type, (params, cancel) => {
                return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);
            });
        }
    };
};
exports.LinkedEditingRangeFeature = LinkedEditingRangeFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/moniker.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/moniker.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MonikerFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const MonikerFeature = (Base) => {
    return class extends Base {
        get moniker() {
            return {
                on: (handler) => {
                    const type = vscode_languageserver_protocol_1.MonikerRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
            };
        }
    };
};
exports.MonikerFeature = MonikerFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/notebook.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/notebook.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.NotebookDocuments = exports.NotebookSyncFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const textDocuments_1 = __webpack_require__(/*! ./textDocuments */ "../../node_modules/vscode-languageserver/lib/common/textDocuments.js");
const NotebookSyncFeature = (Base) => {
    return class extends Base {
        get synchronization() {
            return {
                onDidOpenNotebookDocument: (handler) => {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidOpenNotebookDocumentNotification.type, (params) => {
                        handler(params);
                    });
                },
                onDidChangeNotebookDocument: (handler) => {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeNotebookDocumentNotification.type, (params) => {
                        handler(params);
                    });
                },
                onDidSaveNotebookDocument: (handler) => {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidSaveNotebookDocumentNotification.type, (params) => {
                        handler(params);
                    });
                },
                onDidCloseNotebookDocument: (handler) => {
                    return this.connection.onNotification(vscode_languageserver_protocol_1.DidCloseNotebookDocumentNotification.type, (params) => {
                        handler(params);
                    });
                }
            };
        }
    };
};
exports.NotebookSyncFeature = NotebookSyncFeature;
class CellTextDocumentConnection {
    onDidOpenTextDocument(handler) {
        this.openHandler = handler;
        return vscode_languageserver_protocol_1.Disposable.create(() => { this.openHandler = undefined; });
    }
    openTextDocument(params) {
        this.openHandler && this.openHandler(params);
    }
    onDidChangeTextDocument(handler) {
        this.changeHandler = handler;
        return vscode_languageserver_protocol_1.Disposable.create(() => { this.changeHandler = handler; });
    }
    changeTextDocument(params) {
        this.changeHandler && this.changeHandler(params);
    }
    onDidCloseTextDocument(handler) {
        this.closeHandler = handler;
        return vscode_languageserver_protocol_1.Disposable.create(() => { this.closeHandler = undefined; });
    }
    closeTextDocument(params) {
        this.closeHandler && this.closeHandler(params);
    }
    onWillSaveTextDocument() {
        return CellTextDocumentConnection.NULL_DISPOSE;
    }
    onWillSaveTextDocumentWaitUntil() {
        return CellTextDocumentConnection.NULL_DISPOSE;
    }
    onDidSaveTextDocument() {
        return CellTextDocumentConnection.NULL_DISPOSE;
    }
}
CellTextDocumentConnection.NULL_DISPOSE = Object.freeze({ dispose: () => { } });
class NotebookDocuments {
    constructor(configurationOrTextDocuments) {
        if (configurationOrTextDocuments instanceof textDocuments_1.TextDocuments) {
            this._cellTextDocuments = configurationOrTextDocuments;
        }
        else {
            this._cellTextDocuments = new textDocuments_1.TextDocuments(configurationOrTextDocuments);
        }
        this.notebookDocuments = new Map();
        this.notebookCellMap = new Map();
        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
        this._onDidChange = new vscode_languageserver_protocol_1.Emitter();
        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
    }
    get cellTextDocuments() {
        return this._cellTextDocuments;
    }
    getCellTextDocument(cell) {
        return this._cellTextDocuments.get(cell.document);
    }
    getNotebookDocument(uri) {
        return this.notebookDocuments.get(uri);
    }
    getNotebookCell(uri) {
        const value = this.notebookCellMap.get(uri);
        return value && value[0];
    }
    findNotebookDocumentForCell(cell) {
        const key = typeof cell === 'string' ? cell : cell.document;
        const value = this.notebookCellMap.get(key);
        return value && value[1];
    }
    get onDidOpen() {
        return this._onDidOpen.event;
    }
    get onDidSave() {
        return this._onDidSave.event;
    }
    get onDidChange() {
        return this._onDidChange.event;
    }
    get onDidClose() {
        return this._onDidClose.event;
    }
    /**
     * Listens for `low level` notification on the given connection to
     * update the notebook documents managed by this instance.
     *
     * Please note that the connection only provides handlers not an event model. Therefore
     * listening on a connection will overwrite the following handlers on a connection:
     * `onDidOpenNotebookDocument`, `onDidChangeNotebookDocument`, `onDidSaveNotebookDocument`,
     *  and `onDidCloseNotebookDocument`.
     *
     * @param connection The connection to listen on.
     */
    listen(connection) {
        const cellTextDocumentConnection = new CellTextDocumentConnection();
        const disposables = [];
        disposables.push(this.cellTextDocuments.listen(cellTextDocumentConnection));
        disposables.push(connection.notebooks.synchronization.onDidOpenNotebookDocument((params) => {
            this.notebookDocuments.set(params.notebookDocument.uri, params.notebookDocument);
            for (const cellTextDocument of params.cellTextDocuments) {
                cellTextDocumentConnection.openTextDocument({ textDocument: cellTextDocument });
            }
            this.updateCellMap(params.notebookDocument);
            this._onDidOpen.fire(params.notebookDocument);
        }));
        disposables.push(connection.notebooks.synchronization.onDidChangeNotebookDocument((params) => {
            const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
            if (notebookDocument === undefined) {
                return;
            }
            notebookDocument.version = params.notebookDocument.version;
            const oldMetadata = notebookDocument.metadata;
            let metadataChanged = false;
            const change = params.change;
            if (change.metadata !== undefined) {
                metadataChanged = true;
                notebookDocument.metadata = change.metadata;
            }
            const opened = [];
            const closed = [];
            const data = [];
            const text = [];
            if (change.cells !== undefined) {
                const changedCells = change.cells;
                if (changedCells.structure !== undefined) {
                    const array = changedCells.structure.array;
                    notebookDocument.cells.splice(array.start, array.deleteCount, ...(array.cells !== undefined ? array.cells : []));
                    // Additional open cell text documents.
                    if (changedCells.structure.didOpen !== undefined) {
                        for (const open of changedCells.structure.didOpen) {
                            cellTextDocumentConnection.openTextDocument({ textDocument: open });
                            opened.push(open.uri);
                        }
                    }
                    // Additional closed cell test documents.
                    if (changedCells.structure.didClose) {
                        for (const close of changedCells.structure.didClose) {
                            cellTextDocumentConnection.closeTextDocument({ textDocument: close });
                            closed.push(close.uri);
                        }
                    }
                }
                if (changedCells.data !== undefined) {
                    const cellUpdates = new Map(changedCells.data.map(cell => [cell.document, cell]));
                    for (let i = 0; i <= notebookDocument.cells.length; i++) {
                        const change = cellUpdates.get(notebookDocument.cells[i].document);
                        if (change !== undefined) {
                            const old = notebookDocument.cells.splice(i, 1, change);
                            data.push({ old: old[0], new: change });
                            cellUpdates.delete(change.document);
                            if (cellUpdates.size === 0) {
                                break;
                            }
                        }
                    }
                }
                if (changedCells.textContent !== undefined) {
                    for (const cellTextDocument of changedCells.textContent) {
                        cellTextDocumentConnection.changeTextDocument({ textDocument: cellTextDocument.document, contentChanges: cellTextDocument.changes });
                        text.push(cellTextDocument.document.uri);
                    }
                }
            }
            // Update internal data structure.
            this.updateCellMap(notebookDocument);
            const changeEvent = { notebookDocument };
            if (metadataChanged) {
                changeEvent.metadata = { old: oldMetadata, new: notebookDocument.metadata };
            }
            const added = [];
            for (const open of opened) {
                added.push(this.getNotebookCell(open));
            }
            const removed = [];
            for (const close of closed) {
                removed.push(this.getNotebookCell(close));
            }
            const textContent = [];
            for (const change of text) {
                textContent.push(this.getNotebookCell(change));
            }
            if (added.length > 0 || removed.length > 0 || data.length > 0 || textContent.length > 0) {
                changeEvent.cells = { added, removed, changed: { data, textContent } };
            }
            if (changeEvent.metadata !== undefined || changeEvent.cells !== undefined) {
                this._onDidChange.fire(changeEvent);
            }
        }));
        disposables.push(connection.notebooks.synchronization.onDidSaveNotebookDocument((params) => {
            const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
            if (notebookDocument === undefined) {
                return;
            }
            this._onDidSave.fire(notebookDocument);
        }));
        disposables.push(connection.notebooks.synchronization.onDidCloseNotebookDocument((params) => {
            const notebookDocument = this.notebookDocuments.get(params.notebookDocument.uri);
            if (notebookDocument === undefined) {
                return;
            }
            this._onDidClose.fire(notebookDocument);
            for (const cellTextDocument of params.cellTextDocuments) {
                cellTextDocumentConnection.closeTextDocument({ textDocument: cellTextDocument });
            }
            this.notebookDocuments.delete(params.notebookDocument.uri);
            for (const cell of notebookDocument.cells) {
                this.notebookCellMap.delete(cell.document);
            }
        }));
        return vscode_languageserver_protocol_1.Disposable.create(() => { disposables.forEach(disposable => disposable.dispose()); });
    }
    updateCellMap(notebookDocument) {
        for (const cell of notebookDocument.cells) {
            this.notebookCellMap.set(cell.document, [cell, notebookDocument]);
        }
    }
}
exports.NotebookDocuments = NotebookDocuments;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/progress.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/progress.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.attachPartialResult = exports.ProgressFeature = exports.attachWorkDone = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const uuid_1 = __webpack_require__(/*! ./utils/uuid */ "../../node_modules/vscode-languageserver/lib/common/utils/uuid.js");
class WorkDoneProgressReporterImpl {
    constructor(_connection, _token) {
        this._connection = _connection;
        this._token = _token;
        WorkDoneProgressReporterImpl.Instances.set(this._token, this);
    }
    begin(title, percentage, message, cancellable) {
        let param = {
            kind: 'begin',
            title,
            percentage,
            message,
            cancellable
        };
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
    }
    report(arg0, arg1) {
        let param = {
            kind: 'report'
        };
        if (typeof arg0 === 'number') {
            param.percentage = arg0;
            if (arg1 !== undefined) {
                param.message = arg1;
            }
        }
        else {
            param.message = arg0;
        }
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, param);
    }
    done() {
        WorkDoneProgressReporterImpl.Instances.delete(this._token);
        this._connection.sendProgress(vscode_languageserver_protocol_1.WorkDoneProgress.type, this._token, { kind: 'end' });
    }
}
WorkDoneProgressReporterImpl.Instances = new Map();
class WorkDoneProgressServerReporterImpl extends WorkDoneProgressReporterImpl {
    constructor(connection, token) {
        super(connection, token);
        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
    }
    get token() {
        return this._source.token;
    }
    done() {
        this._source.dispose();
        super.done();
    }
    cancel() {
        this._source.cancel();
    }
}
class NullProgressReporter {
    constructor() {
    }
    begin() {
    }
    report() {
    }
    done() {
    }
}
class NullProgressServerReporter extends NullProgressReporter {
    constructor() {
        super();
        this._source = new vscode_languageserver_protocol_1.CancellationTokenSource();
    }
    get token() {
        return this._source.token;
    }
    done() {
        this._source.dispose();
    }
    cancel() {
        this._source.cancel();
    }
}
function attachWorkDone(connection, params) {
    if (params === undefined || params.workDoneToken === undefined) {
        return new NullProgressReporter();
    }
    const token = params.workDoneToken;
    delete params.workDoneToken;
    return new WorkDoneProgressReporterImpl(connection, token);
}
exports.attachWorkDone = attachWorkDone;
const ProgressFeature = (Base) => {
    return class extends Base {
        constructor() {
            super();
            this._progressSupported = false;
        }
        initialize(capabilities) {
            super.initialize(capabilities);
            if (capabilities?.window?.workDoneProgress === true) {
                this._progressSupported = true;
                this.connection.onNotification(vscode_languageserver_protocol_1.WorkDoneProgressCancelNotification.type, (params) => {
                    let progress = WorkDoneProgressReporterImpl.Instances.get(params.token);
                    if (progress instanceof WorkDoneProgressServerReporterImpl || progress instanceof NullProgressServerReporter) {
                        progress.cancel();
                    }
                });
            }
        }
        attachWorkDoneProgress(token) {
            if (token === undefined) {
                return new NullProgressReporter();
            }
            else {
                return new WorkDoneProgressReporterImpl(this.connection, token);
            }
        }
        createWorkDoneProgress() {
            if (this._progressSupported) {
                const token = (0, uuid_1.generateUuid)();
                return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkDoneProgressCreateRequest.type, { token }).then(() => {
                    const result = new WorkDoneProgressServerReporterImpl(this.connection, token);
                    return result;
                });
            }
            else {
                return Promise.resolve(new NullProgressServerReporter());
            }
        }
    };
};
exports.ProgressFeature = ProgressFeature;
var ResultProgress;
(function (ResultProgress) {
    ResultProgress.type = new vscode_languageserver_protocol_1.ProgressType();
})(ResultProgress || (ResultProgress = {}));
class ResultProgressReporterImpl {
    constructor(_connection, _token) {
        this._connection = _connection;
        this._token = _token;
    }
    report(data) {
        this._connection.sendProgress(ResultProgress.type, this._token, data);
    }
}
function attachPartialResult(connection, params) {
    if (params === undefined || params.partialResultToken === undefined) {
        return undefined;
    }
    const token = params.partialResultToken;
    delete params.partialResultToken;
    return new ResultProgressReporterImpl(connection, token);
}
exports.attachPartialResult = attachPartialResult;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/semanticTokens.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/semanticTokens.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SemanticTokensBuilder = exports.SemanticTokensDiff = exports.SemanticTokensFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const SemanticTokensFeature = (Base) => {
    return class extends Base {
        get semanticTokens() {
            return {
                refresh: () => {
                    return this.connection.sendRequest(vscode_languageserver_protocol_1.SemanticTokensRefreshRequest.type);
                },
                on: (handler) => {
                    const type = vscode_languageserver_protocol_1.SemanticTokensRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onDelta: (handler) => {
                    const type = vscode_languageserver_protocol_1.SemanticTokensDeltaRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onRange: (handler) => {
                    const type = vscode_languageserver_protocol_1.SemanticTokensRangeRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                }
            };
        }
    };
};
exports.SemanticTokensFeature = SemanticTokensFeature;
class SemanticTokensDiff {
    constructor(originalSequence, modifiedSequence) {
        this.originalSequence = originalSequence;
        this.modifiedSequence = modifiedSequence;
    }
    computeDiff() {
        const originalLength = this.originalSequence.length;
        const modifiedLength = this.modifiedSequence.length;
        let startIndex = 0;
        while (startIndex < modifiedLength && startIndex < originalLength && this.originalSequence[startIndex] === this.modifiedSequence[startIndex]) {
            startIndex++;
        }
        if (startIndex < modifiedLength && startIndex < originalLength) {
            let originalEndIndex = originalLength - 1;
            let modifiedEndIndex = modifiedLength - 1;
            while (originalEndIndex >= startIndex && modifiedEndIndex >= startIndex && this.originalSequence[originalEndIndex] === this.modifiedSequence[modifiedEndIndex]) {
                originalEndIndex--;
                modifiedEndIndex--;
            }
            // if one moved behind the start index move them forward again
            if (originalEndIndex < startIndex || modifiedEndIndex < startIndex) {
                originalEndIndex++;
                modifiedEndIndex++;
            }
            const deleteCount = originalEndIndex - startIndex + 1;
            const newData = this.modifiedSequence.slice(startIndex, modifiedEndIndex + 1);
            // If we moved behind the start index we could have missed a simple delete.
            if (newData.length === 1 && newData[0] === this.originalSequence[originalEndIndex]) {
                return [
                    { start: startIndex, deleteCount: deleteCount - 1 }
                ];
            }
            else {
                return [
                    { start: startIndex, deleteCount, data: newData }
                ];
            }
        }
        else if (startIndex < modifiedLength) {
            return [
                { start: startIndex, deleteCount: 0, data: this.modifiedSequence.slice(startIndex) }
            ];
        }
        else if (startIndex < originalLength) {
            return [
                { start: startIndex, deleteCount: originalLength - startIndex }
            ];
        }
        else {
            // The two arrays are the same.
            return [];
        }
    }
}
exports.SemanticTokensDiff = SemanticTokensDiff;
class SemanticTokensBuilder {
    constructor() {
        this._prevData = undefined;
        this.initialize();
    }
    initialize() {
        this._id = Date.now();
        this._prevLine = 0;
        this._prevChar = 0;
        this._data = [];
        this._dataLen = 0;
    }
    push(line, char, length, tokenType, tokenModifiers) {
        let pushLine = line;
        let pushChar = char;
        if (this._dataLen > 0) {
            pushLine -= this._prevLine;
            if (pushLine === 0) {
                pushChar -= this._prevChar;
            }
        }
        this._data[this._dataLen++] = pushLine;
        this._data[this._dataLen++] = pushChar;
        this._data[this._dataLen++] = length;
        this._data[this._dataLen++] = tokenType;
        this._data[this._dataLen++] = tokenModifiers;
        this._prevLine = line;
        this._prevChar = char;
    }
    get id() {
        return this._id.toString();
    }
    previousResult(id) {
        if (this.id === id) {
            this._prevData = this._data;
        }
        this.initialize();
    }
    build() {
        this._prevData = undefined;
        return {
            resultId: this.id,
            data: this._data
        };
    }
    canBuildEdits() {
        return this._prevData !== undefined;
    }
    buildEdits() {
        if (this._prevData !== undefined) {
            return {
                resultId: this.id,
                edits: (new SemanticTokensDiff(this._prevData, this._data)).computeDiff()
            };
        }
        else {
            return this.build();
        }
    }
}
exports.SemanticTokensBuilder = SemanticTokensBuilder;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/server.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/server.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createConnection = exports.combineFeatures = exports.combineNotebooksFeatures = exports.combineLanguagesFeatures = exports.combineWorkspaceFeatures = exports.combineWindowFeatures = exports.combineClientFeatures = exports.combineTracerFeatures = exports.combineTelemetryFeatures = exports.combineConsoleFeatures = exports._NotebooksImpl = exports._LanguagesImpl = exports.BulkUnregistration = exports.BulkRegistration = exports.ErrorMessageTracker = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const Is = __webpack_require__(/*! ./utils/is */ "../../node_modules/vscode-languageserver/lib/common/utils/is.js");
const UUID = __webpack_require__(/*! ./utils/uuid */ "../../node_modules/vscode-languageserver/lib/common/utils/uuid.js");
const progress_1 = __webpack_require__(/*! ./progress */ "../../node_modules/vscode-languageserver/lib/common/progress.js");
const configuration_1 = __webpack_require__(/*! ./configuration */ "../../node_modules/vscode-languageserver/lib/common/configuration.js");
const workspaceFolder_1 = __webpack_require__(/*! ./workspaceFolder */ "../../node_modules/vscode-languageserver/lib/common/workspaceFolder.js");
const callHierarchy_1 = __webpack_require__(/*! ./callHierarchy */ "../../node_modules/vscode-languageserver/lib/common/callHierarchy.js");
const semanticTokens_1 = __webpack_require__(/*! ./semanticTokens */ "../../node_modules/vscode-languageserver/lib/common/semanticTokens.js");
const showDocument_1 = __webpack_require__(/*! ./showDocument */ "../../node_modules/vscode-languageserver/lib/common/showDocument.js");
const fileOperations_1 = __webpack_require__(/*! ./fileOperations */ "../../node_modules/vscode-languageserver/lib/common/fileOperations.js");
const linkedEditingRange_1 = __webpack_require__(/*! ./linkedEditingRange */ "../../node_modules/vscode-languageserver/lib/common/linkedEditingRange.js");
const typeHierarchy_1 = __webpack_require__(/*! ./typeHierarchy */ "../../node_modules/vscode-languageserver/lib/common/typeHierarchy.js");
const inlineValue_1 = __webpack_require__(/*! ./inlineValue */ "../../node_modules/vscode-languageserver/lib/common/inlineValue.js");
const foldingRange_1 = __webpack_require__(/*! ./foldingRange */ "../../node_modules/vscode-languageserver/lib/common/foldingRange.js");
// import { InlineCompletionFeatureShape, InlineCompletionFeature } from './inlineCompletion.proposed';
const inlayHint_1 = __webpack_require__(/*! ./inlayHint */ "../../node_modules/vscode-languageserver/lib/common/inlayHint.js");
const diagnostic_1 = __webpack_require__(/*! ./diagnostic */ "../../node_modules/vscode-languageserver/lib/common/diagnostic.js");
const notebook_1 = __webpack_require__(/*! ./notebook */ "../../node_modules/vscode-languageserver/lib/common/notebook.js");
const moniker_1 = __webpack_require__(/*! ./moniker */ "../../node_modules/vscode-languageserver/lib/common/moniker.js");
function null2Undefined(value) {
    if (value === null) {
        return undefined;
    }
    return value;
}
/**
 * Helps tracking error message. Equal occurrences of the same
 * message are only stored once. This class is for example
 * useful if text documents are validated in a loop and equal
 * error message should be folded into one.
 */
class ErrorMessageTracker {
    constructor() {
        this._messages = Object.create(null);
    }
    /**
     * Add a message to the tracker.
     *
     * @param message The message to add.
     */
    add(message) {
        let count = this._messages[message];
        if (!count) {
            count = 0;
        }
        count++;
        this._messages[message] = count;
    }
    /**
     * Send all tracked messages to the connection's window.
     *
     * @param connection The connection established between client and server.
     */
    sendErrors(connection) {
        Object.keys(this._messages).forEach(message => {
            connection.window.showErrorMessage(message);
        });
    }
}
exports.ErrorMessageTracker = ErrorMessageTracker;
class RemoteConsoleImpl {
    constructor() {
    }
    rawAttach(connection) {
        this._rawConnection = connection;
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    fillServerCapabilities(_capabilities) {
    }
    initialize(_capabilities) {
    }
    error(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Error, message);
    }
    warn(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Warning, message);
    }
    info(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Info, message);
    }
    log(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Log, message);
    }
    debug(message) {
        this.send(vscode_languageserver_protocol_1.MessageType.Debug, message);
    }
    send(type, message) {
        if (this._rawConnection) {
            this._rawConnection.sendNotification(vscode_languageserver_protocol_1.LogMessageNotification.type, { type, message }).catch(() => {
                (0, vscode_languageserver_protocol_1.RAL)().console.error(`Sending log message failed`);
            });
        }
    }
}
class _RemoteWindowImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    showErrorMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Error, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
    showWarningMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Warning, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
    showInformationMessage(message, ...actions) {
        let params = { type: vscode_languageserver_protocol_1.MessageType.Info, message, actions };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowMessageRequest.type, params).then(null2Undefined);
    }
}
const RemoteWindowImpl = (0, showDocument_1.ShowDocumentFeature)((0, progress_1.ProgressFeature)(_RemoteWindowImpl));
var BulkRegistration;
(function (BulkRegistration) {
    /**
     * Creates a new bulk registration.
     * @return an empty bulk registration.
     */
    function create() {
        return new BulkRegistrationImpl();
    }
    BulkRegistration.create = create;
})(BulkRegistration || (exports.BulkRegistration = BulkRegistration = {}));
class BulkRegistrationImpl {
    constructor() {
        this._registrations = [];
        this._registered = new Set();
    }
    add(type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        if (this._registered.has(method)) {
            throw new Error(`${method} is already added to this registration`);
        }
        const id = UUID.generateUuid();
        this._registrations.push({
            id: id,
            method: method,
            registerOptions: registerOptions || {}
        });
        this._registered.add(method);
    }
    asRegistrationParams() {
        return {
            registrations: this._registrations
        };
    }
}
var BulkUnregistration;
(function (BulkUnregistration) {
    function create() {
        return new BulkUnregistrationImpl(undefined, []);
    }
    BulkUnregistration.create = create;
})(BulkUnregistration || (exports.BulkUnregistration = BulkUnregistration = {}));
class BulkUnregistrationImpl {
    constructor(_connection, unregistrations) {
        this._connection = _connection;
        this._unregistrations = new Map();
        unregistrations.forEach(unregistration => {
            this._unregistrations.set(unregistration.method, unregistration);
        });
    }
    get isAttached() {
        return !!this._connection;
    }
    attach(connection) {
        this._connection = connection;
    }
    add(unregistration) {
        this._unregistrations.set(unregistration.method, unregistration);
    }
    dispose() {
        let unregistrations = [];
        for (let unregistration of this._unregistrations.values()) {
            unregistrations.push(unregistration);
        }
        let params = {
            unregisterations: unregistrations
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(() => {
            this._connection.console.info(`Bulk unregistration failed.`);
        });
    }
    disposeSingle(arg) {
        const method = Is.string(arg) ? arg : arg.method;
        const unregistration = this._unregistrations.get(method);
        if (!unregistration) {
            return false;
        }
        let params = {
            unregisterations: [unregistration]
        };
        this._connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).then(() => {
            this._unregistrations.delete(method);
        }, (_error) => {
            this._connection.console.info(`Un-registering request handler for ${unregistration.id} failed.`);
        });
        return true;
    }
}
class RemoteClientImpl {
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    register(typeOrRegistrations, registerOptionsOrType, registerOptions) {
        if (typeOrRegistrations instanceof BulkRegistrationImpl) {
            return this.registerMany(typeOrRegistrations);
        }
        else if (typeOrRegistrations instanceof BulkUnregistrationImpl) {
            return this.registerSingle1(typeOrRegistrations, registerOptionsOrType, registerOptions);
        }
        else {
            return this.registerSingle2(typeOrRegistrations, registerOptionsOrType);
        }
    }
    registerSingle1(unregistration, type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        const id = UUID.generateUuid();
        let params = {
            registrations: [{ id, method, registerOptions: registerOptions || {} }]
        };
        if (!unregistration.isAttached) {
            unregistration.attach(this.connection);
        }
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
            unregistration.add({ id: id, method: method });
            return unregistration;
        }, (_error) => {
            this.connection.console.info(`Registering request handler for ${method} failed.`);
            return Promise.reject(_error);
        });
    }
    registerSingle2(type, registerOptions) {
        const method = Is.string(type) ? type : type.method;
        const id = UUID.generateUuid();
        let params = {
            registrations: [{ id, method, registerOptions: registerOptions || {} }]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then((_result) => {
            return vscode_languageserver_protocol_1.Disposable.create(() => {
                this.unregisterSingle(id, method).catch(() => { this.connection.console.info(`Un-registering capability with id ${id} failed.`); });
            });
        }, (_error) => {
            this.connection.console.info(`Registering request handler for ${method} failed.`);
            return Promise.reject(_error);
        });
    }
    unregisterSingle(id, method) {
        let params = {
            unregisterations: [{ id, method }]
        };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.UnregistrationRequest.type, params).catch(() => {
            this.connection.console.info(`Un-registering request handler for ${id} failed.`);
        });
    }
    registerMany(registrations) {
        let params = registrations.asRegistrationParams();
        return this.connection.sendRequest(vscode_languageserver_protocol_1.RegistrationRequest.type, params).then(() => {
            return new BulkUnregistrationImpl(this._connection, params.registrations.map(registration => { return { id: registration.id, method: registration.method }; }));
        }, (_error) => {
            this.connection.console.info(`Bulk registration failed.`);
            return Promise.reject(_error);
        });
    }
}
class _RemoteWorkspaceImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    applyEdit(paramOrEdit) {
        function isApplyWorkspaceEditParams(value) {
            return value && !!value.edit;
        }
        let params = isApplyWorkspaceEditParams(paramOrEdit) ? paramOrEdit : { edit: paramOrEdit };
        return this.connection.sendRequest(vscode_languageserver_protocol_1.ApplyWorkspaceEditRequest.type, params);
    }
}
const RemoteWorkspaceImpl = (0, fileOperations_1.FileOperationsFeature)((0, workspaceFolder_1.WorkspaceFoldersFeature)((0, configuration_1.ConfigurationFeature)(_RemoteWorkspaceImpl)));
class TracerImpl {
    constructor() {
        this._trace = vscode_languageserver_protocol_1.Trace.Off;
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    set trace(value) {
        this._trace = value;
    }
    log(message, verbose) {
        if (this._trace === vscode_languageserver_protocol_1.Trace.Off) {
            return;
        }
        this.connection.sendNotification(vscode_languageserver_protocol_1.LogTraceNotification.type, {
            message: message,
            verbose: this._trace === vscode_languageserver_protocol_1.Trace.Verbose ? verbose : undefined
        }).catch(() => {
            // Very hard to decide what to do. We tried to send a log
            // message which failed so we can't simply send another :-(.
        });
    }
}
class TelemetryImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    logEvent(data) {
        this.connection.sendNotification(vscode_languageserver_protocol_1.TelemetryEventNotification.type, data).catch(() => {
            this.connection.console.log(`Sending TelemetryEventNotification failed`);
        });
    }
}
class _LanguagesImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    attachWorkDoneProgress(params) {
        return (0, progress_1.attachWorkDone)(this.connection, params);
    }
    attachPartialResultProgress(_type, params) {
        return (0, progress_1.attachPartialResult)(this.connection, params);
    }
}
exports._LanguagesImpl = _LanguagesImpl;
const LanguagesImpl = (0, foldingRange_1.FoldingRangeFeature)((0, moniker_1.MonikerFeature)((0, diagnostic_1.DiagnosticFeature)((0, inlayHint_1.InlayHintFeature)((0, inlineValue_1.InlineValueFeature)((0, typeHierarchy_1.TypeHierarchyFeature)((0, linkedEditingRange_1.LinkedEditingRangeFeature)((0, semanticTokens_1.SemanticTokensFeature)((0, callHierarchy_1.CallHierarchyFeature)(_LanguagesImpl)))))))));
class _NotebooksImpl {
    constructor() {
    }
    attach(connection) {
        this._connection = connection;
    }
    get connection() {
        if (!this._connection) {
            throw new Error('Remote is not attached to a connection yet.');
        }
        return this._connection;
    }
    initialize(_capabilities) {
    }
    fillServerCapabilities(_capabilities) {
    }
    attachWorkDoneProgress(params) {
        return (0, progress_1.attachWorkDone)(this.connection, params);
    }
    attachPartialResultProgress(_type, params) {
        return (0, progress_1.attachPartialResult)(this.connection, params);
    }
}
exports._NotebooksImpl = _NotebooksImpl;
const NotebooksImpl = (0, notebook_1.NotebookSyncFeature)(_NotebooksImpl);
function combineConsoleFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineConsoleFeatures = combineConsoleFeatures;
function combineTelemetryFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineTelemetryFeatures = combineTelemetryFeatures;
function combineTracerFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineTracerFeatures = combineTracerFeatures;
function combineClientFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineClientFeatures = combineClientFeatures;
function combineWindowFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineWindowFeatures = combineWindowFeatures;
function combineWorkspaceFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineWorkspaceFeatures = combineWorkspaceFeatures;
function combineLanguagesFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineLanguagesFeatures = combineLanguagesFeatures;
function combineNotebooksFeatures(one, two) {
    return function (Base) {
        return two(one(Base));
    };
}
exports.combineNotebooksFeatures = combineNotebooksFeatures;
function combineFeatures(one, two) {
    function combine(one, two, func) {
        if (one && two) {
            return func(one, two);
        }
        else if (one) {
            return one;
        }
        else {
            return two;
        }
    }
    let result = {
        __brand: 'features',
        console: combine(one.console, two.console, combineConsoleFeatures),
        tracer: combine(one.tracer, two.tracer, combineTracerFeatures),
        telemetry: combine(one.telemetry, two.telemetry, combineTelemetryFeatures),
        client: combine(one.client, two.client, combineClientFeatures),
        window: combine(one.window, two.window, combineWindowFeatures),
        workspace: combine(one.workspace, two.workspace, combineWorkspaceFeatures),
        languages: combine(one.languages, two.languages, combineLanguagesFeatures),
        notebooks: combine(one.notebooks, two.notebooks, combineNotebooksFeatures)
    };
    return result;
}
exports.combineFeatures = combineFeatures;
function createConnection(connectionFactory, watchDog, factories) {
    const logger = (factories && factories.console ? new (factories.console(RemoteConsoleImpl))() : new RemoteConsoleImpl());
    const connection = connectionFactory(logger);
    logger.rawAttach(connection);
    const tracer = (factories && factories.tracer ? new (factories.tracer(TracerImpl))() : new TracerImpl());
    const telemetry = (factories && factories.telemetry ? new (factories.telemetry(TelemetryImpl))() : new TelemetryImpl());
    const client = (factories && factories.client ? new (factories.client(RemoteClientImpl))() : new RemoteClientImpl());
    const remoteWindow = (factories && factories.window ? new (factories.window(RemoteWindowImpl))() : new RemoteWindowImpl());
    const workspace = (factories && factories.workspace ? new (factories.workspace(RemoteWorkspaceImpl))() : new RemoteWorkspaceImpl());
    const languages = (factories && factories.languages ? new (factories.languages(LanguagesImpl))() : new LanguagesImpl());
    const notebooks = (factories && factories.notebooks ? new (factories.notebooks(NotebooksImpl))() : new NotebooksImpl());
    const allRemotes = [logger, tracer, telemetry, client, remoteWindow, workspace, languages, notebooks];
    function asPromise(value) {
        if (value instanceof Promise) {
            return value;
        }
        else if (Is.thenable(value)) {
            return new Promise((resolve, reject) => {
                value.then((resolved) => resolve(resolved), (error) => reject(error));
            });
        }
        else {
            return Promise.resolve(value);
        }
    }
    let shutdownHandler = undefined;
    let initializeHandler = undefined;
    let exitHandler = undefined;
    let protocolConnection = {
        listen: () => connection.listen(),
        sendRequest: (type, ...params) => connection.sendRequest(Is.string(type) ? type : type.method, ...params),
        onRequest: (type, handler) => connection.onRequest(type, handler),
        sendNotification: (type, param) => {
            const method = Is.string(type) ? type : type.method;
            return connection.sendNotification(method, param);
        },
        onNotification: (type, handler) => connection.onNotification(type, handler),
        onProgress: connection.onProgress,
        sendProgress: connection.sendProgress,
        onInitialize: (handler) => {
            initializeHandler = handler;
            return {
                dispose: () => {
                    initializeHandler = undefined;
                }
            };
        },
        onInitialized: (handler) => connection.onNotification(vscode_languageserver_protocol_1.InitializedNotification.type, handler),
        onShutdown: (handler) => {
            shutdownHandler = handler;
            return {
                dispose: () => {
                    shutdownHandler = undefined;
                }
            };
        },
        onExit: (handler) => {
            exitHandler = handler;
            return {
                dispose: () => {
                    exitHandler = undefined;
                }
            };
        },
        get console() { return logger; },
        get telemetry() { return telemetry; },
        get tracer() { return tracer; },
        get client() { return client; },
        get window() { return remoteWindow; },
        get workspace() { return workspace; },
        get languages() { return languages; },
        get notebooks() { return notebooks; },
        onDidChangeConfiguration: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeConfigurationNotification.type, handler),
        onDidChangeWatchedFiles: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeWatchedFilesNotification.type, handler),
        __textDocumentSync: undefined,
        onDidOpenTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidOpenTextDocumentNotification.type, handler),
        onDidChangeTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidChangeTextDocumentNotification.type, handler),
        onDidCloseTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidCloseTextDocumentNotification.type, handler),
        onWillSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.WillSaveTextDocumentNotification.type, handler),
        onWillSaveTextDocumentWaitUntil: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WillSaveTextDocumentWaitUntilRequest.type, handler),
        onDidSaveTextDocument: (handler) => connection.onNotification(vscode_languageserver_protocol_1.DidSaveTextDocumentNotification.type, handler),
        sendDiagnostics: (params) => connection.sendNotification(vscode_languageserver_protocol_1.PublishDiagnosticsNotification.type, params),
        onHover: (handler) => connection.onRequest(vscode_languageserver_protocol_1.HoverRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        onCompletion: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onCompletionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CompletionResolveRequest.type, handler),
        onSignatureHelp: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SignatureHelpRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        onDeclaration: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DeclarationRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DefinitionRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onTypeDefinition: (handler) => connection.onRequest(vscode_languageserver_protocol_1.TypeDefinitionRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onImplementation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ImplementationRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onReferences: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ReferencesRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onDocumentHighlight: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentHighlightRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onDocumentSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentSymbolRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onWorkspaceSymbol: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onWorkspaceSymbolResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.WorkspaceSymbolResolveRequest.type, handler),
        onCodeAction: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onCodeActionResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeActionResolveRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onCodeLens: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onCodeLensResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.CodeLensResolveRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onDocumentFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentFormattingRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        onDocumentRangeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentRangeFormattingRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        onDocumentOnTypeFormatting: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentOnTypeFormattingRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onRenameRequest: (handler) => connection.onRequest(vscode_languageserver_protocol_1.RenameRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        onPrepareRename: (handler) => connection.onRequest(vscode_languageserver_protocol_1.PrepareRenameRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onDocumentLinks: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onDocumentLinkResolve: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentLinkResolveRequest.type, (params, cancel) => {
            return handler(params, cancel);
        }),
        onDocumentColor: (handler) => connection.onRequest(vscode_languageserver_protocol_1.DocumentColorRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onColorPresentation: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ColorPresentationRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onFoldingRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.FoldingRangeRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onSelectionRanges: (handler) => connection.onRequest(vscode_languageserver_protocol_1.SelectionRangeRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), (0, progress_1.attachPartialResult)(connection, params));
        }),
        onExecuteCommand: (handler) => connection.onRequest(vscode_languageserver_protocol_1.ExecuteCommandRequest.type, (params, cancel) => {
            return handler(params, cancel, (0, progress_1.attachWorkDone)(connection, params), undefined);
        }),
        dispose: () => connection.dispose()
    };
    for (let remote of allRemotes) {
        remote.attach(protocolConnection);
    }
    connection.onRequest(vscode_languageserver_protocol_1.InitializeRequest.type, (params) => {
        watchDog.initialize(params);
        if (Is.string(params.trace)) {
            tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.trace);
        }
        for (let remote of allRemotes) {
            remote.initialize(params.capabilities);
        }
        if (initializeHandler) {
            let result = initializeHandler(params, new vscode_languageserver_protocol_1.CancellationTokenSource().token, (0, progress_1.attachWorkDone)(connection, params), undefined);
            return asPromise(result).then((value) => {
                if (value instanceof vscode_languageserver_protocol_1.ResponseError) {
                    return value;
                }
                let result = value;
                if (!result) {
                    result = { capabilities: {} };
                }
                let capabilities = result.capabilities;
                if (!capabilities) {
                    capabilities = {};
                    result.capabilities = capabilities;
                }
                if (capabilities.textDocumentSync === undefined || capabilities.textDocumentSync === null) {
                    capabilities.textDocumentSync = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                }
                else if (!Is.number(capabilities.textDocumentSync) && !Is.number(capabilities.textDocumentSync.change)) {
                    capabilities.textDocumentSync.change = Is.number(protocolConnection.__textDocumentSync) ? protocolConnection.__textDocumentSync : vscode_languageserver_protocol_1.TextDocumentSyncKind.None;
                }
                for (let remote of allRemotes) {
                    remote.fillServerCapabilities(capabilities);
                }
                return result;
            });
        }
        else {
            let result = { capabilities: { textDocumentSync: vscode_languageserver_protocol_1.TextDocumentSyncKind.None } };
            for (let remote of allRemotes) {
                remote.fillServerCapabilities(result.capabilities);
            }
            return result;
        }
    });
    connection.onRequest(vscode_languageserver_protocol_1.ShutdownRequest.type, () => {
        watchDog.shutdownReceived = true;
        if (shutdownHandler) {
            return shutdownHandler(new vscode_languageserver_protocol_1.CancellationTokenSource().token);
        }
        else {
            return undefined;
        }
    });
    connection.onNotification(vscode_languageserver_protocol_1.ExitNotification.type, () => {
        try {
            if (exitHandler) {
                exitHandler();
            }
        }
        finally {
            if (watchDog.shutdownReceived) {
                watchDog.exit(0);
            }
            else {
                watchDog.exit(1);
            }
        }
    });
    connection.onNotification(vscode_languageserver_protocol_1.SetTraceNotification.type, (params) => {
        tracer.trace = vscode_languageserver_protocol_1.Trace.fromString(params.value);
    });
    return protocolConnection;
}
exports.createConnection = createConnection;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/showDocument.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/showDocument.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ShowDocumentFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const ShowDocumentFeature = (Base) => {
    return class extends Base {
        showDocument(params) {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.ShowDocumentRequest.type, params);
        }
    };
};
exports.ShowDocumentFeature = ShowDocumentFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/textDocuments.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/textDocuments.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TextDocuments = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
/**
 * A manager for simple text documents. The manager requires at a minimum that
 * the server registered for the following text document sync events in the
 * initialize handler or via dynamic registration:
 *
 * - open and close events.
 * - change events.
 *
 * Registering for save and will save events is optional.
 */
class TextDocuments {
    /**
     * Create a new text document manager.
     */
    constructor(configuration) {
        this._configuration = configuration;
        this._syncedDocuments = new Map();
        this._onDidChangeContent = new vscode_languageserver_protocol_1.Emitter();
        this._onDidOpen = new vscode_languageserver_protocol_1.Emitter();
        this._onDidClose = new vscode_languageserver_protocol_1.Emitter();
        this._onDidSave = new vscode_languageserver_protocol_1.Emitter();
        this._onWillSave = new vscode_languageserver_protocol_1.Emitter();
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been opened.
     */
    get onDidOpen() {
        return this._onDidOpen.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been opened or the content changes.
     */
    get onDidChangeContent() {
        return this._onDidChangeContent.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * will be saved.
     */
    get onWillSave() {
        return this._onWillSave.event;
    }
    /**
     * Sets a handler that will be called if a participant wants to provide
     * edits during a text document save.
     */
    onWillSaveWaitUntil(handler) {
        this._willSaveWaitUntil = handler;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been saved.
     */
    get onDidSave() {
        return this._onDidSave.event;
    }
    /**
     * An event that fires when a text document managed by this manager
     * has been closed.
     */
    get onDidClose() {
        return this._onDidClose.event;
    }
    /**
     * Returns the document for the given URI. Returns undefined if
     * the document is not managed by this instance.
     *
     * @param uri The text document's URI to retrieve.
     * @return the text document or `undefined`.
     */
    get(uri) {
        return this._syncedDocuments.get(uri);
    }
    /**
     * Returns all text documents managed by this instance.
     *
     * @return all text documents.
     */
    all() {
        return Array.from(this._syncedDocuments.values());
    }
    /**
     * Returns the URIs of all text documents managed by this instance.
     *
     * @return the URI's of all text documents.
     */
    keys() {
        return Array.from(this._syncedDocuments.keys());
    }
    /**
     * Listens for `low level` notification on the given connection to
     * update the text documents managed by this instance.
     *
     * Please note that the connection only provides handlers not an event model. Therefore
     * listening on a connection will overwrite the following handlers on a connection:
     * `onDidOpenTextDocument`, `onDidChangeTextDocument`, `onDidCloseTextDocument`,
     * `onWillSaveTextDocument`, `onWillSaveTextDocumentWaitUntil` and `onDidSaveTextDocument`.
     *
     * Use the corresponding events on the TextDocuments instance instead.
     *
     * @param connection The connection to listen on.
     */
    listen(connection) {
        connection.__textDocumentSync = vscode_languageserver_protocol_1.TextDocumentSyncKind.Incremental;
        const disposables = [];
        disposables.push(connection.onDidOpenTextDocument((event) => {
            const td = event.textDocument;
            const document = this._configuration.create(td.uri, td.languageId, td.version, td.text);
            this._syncedDocuments.set(td.uri, document);
            const toFire = Object.freeze({ document });
            this._onDidOpen.fire(toFire);
            this._onDidChangeContent.fire(toFire);
        }));
        disposables.push(connection.onDidChangeTextDocument((event) => {
            const td = event.textDocument;
            const changes = event.contentChanges;
            if (changes.length === 0) {
                return;
            }
            const { version } = td;
            if (version === null || version === undefined) {
                throw new Error(`Received document change event for ${td.uri} without valid version identifier`);
            }
            let syncedDocument = this._syncedDocuments.get(td.uri);
            if (syncedDocument !== undefined) {
                syncedDocument = this._configuration.update(syncedDocument, changes, version);
                this._syncedDocuments.set(td.uri, syncedDocument);
                this._onDidChangeContent.fire(Object.freeze({ document: syncedDocument }));
            }
        }));
        disposables.push(connection.onDidCloseTextDocument((event) => {
            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
            if (syncedDocument !== undefined) {
                this._syncedDocuments.delete(event.textDocument.uri);
                this._onDidClose.fire(Object.freeze({ document: syncedDocument }));
            }
        }));
        disposables.push(connection.onWillSaveTextDocument((event) => {
            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
            if (syncedDocument !== undefined) {
                this._onWillSave.fire(Object.freeze({ document: syncedDocument, reason: event.reason }));
            }
        }));
        disposables.push(connection.onWillSaveTextDocumentWaitUntil((event, token) => {
            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
            if (syncedDocument !== undefined && this._willSaveWaitUntil) {
                return this._willSaveWaitUntil(Object.freeze({ document: syncedDocument, reason: event.reason }), token);
            }
            else {
                return [];
            }
        }));
        disposables.push(connection.onDidSaveTextDocument((event) => {
            let syncedDocument = this._syncedDocuments.get(event.textDocument.uri);
            if (syncedDocument !== undefined) {
                this._onDidSave.fire(Object.freeze({ document: syncedDocument }));
            }
        }));
        return vscode_languageserver_protocol_1.Disposable.create(() => { disposables.forEach(disposable => disposable.dispose()); });
    }
}
exports.TextDocuments = TextDocuments;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/typeHierarchy.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/typeHierarchy.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.TypeHierarchyFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const TypeHierarchyFeature = (Base) => {
    return class extends Base {
        get typeHierarchy() {
            return {
                onPrepare: (handler) => {
                    return this.connection.onRequest(vscode_languageserver_protocol_1.TypeHierarchyPrepareRequest.type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), undefined);
                    });
                },
                onSupertypes: (handler) => {
                    const type = vscode_languageserver_protocol_1.TypeHierarchySupertypesRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                },
                onSubtypes: (handler) => {
                    const type = vscode_languageserver_protocol_1.TypeHierarchySubtypesRequest.type;
                    return this.connection.onRequest(type, (params, cancel) => {
                        return handler(params, cancel, this.attachWorkDoneProgress(params), this.attachPartialResultProgress(type, params));
                    });
                }
            };
        }
    };
};
exports.TypeHierarchyFeature = TypeHierarchyFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/utils/is.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/utils/is.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.thenable = exports.typedArray = exports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;
function boolean(value) {
    return value === true || value === false;
}
exports.boolean = boolean;
function string(value) {
    return typeof value === 'string' || value instanceof String;
}
exports.string = string;
function number(value) {
    return typeof value === 'number' || value instanceof Number;
}
exports.number = number;
function error(value) {
    return value instanceof Error;
}
exports.error = error;
function func(value) {
    return typeof value === 'function';
}
exports.func = func;
function array(value) {
    return Array.isArray(value);
}
exports.array = array;
function stringArray(value) {
    return array(value) && value.every(elem => string(elem));
}
exports.stringArray = stringArray;
function typedArray(value, check) {
    return Array.isArray(value) && value.every(check);
}
exports.typedArray = typedArray;
function thenable(value) {
    return value && func(value.then);
}
exports.thenable = thenable;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/utils/uuid.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/utils/uuid.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";

/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.generateUuid = exports.parse = exports.isUUID = exports.v4 = exports.empty = void 0;
class ValueUUID {
    constructor(_value) {
        this._value = _value;
        // empty
    }
    asHex() {
        return this._value;
    }
    equals(other) {
        return this.asHex() === other.asHex();
    }
}
class V4UUID extends ValueUUID {
    static _oneOf(array) {
        return array[Math.floor(array.length * Math.random())];
    }
    static _randomHex() {
        return V4UUID._oneOf(V4UUID._chars);
    }
    constructor() {
        super([
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            '4',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._oneOf(V4UUID._timeHighBits),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            '-',
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
            V4UUID._randomHex(),
        ].join(''));
    }
}
V4UUID._chars = ['0', '1', '2', '3', '4', '5', '6', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];
V4UUID._timeHighBits = ['8', '9', 'a', 'b'];
/**
 * An empty UUID that contains only zeros.
 */
exports.empty = new ValueUUID('00000000-0000-0000-0000-000000000000');
function v4() {
    return new V4UUID();
}
exports.v4 = v4;
const _UUIDPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
function isUUID(value) {
    return _UUIDPattern.test(value);
}
exports.isUUID = isUUID;
/**
 * Parses a UUID that is of the format xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.
 * @param value A uuid string.
 */
function parse(value) {
    if (!isUUID(value)) {
        throw new Error('invalid uuid');
    }
    return new ValueUUID(value);
}
exports.parse = parse;
function generateUuid() {
    return v4().asHex();
}
exports.generateUuid = generateUuid;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/common/workspaceFolder.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/common/workspaceFolder.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.WorkspaceFoldersFeature = void 0;
const vscode_languageserver_protocol_1 = __webpack_require__(/*! vscode-languageserver-protocol */ "../../node_modules/vscode-languageserver-protocol/lib/node/main.js");
const WorkspaceFoldersFeature = (Base) => {
    return class extends Base {
        constructor() {
            super();
            this._notificationIsAutoRegistered = false;
        }
        initialize(capabilities) {
            super.initialize(capabilities);
            let workspaceCapabilities = capabilities.workspace;
            if (workspaceCapabilities && workspaceCapabilities.workspaceFolders) {
                this._onDidChangeWorkspaceFolders = new vscode_languageserver_protocol_1.Emitter();
                this.connection.onNotification(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type, (params) => {
                    this._onDidChangeWorkspaceFolders.fire(params.event);
                });
            }
        }
        fillServerCapabilities(capabilities) {
            super.fillServerCapabilities(capabilities);
            const changeNotifications = capabilities.workspace?.workspaceFolders?.changeNotifications;
            this._notificationIsAutoRegistered = changeNotifications === true || typeof changeNotifications === 'string';
        }
        getWorkspaceFolders() {
            return this.connection.sendRequest(vscode_languageserver_protocol_1.WorkspaceFoldersRequest.type);
        }
        get onDidChangeWorkspaceFolders() {
            if (!this._onDidChangeWorkspaceFolders) {
                throw new Error('Client doesn\'t support sending workspace folder change events.');
            }
            if (!this._notificationIsAutoRegistered && !this._unregistration) {
                this._unregistration = this.connection.client.register(vscode_languageserver_protocol_1.DidChangeWorkspaceFoldersNotification.type);
            }
            return this._onDidChangeWorkspaceFolders.event;
        }
    };
};
exports.WorkspaceFoldersFeature = WorkspaceFoldersFeature;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/node/files.js":
/*!******************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/node/files.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.resolveModulePath = exports.FileSystem = exports.resolveGlobalYarnPath = exports.resolveGlobalNodePath = exports.resolve = exports.uriToFilePath = void 0;
const url = __webpack_require__(/*! url */ "url");
const path = __webpack_require__(/*! path */ "path");
const fs = __webpack_require__(/*! fs */ "fs");
const child_process_1 = __webpack_require__(/*! child_process */ "child_process");
/**
 * @deprecated Use the `vscode-uri` npm module which provides a more
 * complete implementation of handling VS Code URIs.
 */
function uriToFilePath(uri) {
    let parsed = url.parse(uri);
    if (parsed.protocol !== 'file:' || !parsed.path) {
        return undefined;
    }
    let segments = parsed.path.split('/');
    for (var i = 0, len = segments.length; i < len; i++) {
        segments[i] = decodeURIComponent(segments[i]);
    }
    if (process.platform === 'win32' && segments.length > 1) {
        let first = segments[0];
        let second = segments[1];
        // Do we have a drive letter and we started with a / which is the
        // case if the first segement is empty (see split above)
        if (first.length === 0 && second.length > 1 && second[1] === ':') {
            // Remove first slash
            segments.shift();
        }
    }
    return path.normalize(segments.join('/'));
}
exports.uriToFilePath = uriToFilePath;
function isWindows() {
    return process.platform === 'win32';
}
function resolve(moduleName, nodePath, cwd, tracer) {
    const nodePathKey = 'NODE_PATH';
    const app = [
        'var p = process;',
        'p.on(\'message\',function(m){',
        'if(m.c===\'e\'){',
        'p.exit(0);',
        '}',
        'else if(m.c===\'rs\'){',
        'try{',
        'var r=require.resolve(m.a);',
        'p.send({c:\'r\',s:true,r:r});',
        '}',
        'catch(err){',
        'p.send({c:\'r\',s:false});',
        '}',
        '}',
        '});'
    ].join('');
    return new Promise((resolve, reject) => {
        let env = process.env;
        let newEnv = Object.create(null);
        Object.keys(env).forEach(key => newEnv[key] = env[key]);
        if (nodePath && fs.existsSync(nodePath) /* see issue 545 */) {
            if (newEnv[nodePathKey]) {
                newEnv[nodePathKey] = nodePath + path.delimiter + newEnv[nodePathKey];
            }
            else {
                newEnv[nodePathKey] = nodePath;
            }
            if (tracer) {
                tracer(`NODE_PATH value is: ${newEnv[nodePathKey]}`);
            }
        }
        newEnv['ELECTRON_RUN_AS_NODE'] = '1';
        try {
            let cp = (0, child_process_1.fork)('', [], {
                cwd: cwd,
                env: newEnv,
                execArgv: ['-e', app]
            });
            if (cp.pid === void 0) {
                reject(new Error(`Starting process to resolve node module  ${moduleName} failed`));
                return;
            }
            cp.on('error', (error) => {
                reject(error);
            });
            cp.on('message', (message) => {
                if (message.c === 'r') {
                    cp.send({ c: 'e' });
                    if (message.s) {
                        resolve(message.r);
                    }
                    else {
                        reject(new Error(`Failed to resolve module: ${moduleName}`));
                    }
                }
            });
            let message = {
                c: 'rs',
                a: moduleName
            };
            cp.send(message);
        }
        catch (error) {
            reject(error);
        }
    });
}
exports.resolve = resolve;
/**
 * Resolve the global npm package path.
 * @deprecated Since this depends on the used package manager and their version the best is that servers
 * implement this themselves since they know best what kind of package managers to support.
 * @param tracer the tracer to use
 */
function resolveGlobalNodePath(tracer) {
    let npmCommand = 'npm';
    const env = Object.create(null);
    Object.keys(process.env).forEach(key => env[key] = process.env[key]);
    env['NO_UPDATE_NOTIFIER'] = 'true';
    const options = {
        encoding: 'utf8',
        env
    };
    if (isWindows()) {
        npmCommand = 'npm.cmd';
        options.shell = true;
    }
    let handler = () => { };
    try {
        process.on('SIGPIPE', handler);
        let stdout = (0, child_process_1.spawnSync)(npmCommand, ['config', 'get', 'prefix'], options).stdout;
        if (!stdout) {
            if (tracer) {
                tracer(`'npm config get prefix' didn't return a value.`);
            }
            return undefined;
        }
        let prefix = stdout.trim();
        if (tracer) {
            tracer(`'npm config get prefix' value is: ${prefix}`);
        }
        if (prefix.length > 0) {
            if (isWindows()) {
                return path.join(prefix, 'node_modules');
            }
            else {
                return path.join(prefix, 'lib', 'node_modules');
            }
        }
        return undefined;
    }
    catch (err) {
        return undefined;
    }
    finally {
        process.removeListener('SIGPIPE', handler);
    }
}
exports.resolveGlobalNodePath = resolveGlobalNodePath;
/*
 * Resolve the global yarn pakage path.
 * @deprecated Since this depends on the used package manager and their version the best is that servers
 * implement this themselves since they know best what kind of package managers to support.
 * @param tracer the tracer to use
 */
function resolveGlobalYarnPath(tracer) {
    let yarnCommand = 'yarn';
    let options = {
        encoding: 'utf8'
    };
    if (isWindows()) {
        yarnCommand = 'yarn.cmd';
        options.shell = true;
    }
    let handler = () => { };
    try {
        process.on('SIGPIPE', handler);
        let results = (0, child_process_1.spawnSync)(yarnCommand, ['global', 'dir', '--json'], options);
        let stdout = results.stdout;
        if (!stdout) {
            if (tracer) {
                tracer(`'yarn global dir' didn't return a value.`);
                if (results.stderr) {
                    tracer(results.stderr);
                }
            }
            return undefined;
        }
        let lines = stdout.trim().split(/\r?\n/);
        for (let line of lines) {
            try {
                let yarn = JSON.parse(line);
                if (yarn.type === 'log') {
                    return path.join(yarn.data, 'node_modules');
                }
            }
            catch (e) {
                // Do nothing. Ignore the line
            }
        }
        return undefined;
    }
    catch (err) {
        return undefined;
    }
    finally {
        process.removeListener('SIGPIPE', handler);
    }
}
exports.resolveGlobalYarnPath = resolveGlobalYarnPath;
var FileSystem;
(function (FileSystem) {
    let _isCaseSensitive = undefined;
    function isCaseSensitive() {
        if (_isCaseSensitive !== void 0) {
            return _isCaseSensitive;
        }
        if (process.platform === 'win32') {
            _isCaseSensitive = false;
        }
        else {
            // convert current file name to upper case / lower case and check if file exists
            // (guards against cases when name is already all uppercase or lowercase)
            _isCaseSensitive = !fs.existsSync(__filename.toUpperCase()) || !fs.existsSync(__filename.toLowerCase());
        }
        return _isCaseSensitive;
    }
    FileSystem.isCaseSensitive = isCaseSensitive;
    function isParent(parent, child) {
        if (isCaseSensitive()) {
            return path.normalize(child).indexOf(path.normalize(parent)) === 0;
        }
        else {
            return path.normalize(child).toLowerCase().indexOf(path.normalize(parent).toLowerCase()) === 0;
        }
    }
    FileSystem.isParent = isParent;
})(FileSystem || (exports.FileSystem = FileSystem = {}));
function resolveModulePath(workspaceRoot, moduleName, nodePath, tracer) {
    if (nodePath) {
        if (!path.isAbsolute(nodePath)) {
            nodePath = path.join(workspaceRoot, nodePath);
        }
        return resolve(moduleName, nodePath, nodePath, tracer).then((value) => {
            if (FileSystem.isParent(nodePath, value)) {
                return value;
            }
            else {
                return Promise.reject(new Error(`Failed to load ${moduleName} from node path location.`));
            }
        }).then(undefined, (_error) => {
            return resolve(moduleName, resolveGlobalNodePath(tracer), workspaceRoot, tracer);
        });
    }
    else {
        return resolve(moduleName, resolveGlobalNodePath(tracer), workspaceRoot, tracer);
    }
}
exports.resolveModulePath = resolveModulePath;


/***/ }),

/***/ "../../node_modules/vscode-languageserver/lib/node/main.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/vscode-languageserver/lib/node/main.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";

/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
/// <reference path="../../typings/thenable.d.ts" />
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.createConnection = exports.Files = void 0;
const node_util_1 = __webpack_require__(/*! node:util */ "node:util");
const Is = __webpack_require__(/*! ../common/utils/is */ "../../node_modules/vscode-languageserver/lib/common/utils/is.js");
const server_1 = __webpack_require__(/*! ../common/server */ "../../node_modules/vscode-languageserver/lib/common/server.js");
const fm = __webpack_require__(/*! ./files */ "../../node_modules/vscode-languageserver/lib/node/files.js");
const node_1 = __webpack_require__(/*! vscode-languageserver-protocol/node */ "../../node_modules/vscode-languageserver-protocol/node.js");
__exportStar(__webpack_require__(/*! vscode-languageserver-protocol/node */ "../../node_modules/vscode-languageserver-protocol/node.js"), exports);
__exportStar(__webpack_require__(/*! ../common/api */ "../../node_modules/vscode-languageserver/lib/common/api.js"), exports);
var Files;
(function (Files) {
    Files.uriToFilePath = fm.uriToFilePath;
    Files.resolveGlobalNodePath = fm.resolveGlobalNodePath;
    Files.resolveGlobalYarnPath = fm.resolveGlobalYarnPath;
    Files.resolve = fm.resolve;
    Files.resolveModulePath = fm.resolveModulePath;
})(Files || (exports.Files = Files = {}));
let _protocolConnection;
function endProtocolConnection() {
    if (_protocolConnection === undefined) {
        return;
    }
    try {
        _protocolConnection.end();
    }
    catch (_err) {
        // Ignore. The client process could have already
        // did and we can't send an end into the connection.
    }
}
let _shutdownReceived = false;
let exitTimer = undefined;
function setupExitTimer() {
    const argName = '--clientProcessId';
    function runTimer(value) {
        try {
            let processId = parseInt(value);
            if (!isNaN(processId)) {
                exitTimer = setInterval(() => {
                    try {
                        process.kill(processId, 0);
                    }
                    catch (ex) {
                        // Parent process doesn't exist anymore. Exit the server.
                        endProtocolConnection();
                        process.exit(_shutdownReceived ? 0 : 1);
                    }
                }, 3000);
            }
        }
        catch (e) {
            // Ignore errors;
        }
    }
    for (let i = 2; i < process.argv.length; i++) {
        let arg = process.argv[i];
        if (arg === argName && i + 1 < process.argv.length) {
            runTimer(process.argv[i + 1]);
            return;
        }
        else {
            let args = arg.split('=');
            if (args[0] === argName) {
                runTimer(args[1]);
            }
        }
    }
}
setupExitTimer();
const watchDog = {
    initialize: (params) => {
        const processId = params.processId;
        if (Is.number(processId) && exitTimer === undefined) {
            // We received a parent process id. Set up a timer to periodically check
            // if the parent is still alive.
            setInterval(() => {
                try {
                    process.kill(processId, 0);
                }
                catch (ex) {
                    // Parent process doesn't exist anymore. Exit the server.
                    process.exit(_shutdownReceived ? 0 : 1);
                }
            }, 3000);
        }
    },
    get shutdownReceived() {
        return _shutdownReceived;
    },
    set shutdownReceived(value) {
        _shutdownReceived = value;
    },
    exit: (code) => {
        endProtocolConnection();
        process.exit(code);
    }
};
function createConnection(arg1, arg2, arg3, arg4) {
    let factories;
    let input;
    let output;
    let options;
    if (arg1 !== void 0 && arg1.__brand === 'features') {
        factories = arg1;
        arg1 = arg2;
        arg2 = arg3;
        arg3 = arg4;
    }
    if (node_1.ConnectionStrategy.is(arg1) || node_1.ConnectionOptions.is(arg1)) {
        options = arg1;
    }
    else {
        input = arg1;
        output = arg2;
        options = arg3;
    }
    return _createConnection(input, output, options, factories);
}
exports.createConnection = createConnection;
function _createConnection(input, output, options, factories) {
    let stdio = false;
    if (!input && !output && process.argv.length > 2) {
        let port = void 0;
        let pipeName = void 0;
        let argv = process.argv.slice(2);
        for (let i = 0; i < argv.length; i++) {
            let arg = argv[i];
            if (arg === '--node-ipc') {
                input = new node_1.IPCMessageReader(process);
                output = new node_1.IPCMessageWriter(process);
                break;
            }
            else if (arg === '--stdio') {
                stdio = true;
                input = process.stdin;
                output = process.stdout;
                break;
            }
            else if (arg === '--socket') {
                port = parseInt(argv[i + 1]);
                break;
            }
            else if (arg === '--pipe') {
                pipeName = argv[i + 1];
                break;
            }
            else {
                var args = arg.split('=');
                if (args[0] === '--socket') {
                    port = parseInt(args[1]);
                    break;
                }
                else if (args[0] === '--pipe') {
                    pipeName = args[1];
                    break;
                }
            }
        }
        if (port) {
            let transport = (0, node_1.createServerSocketTransport)(port);
            input = transport[0];
            output = transport[1];
        }
        else if (pipeName) {
            let transport = (0, node_1.createServerPipeTransport)(pipeName);
            input = transport[0];
            output = transport[1];
        }
    }
    var commandLineMessage = 'Use arguments of createConnection or set command line parameters: \'--node-ipc\', \'--stdio\' or \'--socket={number}\'';
    if (!input) {
        throw new Error('Connection input stream is not set. ' + commandLineMessage);
    }
    if (!output) {
        throw new Error('Connection output stream is not set. ' + commandLineMessage);
    }
    // Backwards compatibility
    if (Is.func(input.read) && Is.func(input.on)) {
        let inputStream = input;
        inputStream.on('end', () => {
            endProtocolConnection();
            process.exit(_shutdownReceived ? 0 : 1);
        });
        inputStream.on('close', () => {
            endProtocolConnection();
            process.exit(_shutdownReceived ? 0 : 1);
        });
    }
    const connectionFactory = (logger) => {
        const result = (0, node_1.createProtocolConnection)(input, output, logger, options);
        if (stdio) {
            patchConsole(logger);
        }
        return result;
    };
    return (0, server_1.createConnection)(connectionFactory, watchDog, factories);
}
function patchConsole(logger) {
    function serialize(args) {
        return args.map(arg => typeof arg === 'string' ? arg : (0, node_util_1.inspect)(arg)).join(' ');
    }
    const counters = new Map();
    console.assert = function assert(assertion, ...args) {
        if (assertion) {
            return;
        }
        if (args.length === 0) {
            logger.error('Assertion failed');
        }
        else {
            const [message, ...rest] = args;
            logger.error(`Assertion failed: ${message} ${serialize(rest)}`);
        }
    };
    console.count = function count(label = 'default') {
        const message = String(label);
        let counter = counters.get(message) ?? 0;
        counter += 1;
        counters.set(message, counter);
        logger.log(`${message}: ${message}`);
    };
    console.countReset = function countReset(label) {
        if (label === undefined) {
            counters.clear();
        }
        else {
            counters.delete(String(label));
        }
    };
    console.debug = function debug(...args) {
        logger.log(serialize(args));
    };
    console.dir = function dir(arg, options) {
        // @ts-expect-error https://github.com/DefinitelyTyped/DefinitelyTyped/pull/66626
        logger.log((0, node_util_1.inspect)(arg, options));
    };
    console.log = function log(...args) {
        logger.log(serialize(args));
    };
    console.error = function error(...args) {
        logger.error(serialize(args));
    };
    console.trace = function trace(...args) {
        const stack = new Error().stack.replace(/(.+\n){2}/, '');
        let message = 'Trace';
        if (args.length !== 0) {
            message += `: ${serialize(args)}`;
        }
        logger.log(`${message}\n${stack}`);
    };
    console.warn = function warn(...args) {
        logger.warn(serialize(args));
    };
}


/***/ }),

/***/ "../../node_modules/vscode-languageserver/node.js":
/*!********************************************************!*\
  !*** ../../node_modules/vscode-languageserver/node.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ----------------------------------------------------------------------------------------- */


module.exports = __webpack_require__(/*! ./lib/node/main */ "../../node_modules/vscode-languageserver/lib/node/main.js");

/***/ }),

/***/ "child_process":
/*!********************************!*\
  !*** external "child_process" ***!
  \********************************/
/***/ ((module) => {

"use strict";
module.exports = require("child_process");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "fs/promises":
/*!******************************!*\
  !*** external "fs/promises" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("fs/promises");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("net");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

"use strict";
module.exports = require("node:util");

/***/ }),

/***/ "os":
/*!*********************!*\
  !*** external "os" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("os");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("stream");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = require("url");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("util");

/***/ }),

/***/ "../../node_modules/colorjs.io/dist/color.js":
/*!***************************************************!*\
  !*** ../../node_modules/colorjs.io/dist/color.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Color)
/* harmony export */ });
// A is m x n. B is n x p. product is m x p.
function multiplyMatrices (A, B) {
	let m = A.length;

	if (!Array.isArray(A[0])) {
		// A is vector, convert to [[a, b, c, ...]]
		A = [A];
	}

	if (!Array.isArray(B[0])) {
		// B is vector, convert to [[a], [b], [c], ...]]
		B = B.map(x => [x]);
	}

	let p = B[0].length;
	let B_cols = B[0].map((_, i) => B.map(x => x[i])); // transpose B
	let product = A.map(row => B_cols.map(col => {
		let ret = 0;

		if (!Array.isArray(row)) {
			for (let c of col) {
				ret += row * c;
			}

			return ret;
		}

		for (let i = 0; i < row.length; i++) {
			ret += row[i] * (col[i] || 0);
		}

		return ret;
	}));

	if (m === 1) {
		product = product[0]; // Avoid [[a, b, c, ...]]
	}

	if (p === 1) {
		return product.map(x => x[0]); // Avoid [[a], [b], [c], ...]]
	}

	return product;
}

/**
 * Various utility functions
 */


/**
 * Check if a value is a string (including a String object)
 * @param {*} str - Value to check
 * @returns {boolean}
 */
function isString (str) {
	return type(str) === "string";
}

/**
 * Determine the internal JavaScript [[Class]] of an object.
 * @param {*} o - Value to check
 * @returns {string}
 */
function type (o) {
	let str = Object.prototype.toString.call(o);

	return (str.match(/^\[object\s+(.*?)\]$/)[1] || "").toLowerCase();
}

function serializeNumber (n, {precision, unit }) {
	if (isNone(n)) {
		return "none";
	}

	return toPrecision(n, precision) + (unit ?? "");
}

/**
 * Check if a value corresponds to a none argument
 * @param {*} n - Value to check
 * @returns {boolean}
 */
function isNone (n) {
	return Number.isNaN(n) || (n instanceof Number && n?.none);
}

/**
 * Replace none values with 0
 */
function skipNone (n) {
	return isNone(n) ? 0 : n;
}

/**
 * Round a number to a certain number of significant digits
 * @param {number} n - The number to round
 * @param {number} precision - Number of significant digits
 */
function toPrecision (n, precision) {
	if (n === 0) {
		return 0;
	}
	let integer = ~~n;
	let digits = 0;
	if (integer && precision) {
		digits = ~~Math.log10(Math.abs(integer)) + 1;
	}
	const multiplier = 10.0 ** (precision - digits);
	return Math.floor(n * multiplier + 0.5) / multiplier;
}

const angleFactor = {
	deg: 1,
	grad: 0.9,
	rad: 180 / Math.PI,
	turn: 360,
};

/**
* Parse a CSS function, regardless of its name and arguments
* @param String str String to parse
* @return {{name, args, rawArgs}}
*/
function parseFunction (str) {
	if (!str) {
		return;
	}

	str = str.trim();

	const isFunctionRegex = /^([a-z]+)\((.+?)\)$/i;
	const isNumberRegex = /^-?[\d.]+$/;
	const unitValueRegex = /%|deg|g?rad|turn$/;
	const singleArgument = /\/?\s*(none|[-\w.]+(?:%|deg|g?rad|turn)?)/g;
	let parts = str.match(isFunctionRegex);

	if (parts) {
		// It is a function, parse args
		let args = [];
		parts[2].replace(singleArgument, ($0, rawArg) => {
			let match = rawArg.match(unitValueRegex);
			let arg = rawArg;

			if (match) {
				let unit = match[0];
				// Drop unit from value
				let unitlessArg = arg.slice(0, -unit.length);

				if (unit === "%") {
					// Convert percentages to 0-1 numbers
					arg = new Number(unitlessArg / 100);
					arg.type = "<percentage>";
				}
				else {
					// Multiply angle by appropriate factor for its unit
					arg = new Number(unitlessArg * angleFactor[unit]);
					arg.type = "<angle>";
					arg.unit = unit;
				}
			}
			else if (isNumberRegex.test(arg)) {
				// Convert numerical args to numbers
				arg = new Number(arg);
				arg.type = "<number>";
			}
			else if (arg === "none") {
				arg = new Number(NaN);
				arg.none = true;
			}

			if ($0.startsWith("/")) {
				// It's alpha
				arg = arg instanceof Number ? arg : new Number(arg);
				arg.alpha = true;
			}

			if (typeof arg === "object" && arg instanceof Number) {
				arg.raw = rawArg;
			}

			args.push(arg);
		});

		return {
			name: parts[1].toLowerCase(),
			rawName: parts[1],
			rawArgs: parts[2],
			// An argument could be (as of css-color-4):
			// a number, percentage, degrees (hue), ident (in color())
			args,
		};
	}
}

function last (arr) {
	return arr[arr.length - 1];
}

function interpolate (start, end, p) {
	if (isNaN(start)) {
		return end;
	}

	if (isNaN(end)) {
		return start;
	}

	return start + (end - start) * p;
}

function interpolateInv (start, end, value) {
	return (value - start) / (end - start);
}

function mapRange (from, to, value) {
	return interpolate(to[0], to[1], interpolateInv(from[0], from[1], value));
}

function parseCoordGrammar (coordGrammars) {
	return coordGrammars.map(coordGrammar => {
		return coordGrammar.split("|").map(type => {
			type = type.trim();
			let range = type.match(/^(<[a-z]+>)\[(-?[.\d]+),\s*(-?[.\d]+)\]?$/);

			if (range) {
				let ret = new String(range[1]);
				ret.range = [+range[2], +range[3]];
				return ret;
			}

			return type;
		});
	});
}

/**
 * Clamp value between the minimum and maximum
 * @param {number} min minimum value to return
 * @param {number} val the value to return if it is between min and max
 * @param {number} max maximum value to return
 * @returns number
 */
function clamp (min, val, max) {
	return Math.max(Math.min(max, val), min);
}

/**
 * Copy sign of one value to another.
 * @param {number} - to number to copy sign to
 * @param {number} - from number to copy sign from
 * @returns number
 */
function copySign (to, from) {
	return Math.sign(to) === Math.sign(from) ? to : -to;
}

/**
 * Perform pow on a signed number and copy sign to result
 * @param {number} - base the base number
 * @param {number} - exp the exponent
 * @returns number
 */
function spow (base, exp) {
	return copySign(Math.abs(base) ** exp, base);
}

/**
 * Perform a divide, but return zero if the numerator is zero
 * @param {number} n - the numerator
 * @param {number} d - the denominator
 * @returns number
 */
function zdiv (n, d) {
	return (d === 0) ? 0 : n / d;
}

/**
 * Perform a bisect on a sorted list and locate the insertion point for
 * a value in arr to maintain sorted order.
 * @param {number[]} arr - array of sorted numbers
 * @param {number} value - value to find insertion point for
 * @param {number} lo - used to specify a the low end of a subset of the list
 * @param {number} hi - used to specify a the high end of a subset of the list
 * @returns number
 */
function bisectLeft (arr, value, lo = 0, hi = arr.length) {
	while (lo < hi) {
		const mid = (lo + hi) >> 1;
		if (arr[mid] < value) {
			lo = mid + 1;
		}
		else {
			hi = mid;
		}
	}
	return lo;
}

var util = /*#__PURE__*/Object.freeze({
	__proto__: null,
	bisectLeft: bisectLeft,
	clamp: clamp,
	copySign: copySign,
	interpolate: interpolate,
	interpolateInv: interpolateInv,
	isNone: isNone,
	isString: isString,
	last: last,
	mapRange: mapRange,
	multiplyMatrices: multiplyMatrices,
	parseCoordGrammar: parseCoordGrammar,
	parseFunction: parseFunction,
	serializeNumber: serializeNumber,
	skipNone: skipNone,
	spow: spow,
	toPrecision: toPrecision,
	type: type,
	zdiv: zdiv
});

/**
 * A class for adding deep extensibility to any piece of JS code
 */
class Hooks {
	add (name, callback, first) {
		if (typeof arguments[0] != "string") {
			// Multiple hooks
			for (var name in arguments[0]) {
				this.add(name, arguments[0][name], arguments[1]);
			}

			return;
		}

		(Array.isArray(name) ? name : [name]).forEach(function (name) {
			this[name] = this[name] || [];

			if (callback) {
				this[name][first ? "unshift" : "push"](callback);
			}
		}, this);
	}

	run (name, env) {
		this[name] = this[name] || [];
		this[name].forEach(function (callback) {
			callback.call(env && env.context ? env.context : env, env);
		});
	}
}

/**
 * The instance of {@link Hooks} used throughout Color.js
 */
const hooks = new Hooks();

// Global defaults one may want to configure
var defaults = {
	gamut_mapping: "css",
	precision: 5,
	deltaE: "76", // Default deltaE method
	verbose: globalThis?.process?.env?.NODE_ENV?.toLowerCase() !== "test",
	warn: function warn (msg) {
		if (this.verbose) {
			globalThis?.console?.warn?.(msg);
		}
	},
};

const WHITES = {
	// for compatibility, the four-digit chromaticity-derived ones everyone else uses
	D50: [0.3457 / 0.3585, 1.00000, (1.0 - 0.3457 - 0.3585) / 0.3585],
	D65: [0.3127 / 0.3290, 1.00000, (1.0 - 0.3127 - 0.3290) / 0.3290],
};

function getWhite (name) {
	if (Array.isArray(name)) {
		return name;
	}

	return WHITES[name];
}

// Adapt XYZ from white point W1 to W2
function adapt$2 (W1, W2, XYZ, options = {}) {
	W1 = getWhite(W1);
	W2 = getWhite(W2);

	if (!W1 || !W2) {
		throw new TypeError(`Missing white point to convert ${!W1 ? "from" : ""}${!W1 && !W2 ? "/" : ""}${!W2 ? "to" : ""}`);
	}

	if (W1 === W2) {
		// Same whitepoints, no conversion needed
		return XYZ;
	}

	let env = {W1, W2, XYZ, options};

	hooks.run("chromatic-adaptation-start", env);

	if (!env.M) {
		if (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) {
			env.M = [
				[ 1.0479297925449969, 0.022946870601609652, -0.05019226628920524 ],
				[ 0.02962780877005599, 0.9904344267538799, -0.017073799063418826 ],
				[ -0.009243040646204504, 0.015055191490298152, 0.7518742814281371 ],
			];
		}
		else if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) {

			env.M = [
				[ 0.955473421488075, -0.02309845494876471, 0.06325924320057072 ],
				[ -0.0283697093338637, 1.0099953980813041, 0.021041441191917323 ],
				[ 0.012314014864481998, -0.020507649298898964, 1.330365926242124 ],
			];
		}
	}

	hooks.run("chromatic-adaptation-end", env);

	if (env.M) {
		return multiplyMatrices(env.M, env.XYZ);
	}
	else {
		throw new TypeError("Only Bradford CAT with white points D50 and D65 supported for now.");
	}
}

const noneTypes = new Set(["<number>", "<percentage>", "<angle>"]);

/**
 * Validates the coordinates of a color against a format's coord grammar and
 * maps the coordinates to the range or refRange of the coordinates.
 * @param {ColorSpace} space - Colorspace the coords are in
 * @param {object} format - the format object to validate against
 * @param {string} name - the name of the color function. e.g. "oklab" or "color"
 * @returns {object[]} - an array of type metadata for each coordinate
 */
function coerceCoords (space, format, name, coords) {
	let types = Object.entries(space.coords).map(([id, coordMeta], i) => {
		let coordGrammar = format.coordGrammar[i];
		let arg = coords[i];
		let providedType = arg?.type;

		// Find grammar alternative that matches the provided type
		// Non-strict equals is intentional because we are comparing w/ string objects
		let type;
		if (arg.none) {
			type = coordGrammar.find(c => noneTypes.has(c));
		}
		else {
			type = coordGrammar.find(c => c == providedType);
		}

		// Check that each coord conforms to its grammar
		if (!type) {
			// Type does not exist in the grammar, throw
			let coordName = coordMeta.name || id;
			throw new TypeError(`${providedType ?? arg.raw} not allowed for ${coordName} in ${name}()`);
		}

		let fromRange = type.range;

		if (providedType === "<percentage>") {
			fromRange ||= [0, 1];
		}

		let toRange = coordMeta.range || coordMeta.refRange;

		if (fromRange && toRange) {
			coords[i] = mapRange(fromRange, toRange, coords[i]);
		}

		return type;
	});

	return types;
}


/**
 * Convert a CSS Color string to a color object
 * @param {string} str
 * @param {object} [options]
 * @param {object} [options.meta] - Object for additional information about the parsing
 * @returns {Color}
 */
function parse (str, {meta} = {}) {
	let env = {"str": String(str)?.trim()};
	hooks.run("parse-start", env);

	if (env.color) {
		return env.color;
	}

	env.parsed = parseFunction(env.str);

	if (env.parsed) {
		// Is a functional syntax
		let name = env.parsed.name;

		if (name === "color") {
			// color() function
			let id = env.parsed.args.shift();
			// Check against both <dashed-ident> and <ident> versions
			let alternateId = id.startsWith("--") ? id.substring(2) : `--${id}`;
			let ids = [id, alternateId];
			let alpha = env.parsed.rawArgs.indexOf("/") > 0 ? env.parsed.args.pop() : 1;

			for (let space of ColorSpace.all) {
				let colorSpec = space.getFormat("color");

				if (colorSpec) {
					if (ids.includes(colorSpec.id) || colorSpec.ids?.filter((specId) => ids.includes(specId)).length) {
						// From https://drafts.csswg.org/css-color-4/#color-function
						// If more <number>s or <percentage>s are provided than parameters that the colorspace takes, the excess <number>s at the end are ignored.
						// If less <number>s or <percentage>s are provided than parameters that the colorspace takes, the missing parameters default to 0. (This is particularly convenient for multichannel printers where the additional inks are spot colors or varnishes that most colors on the page won’t use.)
						const coords = Object.keys(space.coords).map((_, i) => env.parsed.args[i] || 0);

						let types;

						if (colorSpec.coordGrammar) {
							types = coerceCoords(space, colorSpec, "color", coords);
						}

						if (meta) {
							Object.assign(meta, {formatId: "color", types});
						}

						if (colorSpec.id.startsWith("--") && !id.startsWith("--")) {
							defaults.warn(`${space.name} is a non-standard space and not currently supported in the CSS spec. ` +
							              `Use prefixed color(${colorSpec.id}) instead of color(${id}).`);
						}
						if (id.startsWith("--") && !colorSpec.id.startsWith("--")) {
							defaults.warn(`${space.name} is a standard space and supported in the CSS spec. ` +
							              `Use color(${colorSpec.id}) instead of prefixed color(${id}).`);
						}

						return {spaceId: space.id, coords, alpha};
					}
				}
			}

			// Not found
			let didYouMean = "";
			let registryId = id in ColorSpace.registry ? id : alternateId;
			if (registryId in ColorSpace.registry) {
				// Used color space id instead of color() id, these are often different
				let cssId = ColorSpace.registry[registryId].formats?.color?.id;

				if (cssId) {
					didYouMean = `Did you mean color(${cssId})?`;
				}
			}

			throw new TypeError(`Cannot parse color(${id}). ` + (didYouMean || "Missing a plugin?"));
		}
		else {
			for (let space of ColorSpace.all) {
				// color space specific function
				let format = space.getFormat(name);
				if (format && format.type === "function") {
					let alpha = 1;

					if (format.lastAlpha || last(env.parsed.args).alpha) {
						alpha = env.parsed.args.pop();
					}

					let coords = env.parsed.args;

					let types;

					if (format.coordGrammar) {
						types = coerceCoords(space, format, name, coords);
					}

					if (meta) {
						Object.assign(meta, {formatId: format.name, types});
					}

					return {
						spaceId: space.id,
						coords, alpha,
					};
				}
			}
		}
	}
	else {
		// Custom, colorspace-specific format
		for (let space of ColorSpace.all) {
			for (let formatId in space.formats) {
				let format = space.formats[formatId];

				if (format.type !== "custom") {
					continue;
				}

				if (format.test && !format.test(env.str)) {
					continue;
				}

				let color = format.parse(env.str);

				if (color) {
					color.alpha ??= 1;

					if (meta) {
						meta.formatId = formatId;
					}

					return color;
				}
			}
		}
	}


	// If we're here, we couldn't parse
	throw new TypeError(`Could not parse ${str} as a color. Missing a plugin?`);
}

/**
 * Resolves a color reference (object or string) to a plain color object
 * @param {Color | {space, coords, alpha} | string | Array<Color | {space, coords, alpha} | string> } color
 * @returns {{space, coords, alpha} | Array<{space, coords, alpha}}>
 */
function getColor (color) {
	if (Array.isArray(color)) {
		return color.map(getColor);
	}

	if (!color) {
		throw new TypeError("Empty color reference");
	}

	if (isString(color)) {
		color = parse(color);
	}

	// Object fixup
	let space = color.space || color.spaceId;

	if (!(space instanceof ColorSpace)) {
		// Convert string id to color space object
		color.space = ColorSpace.get(space);
	}

	if (color.alpha === undefined) {
		color.alpha = 1;
	}

	return color;
}

const ε$7 = .000075;

/**
 * Class to represent a color space
 */
class ColorSpace {
	constructor (options) {
		this.id = options.id;
		this.name = options.name;
		this.base = options.base ? ColorSpace.get(options.base) : null;
		this.aliases = options.aliases;

		if (this.base) {
			this.fromBase = options.fromBase;
			this.toBase = options.toBase;
		}

		// Coordinate metadata

		let coords = options.coords ?? this.base.coords;

		for (let name in coords) {
			if (!("name" in coords[name])) {
				coords[name].name = name;
			}
		}
		this.coords = coords;

		// White point

		let white = options.white ?? this.base.white ?? "D65";
		this.white = getWhite(white);

		// Sort out formats

		this.formats = options.formats ?? {};

		for (let name in this.formats) {
			let format = this.formats[name];
			format.type ||= "function";
			format.name ||= name;
		}

		if (!this.formats.color?.id) {
			this.formats.color = {
				...this.formats.color ?? {},
				id: options.cssId || this.id,
			};
		}

		// Gamut space

		if (options.gamutSpace) {
			// Gamut space explicitly specified
			this.gamutSpace = options.gamutSpace === "self" ? this : ColorSpace.get(options.gamutSpace);
		}
		else {
			// No gamut space specified, calculate a sensible default
			if (this.isPolar) {
				// Do not check gamut through polar coordinates
				this.gamutSpace = this.base;
			}
			else {
				this.gamutSpace =  this;
			}
		}

		// Optimize inGamut for unbounded spaces
		if (this.gamutSpace.isUnbounded) {
			this.inGamut = (coords, options) => {
				return true;
			};
		}

		// Other stuff
		this.referred = options.referred;

		// Compute ancestors and store them, since they will never change
		Object.defineProperty(this, "path", {
			value: getPath(this).reverse(),
			writable: false,
			enumerable: true,
			configurable: true,
		});

		hooks.run("colorspace-init-end", this);
	}

	inGamut (coords, {epsilon = ε$7} = {}) {
		if (!this.equals(this.gamutSpace)) {
			coords = this.to(this.gamutSpace, coords);
			return this.gamutSpace.inGamut(coords, {epsilon});
		}

		let coordMeta = Object.values(this.coords);

		return coords.every((c, i) => {
			let meta = coordMeta[i];

			if (meta.type !== "angle" && meta.range) {
				if (Number.isNaN(c)) {
					// NaN is always in gamut
					return true;
				}

				let [min, max] = meta.range;
				return (min === undefined || c >= min - epsilon)
				    && (max === undefined || c <= max + epsilon);
			}

			return true;
		});
	}

	get isUnbounded () {
		return Object.values(this.coords).every(coord => !("range" in coord));
	}

	get cssId () {
		return this.formats?.color?.id || this.id;
	}

	get isPolar () {
		for (let id in this.coords) {
			if (this.coords[id].type === "angle") {
				return true;
			}
		}

		return false;
	}

	getFormat (format) {
		if (typeof format === "object") {
			format = processFormat(format, this);
			return format;
		}

		let ret;
		if (format === "default") {
			// Get first format
			ret = Object.values(this.formats)[0];
		}
		else {
			ret = this.formats[format];
		}

		if (ret) {
			ret = processFormat(ret, this);
			return ret;
		}

		return null;
	}

	/**
	 * Check if this color space is the same as another color space reference.
	 * Allows proxying color space objects and comparing color spaces with ids.
	 * @param {string | ColorSpace} space ColorSpace object or id to compare to
	 * @returns {boolean}
	 */
	equals (space) {
		if (!space) {
			return false;
		}

		return this === space || this.id === space || this.id === space.id;
	}

	to (space, coords) {
		if (arguments.length === 1) {
			const color = getColor(space);
			[space, coords] = [color.space, color.coords];
		}

		space = ColorSpace.get(space);

		if (this.equals(space)) {
			// Same space, no change needed
			return coords;
		}

		// Convert NaN to 0, which seems to be valid in every coordinate of every color space
		coords = coords.map(c => Number.isNaN(c) ? 0 : c);

		// Find connection space = lowest common ancestor in the base tree
		let myPath = this.path;
		let otherPath = space.path;

		let connectionSpace, connectionSpaceIndex;

		for (let i = 0; i < myPath.length; i++) {
			if (myPath[i].equals(otherPath[i])) {
				connectionSpace = myPath[i];
				connectionSpaceIndex = i;
			}
			else {
				break;
			}
		}

		if (!connectionSpace) {
			// This should never happen
			throw new Error(`Cannot convert between color spaces ${this} and ${space}: no connection space was found`);
		}

		// Go up from current space to connection space
		for (let i = myPath.length - 1; i > connectionSpaceIndex; i--) {
			coords = myPath[i].toBase(coords);
		}

		// Go down from connection space to target space
		for (let i = connectionSpaceIndex + 1; i < otherPath.length; i++) {
			coords = otherPath[i].fromBase(coords);
		}

		return coords;
	}

	from (space, coords) {
		if (arguments.length === 1) {
			const color = getColor(space);
			[space, coords] = [color.space, color.coords];
		}

		space = ColorSpace.get(space);

		return space.to(this, coords);
	}

	toString () {
		return `${this.name} (${this.id})`;
	}

	getMinCoords () {
		let ret = [];

		for (let id in this.coords) {
			let meta = this.coords[id];
			let range = meta.range || meta.refRange;
			ret.push(range?.min ?? 0);
		}

		return ret;
	}

	static registry = {};

	// Returns array of unique color spaces
	static get all () {
		return [...new Set(Object.values(ColorSpace.registry))];
	}

	static register (id, space) {
		if (arguments.length === 1) {
			space = arguments[0];
			id = space.id;
		}

		space = this.get(space);

		if (this.registry[id] && this.registry[id] !== space) {
			throw new Error(`Duplicate color space registration: '${id}'`);
		}
		this.registry[id] = space;

		// Register aliases when called without an explicit ID.
		if (arguments.length === 1 && space.aliases) {
			for (let alias of space.aliases) {
				this.register(alias, space);
			}
		}

		return space;
	}

	/**
	 * Lookup ColorSpace object by name
	 * @param {ColorSpace | string} name
	 */
	static get (space, ...alternatives) {
		if (!space || space instanceof ColorSpace) {
			return space;
		}

		let argType = type(space);

		if (argType === "string") {
			// It's a color space id
			let ret = ColorSpace.registry[space.toLowerCase()];

			if (!ret) {
				throw new TypeError(`No color space found with id = "${space}"`);
			}

			return ret;
		}

		if (alternatives.length) {
			return ColorSpace.get(...alternatives);
		}

		throw new TypeError(`${space} is not a valid color space`);
	}

	/**
	 * Get metadata about a coordinate of a color space
	 *
	 * @static
	 * @param {Array | string} ref
	 * @param {ColorSpace | string} [workingSpace]
	 * @return {Object}
	 */
	static resolveCoord (ref, workingSpace) {
		let coordType = type(ref);
		let space, coord;

		if (coordType === "string") {
			if (ref.includes(".")) {
				// Absolute coordinate
				[space, coord] = ref.split(".");
			}
			else {
				// Relative coordinate
				[space, coord] = [, ref];
			}
		}
		else if (Array.isArray(ref)) {
			[space, coord] = ref;
		}
		else {
			// Object
			space = ref.space;
			coord = ref.coordId;
		}

		space = ColorSpace.get(space);

		if (!space) {
			space = workingSpace;
		}

		if (!space) {
			throw new TypeError(`Cannot resolve coordinate reference ${ref}: No color space specified and relative references are not allowed here`);
		}

		coordType = type(coord);

		if (coordType === "number" || coordType === "string" && coord >= 0) {
			// Resolve numerical coord
			let meta = Object.entries(space.coords)[coord];

			if (meta) {
				return {space, id: meta[0], index: coord, ...meta[1]};
			}
		}

		space = ColorSpace.get(space);

		let normalizedCoord = coord.toLowerCase();

		let i = 0;
		for (let id in space.coords) {
			let meta = space.coords[id];

			if (id.toLowerCase() === normalizedCoord || meta.name?.toLowerCase() === normalizedCoord) {
				return {space, id, index: i, ...meta};
			}

			i++;
		}

		throw new TypeError(`No "${coord}" coordinate found in ${space.name}. Its coordinates are: ${Object.keys(space.coords).join(", ")}`);
	}

	static DEFAULT_FORMAT = {
		type: "functions",
		name: "color",
	};
}

function getPath (space) {
	let ret = [space];

	for (let s = space; s = s.base;) {
		ret.push(s);
	}

	return ret;
}

function processFormat (format, {coords} = {}) {
	if (format.coords && !format.coordGrammar) {
		format.type ||= "function";
		format.name ||= "color";

		// Format has not been processed
		format.coordGrammar = parseCoordGrammar(format.coords);

		let coordFormats = Object.entries(coords).map(([id, coordMeta], i) => {
			// Preferred format for each coord is the first one
			let outputType = format.coordGrammar[i][0];

			let fromRange = coordMeta.range || coordMeta.refRange;
			let toRange = outputType.range, suffix = "";

			// Non-strict equals intentional since outputType could be a string object
			if (outputType == "<percentage>") {
				toRange = [0, 100];
				suffix = "%";
			}
			else if (outputType == "<angle>") {
				suffix = "deg";
			}

			return  {fromRange, toRange, suffix};
		});

		format.serializeCoords = (coords, precision) => {
			return coords.map((c, i) => {
				let {fromRange, toRange, suffix} = coordFormats[i];

				if (fromRange && toRange) {
					c = mapRange(fromRange, toRange, c);
				}

				c = serializeNumber(c, {precision, unit: suffix});

				return c;
			});
		};
	}

	return format;
}

var xyz_d65 = new ColorSpace({
	id: "xyz-d65",
	name: "XYZ D65",
	coords: {
		x: {name: "X"},
		y: {name: "Y"},
		z: {name: "Z"},
	},
	white: "D65",
	formats: {
		color: {
			ids: ["xyz-d65", "xyz"],
		},
	},
	aliases: ["xyz"],
});

/**
 * Convenience class for RGB color spaces
 * @extends {ColorSpace}
 */
class RGBColorSpace extends ColorSpace {
	/**
	 * Creates a new RGB ColorSpace.
	 * If coords are not specified, they will use the default RGB coords.
	 * Instead of `fromBase()` and `toBase()` functions,
	 * you can specify to/from XYZ matrices and have `toBase()` and `fromBase()` automatically generated.
	 * @param {*} options - Same options as {@link ColorSpace} plus:
	 * @param {number[][]} options.toXYZ_M - Matrix to convert to XYZ
	 * @param {number[][]} options.fromXYZ_M - Matrix to convert from XYZ
	 */
	constructor (options) {
		if (!options.coords) {
			options.coords = {
				r: {
					range: [0, 1],
					name: "Red",
				},
				g: {
					range: [0, 1],
					name: "Green",
				},
				b: {
					range: [0, 1],
					name: "Blue",
				},
			};
		}

		if (!options.base) {
			options.base = xyz_d65;
		}

		if (options.toXYZ_M && options.fromXYZ_M) {
			options.toBase ??= rgb => {
				let xyz = multiplyMatrices(options.toXYZ_M, rgb);

				if (this.white !== this.base.white) {
					// Perform chromatic adaptation
					xyz = adapt$2(this.white, this.base.white, xyz);
				}

				return xyz;
			};

			options.fromBase ??= xyz => {
				xyz = adapt$2(this.base.white, this.white, xyz);
				return multiplyMatrices(options.fromXYZ_M, xyz);
			};
		}

		options.referred ??= "display";

		super(options);
	}
}

/**
 * Get the coordinates of a color in any color space
 * @param {Color} color
 * @param {string | ColorSpace} [space = color.space] The color space to convert to. Defaults to the color's current space
 * @returns {number[]} The color coordinates in the given color space
 */
function getAll (color, space) {
	color = getColor(color);

	if (!space || color.space.equals(space)) {
		// No conversion needed
		return color.coords.slice();
	}

	space = ColorSpace.get(space);
	return space.from(color);
}

function get (color, prop) {
	color = getColor(color);

	let {space, index} = ColorSpace.resolveCoord(prop, color.space);
	let coords = getAll(color, space);
	return coords[index];
}

function setAll (color, space, coords) {
	color = getColor(color);

	space = ColorSpace.get(space);
	color.coords = space.to(color.space, coords);
	return color;
}

setAll.returns = "color";

// Set properties and return current instance
function set (color, prop, value) {
	color = getColor(color);

	if (arguments.length === 2 && type(arguments[1]) === "object") {
		// Argument is an object literal
		let object = arguments[1];
		for (let p in object) {
			set(color, p, object[p]);
		}
	}
	else {
		if (typeof value === "function") {
			value = value(get(color, prop));
		}

		let {space, index} = ColorSpace.resolveCoord(prop, color.space);
		let coords = getAll(color, space);
		coords[index] = value;
		setAll(color, space, coords);
	}

	return color;
}

set.returns = "color";

var XYZ_D50 = new ColorSpace({
	id: "xyz-d50",
	name: "XYZ D50",
	white: "D50",
	base: xyz_d65,
	fromBase: coords => adapt$2(xyz_d65.white, "D50", coords),
	toBase: coords => adapt$2("D50", xyz_d65.white, coords),
});

// κ * ε  = 2^3 = 8
const ε$6 = 216 / 24389;  // 6^3/29^3 == (24/116)^3
const ε3$1 = 24 / 116;
const κ$4 = 24389 / 27;   // 29^3/3^3

let white$4 = WHITES.D50;

var lab = new ColorSpace({
	id: "lab",
	name: "Lab",
	coords: {
		l: {
			refRange: [0, 100],
			name: "Lightness",
		},
		a: {
			refRange: [-125, 125],
		},
		b: {
			refRange: [-125, 125],
		},
	},

	// Assuming XYZ is relative to D50, convert to CIE Lab
	// from CIE standard, which now defines these as a rational fraction
	white: white$4,

	base: XYZ_D50,
	// Convert D50-adapted XYX to Lab
	//  CIE 15.3:2004 section 8.2.1.1
	fromBase (XYZ) {
		// compute xyz, which is XYZ scaled relative to reference white
		let xyz = XYZ.map((value, i) => value / white$4[i]);

		// now compute f
		let f = xyz.map(value => value > ε$6 ? Math.cbrt(value) : (κ$4 * value + 16) / 116);

		return [
			(116 * f[1]) - 16,   // L
			500 * (f[0] - f[1]), // a
			200 * (f[1] - f[2]),  // b
		];
	},
	// Convert Lab to D50-adapted XYZ
	// Same result as CIE 15.3:2004 Appendix D although the derivation is different
	// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
	toBase (Lab) {
		// compute f, starting with the luminance-related term
		let f = [];
		f[1] = (Lab[0] + 16) / 116;
		f[0] = Lab[1] / 500 + f[1];
		f[2] = f[1] - Lab[2] / 200;

		// compute xyz
		let xyz = [
			f[0]   > ε3$1 ? Math.pow(f[0], 3)                : (116 * f[0] - 16) / κ$4,
			Lab[0] > 8  ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / κ$4,
			f[2]   > ε3$1 ? Math.pow(f[2], 3)                : (116 * f[2] - 16) / κ$4,
		];

		// Compute XYZ by scaling xyz by reference white
		return xyz.map((value, i) => value * white$4[i]);
	},

	formats: {
		"lab": {
			coords: ["<number> | <percentage>", "<number> | <percentage>[-1,1]", "<number> | <percentage>[-1,1]"],
		},
	},
});

function constrain (angle) {
	return ((angle % 360) + 360) % 360;
}

function adjust (arc, angles) {
	if (arc === "raw") {
		return angles;
	}

	let [a1, a2] = angles.map(constrain);

	let angleDiff = a2 - a1;

	if (arc === "increasing") {
		if (angleDiff < 0) {
			a2 += 360;
		}
	}
	else if (arc === "decreasing") {
		if (angleDiff > 0) {
			a1 += 360;
		}
	}
	else if (arc === "longer") {
		if (-180 < angleDiff && angleDiff < 180) {
			if (angleDiff > 0) {
				a1 += 360;
			}
			else {
				a2 += 360;
			}
		}
	}
	else if (arc === "shorter") {
		if (angleDiff > 180) {
			a1 += 360;
		}
		else if (angleDiff < -180) {
			a2 += 360;
		}
	}

	return [a1, a2];
}

var lch = new ColorSpace({
	id: "lch",
	name: "LCH",
	coords: {
		l: {
			refRange: [0, 100],
			name: "Lightness",
		},
		c: {
			refRange: [0, 150],
			name: "Chroma",
		},
		h: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
	},

	base: lab,
	fromBase (Lab) {
		// Convert to polar form
		let [L, a, b] = Lab;
		let hue;
		const ε = 0.02;

		if (Math.abs(a) < ε && Math.abs(b) < ε) {
			hue = NaN;
		}
		else {
			hue = Math.atan2(b, a) * 180 / Math.PI;
		}

		return [
			L, // L is still L
			Math.sqrt(a ** 2 + b ** 2), // Chroma
			constrain(hue), // Hue, in degrees [0 to 360)
		];
	},
	toBase (LCH) {
		// Convert from polar form
		let [Lightness, Chroma, Hue] = LCH;
		// Clamp any negative Chroma
		if (Chroma < 0) {
			Chroma = 0;
		}
		// Deal with NaN Hue
		if (isNaN(Hue)) {
			Hue = 0;
		}
		return [
			Lightness, // L is still L
			Chroma * Math.cos(Hue * Math.PI / 180), // a
			Chroma * Math.sin(Hue * Math.PI / 180),  // b
		];
	},

	formats: {
		"lch": {
			coords: ["<number> | <percentage>", "<number> | <percentage>", "<number> | <angle>"],
		},
	},
});

// deltaE2000 is a statistically significant improvement
// and is recommended by the CIE and Idealliance
// especially for color differences less than 10 deltaE76
// but is wicked complicated
// and many implementations have small errors!
// DeltaE2000 is also discontinuous; in case this
// matters to you, use deltaECMC instead.

const Gfactor = 25 ** 7;
const π$1 = Math.PI;
const r2d = 180 / π$1;
const d2r$1 = π$1 / 180;

function pow7 (x) {
	// Faster than x ** 7 or Math.pow(x, 7)

	const x2 = x * x;
	const x7 = x2 * x2 * x2 * x;

	return x7;
}

function deltaE2000 (color, sample, {kL = 1, kC = 1, kH = 1} = {}) {
	[color, sample] = getColor([color, sample]);

	// Given this color as the reference
	// and the function parameter as the sample,
	// calculate deltaE 2000.

	// This implementation assumes the parametric
	// weighting factors kL, kC and kH
	// for the influence of viewing conditions
	// are all 1, as sadly seems typical.
	// kL should be increased for lightness texture or noise
	// and kC increased for chroma noise

	let [L1, a1, b1] = lab.from(color);
	let C1 = lch.from(lab, [L1, a1, b1])[1];
	let [L2, a2, b2] = lab.from(sample);
	let C2 = lch.from(lab, [L2, a2, b2])[1];

	// Check for negative Chroma,
	// which might happen through
	// direct user input of LCH values

	if (C1 < 0) {
		C1 = 0;
	}
	if (C2 < 0) {
		C2 = 0;
	}

	let Cbar = (C1 + C2) / 2; // mean Chroma

	// calculate a-axis asymmetry factor from mean Chroma
	// this turns JND ellipses for near-neutral colors back into circles
	let C7 = pow7(Cbar);

	let G = 0.5 * (1 - Math.sqrt(C7 / (C7 + Gfactor)));

	// scale a axes by asymmetry factor
	// this by the way is why there is no Lab2000 colorspace
	let adash1 = (1 + G) * a1;
	let adash2 = (1 + G) * a2;

	// calculate new Chroma from scaled a and original b axes
	let Cdash1 = Math.sqrt(adash1 ** 2 + b1 ** 2);
	let Cdash2 = Math.sqrt(adash2 ** 2 + b2 ** 2);

	// calculate new hues, with zero hue for true neutrals
	// and in degrees, not radians

	let h1 = (adash1 === 0 && b1 === 0) ? 0 : Math.atan2(b1, adash1);
	let h2 = (adash2 === 0 && b2 === 0) ? 0 : Math.atan2(b2, adash2);

	if (h1 < 0) {
		h1 += 2 * π$1;
	}
	if (h2 < 0) {
		h2 += 2 * π$1;
	}

	h1 *= r2d;
	h2 *= r2d;

	// Lightness and Chroma differences; sign matters
	let ΔL = L2 - L1;
	let ΔC = Cdash2 - Cdash1;

	// Hue difference, getting the sign correct
	let hdiff = h2 - h1;
	let hsum = h1 + h2;
	let habs = Math.abs(hdiff);
	let Δh;

	if (Cdash1 * Cdash2 === 0) {
		Δh = 0;
	}
	else if (habs <= 180) {
		Δh = hdiff;
	}
	else if (hdiff > 180) {
		Δh = hdiff - 360;
	}
	else if (hdiff < -180) {
		Δh = hdiff + 360;
	}
	else {
		defaults.warn("the unthinkable has happened");
	}

	// weighted Hue difference, more for larger Chroma
	let ΔH = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(Δh * d2r$1 / 2);

	// calculate mean Lightness and Chroma
	let Ldash = (L1 + L2) / 2;
	let Cdash = (Cdash1 + Cdash2) / 2;
	let Cdash7 = pow7(Cdash);

	// Compensate for non-linearity in the blue region of Lab.
	// Four possibilities for hue weighting factor,
	// depending on the angles, to get the correct sign
	let hdash;
	if (Cdash1 * Cdash2 === 0) {
		hdash = hsum;   // which should be zero
	}
	else if (habs <= 180) {
		hdash = hsum / 2;
	}
	else if (hsum < 360) {
		hdash = (hsum + 360) / 2;
	}
	else {
		hdash = (hsum - 360) / 2;
	}

	// positional corrections to the lack of uniformity of CIELAB
	// These are all trying to make JND ellipsoids more like spheres

	// SL Lightness crispening factor
	// a background with L=50 is assumed
	let lsq = (Ldash - 50) ** 2;
	let SL = 1 + ((0.015 * lsq) / Math.sqrt(20 + lsq));

	// SC Chroma factor, similar to those in CMC and deltaE 94 formulae
	let SC = 1 + 0.045 * Cdash;

	// Cross term T for blue non-linearity
	let T = 1;
	T -= (0.17 * Math.cos((     hdash - 30)  * d2r$1));
	T += (0.24 * Math.cos(  2 * hdash        * d2r$1));
	T += (0.32 * Math.cos(((3 * hdash) + 6)  * d2r$1));
	T -= (0.20 * Math.cos(((4 * hdash) - 63) * d2r$1));

	// SH Hue factor depends on Chroma,
	// as well as adjusted hue angle like deltaE94.
	let SH = 1 + 0.015 * Cdash * T;

	// RT Hue rotation term compensates for rotation of JND ellipses
	// and Munsell constant hue lines
	// in the medium-high Chroma blue region
	// (Hue 225 to 315)
	let Δθ = 30 * Math.exp(-1 * (((hdash - 275) / 25) ** 2));
	let RC = 2 * Math.sqrt(Cdash7 / (Cdash7 + Gfactor));
	let RT = -1 * Math.sin(2 * Δθ * d2r$1) * RC;

	// Finally calculate the deltaE, term by term as root sume of squares
	let dE = (ΔL / (kL * SL)) ** 2;
	dE += (ΔC / (kC * SC)) ** 2;
	dE += (ΔH / (kH * SH)) ** 2;
	dE += RT * (ΔC / (kC * SC)) * (ΔH / (kH * SH));
	return Math.sqrt(dE);
	// Yay!!!
}

// Recalculated for consistent reference white
// see https://github.com/w3c/csswg-drafts/issues/6642#issuecomment-943521484
const XYZtoLMS_M$1 = [
	[ 0.8190224379967030, 0.3619062600528904, -0.1288737815209879 ],
	[ 0.0329836539323885, 0.9292868615863434,  0.0361446663506424 ],
	[ 0.0481771893596242, 0.2642395317527308,  0.6335478284694309 ],
];
// inverse of XYZtoLMS_M
const LMStoXYZ_M$1 = [
	[  1.2268798758459243, -0.5578149944602171,  0.2813910456659647 ],
	[ -0.0405757452148008,  1.1122868032803170, -0.0717110580655164 ],
	[ -0.0763729366746601, -0.4214933324022432,  1.5869240198367816 ],
];
const LMStoLab_M = [
	[ 0.2104542683093140,  0.7936177747023054, -0.0040720430116193 ],
	[ 1.9779985324311684, -2.4285922420485799,  0.4505937096174110 ],
	[ 0.0259040424655478,  0.7827717124575296, -0.8086757549230774 ],
];
// LMStoIab_M inverted
const LabtoLMS_M = [
	[ 1.0000000000000000,  0.3963377773761749,  0.2158037573099136 ],
	[ 1.0000000000000000, -0.1055613458156586, -0.0638541728258133 ],
	[ 1.0000000000000000, -0.0894841775298119, -1.2914855480194092 ],
];

var OKLab = new ColorSpace({
	id: "oklab",
	name: "Oklab",
	coords: {
		l: {
			refRange: [0, 1],
			name: "Lightness",
		},
		a: {
			refRange: [-0.4, 0.4],
		},
		b: {
			refRange: [-0.4, 0.4],
		},
	},

	// Note that XYZ is relative to D65
	white: "D65",
	base: xyz_d65,
	fromBase (XYZ) {
		// move to LMS cone domain
		let LMS = multiplyMatrices(XYZtoLMS_M$1, XYZ);

		// non-linearity
		let LMSg = LMS.map(val => Math.cbrt(val));

		return multiplyMatrices(LMStoLab_M, LMSg);

	},
	toBase (OKLab) {
		// move to LMS cone domain
		let LMSg = multiplyMatrices(LabtoLMS_M, OKLab);

		// restore linearity
		let LMS = LMSg.map(val => val ** 3);

		return multiplyMatrices(LMStoXYZ_M$1, LMS);
	},

	formats: {
		"oklab": {
			coords: ["<percentage> | <number>", "<number> | <percentage>[-1,1]", "<number> | <percentage>[-1,1]"],
		},
	},
});

// More accurate color-difference formulae
// than the simple 1976 Euclidean distance in CIE Lab


function deltaEOK (color, sample) {
	[color, sample] = getColor([color, sample]);

	// Given this color as the reference
	// and a sample,
	// calculate deltaEOK, term by term as root sum of squares
	let [L1, a1, b1] = OKLab.from(color);
	let [L2, a2, b2] = OKLab.from(sample);
	let ΔL = L1 - L2;
	let Δa = a1 - a2;
	let Δb = b1 - b2;
	return Math.sqrt(ΔL ** 2 + Δa ** 2 + Δb ** 2);
}

const ε$5 = .000075;

/**
 * Check if a color is in gamut of either its own or another color space
 * @return {Boolean} Is the color in gamut?
 */
function inGamut (color, space, {epsilon = ε$5} = {}) {
	color = getColor(color);

	if (!space) {
		space = color.space;
	}

	space = ColorSpace.get(space);
	let coords = color.coords;

	if (space !== color.space) {
		coords = space.from(color);
	}

	return space.inGamut(coords, {epsilon});
}

function clone (color) {
	return {
		space: color.space,
		coords: color.coords.slice(),
		alpha: color.alpha,
	};
}

/**
 * Euclidean distance of colors in an arbitrary color space
 */
function distance (color1, color2, space = "lab") {
	space = ColorSpace.get(space);

	// Assume getColor() is called on color in space.from()
	let coords1 = space.from(color1);
	let coords2 = space.from(color2);

	return Math.sqrt(coords1.reduce((acc, c1, i) => {
		let c2 = coords2[i];
		if (isNaN(c1) || isNaN(c2)) {
			return acc;
		}

		return acc + (c2 - c1) ** 2;
	}, 0));
}

function deltaE76 (color, sample) {
	// Assume getColor() is called in the distance function
	return distance(color, sample, "lab");
}

// More accurate color-difference formulae
// than the simple 1976 Euclidean distance in Lab

// CMC by the Color Measurement Committee of the
// Bradford Society of Dyeists and Colorsts, 1994.
// Uses LCH rather than Lab,
// with different weights for L, C and H differences
// A nice increase in accuracy for modest increase in complexity
const π = Math.PI;
const d2r = π / 180;

function deltaECMC (color, sample, {l = 2, c = 1} = {}) {
	[color, sample] = getColor([color, sample]);

	// Given this color as the reference
	// and a sample,
	// calculate deltaE CMC.

	// This implementation assumes the parametric
	// weighting factors l:c are 2:1
	// which is typical for non-textile uses.

	let [L1, a1, b1] = lab.from(color);
	let [, C1, H1] = lch.from(lab, [L1, a1, b1]);
	let [L2, a2, b2] = lab.from(sample);
	let C2 = lch.from(lab, [L2, a2, b2])[1];

	// let [L1, a1, b1] = color.getAll(lab);
	// let C1 = color.get("lch.c");
	// let H1 = color.get("lch.h");
	// let [L2, a2, b2] = sample.getAll(lab);
	// let C2 = sample.get("lch.c");

	// Check for negative Chroma,
	// which might happen through
	// direct user input of LCH values

	if (C1 < 0) {
		C1 = 0;
	}
	if (C2 < 0) {
		C2 = 0;
	}

	// we don't need H2 as ΔH is calculated from Δa, Δb and ΔC

	// Lightness and Chroma differences
	// These are (color - sample), unlike deltaE2000
	let ΔL = L1 - L2;
	let ΔC = C1 - C2;

	let Δa = a1 - a2;
	let Δb = b1 - b2;

	// weighted Hue difference, less for larger Chroma difference

	let H2 = (Δa ** 2) + (Δb ** 2) - (ΔC ** 2);
	// due to roundoff error it is possible that, for zero a and b,
	// ΔC > Δa + Δb is 0, resulting in attempting
	// to take the square root of a negative number

	// trying instead the equation from Industrial Color Physics
	// By Georg A. Klein

	// let ΔH = ((a1 * b2) - (a2 * b1)) / Math.sqrt(0.5 * ((C2 * C1) + (a2 * a1) + (b2 * b1)));
	// console.log({ΔH});
	// This gives the same result to 12 decimal places
	// except it sometimes NaNs when trying to root a negative number

	// let ΔH = Math.sqrt(H2); we never actually use the root, it gets squared again!!

	// positional corrections to the lack of uniformity of CIELAB
	// These are all trying to make JND ellipsoids more like spheres

	// SL Lightness crispening factor, depends entirely on L1 not L2
	let SL = 0.511;	// linear portion of the Y to L transfer function
	if (L1 >= 16) {	// cubic portion
		SL = (0.040975 * L1) / (1 + 0.01765 * L1);
	}

	// SC Chroma factor
	let SC = ((0.0638 * C1) / (1 + 0.0131 * C1)) + 0.638;

	// Cross term T for blue non-linearity
	let T;
	if (Number.isNaN(H1)) {
		H1 = 0;
	}

	if (H1 >= 164 && H1 <= 345) {
		T = 0.56 + Math.abs(0.2 * Math.cos((H1 + 168) * d2r));
	}
	else {
		T = 0.36 + Math.abs(0.4 * Math.cos((H1 + 35) * d2r));
	}
	// console.log({T});

	// SH Hue factor also depends on C1,
	let C4 = Math.pow(C1, 4);
	let F = Math.sqrt(C4 / (C4 + 1900));
	let SH = SC * ((F * T) + 1 - F);

	// Finally calculate the deltaE, term by term as root sume of squares
	let dE = (ΔL / (l * SL)) ** 2;
	dE += (ΔC / (c * SC)) ** 2;
	dE += (H2 / (SH ** 2));
	// dE += (ΔH / SH)  ** 2;
	return Math.sqrt(dE);
	// Yay!!!
}

const Yw$1 = 203;	// absolute luminance of media white

var XYZ_Abs_D65 = new ColorSpace({
// Absolute CIE XYZ, with a D65 whitepoint,
// as used in most HDR colorspaces as a starting point.
// SDR spaces are converted per BT.2048
// so that diffuse, media white is 203 cd/m²
	id: "xyz-abs-d65",
	cssId: "--xyz-abs-d65",
	name: "Absolute XYZ D65",
	coords: {
		x: {
			refRange: [0, 9504.7],
			name: "Xa",
		},
		y: {
			refRange: [0, 10000],
			name: "Ya",
		},
		z: {
			refRange: [0, 10888.3],
			name: "Za",
		},
	},

	base: xyz_d65,
	fromBase (XYZ) {
		// Make XYZ absolute, not relative to media white
		// Maximum luminance in PQ is 10,000 cd/m²
		// Relative XYZ has Y=1 for media white
		return XYZ.map (v => Math.max(v * Yw$1, 0));
	},
	toBase (AbsXYZ) {
		// Convert to media-white relative XYZ
		return AbsXYZ.map(v => Math.max(v / Yw$1, 0));
	},
});

const b$1 = 1.15;
const g = 0.66;
const n$1 = 2610 / (2 ** 14);
const ninv$1 = (2 ** 14) / 2610;
const c1$2 = 3424 / (2 ** 12);
const c2$2 = 2413 / (2 ** 7);
const c3$2 = 2392 / (2 ** 7);
const p = 1.7 * 2523 / (2 ** 5);
const pinv = (2 ** 5) / (1.7 * 2523);
const d = -0.56;
const d0 = 1.6295499532821566E-11;

const XYZtoCone_M = [
	[  0.41478972, 0.579999,  0.0146480 ],
	[ -0.2015100,  1.120649,  0.0531008 ],
	[ -0.0166008,  0.264800,  0.6684799 ],
];
// XYZtoCone_M inverted
const ConetoXYZ_M = [
	[  1.9242264357876067,  -1.0047923125953657,  0.037651404030618   ],
	[  0.35031676209499907,  0.7264811939316552, -0.06538442294808501 ],
	[ -0.09098281098284752, -0.3127282905230739,  1.5227665613052603  ],
];
const ConetoIab_M = [
	[  0.5,       0.5,       0        ],
	[  3.524000, -4.066708,  0.542708 ],
	[  0.199076,  1.096799, -1.295875 ],
];
// ConetoIab_M inverted
const IabtoCone_M = [
	[ 1,                   0.1386050432715393,   0.05804731615611886 ],
	[ 0.9999999999999999, -0.1386050432715393,  -0.05804731615611886 ],
	[ 0.9999999999999998, -0.09601924202631895, -0.8118918960560388  ],
];

var Jzazbz = new ColorSpace({
	id: "jzazbz",
	name: "Jzazbz",
	coords: {
		jz: {
			refRange: [0, 1],
			name: "Jz",
		},
		az: {
			refRange: [-0.5, 0.5],
		},
		bz: {
			refRange: [-0.5, 0.5],
		},
	},

	base: XYZ_Abs_D65,
	fromBase (XYZ) {
		// First make XYZ absolute, not relative to media white
		// Maximum luminance in PQ is 10,000 cd/m²
		// Relative XYZ has Y=1 for media white
		// BT.2048 says media white Y=203 at PQ 58

		let [ Xa, Ya, Za ] = XYZ;

		// modify X and Y
		let Xm = (b$1 * Xa) - ((b$1 - 1) * Za);
		let Ym = (g * Ya) - ((g - 1) * Xa);

		// move to LMS cone domain
		let LMS = multiplyMatrices(XYZtoCone_M, [ Xm, Ym, Za ]);

		// PQ-encode LMS
		let PQLMS = LMS.map (function (val) {
			let num = c1$2 + (c2$2 * ((val / 10000) ** n$1));
			let denom = 1 + (c3$2 * ((val / 10000) ** n$1));

			return (num / denom)  ** p;
		});

		// almost there, calculate Iz az bz
		let [ Iz, az, bz] = multiplyMatrices(ConetoIab_M, PQLMS);
		// console.log({Iz, az, bz});

		let Jz = ((1 + d) * Iz) / (1 + (d * Iz)) - d0;
		return [Jz, az, bz];
	},
	toBase (Jzazbz) {
		let [Jz, az, bz] = Jzazbz;
		let Iz = (Jz + d0) / (1 + d - d * (Jz + d0));

		// bring into LMS cone domain
		let PQLMS = multiplyMatrices(IabtoCone_M, [ Iz, az, bz ]);

		// convert from PQ-coded to linear-light
		let LMS = PQLMS.map(function (val) {
			let num = (c1$2 - (val ** pinv));
			let denom = (c3$2 * (val ** pinv)) - c2$2;
			let x = 10000 * ((num / denom) ** ninv$1);

			return (x); 	// luminance relative to diffuse white, [0, 70 or so].
		});

		// modified abs XYZ
		let [ Xm, Ym, Za ] = multiplyMatrices(ConetoXYZ_M, LMS);

		// restore standard D50 relative XYZ, relative to media white
		let Xa = (Xm + ((b$1 - 1) * Za)) / b$1;
		let Ya = (Ym + ((g - 1) * Xa)) / g;
		return [ Xa, Ya, Za ];
	},

	formats: {
		// https://drafts.csswg.org/css-color-hdr/#Jzazbz
		"color": {
			coords: ["<number> | <percentage>", "<number> | <percentage>[-1,1]", "<number> | <percentage>[-1,1]"],
		},
	},
});

var jzczhz = new ColorSpace({
	id: "jzczhz",
	name: "JzCzHz",
	coords: {
		jz: {
			refRange: [0, 1],
			name: "Jz",
		},
		cz: {
			refRange: [0, 1],
			name: "Chroma",
		},
		hz: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
	},

	base: Jzazbz,
	fromBase (jzazbz) {
		// Convert to polar form
		let [Jz, az, bz] = jzazbz;
		let hue;
		const ε = 0.0002; // chromatic components much smaller than a,b

		if (Math.abs(az) < ε && Math.abs(bz) < ε) {
			hue = NaN;
		}
		else {
			hue = Math.atan2(bz, az) * 180 / Math.PI;
		}

		return [
			Jz, // Jz is still Jz
			Math.sqrt(az ** 2 + bz ** 2), // Chroma
			constrain(hue), // Hue, in degrees [0 to 360)
		];
	},
	toBase (jzczhz) {
		// Convert from polar form
		// debugger;
		return [
			jzczhz[0], // Jz is still Jz
			jzczhz[1] * Math.cos(jzczhz[2] * Math.PI / 180), // az
			jzczhz[1] * Math.sin(jzczhz[2] * Math.PI / 180),  // bz
		];
	},
});

// More accurate color-difference formulae
// than the simple 1976 Euclidean distance in Lab

// Uses JzCzHz, which has improved perceptual uniformity
// and thus a simple Euclidean root-sum of ΔL² ΔC² ΔH²
// gives good results.

function deltaEJz (color, sample) {
	[color, sample] = getColor([color, sample]);

	// Given this color as the reference
	// and a sample,
	// calculate deltaE in JzCzHz.
	let [Jz1, Cz1, Hz1] = jzczhz.from(color);
	let [Jz2, Cz2, Hz2] = jzczhz.from(sample);

	// Lightness and Chroma differences
	// sign does not matter as they are squared.
	let ΔJ = Jz1 - Jz2;
	let ΔC = Cz1 - Cz2;

	// length of chord for ΔH
	if ((Number.isNaN(Hz1)) && (Number.isNaN(Hz2))) {
		// both undefined hues
		Hz1 = 0;
		Hz2 = 0;
	}
	else if (Number.isNaN(Hz1)) {
		// one undefined, set to the defined hue
		Hz1 = Hz2;
	}
	else if (Number.isNaN(Hz2)) {
		Hz2 = Hz1;
	}

	let Δh = Hz1 - Hz2;
	let ΔH = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin((Δh / 2) * (Math.PI / 180));

	return Math.sqrt(ΔJ ** 2 + ΔC ** 2 + ΔH ** 2);
}

const c1$1 = 3424 / 4096;
const c2$1 = 2413 / 128;
const c3$1 = 2392 / 128;
const m1$1 = 2610 / 16384;
const m2 = 2523 / 32;
const im1 = 16384 / 2610;
const im2 = 32 / 2523;

// The matrix below includes the 4% crosstalk components
// and is from the Dolby "What is ICtCp" paper"
const XYZtoLMS_M = [
	[  0.3592832590121217,  0.6976051147779502, -0.0358915932320290 ],
	[ -0.1920808463704993,  1.1004767970374321,  0.0753748658519118 ],
	[  0.0070797844607479,  0.0748396662186362,  0.8433265453898765 ],
];
// linear-light Rec.2020 to LMS, again with crosstalk
// rational terms from Jan Fröhlich,
// Encoding High Dynamic Range andWide Color Gamut Imagery, p.97
// and ITU-R BT.2124-0 p.2
/*
const Rec2020toLMS_M = [
	[ 1688 / 4096,  2146 / 4096,   262 / 4096 ],
	[  683 / 4096,  2951 / 4096,   462 / 4096 ],
	[   99 / 4096,   309 / 4096,  3688 / 4096 ]
];
*/
// this includes the Ebner LMS coefficients,
// the rotation, and the scaling to [-0.5,0.5] range
// rational terms from Fröhlich p.97
// and ITU-R BT.2124-0 pp.2-3
const LMStoIPT_M = [
	[  2048 / 4096,   2048 / 4096,       0      ],
	[  6610 / 4096, -13613 / 4096,  7003 / 4096 ],
	[ 17933 / 4096, -17390 / 4096,  -543 / 4096 ],
];

// inverted matrices, calculated from the above
const IPTtoLMS_M = [
	[ 0.9999999999999998,  0.0086090370379328,  0.1110296250030260 ],
	[ 0.9999999999999998, -0.0086090370379328, -0.1110296250030259 ],
	[ 0.9999999999999998,  0.5600313357106791, -0.3206271749873188 ],
];
/*
const LMStoRec2020_M = [
	[ 3.4375568932814012112,   -2.5072112125095058195,   0.069654319228104608382],
	[-0.79142868665644156125,   1.9838372198740089874,  -0.19240853321756742626 ],
	[-0.025646662911506476363, -0.099240248643945566751, 1.1248869115554520431  ]
];
*/
const LMStoXYZ_M = [
	[  2.0701522183894223, -1.3263473389671563,  0.2066510476294053 ],
	[  0.3647385209748072,  0.6805660249472273, -0.0453045459220347 ],
	[ -0.0497472075358123, -0.0492609666966131,  1.1880659249923042 ],
];

// Only the PQ form of ICtCp is implemented here. There is also an HLG form.
// from Dolby, "WHAT IS ICTCP?"
// https://professional.dolby.com/siteassets/pdfs/ictcp_dolbywhitepaper_v071.pdf
// and
// Dolby, "Perceptual Color Volume
// Measuring the Distinguishable Colors of HDR and WCG Displays"
// https://professional.dolby.com/siteassets/pdfs/dolby-vision-measuring-perceptual-color-volume-v7.1.pdf
var ictcp = new ColorSpace({
	id: "ictcp",
	name: "ICTCP",
	// From BT.2100-2 page 7:
	// During production, signal values are expected to exceed the
	// range E′ = [0.0 : 1.0]. This provides processing headroom and avoids
	// signal degradation during cascaded processing. Such values of E′,
	// below 0.0 or exceeding 1.0, should not be clipped during production
	// and exchange.
	// Values below 0.0 should not be clipped in reference displays (even
	// though they represent “negative” light) to allow the black level of
	// the signal (LB) to be properly set using test signals known as “PLUGE”
	coords: {
		i: {
			refRange: [0, 1],	// Constant luminance,
			name: "I",
		},
		ct: {
			refRange: [-0.5, 0.5],	// Full BT.2020 gamut in range [-0.5, 0.5]
			name: "CT",
		},
		cp: {
			refRange: [-0.5, 0.5],
			name: "CP",
		},
	},

	base: XYZ_Abs_D65,
	fromBase (XYZ) {
		// move to LMS cone domain
		let LMS = multiplyMatrices(XYZtoLMS_M, XYZ);

		return LMStoICtCp(LMS);
	},
	toBase (ICtCp) {
		let LMS = ICtCptoLMS(ICtCp);

		return multiplyMatrices(LMStoXYZ_M, LMS);
	},
});

function LMStoICtCp (LMS) {
	// apply the PQ EOTF
	// we can't ever be dividing by zero because of the "1 +" in the denominator
	let PQLMS = LMS.map (function (val) {
		let num = c1$1 + (c2$1 * ((val / 10000) ** m1$1));
		let denom = 1 + (c3$1 * ((val / 10000) ** m1$1));

		return (num / denom)  ** m2;
	});

	// LMS to IPT, with rotation for Y'C'bC'r compatibility
	return multiplyMatrices(LMStoIPT_M, PQLMS);
}

function ICtCptoLMS (ICtCp) {
	let PQLMS = multiplyMatrices(IPTtoLMS_M, ICtCp);

	// From BT.2124-0 Annex 2 Conversion 3
	let LMS = PQLMS.map (function (val) {
		let num  = Math.max((val ** im2) - c1$1, 0);
		let denom = (c2$1 - (c3$1 * (val ** im2)));
		return 10000 * ((num / denom) ** im1);
	});

	return LMS;
}

// Delta E in ICtCp space,
// which the ITU calls Delta E ITP, which is shorter
// formulae from ITU Rec. ITU-R BT.2124-0

function deltaEITP (color, sample) {
	[color, sample] = getColor([color, sample]);

	// Given this color as the reference
	// and a sample,
	// calculate deltaE in ICtCp
	// which is simply the Euclidean distance

	let [ I1, T1, P1 ] = ictcp.from(color);
	let [ I2, T2, P2 ] = ictcp.from(sample);

	// the 0.25 factor is to undo the encoding scaling in Ct
	// the 720 is so that 1 deltaE = 1 JND
	// per  ITU-R BT.2124-0 p.3

	return 720 * Math.sqrt((I1 - I2) ** 2 + (0.25 * (T1 - T2) ** 2) + (P1 - P2) ** 2);
}

const white$3 = WHITES.D65;
const adaptedCoef = 0.42;
const adaptedCoefInv = 1 / adaptedCoef;
const tau = 2 * Math.PI;

const cat16 = [
	[  0.401288,  0.650173, -0.051461 ],
	[ -0.250268,  1.204414,  0.045854 ],
	[ -0.002079,  0.048952,  0.953127 ],
];

const cat16Inv = [
	[1.8620678550872327, -1.0112546305316843, 0.14918677544445175],
	[0.38752654323613717, 0.6214474419314753, -0.008973985167612518],
	[-0.015841498849333856, -0.03412293802851557, 1.0499644368778496],
];

const m1 = [
	[460.0, 451.0, 288.0],
	[460.0, -891.0, -261.0],
	[460.0, -220.0, -6300.0],
];

const surroundMap = {
	dark: [0.8, 0.525, 0.8],
	dim: [0.9, 0.59, 0.9],
	average: [1, 0.69, 1],
};

const hueQuadMap = {
	// Red, Yellow, Green, Blue, Red
	h: [20.14, 90.00, 164.25, 237.53, 380.14],
	e: [0.8, 0.7, 1.0, 1.2, 0.8],
	H: [0.0, 100.0, 200.0, 300.0, 400.0],
};

const rad2deg = 180 / Math.PI;
const deg2rad$1 = Math.PI / 180;

function adapt$1 (coords, fl) {
	const temp = coords.map(c => {
		const x = spow(fl * Math.abs(c) * 0.01, adaptedCoef);
		return 400 * copySign(x, c) / (x + 27.13);
	});
	return temp;
}

function unadapt (adapted, fl) {
	const constant = 100 / fl * (27.13 ** adaptedCoefInv);
	return adapted.map(c => {
		const cabs = Math.abs(c);
		return copySign(constant * spow(cabs / (400 - cabs), adaptedCoefInv), c);
	});
}

function hueQuadrature (h) {
	let hp = constrain(h);
	if (hp <= hueQuadMap.h[0]) {
		hp += 360;
	}

	const i = bisectLeft(hueQuadMap.h, hp) - 1;
	const [hi, hii] = hueQuadMap.h.slice(i, i + 2);
	const [ei, eii] = hueQuadMap.e.slice(i, i + 2);
	const Hi = hueQuadMap.H[i];

	const t = (hp - hi) / ei;
	return Hi + (100 * t) / (t + (hii - hp) / eii);
}

function invHueQuadrature (H) {
	let Hp = ((H % 400 + 400) % 400);
	const i = Math.floor(0.01 * Hp);
	Hp = Hp % 100;
	const [hi, hii] = hueQuadMap.h.slice(i, i + 2);
	const [ei, eii] = hueQuadMap.e.slice(i, i + 2);

	return constrain(
		(Hp * (eii * hi - ei * hii) - 100 * hi * eii) /
		(Hp * (eii - ei) - 100 * eii),
	);
}

function environment (
	refWhite,
	adaptingLuminance,
	backgroundLuminance,
	surround,
	discounting,
) {

	const env = {};

	env.discounting = discounting;
	env.refWhite = refWhite;
	env.surround = surround;
	const xyzW = refWhite.map(c => {
		return c * 100;
	});

	// The average luminance of the environment in `cd/m^2cd/m` (a.k.a. nits)
	env.la = adaptingLuminance;
	// The relative luminance of the nearby background
	env.yb = backgroundLuminance;
	// Absolute luminance of the reference white.
	const yw = xyzW[1];

	// Cone response for reference white
	const rgbW = multiplyMatrices(cat16, xyzW);

	// Surround: dark, dim, and average
	surround = surroundMap[env.surround];
	const f = surround[0];
	env.c = surround[1];
	env.nc = surround[2];

	const k = 1 / (5 * env.la + 1);
	const k4 = k ** 4;

	// Factor of luminance level adaptation
	env.fl = (k4 * env.la + 0.1 * (1 - k4) * (1 - k4) * Math.cbrt(5 * env.la));
	env.flRoot = env.fl ** 0.25;

	env.n = env.yb / yw;
	env.z = 1.48 + Math.sqrt(env.n);
	env.nbb = 0.725 * (env.n ** -0.2);
	env.ncb = env.nbb;

	// Degree of adaptation calculating if not discounting
	// illuminant (assumed eye is fully adapted)
	const d = (discounting) ?
		1 :
		Math.max(
			Math.min(f * (1 - 1 / 3.6 * Math.exp((-env.la - 42) / 92)), 1),
			0,
		);
	env.dRgb = rgbW.map(c => {
		return interpolate(1, yw / c, d);
	});
	env.dRgbInv = env.dRgb.map(c => {
		return 1 / c;
	});

	// Achromatic response
	const rgbCW = rgbW.map((c, i) => {
		return c * env.dRgb[i];
	});
	const rgbAW = adapt$1(rgbCW, env.fl);
	env.aW = env.nbb * (2 * rgbAW[0] + rgbAW[1] + 0.05 * rgbAW[2]);

	// console.log(env);

	return env;
}

// Pre-calculate everything we can with the viewing conditions
const viewingConditions$1 = environment(
	white$3,
	64 / Math.PI * 0.2, 20,
	"average",
	false,
);

function fromCam16 (cam16, env) {

	// These check ensure one, and only one attribute for a
	// given category is provided.
	if (!((cam16.J !== undefined) ^ (cam16.Q !== undefined))) {
		throw new Error("Conversion requires one and only one: 'J' or 'Q'");
	}

	if (!((cam16.C !== undefined) ^ (cam16.M !== undefined) ^ (cam16.s !== undefined))) {
		throw new Error("Conversion requires one and only one: 'C', 'M' or 's'");
	}

	// Hue is absolutely required
	if (!((cam16.h !== undefined) ^ (cam16.H !== undefined))) {
		throw new Error("Conversion requires one and only one: 'h' or 'H'");
	}

	// Black
	if (cam16.J === 0.0 || cam16.Q === 0.0) {
		return [0.0, 0.0, 0.0];
	}

	// Break hue into Cartesian components
	let hRad = 0.0;
	if (cam16.h !== undefined) {
		hRad = constrain(cam16.h) * deg2rad$1;
	}
	else {
		hRad = invHueQuadrature(cam16.H) * deg2rad$1;
	}

	const cosh = Math.cos(hRad);
	const sinh = Math.sin(hRad);

	// Calculate `Jroot` from one of the lightness derived coordinates.
	let Jroot = 0.0;
	if (cam16.J !== undefined) {
		Jroot = spow(cam16.J, 1 / 2) * 0.1;
	}
	else if (cam16.Q !== undefined) {
		Jroot = 0.25 * env.c * cam16.Q / ((env.aW + 4) * env.flRoot);
	}

	// Calculate the `t` value from one of the chroma derived coordinates
	let alpha = 0.0;
	if (cam16.C !== undefined) {
		alpha = cam16.C / Jroot;
	}
	else if (cam16.M !== undefined) {
		alpha = (cam16.M / env.flRoot) / Jroot;
	}
	else if (cam16.s !== undefined) {
		alpha = 0.0004 * (cam16.s ** 2) * (env.aW + 4) / env.c;
	}
	const t = spow(
		alpha * Math.pow(1.64 - Math.pow(0.29, env.n), -0.73),
		10 / 9,
	);

	// Eccentricity
	const et = 0.25 * (Math.cos(hRad + 2) + 3.8);

	// Achromatic response
	const A = env.aW * spow(Jroot, 2 / env.c / env.z);

	// Calculate red-green and yellow-blue components
	const p1 = 5e4 / 13 * env.nc * env.ncb * et;
	const p2 = A / env.nbb;
	const r = (
		23 * (p2 + 0.305) *
		zdiv(t, 23 * p1 + t * (11 * cosh + 108 * sinh))
	);
	const a = r * cosh;
	const b = r * sinh;

	// Calculate back from cone response to XYZ
	const rgb_c = unadapt(
		multiplyMatrices(m1, [p2, a, b]).map(c => {
			return c * 1 / 1403;
		}),
		env.fl,
	);
	return multiplyMatrices(
		cat16Inv,
		rgb_c.map((c, i) => {
			return c * env.dRgbInv[i];
		}),
	).map(c => {
		return c / 100;
	});
}


function toCam16 (xyzd65, env) {
	// Cone response
	const xyz100 = xyzd65.map(c => {
		return c * 100;
	});
	const rgbA = adapt$1(
		multiplyMatrices(cat16, xyz100).map((c, i) => {
			return c * env.dRgb[i];
		}),
		env.fl,
	);

	// Calculate hue from red-green and yellow-blue components
	const a = rgbA[0] + (-12 * rgbA[1] + rgbA[2]) / 11;
	const b = (rgbA[0] + rgbA[1] - 2 * rgbA[2]) / 9;
	const hRad = ((Math.atan2(b, a) % tau) + tau) % tau;

	// Eccentricity
	const et = 0.25 * (Math.cos(hRad + 2) + 3.8);

	const t = (
		5e4 / 13 * env.nc * env.ncb *
		zdiv(
			et * Math.sqrt(a ** 2 + b ** 2),
			rgbA[0] + rgbA[1] + 1.05 * rgbA[2] + 0.305,
		)
	);
	const alpha = spow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, env.n), 0.73);

	// Achromatic response
	const A = env.nbb * (2 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]);

	const Jroot = spow(A / env.aW, 0.5 * env.c * env.z);

	// Lightness
	const J = 100 * spow(Jroot, 2);

	// Brightness
	const Q = (4 / env.c * Jroot * (env.aW + 4) * env.flRoot);

	// Chroma
	const C = alpha * Jroot;

	// Colorfulness
	const M = C * env.flRoot;

	// Hue
	const h = constrain(hRad * rad2deg);

	// Hue quadrature
	const H = hueQuadrature(h);

	// Saturation
	const s = 50 * spow(env.c * alpha / (env.aW + 4), 1 / 2);

	// console.log({J: J, C: C, h: h, s: s, Q: Q, M: M, H: H});

	return {J: J, C: C, h: h, s: s, Q: Q, M: M, H: H};
}


// Provided as a way to directly evaluate the CAM16 model
// https://observablehq.com/@jrus/cam16: reference implementation
// https://arxiv.org/pdf/1802.06067.pdf: Nico Schlömer
// https://onlinelibrary.wiley.com/doi/pdf/10.1002/col.22324: hue quadrature
// https://www.researchgate.net/publication/318152296_Comprehensive_color_solutions_CAM16_CAT16_and_CAM16-UCS
// Results compared against: https://github.com/colour-science/colour
var cam16 = new ColorSpace({
	id: "cam16-jmh",
	cssId: "--cam16-jmh",
	name: "CAM16-JMh",
	coords: {
		j: {
			refRange: [0, 100],
			name: "J",
		},
		m: {
			refRange: [0, 105.0],
			name: "Colorfulness",
		},
		h: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
	},

	base: xyz_d65,

	fromBase (xyz) {
		const cam16 = toCam16(xyz, viewingConditions$1);
		return [cam16.J, cam16.M, cam16.h];
	},
	toBase (cam16) {
		return fromCam16(
			{J: cam16[0], M: cam16[1], h: cam16[2]},
			viewingConditions$1,
		);
	},
});

const white$2 = WHITES.D65;
const ε$4 = 216 / 24389;  // 6^3/29^3 == (24/116)^3
const κ$3 = 24389 / 27;   // 29^3/3^3

function toLstar (y) {
	// Convert XYZ Y to L*

	const fy = (y > ε$4) ? Math.cbrt(y) : (κ$3 * y + 16) / 116;
	return (116.0 * fy) - 16.0;
}

function fromLstar (lstar) {
	// Convert L* back to XYZ Y

	return (lstar > 8) ?  Math.pow((lstar + 16) / 116, 3) : lstar / κ$3;
}

function fromHct (coords, env) {
	// Use Newton's method to try and converge as quick as possible or
	// converge as close as we can. While the requested precision is achieved
	// most of the time, it may not always be achievable. Especially past the
	// visible spectrum, the algorithm will likely struggle to get the same
	// precision. If, for whatever reason, we cannot achieve the accuracy we
	// seek in the allotted iterations, just return the closest we were able to
	// get.

	let [h, c, t] = coords;
	let xyz = [];
	let j = 0;

	// Shortcut out for black
	if (t === 0) {
		return [0.0, 0.0, 0.0];
	}

	// Calculate the Y we need to target
	let y = fromLstar(t);

	// A better initial guess yields better results. Polynomials come from
	// curve fitting the T vs J response.
	if (t > 0) {
		j = 0.00379058511492914 * t ** 2 + 0.608983189401032 * t + 0.9155088574762233;
	}
	else {
		j = 9.514440756550361e-06 * t ** 2 + 0.08693057439788597 * t - 21.928975842194614;
	}

	// Threshold of how close is close enough, and max number of attempts.
	// More precision and more attempts means more time spent iterating. Higher
	// required precision gives more accuracy but also increases the chance of
	// not hitting the goal. 2e-12 allows us to convert round trip with
	// reasonable accuracy of six decimal places or more.
	const threshold = 2e-12;
	const max_attempts = 15;

	let attempt = 0;
	let last = Infinity;

	// Try to find a J such that the returned y matches the returned y of the L*
	while (attempt <= max_attempts) {
		xyz = fromCam16({J: j, C: c, h: h}, env);

		// If we are within range, return XYZ
		// If we are closer than last time, save the values
		const delta = Math.abs(xyz[1] - y);
		if (delta < last) {
			if (delta <= threshold) {
				return xyz;
			}
			last = delta;
		}

		// f(j_root) = (j ** (1 / 2)) * 0.1
		// f(j) = ((f(j_root) * 100) ** 2) / j - 1 = 0
		// f(j_root) = Y = y / 100
		// f(j) = (y ** 2) / j - 1
		// f'(j) = (2 * y) / j
		j = j - (xyz[1] - y) * j / (2 * xyz[1]);

		attempt += 1;
	}

	// We could not acquire the precision we desired,
	// return our closest attempt.
	return fromCam16({J: j, C: c, h: h}, env);
}

function toHct (xyz, env) {
	// Calculate HCT by taking the L* of CIE LCh D65 and CAM16 chroma and hue.

	const t = toLstar(xyz[1]);
	if (t === 0.0) {
		return [0.0, 0.0, 0.0];
	}
	const cam16 = toCam16(xyz, viewingConditions);
	return [constrain(cam16.h), cam16.C, t];
}

// Pre-calculate everything we can with the viewing conditions
const viewingConditions = environment(
	white$2, 200 / Math.PI * fromLstar(50.0),
	fromLstar(50.0) * 100,
	"average",
	false,
);

// https://material.io/blog/science-of-color-design
// This is not a port of the material-color-utilities,
// but instead implements the full color space as described,
// combining CAM16 JCh and Lab D65. This does not clamp conversion
// to HCT to specific chroma bands and provides support for wider
// gamuts than Google currently supports and does so at a greater
// precision (> 8 bits back to sRGB).
// This implementation comes from https://github.com/facelessuser/coloraide
// which is licensed under MIT.
var hct = new ColorSpace({
	id: "hct",
	name: "HCT",
	coords: {
		h: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
		c: {
			refRange: [0, 145],
			name: "Colorfulness",
		},
		t: {
			refRange: [0, 100],
			name: "Tone",
		},
	},

	base: xyz_d65,

	fromBase (xyz) {
		return toHct(xyz);
	},
	toBase (hct) {
		return fromHct(hct, viewingConditions);
	},
	formats: {
		color: {
			id: "--hct",
			coords: ["<number> | <angle>", "<percentage> | <number>", "<percentage> | <number>"],
		},
	},
});

const deg2rad = Math.PI / 180;
const ucsCoeff = [1.00, 0.007, 0.0228];

/**
* Convert HCT chroma and hue (CAM16 JMh colorfulness and hue) using UCS logic for a and b.
* @param {number[]} coords - HCT coordinates.
* @return {number[]}
*/
function convertUcsAb (coords) {
	// We want the distance between the actual color.
	// If chroma is negative, it will throw off our calculations.
	// Normally, converting back to the base and forward will correct it.
	// If we have a negative chroma after this, then we have a color that
	// cannot resolve to positive chroma.
	if (coords[1] < 0) {
		coords = hct.fromBase(hct.toBase(coords));
	}

	// Only in extreme cases (usually outside the visible spectrum)
	// can the input value for log become negative.
	// Avoid domain error by forcing a zero result via "max" if necessary.
	const M = Math.log(Math.max(1 + ucsCoeff[2] * coords[1] * viewingConditions.flRoot, 1.0)) / ucsCoeff[2];
	const hrad = coords[0] * deg2rad;
	const a = M * Math.cos(hrad);
	const b = M * Math.sin(hrad);

	return [coords[2], a, b];
}


/**
* Color distance using HCT.
* @param {Color} color - Color to compare.
* @param {Color} sample - Color to compare.
* @return {number[]}
*/
function deltaEHCT (color, sample) {
	[color, sample] = getColor([color, sample]);

	let [ t1, a1, b1 ] = convertUcsAb(hct.from(color));
	let [ t2, a2, b2 ] = convertUcsAb(hct.from(sample));

	// Use simple euclidean distance with a and b using UCS conversion
	// and LCh lightness (HCT tone).
	return Math.sqrt((t1 - t2) ** 2 + (a1 - a2) ** 2 + (b1 - b2) ** 2);
}

var deltaEMethods = {
	deltaE76,
	deltaECMC,
	deltaE2000,
	deltaEJz,
	deltaEITP,
	deltaEOK,
	deltaEHCT,
};

/**
 * Calculate the epsilon to 2 degrees smaller than the specified JND.
 * @param {Number} jnd - The target "just noticeable difference".
 * @returns {Number}
 */
function calcEpsilon (jnd) {
	// Calculate the epsilon to 2 degrees smaller than the specified JND.

	const order = (!jnd) ? 0 : Math.floor(Math.log10(Math.abs(jnd)));
	// Limit to an arbitrary value to ensure value is never too small and causes infinite loops.
	return Math.max(parseFloat(`1e${order - 2}`), 1e-6);
}

const GMAPPRESET = {
	"hct": {
		method: "hct.c",
		jnd: 2,
		deltaEMethod: "hct",
		blackWhiteClamp: {},
	},
	"hct-tonal": {
		method: "hct.c",
		jnd: 0,
		deltaEMethod: "hct",
		blackWhiteClamp: { channel: "hct.t", min: 0, max: 100 },
	},
};

/**
 * Force coordinates to be in gamut of a certain color space.
 * Mutates the color it is passed.
 * @param {Object|string} options object or spaceId string
 * @param {string} options.method - How to force into gamut.
 *        If "clip", coordinates are just clipped to their reference range.
 *        If "css", coordinates are reduced according to the CSS 4 Gamut Mapping Algorithm.
 *        If in the form [colorSpaceId].[coordName], that coordinate is reduced
 *        until the color is in gamut. Please note that this may produce nonsensical
 *        results for certain coordinates (e.g. hue) or infinite loops if reducing the coordinate never brings the color in gamut.
 * @param {ColorSpace|string} options.space - The space whose gamut we want to map to
 * @param {string} options.deltaEMethod - The delta E method to use while performing gamut mapping.
 *        If no method is specified, delta E 2000 is used.
 * @param {Number} options.jnd - The "just noticeable difference" to target.
 * @param {Object} options.blackWhiteClamp - Used to configure SDR black and clamping.
 *        "channel" indicates the "space.channel" to use for determining when to clamp.
 *        "min" indicates the lower limit for black clamping and "max" indicates the upper
 *        limit for white clamping.
 */

function toGamut (
	color,
	{
		method = defaults.gamut_mapping,
		space = undefined,
		deltaEMethod = "",
		jnd = 2,
		blackWhiteClamp = {},
	} = {},
) {
	color = getColor(color);

	if (isString(arguments[1])) {
		space = arguments[1];
	}
	else if (!space) {
		space = color.space;
	}

	space = ColorSpace.get(space);

	// 3 spaces:
	// color.space: current color space
	// space: space whose gamut we are mapping to
	// mapSpace: space with the coord we're reducing

	if (inGamut(color, space, { epsilon: 0 })) {
		return color;
	}

	let spaceColor;
	if (method === "css") {
		spaceColor = toGamutCSS(color, { space });
	}
	else {
		if (method !== "clip" && !inGamut(color, space)) {

			if (Object.prototype.hasOwnProperty.call(GMAPPRESET, method)) {
				({method, jnd, deltaEMethod, blackWhiteClamp} = GMAPPRESET[method]);
			}

			// Get the correct delta E method
			let de = deltaE2000;
			if (deltaEMethod !== "") {
				for (let m in deltaEMethods) {
					if ("deltae" + deltaEMethod.toLowerCase() === m.toLowerCase()) {
						de = deltaEMethods[m];
						break;
					}
				}
			}

			let clipped = toGamut(to(color, space), { method: "clip", space });
			if (de(color, clipped) > jnd) {

				// Clamp to SDR white and black if required
				if (Object.keys(blackWhiteClamp).length === 3) {
					let channelMeta = ColorSpace.resolveCoord(blackWhiteClamp.channel);
					let channel = get(to(color, channelMeta.space), channelMeta.id);
					if (isNone(channel)) {
						channel = 0;
					}
					if (channel >= blackWhiteClamp.max) {
						return to({ space: "xyz-d65", coords: WHITES["D65"] }, color.space);
					}
					else if (channel <= blackWhiteClamp.min) {
						return to({ space: "xyz-d65", coords: [0, 0, 0] }, color.space);
					}
				}

				// Reduce a coordinate of a certain color space until the color is in gamut
				let coordMeta = ColorSpace.resolveCoord(method);
				let mapSpace = coordMeta.space;
				let coordId = coordMeta.id;

				let mappedColor = to(color, mapSpace);
				// If we were already in the mapped color space, we need to resolve undefined channels
				mappedColor.coords.forEach((c, i) => {
					if (isNone(c)) {
						mappedColor.coords[i] = 0;
					}
				});
				let bounds = coordMeta.range || coordMeta.refRange;
				let min = bounds[0];
				let ε = calcEpsilon(jnd);
				let low = min;
				let high = get(mappedColor, coordId);

				while (high - low > ε) {
					let clipped = clone(mappedColor);
					clipped = toGamut(clipped, { space, method: "clip" });
					let deltaE = de(mappedColor, clipped);

					if (deltaE - jnd < ε) {
						low = get(mappedColor, coordId);
					}
					else {
						high = get(mappedColor, coordId);
					}

					set(mappedColor, coordId, (low + high) / 2);
				}

				spaceColor = to(mappedColor, space);
			}
			else {
				spaceColor = clipped;
			}
		}
		else {
			spaceColor = to(color, space);
		}

		if (method === "clip" // Dumb coord clipping
			// finish off smarter gamut mapping with clip to get rid of ε, see #17
			|| !inGamut(spaceColor, space, { epsilon: 0 })
		) {
			let bounds = Object.values(space.coords).map(c => c.range || []);

			spaceColor.coords = spaceColor.coords.map((c, i) => {
				let [min, max] = bounds[i];

				if (min !== undefined) {
					c = Math.max(min, c);
				}

				if (max !== undefined) {
					c = Math.min(c, max);
				}

				return c;
			});
		}
	}

	if (space !== color.space) {
		spaceColor = to(spaceColor, color.space);
	}

	color.coords = spaceColor.coords;
	return color;
}

toGamut.returns = "color";

// The reference colors to be used if lightness is out of the range 0-1 in the
// `Oklch` space. These are created in the `Oklab` space, as it is used by the
// DeltaEOK calculation, so it is guaranteed to be imported.
const COLORS = {
	WHITE: { space: OKLab, coords: [1, 0, 0] },
	BLACK: { space: OKLab, coords: [0, 0, 0] },
};

/**
 * Given a color `origin`, returns a new color that is in gamut using
 * the CSS Gamut Mapping Algorithm. If `space` is specified, it will be in gamut
 * in `space`, and returned in `space`. Otherwise, it will be in gamut and
 * returned in the color space of `origin`.
 * @param {Object} origin
 * @param {Object} options
 * @param {ColorSpace|string} options.space
 * @returns {Color}
 */
function toGamutCSS (origin, {space} = {}) {
	const JND = 0.02;
	const ε = 0.0001;

	origin = getColor(origin);

	if (!space) {
		space = origin.space;
	}

	space = ColorSpace.get(space);
	const oklchSpace = ColorSpace.get("oklch");

	if (space.isUnbounded) {
		return to(origin, space);
	}

	const origin_OKLCH = to(origin, oklchSpace);
	let L = origin_OKLCH.coords[0];

	// return media white or black, if lightness is out of range
	if (L >= 1) {
		const white = to(COLORS.WHITE, space);
		white.alpha = origin.alpha;
		return to(white, space);
	}
	if (L <= 0) {
		const black = to(COLORS.BLACK, space);
		black.alpha = origin.alpha;
		return to(black, space);
	}

	if (inGamut(origin_OKLCH, space, {epsilon: 0})) {
		return to(origin_OKLCH, space);
	}

	function clip (_color) {
		const destColor = to(_color, space);
		const spaceCoords = Object.values(space.coords);
		destColor.coords = destColor.coords.map((coord, index) => {
			if ("range" in spaceCoords[index]) {
				const [min, max] =  spaceCoords[index].range;
				return clamp(min, coord, max);
			}
			return coord;
		});
		return destColor;
	}
	let min = 0;
	let max = origin_OKLCH.coords[1];
	let min_inGamut = true;
	let current = clone(origin_OKLCH);
	let clipped = clip(current);

	let E = deltaEOK(clipped, current);
	if (E < JND) {
		return clipped;
	}

	while ((max - min) > ε) {
		const chroma = (min + max) / 2;
		current.coords[1] = chroma;
		if (min_inGamut && inGamut(current, space, {epsilon: 0})) {
			min = chroma;
		}
		else {
			clipped = clip(current);
			E = deltaEOK(clipped, current);
			if (E < JND) {
				if ((JND - E < ε)) {
					break;
				}
				else {
					min_inGamut = false;
					min = chroma;
				}
			}
			else {
				max = chroma;
			}
		}
	}
	return clipped;
}

/**
 * Convert to color space and return a new color
 * @param {Object|string} space - Color space object or id
 * @param {Object} options
 * @param {boolean} options.inGamut - Whether to force resulting color in gamut
 * @returns {Color}
 */
function to (color, space, {inGamut} = {}) {
	color = getColor(color);
	space = ColorSpace.get(space);

	let coords = space.from(color);
	let ret = {space, coords, alpha: color.alpha};

	if (inGamut) {
		ret = toGamut(ret, inGamut === true ? undefined : inGamut);
	}

	return ret;
}

to.returns = "color";

/**
 * Generic toString() method, outputs a color(spaceId ...coords) function, a functional syntax, or custom formats defined by the color space
 * @param {Object} options
 * @param {number} options.precision - Significant digits
 * @param {boolean} options.inGamut - Adjust coordinates to fit in gamut first? [default: false]
 */
function serialize (color, {
	precision = defaults.precision,
	format = "default",
	inGamut: inGamut$1 = true,
	...customOptions
} = {}) {
	let ret;

	color = getColor(color);

	let formatId = format;
	format = color.space.getFormat(format)
	       ?? color.space.getFormat("default")
	       ?? ColorSpace.DEFAULT_FORMAT;

	// The assignment to coords and inGamut needs to stay in the order they are now
	// The order of the assignment was changed as a workaround for a bug in Next.js
	// See this issue for details: https://github.com/color-js/color.js/issues/260

	let coords = color.coords.slice(); // clone so we can manipulate it

	inGamut$1 ||= format.toGamut;

	if (inGamut$1 && !inGamut(color)) {
		// FIXME what happens if the color contains NaNs?
		coords = toGamut(clone(color), inGamut$1 === true ? undefined : inGamut$1).coords;
	}

	if (format.type === "custom") {
		customOptions.precision = precision;

		if (format.serialize) {
			ret = format.serialize(coords, color.alpha, customOptions);
		}
		else {
			throw new TypeError(`format ${formatId} can only be used to parse colors, not for serialization`);
		}
	}
	else {
		// Functional syntax
		let name = format.name || "color";

		if (format.serializeCoords) {
			coords = format.serializeCoords(coords, precision);
		}
		else {
			if (precision !== null) {
				coords = coords.map(c => {
					return serializeNumber(c, {precision});
				});
			}
		}

		let args = [...coords];

		if (name === "color") {
			// If output is a color() function, add colorspace id as first argument
			let cssId = format.id || format.ids?.[0] || color.space.id;
			args.unshift(cssId);
		}

		let alpha = color.alpha;
		if (precision !== null) {
			alpha = serializeNumber(alpha, {precision});
		}

		let strAlpha = color.alpha >= 1 || format.noAlpha ? "" : `${format.commas ? "," : " /"} ${alpha}`;
		ret = `${name}(${args.join(format.commas ? ", " : " ")}${strAlpha})`;
	}

	return ret;
}

// convert an array of linear-light rec2020 values to CIE XYZ
// using  D65 (no chromatic adaptation)
// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
// 0 is actually calculated as  4.994106574466076e-17
const toXYZ_M$5 = [
	[ 0.6369580483012914, 0.14461690358620832,  0.1688809751641721  ],
	[ 0.2627002120112671, 0.6779980715188708,   0.05930171646986196 ],
	[ 0.000000000000000,  0.028072693049087428, 1.060985057710791   ],
];

// from ITU-R BT.2124-0 Annex 2 p.3
const fromXYZ_M$5 = [
	[  1.716651187971268,  -0.355670783776392, -0.253366281373660  ],
	[ -0.666684351832489,   1.616481236634939,  0.0157685458139111 ],
	[  0.017639857445311,  -0.042770613257809,  0.942103121235474  ],
];

var REC2020Linear = new RGBColorSpace({
	id: "rec2020-linear",
	cssId: "--rec2020-linear",
	name: "Linear REC.2020",
	white: "D65",
	toXYZ_M: toXYZ_M$5,
	fromXYZ_M: fromXYZ_M$5,
});

// import sRGB from "./srgb.js";

const α = 1.09929682680944;
const β = 0.018053968510807;

var REC2020 = new RGBColorSpace({
	id: "rec2020",
	name: "REC.2020",
	base: REC2020Linear,
	// Non-linear transfer function from Rec. ITU-R BT.2020-2 table 4
	toBase (RGB) {
		return RGB.map(function (val) {
			if (val < β * 4.5) {
				return val / 4.5;
			}

			return Math.pow((val + α - 1) / α, 1 / 0.45);
		});
	},
	fromBase (RGB) {
		return RGB.map(function (val) {
			if (val >= β) {
				return α * Math.pow(val, 0.45) - (α - 1);
			}

			return 4.5 * val;
		});
	},
});

const toXYZ_M$4 = [
	[0.4865709486482162, 0.26566769316909306, 0.1982172852343625],
	[0.2289745640697488, 0.6917385218365064,  0.079286914093745],
	[0.0000000000000000, 0.04511338185890264, 1.043944368900976],
];

const fromXYZ_M$4 = [
	[ 2.493496911941425,   -0.9313836179191239, -0.40271078445071684],
	[-0.8294889695615747,   1.7626640603183463,  0.023624685841943577],
	[ 0.03584583024378447, -0.07617238926804182, 0.9568845240076872],
];

var P3Linear = new RGBColorSpace({
	id: "p3-linear",
	cssId: "--display-p3-linear",
	name: "Linear P3",
	white: "D65",
	toXYZ_M: toXYZ_M$4,
	fromXYZ_M: fromXYZ_M$4,
});

// This is the linear-light version of sRGB
// as used for example in SVG filters
// or in Canvas

// This matrix was calculated directly from the RGB and white chromaticities
// when rounded to 8 decimal places, it agrees completely with the official matrix
// see https://github.com/w3c/csswg-drafts/issues/5922
const toXYZ_M$3 = [
	[ 0.41239079926595934, 0.357584339383878,   0.1804807884018343  ],
	[ 0.21263900587151027, 0.715168678767756,   0.07219231536073371 ],
	[ 0.01933081871559182, 0.11919477979462598, 0.9505321522496607  ],
];

// This matrix is the inverse of the above;
// again it agrees with the official definition when rounded to 8 decimal places
const fromXYZ_M$3 = [
	[  3.2409699419045226,  -1.537383177570094,   -0.4986107602930034  ],
	[ -0.9692436362808796,   1.8759675015077202,   0.04155505740717559 ],
	[  0.05563007969699366, -0.20397695888897652,  1.0569715142428786  ],
];

var sRGBLinear = new RGBColorSpace({
	id: "srgb-linear",
	name: "Linear sRGB",
	white: "D65",
	toXYZ_M: toXYZ_M$3,
	fromXYZ_M: fromXYZ_M$3,
});

/* List of CSS color keywords
 * Note that this does not include currentColor, transparent,
 * or system colors
 */

// To produce: Visit https://www.w3.org/TR/css-color-4/#named-colors
// and run in the console:
// copy($$("tr", $(".named-color-table tbody")).map(tr => `"${tr.cells[2].textContent.trim()}": [${tr.cells[4].textContent.trim().split(/\s+/).map(c => c === "0"? "0" : c === "255"? "1" : c + " / 255").join(", ")}]`).join(",\n"))
var KEYWORDS = {
	"aliceblue": [240 / 255, 248 / 255, 1],
	"antiquewhite": [250 / 255, 235 / 255, 215 / 255],
	"aqua": [0, 1, 1],
	"aquamarine": [127 / 255, 1, 212 / 255],
	"azure": [240 / 255, 1, 1],
	"beige": [245 / 255, 245 / 255, 220 / 255],
	"bisque": [1, 228 / 255, 196 / 255],
	"black": [0, 0, 0],
	"blanchedalmond": [1, 235 / 255, 205 / 255],
	"blue": [0, 0, 1],
	"blueviolet": [138 / 255, 43 / 255, 226 / 255],
	"brown": [165 / 255, 42 / 255, 42 / 255],
	"burlywood": [222 / 255, 184 / 255, 135 / 255],
	"cadetblue": [95 / 255, 158 / 255, 160 / 255],
	"chartreuse": [127 / 255, 1, 0],
	"chocolate": [210 / 255, 105 / 255, 30 / 255],
	"coral": [1, 127 / 255, 80 / 255],
	"cornflowerblue": [100 / 255, 149 / 255, 237 / 255],
	"cornsilk": [1, 248 / 255, 220 / 255],
	"crimson": [220 / 255, 20 / 255, 60 / 255],
	"cyan": [0, 1, 1],
	"darkblue": [0, 0, 139 / 255],
	"darkcyan": [0, 139 / 255, 139 / 255],
	"darkgoldenrod": [184 / 255, 134 / 255, 11 / 255],
	"darkgray": [169 / 255, 169 / 255, 169 / 255],
	"darkgreen": [0, 100 / 255, 0],
	"darkgrey": [169 / 255, 169 / 255, 169 / 255],
	"darkkhaki": [189 / 255, 183 / 255, 107 / 255],
	"darkmagenta": [139 / 255, 0, 139 / 255],
	"darkolivegreen": [85 / 255, 107 / 255, 47 / 255],
	"darkorange": [1, 140 / 255, 0],
	"darkorchid": [153 / 255, 50 / 255, 204 / 255],
	"darkred": [139 / 255, 0, 0],
	"darksalmon": [233 / 255, 150 / 255, 122 / 255],
	"darkseagreen": [143 / 255, 188 / 255, 143 / 255],
	"darkslateblue": [72 / 255, 61 / 255, 139 / 255],
	"darkslategray": [47 / 255, 79 / 255, 79 / 255],
	"darkslategrey": [47 / 255, 79 / 255, 79 / 255],
	"darkturquoise": [0, 206 / 255, 209 / 255],
	"darkviolet": [148 / 255, 0, 211 / 255],
	"deeppink": [1, 20 / 255, 147 / 255],
	"deepskyblue": [0, 191 / 255, 1],
	"dimgray": [105 / 255, 105 / 255, 105 / 255],
	"dimgrey": [105 / 255, 105 / 255, 105 / 255],
	"dodgerblue": [30 / 255, 144 / 255, 1],
	"firebrick": [178 / 255, 34 / 255, 34 / 255],
	"floralwhite": [1, 250 / 255, 240 / 255],
	"forestgreen": [34 / 255, 139 / 255, 34 / 255],
	"fuchsia": [1, 0, 1],
	"gainsboro": [220 / 255, 220 / 255, 220 / 255],
	"ghostwhite": [248 / 255, 248 / 255, 1],
	"gold": [1, 215 / 255, 0],
	"goldenrod": [218 / 255, 165 / 255, 32 / 255],
	"gray": [128 / 255, 128 / 255, 128 / 255],
	"green": [0, 128 / 255, 0],
	"greenyellow": [173 / 255, 1, 47 / 255],
	"grey": [128 / 255, 128 / 255, 128 / 255],
	"honeydew": [240 / 255, 1, 240 / 255],
	"hotpink": [1, 105 / 255, 180 / 255],
	"indianred": [205 / 255, 92 / 255, 92 / 255],
	"indigo": [75 / 255, 0, 130 / 255],
	"ivory": [1, 1, 240 / 255],
	"khaki": [240 / 255, 230 / 255, 140 / 255],
	"lavender": [230 / 255, 230 / 255, 250 / 255],
	"lavenderblush": [1, 240 / 255, 245 / 255],
	"lawngreen": [124 / 255, 252 / 255, 0],
	"lemonchiffon": [1, 250 / 255, 205 / 255],
	"lightblue": [173 / 255, 216 / 255, 230 / 255],
	"lightcoral": [240 / 255, 128 / 255, 128 / 255],
	"lightcyan": [224 / 255, 1, 1],
	"lightgoldenrodyellow": [250 / 255, 250 / 255, 210 / 255],
	"lightgray": [211 / 255, 211 / 255, 211 / 255],
	"lightgreen": [144 / 255, 238 / 255, 144 / 255],
	"lightgrey": [211 / 255, 211 / 255, 211 / 255],
	"lightpink": [1, 182 / 255, 193 / 255],
	"lightsalmon": [1, 160 / 255, 122 / 255],
	"lightseagreen": [32 / 255, 178 / 255, 170 / 255],
	"lightskyblue": [135 / 255, 206 / 255, 250 / 255],
	"lightslategray": [119 / 255, 136 / 255, 153 / 255],
	"lightslategrey": [119 / 255, 136 / 255, 153 / 255],
	"lightsteelblue": [176 / 255, 196 / 255, 222 / 255],
	"lightyellow": [1, 1, 224 / 255],
	"lime": [0, 1, 0],
	"limegreen": [50 / 255, 205 / 255, 50 / 255],
	"linen": [250 / 255, 240 / 255, 230 / 255],
	"magenta": [1, 0, 1],
	"maroon": [128 / 255, 0, 0],
	"mediumaquamarine": [102 / 255, 205 / 255, 170 / 255],
	"mediumblue": [0, 0, 205 / 255],
	"mediumorchid": [186 / 255, 85 / 255, 211 / 255],
	"mediumpurple": [147 / 255, 112 / 255, 219 / 255],
	"mediumseagreen": [60 / 255, 179 / 255, 113 / 255],
	"mediumslateblue": [123 / 255, 104 / 255, 238 / 255],
	"mediumspringgreen": [0, 250 / 255, 154 / 255],
	"mediumturquoise": [72 / 255, 209 / 255, 204 / 255],
	"mediumvioletred": [199 / 255, 21 / 255, 133 / 255],
	"midnightblue": [25 / 255, 25 / 255, 112 / 255],
	"mintcream": [245 / 255, 1, 250 / 255],
	"mistyrose": [1, 228 / 255, 225 / 255],
	"moccasin": [1, 228 / 255, 181 / 255],
	"navajowhite": [1, 222 / 255, 173 / 255],
	"navy": [0, 0, 128 / 255],
	"oldlace": [253 / 255, 245 / 255, 230 / 255],
	"olive": [128 / 255, 128 / 255, 0],
	"olivedrab": [107 / 255, 142 / 255, 35 / 255],
	"orange": [1, 165 / 255, 0],
	"orangered": [1, 69 / 255, 0],
	"orchid": [218 / 255, 112 / 255, 214 / 255],
	"palegoldenrod": [238 / 255, 232 / 255, 170 / 255],
	"palegreen": [152 / 255, 251 / 255, 152 / 255],
	"paleturquoise": [175 / 255, 238 / 255, 238 / 255],
	"palevioletred": [219 / 255, 112 / 255, 147 / 255],
	"papayawhip": [1, 239 / 255, 213 / 255],
	"peachpuff": [1, 218 / 255, 185 / 255],
	"peru": [205 / 255, 133 / 255, 63 / 255],
	"pink": [1, 192 / 255, 203 / 255],
	"plum": [221 / 255, 160 / 255, 221 / 255],
	"powderblue": [176 / 255, 224 / 255, 230 / 255],
	"purple": [128 / 255, 0, 128 / 255],
	"rebeccapurple": [102 / 255, 51 / 255, 153 / 255],
	"red": [1, 0, 0],
	"rosybrown": [188 / 255, 143 / 255, 143 / 255],
	"royalblue": [65 / 255, 105 / 255, 225 / 255],
	"saddlebrown": [139 / 255, 69 / 255, 19 / 255],
	"salmon": [250 / 255, 128 / 255, 114 / 255],
	"sandybrown": [244 / 255, 164 / 255, 96 / 255],
	"seagreen": [46 / 255, 139 / 255, 87 / 255],
	"seashell": [1, 245 / 255, 238 / 255],
	"sienna": [160 / 255, 82 / 255, 45 / 255],
	"silver": [192 / 255, 192 / 255, 192 / 255],
	"skyblue": [135 / 255, 206 / 255, 235 / 255],
	"slateblue": [106 / 255, 90 / 255, 205 / 255],
	"slategray": [112 / 255, 128 / 255, 144 / 255],
	"slategrey": [112 / 255, 128 / 255, 144 / 255],
	"snow": [1, 250 / 255, 250 / 255],
	"springgreen": [0, 1, 127 / 255],
	"steelblue": [70 / 255, 130 / 255, 180 / 255],
	"tan": [210 / 255, 180 / 255, 140 / 255],
	"teal": [0, 128 / 255, 128 / 255],
	"thistle": [216 / 255, 191 / 255, 216 / 255],
	"tomato": [1, 99 / 255, 71 / 255],
	"turquoise": [64 / 255, 224 / 255, 208 / 255],
	"violet": [238 / 255, 130 / 255, 238 / 255],
	"wheat": [245 / 255, 222 / 255, 179 / 255],
	"white": [1, 1, 1],
	"whitesmoke": [245 / 255, 245 / 255, 245 / 255],
	"yellow": [1, 1, 0],
	"yellowgreen": [154 / 255, 205 / 255, 50 / 255],
};

let coordGrammar = Array(3).fill("<percentage> | <number>[0, 255]");
let coordGrammarNumber = Array(3).fill("<number>[0, 255]");

var sRGB = new RGBColorSpace({
	id: "srgb",
	name: "sRGB",
	base: sRGBLinear,
	fromBase: rgb => {
		// convert an array of linear-light sRGB values in the range 0.0-1.0
		// to gamma corrected form
		// https://en.wikipedia.org/wiki/SRGB
		return rgb.map(val => {
			let sign = val < 0 ? -1 : 1;
			let abs = val * sign;

			if (abs > 0.0031308) {
				return sign * (1.055 * (abs ** (1 / 2.4)) - 0.055);
			}

			return 12.92 * val;
		});
	},
	toBase: rgb => {
		// convert an array of sRGB values in the range 0.0 - 1.0
		// to linear light (un-companded) form.
		// https://en.wikipedia.org/wiki/SRGB
		return rgb.map(val => {
			let sign = val < 0 ? -1 : 1;
			let abs = val * sign;

			if (abs <= 0.04045) {
				return val / 12.92;
			}

			return sign * (((abs + 0.055) / 1.055) ** 2.4);
		});
	},
	formats: {
		"rgb": {
			coords: coordGrammar,
		},
		"rgb_number": {
			name: "rgb",
			commas: true,
			coords: coordGrammarNumber,
			noAlpha: true,
		},
		"color": { /* use defaults */ },
		"rgba": {
			coords: coordGrammar,
			commas: true,
			lastAlpha: true,
		},
		"rgba_number": {
			name: "rgba",
			commas: true,
			coords: coordGrammarNumber,
		},
		"hex": {
			type: "custom",
			toGamut: true,
			test: str => /^#([a-f0-9]{3,4}){1,2}$/i.test(str),
			parse (str) {
				if (str.length <= 5) {
					// #rgb or #rgba, duplicate digits
					str = str.replace(/[a-f0-9]/gi, "$&$&");
				}

				let rgba = [];
				str.replace(/[a-f0-9]{2}/gi, component => {
					rgba.push(parseInt(component, 16) / 255);
				});

				return {
					spaceId: "srgb",
					coords: rgba.slice(0, 3),
					alpha: rgba.slice(3)[0],
				};
			},
			serialize: (coords, alpha, {
				collapse = true, // collapse to 3-4 digit hex when possible?
			} = {}) => {
				if (alpha < 1) {
					coords.push(alpha);
				}

				coords = coords.map(c => Math.round(c * 255));

				let collapsible = collapse && coords.every(c => c % 17 === 0);

				let hex = coords.map(c => {
					if (collapsible) {
						return (c / 17).toString(16);
					}

					return c.toString(16).padStart(2, "0");
				}).join("");

				return "#" + hex;
			},
		},
		"keyword": {
			type: "custom",
			test: str => /^[a-z]+$/i.test(str),
			parse (str) {
				str = str.toLowerCase();
				let ret = {spaceId: "srgb", coords: null, alpha: 1};

				if (str === "transparent") {
					ret.coords = KEYWORDS.black;
					ret.alpha = 0;
				}
				else {
					ret.coords = KEYWORDS[str];
				}

				if (ret.coords) {
					return ret;
				}
			},
		},
	},
});

var P3 = new RGBColorSpace({
	id: "p3",
	cssId: "display-p3",
	name: "P3",
	base: P3Linear,
	// Gamma encoding/decoding is the same as sRGB
	fromBase: sRGB.fromBase,
	toBase: sRGB.toBase,
});

// Default space for CSS output. Code in Color.js makes this wider if there's a DOM available
defaults.display_space = sRGB;

let supportsNone;

if (typeof CSS !== "undefined" && CSS.supports) {
	// Find widest supported color space for CSS
	for (let space of [lab, REC2020, P3]) {
		let coords = space.getMinCoords();
		let color = {space, coords, alpha: 1};
		let str = serialize(color);

		if (CSS.supports("color", str)) {
			defaults.display_space = space;
			break;
		}
	}
}

/**
 * Returns a serialization of the color that can actually be displayed in the browser.
 * If the default serialization can be displayed, it is returned.
 * Otherwise, the color is converted to Lab, REC2020, or P3, whichever is the widest supported.
 * In Node.js, this is basically equivalent to `serialize()` but returns a `String` object instead.
 *
 * @export
 * @param {{space, coords} | Color | string} color
 * @param {*} [options={}] Options to be passed to serialize()
 * @param {ColorSpace | string} [options.space = defaults.display_space] Color space to use for serialization if default is not supported
 * @returns {String} String object containing the serialized color with a color property containing the converted color (or the original, if no conversion was necessary)
 */
function display (color, {space = defaults.display_space, ...options} = {}) {
	let ret = serialize(color, options);

	if (typeof CSS === "undefined" || CSS.supports("color", ret) || !defaults.display_space) {
		ret = new String(ret);
		ret.color = color;
	}
	else {
		// If we're here, what we were about to output is not supported
		let fallbackColor = color;

		// First, check if the culprit is none values
		let hasNone = color.coords.some(isNone) || isNone(color.alpha);

		if (hasNone) {
			// Does the browser support none values?
			if (!(supportsNone ??= CSS.supports("color", "hsl(none 50% 50%)"))) {
				// Nope, try again without none
				fallbackColor = clone(color);
				fallbackColor.coords = fallbackColor.coords.map(skipNone);
				fallbackColor.alpha = skipNone(fallbackColor.alpha);

				ret = serialize(fallbackColor, options);

				if (CSS.supports("color", ret)) {
					// We're done, now it's supported
					ret = new String(ret);
					ret.color = fallbackColor;
					return ret;
				}
			}
		}

		// If we're here, the color function is not supported
		// Fall back to fallback space
		fallbackColor = to(fallbackColor, space);
		ret = new String(serialize(fallbackColor, options));
		ret.color = fallbackColor;
	}

	return ret;
}

function equals (color1, color2) {
	color1 = getColor(color1);
	color2 = getColor(color2);

	return color1.space === color2.space
	       && color1.alpha === color2.alpha
	       && color1.coords.every((c, i) => c === color2.coords[i]);
}

/**
 * Relative luminance
 */

function getLuminance (color) {
	// Assume getColor() is called on color in get()
	return get(color, [xyz_d65, "y"]);
}

function setLuminance (color, value) {
	// Assume getColor() is called on color in set()
	set(color, [xyz_d65, "y"], value);
}

function register$2 (Color) {
	Object.defineProperty(Color.prototype, "luminance", {
		get () {
			return getLuminance(this);
		},
		set (value) {
			setLuminance(this, value);
		},
	});
}

var luminance = /*#__PURE__*/Object.freeze({
	__proto__: null,
	getLuminance: getLuminance,
	register: register$2,
	setLuminance: setLuminance
});

// WCAG 2.0 contrast https://www.w3.org/TR/WCAG20-TECHS/G18.html
// Simple contrast, with fixed 5% viewing flare contribution
// Symmetric, does not matter which is foreground and which is background


function contrastWCAG21 (color1, color2) {
	color1 = getColor(color1);
	color2 = getColor(color2);

	let Y1 = Math.max(getLuminance(color1), 0);
	let Y2 = Math.max(getLuminance(color2), 0);

	if (Y2 > Y1) {
		[Y1, Y2] = [Y2, Y1];
	}

	return (Y1 + .05) / (Y2 + .05);
}

// APCA 0.0.98G
// https://github.com/Myndex/apca-w3
// see also https://github.com/w3c/silver/issues/643


// exponents
const normBG = 0.56;
const normTXT = 0.57;
const revTXT = 0.62;
const revBG = 0.65;

// clamps
const blkThrs = 0.022;
const blkClmp = 1.414;
const loClip = 0.1;
const deltaYmin = 0.0005;

// scalers
// see https://github.com/w3c/silver/issues/645
const scaleBoW = 1.14;
const loBoWoffset = 0.027;
const scaleWoB = 1.14;

function fclamp (Y) {
	if (Y >= blkThrs) {
		return Y;
	}
	return Y + (blkThrs - Y) ** blkClmp;
}

function linearize (val) {
	let sign = val < 0 ? -1 : 1;
	let abs = Math.abs(val);
	return sign * Math.pow(abs, 2.4);
}

// Not symmetric, requires a foreground (text) color, and a background color
function contrastAPCA (background, foreground) {
	foreground = getColor(foreground);
	background = getColor(background);

	let S;
	let C;
	let Sapc;

	// Myndex as-published, assumes sRGB inputs
	let R, G, B;

	foreground = to(foreground, "srgb");
	// Should these be clamped to in-gamut values?

	// Calculates "screen luminance" with non-standard simple gamma EOTF
	// weights should be from CSS Color 4, not the ones here which are via Myndex and copied from Lindbloom
	[R, G, B] = foreground.coords;
	let lumTxt = linearize(R) * 0.2126729 + linearize(G) * 0.7151522 + linearize(B) * 0.0721750;

	background = to(background, "srgb");
	[R, G, B] = background.coords;
	let lumBg = linearize(R) * 0.2126729 + linearize(G) * 0.7151522 + linearize(B) * 0.0721750;

	// toe clamping of very dark values to account for flare
	let Ytxt = fclamp(lumTxt);
	let Ybg = fclamp(lumBg);

	// are we "Black on White" (dark on light), or light on dark?
	let BoW = Ybg > Ytxt;

	// why is this a delta, when Y is not perceptually uniform?
	// Answer: it is a noise gate, see
	// https://github.com/LeaVerou/color.js/issues/208
	if (Math.abs(Ybg - Ytxt) < deltaYmin) {
		C = 0;
	}
	else {
		if (BoW) {
			// dark text on light background
			S = Ybg ** normBG - Ytxt ** normTXT;
			C = S * scaleBoW;
		}
		else {
			// light text on dark background
			S = Ybg ** revBG - Ytxt ** revTXT;
			C = S * scaleWoB;
		}
	}
	if (Math.abs(C) < loClip) {
		Sapc = 0;
	}
	else if (C > 0) {
		// not clear whether Woffset is loBoWoffset or loWoBoffset
		// but they have the same value
		Sapc = C - loBoWoffset;
	}
	else {
		Sapc = C + loBoWoffset;
	}

	return Sapc * 100;
}

// Michelson  luminance contrast
// the relation between the spread and the sum of the two luminances
// Symmetric, does not matter which is foreground and which is background
// No black level compensation for flare.


function contrastMichelson (color1, color2) {
	color1 = getColor(color1);
	color2 = getColor(color2);

	let Y1 = Math.max(getLuminance(color1), 0);
	let Y2 = Math.max(getLuminance(color2), 0);

	if (Y2 > Y1) {
		[Y1, Y2] = [Y2, Y1];
	}

	let denom = (Y1 + Y2);
	return denom === 0 ? 0 : (Y1 - Y2) / denom;
}

// Weber luminance contrast
// The difference between the two luminances divided by the lower luminance
// Symmetric, does not matter which is foreground and which is background
// No black level compensation for flare.


// the darkest sRGB color above black is #000001 and this produces
// a plain Weber contrast of ~45647.
// So, setting the divide-by-zero result at 50000 is a reasonable
// max clamp for the plain Weber
const max = 50000;

function contrastWeber (color1, color2) {
	color1 = getColor(color1);
	color2 = getColor(color2);

	let Y1 = Math.max(getLuminance(color1), 0);
	let Y2 = Math.max(getLuminance(color2), 0);

	if (Y2 > Y1) {
		[Y1, Y2] = [Y2, Y1];
	}

	return Y2 === 0 ? max : (Y1 - Y2) / Y2;
}

// CIE Lightness difference, as used by Google Material Design
// Google HCT Tone is the same as CIE Lightness
// https://material.io/blog/science-of-color-design


function contrastLstar (color1, color2) {
	color1 = getColor(color1);
	color2 = getColor(color2);

	let L1 = get(color1, [lab, "l"]);
	let L2 = get(color2, [lab, "l"]);

	return Math.abs(L1 - L2);
}

// κ * ε  = 2^3 = 8
const ε$3 = 216 / 24389;  // 6^3/29^3 == (24/116)^3
const ε3 = 24 / 116;
const κ$2 = 24389 / 27;   // 29^3/3^3

let white$1 = WHITES.D65;

var lab_d65 = new ColorSpace({
	id: "lab-d65",
	name: "Lab D65",
	coords: {
		l: {
			refRange: [0, 100],
			name: "Lightness",
		},
		a: {
			refRange: [-125, 125],
		},
		b: {
			refRange: [-125, 125],
		},
	},

	// Assuming XYZ is relative to D65, convert to CIE Lab
	// from CIE standard, which now defines these as a rational fraction
	white: white$1,

	base: xyz_d65,
	// Convert D65-adapted XYZ to Lab
	//  CIE 15.3:2004 section 8.2.1.1
	fromBase (XYZ) {
		// compute xyz, which is XYZ scaled relative to reference white
		let xyz = XYZ.map((value, i) => value / white$1[i]);

		// now compute f
		let f = xyz.map(value => value > ε$3 ? Math.cbrt(value) : (κ$2 * value + 16) / 116);

		return [
			(116 * f[1]) - 16,   // L
			500 * (f[0] - f[1]), // a
			200 * (f[1] - f[2]),  // b
		];
	},
	// Convert Lab to D65-adapted XYZ
	// Same result as CIE 15.3:2004 Appendix D although the derivation is different
	// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
	toBase (Lab) {
		// compute f, starting with the luminance-related term
		let f = [];
		f[1] = (Lab[0] + 16) / 116;
		f[0] = Lab[1] / 500 + f[1];
		f[2] = f[1] - Lab[2] / 200;

		// compute xyz
		let xyz = [
			f[0]   > ε3 ? Math.pow(f[0], 3)                : (116 * f[0] - 16) / κ$2,
			Lab[0] > 8  ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / κ$2,
			f[2]   > ε3 ? Math.pow(f[2], 3)                : (116 * f[2] - 16) / κ$2,
		];

		// Compute XYZ by scaling xyz by reference white
		return xyz.map((value, i) => value * white$1[i]);
	},

	formats: {
		"lab-d65": {
			coords: ["<number> | <percentage>", "<number> | <percentage>[-1,1]", "<number> | <percentage>[-1,1]"],
		},
	},
});

// Delta Phi Star perceptual lightness contrast
// See https://github.com/Myndex/deltaphistar
// The (difference between two Lstars each raised to phi) raised to (1/phi)
// Symmetric, does not matter which is foreground and which is background


const phi = Math.pow(5, 0.5) * 0.5 + 0.5; // Math.phi can be used if Math.js

function contrastDeltaPhi (color1, color2) {
	color1 = getColor(color1);
	color2 = getColor(color2);

	let Lstr1 = get(color1, [lab_d65, "l"]);
	let Lstr2 = get(color2, [lab_d65, "l"]);

	let deltaPhiStar = Math.abs(Math.pow(Lstr1, phi) - Math.pow(Lstr2, phi));

	let contrast = Math.pow(deltaPhiStar, (1 / phi)) * Math.SQRT2 - 40;

	return (contrast < 7.5) ? 0.0 : contrast ;
}

var contrastMethods = /*#__PURE__*/Object.freeze({
	__proto__: null,
	contrastAPCA: contrastAPCA,
	contrastDeltaPhi: contrastDeltaPhi,
	contrastLstar: contrastLstar,
	contrastMichelson: contrastMichelson,
	contrastWCAG21: contrastWCAG21,
	contrastWeber: contrastWeber
});

function contrast (background, foreground, o = {}) {
	if (isString(o)) {
		o = {algorithm: o};
	}

	let {algorithm, ...rest} = o;

	if (!algorithm) {
		let algorithms = Object.keys(contrastMethods).map(a => a.replace(/^contrast/, "")).join(", ");
		throw new TypeError(`contrast() function needs a contrast algorithm. Please specify one of: ${algorithms}`);
	}

	background = getColor(background);
	foreground = getColor(foreground);

	for (let a in contrastMethods) {
		if ("contrast" + algorithm.toLowerCase() === a.toLowerCase()) {
			return contrastMethods[a](background, foreground, rest);
		}
	}

	throw new TypeError(`Unknown contrast algorithm: ${algorithm}`);
}

// Chromaticity coordinates
function uv (color) {
	// Assumes getAll() calls getColor() on color
	let [X, Y, Z] = getAll(color, xyz_d65);
	let denom = X + 15 * Y + 3 * Z;
	return [4 * X / denom, 9 * Y / denom];
}

function xy (color) {
	// Assumes getAll() calls getColor() on color
	let [X, Y, Z] = getAll(color, xyz_d65);
	let  sum = X + Y + Z;
	return [X / sum, Y / sum];
}

function register$1 (Color) {
	// no setters, as lightness information is lost
	// when converting color to chromaticity
	Object.defineProperty(Color.prototype, "uv", {
		get () {
			return uv(this);
		},
	});

	Object.defineProperty(Color.prototype, "xy", {
		get () {
			return xy(this);
		},
	});
}

var chromaticity = /*#__PURE__*/Object.freeze({
	__proto__: null,
	register: register$1,
	uv: uv,
	xy: xy
});

function deltaE (c1, c2, o = {}) {
	if (isString(o)) {
		o = {method: o};
	}

	let {method = defaults.deltaE, ...rest} = o;

	for (let m in deltaEMethods) {
		if ("deltae" + method.toLowerCase() === m.toLowerCase()) {
			return deltaEMethods[m](c1, c2, rest);
		}
	}

	throw new TypeError(`Unknown deltaE method: ${method}`);
}

function lighten (color, amount = .25) {
	let space = ColorSpace.get("oklch", "lch");
	let lightness = [space, "l"];
	return set(color, lightness, l => l * (1 + amount));
}

function darken (color, amount = .25) {
	let space = ColorSpace.get("oklch", "lch");
	let lightness = [space, "l"];
	return set(color, lightness, l => l * (1 - amount));
}

var variations = /*#__PURE__*/Object.freeze({
	__proto__: null,
	darken: darken,
	lighten: lighten
});

/**
 * Functions related to color interpolation
 */

/**
 * Return an intermediate color between two colors
 * Signatures: mix(c1, c2, p, options)
 *             mix(c1, c2, options)
 *             mix(color)
 * @param {Color | string} c1 The first color
 * @param {Color | string} [c2] The second color
 * @param {number} [p=.5] A 0-1 percentage where 0 is c1 and 1 is c2
 * @param {Object} [o={}]
 * @return {Color}
 */
function mix (c1, c2, p = .5, o = {}) {
	[c1, c2] = [getColor(c1), getColor(c2)];

	if (type(p) === "object") {
		[p, o] = [.5, p];
	}

	let r = range(c1, c2, o);
	return r(p);
}

/**
 *
 * @param {Color | string | Function} c1 The first color or a range
 * @param {Color | string} [c2] The second color if c1 is not a range
 * @param {Object} [options={}]
 * @return {Color[]}
 */
function steps (c1, c2, options = {}) {
	let colorRange;

	if (isRange(c1)) {
		// Tweaking existing range
		[colorRange, options] = [c1, c2];
		[c1, c2] = colorRange.rangeArgs.colors;
	}

	let {
		maxDeltaE, deltaEMethod,
		steps = 2, maxSteps = 1000,
		...rangeOptions
	} = options;

	if (!colorRange) {
		[c1, c2] = [getColor(c1), getColor(c2)];
		colorRange = range(c1, c2, rangeOptions);
	}

	let totalDelta = deltaE(c1, c2);
	let actualSteps = maxDeltaE > 0 ? Math.max(steps, Math.ceil(totalDelta / maxDeltaE) + 1) : steps;
	let ret = [];

	if (maxSteps !== undefined) {
		actualSteps = Math.min(actualSteps, maxSteps);
	}

	if (actualSteps === 1) {
		ret = [{p: .5, color: colorRange(.5)}];
	}
	else {
		let step = 1 / (actualSteps - 1);
		ret = Array.from({length: actualSteps}, (_, i) => {
			let p = i * step;
			return {p, color: colorRange(p)};
		});
	}

	if (maxDeltaE > 0) {
		// Iterate over all stops and find max deltaE
		let maxDelta = ret.reduce((acc, cur, i) => {
			if (i === 0) {
				return 0;
			}

			let ΔΕ = deltaE(cur.color, ret[i - 1].color, deltaEMethod);
			return Math.max(acc, ΔΕ);
		}, 0);

		while (maxDelta > maxDeltaE) {
			// Insert intermediate stops and measure maxDelta again
			// We need to do this for all pairs, otherwise the midpoint shifts
			maxDelta = 0;

			for (let i = 1; (i < ret.length) && (ret.length < maxSteps); i++) {
				let prev = ret[i - 1];
				let cur = ret[i];

				let p = (cur.p + prev.p) / 2;
				let color = colorRange(p);
				maxDelta = Math.max(maxDelta, deltaE(color, prev.color), deltaE(color, cur.color));
				ret.splice(i, 0, {p, color: colorRange(p)});
				i++;
			}
		}
	}

	ret = ret.map(a => a.color);

	return ret;
}

/**
 * Interpolate to color2 and return a function that takes a 0-1 percentage
 * @param {Color | string | Function} color1 The first color or an existing range
 * @param {Color | string} [color2] If color1 is a color, this is the second color
 * @param {Object} [options={}]
 * @returns {Function} A function that takes a 0-1 percentage and returns a color
 */
function range (color1, color2, options = {}) {
	if (isRange(color1)) {
		// Tweaking existing range
		let [r, options] = [color1, color2];

		return range(...r.rangeArgs.colors, {...r.rangeArgs.options, ...options});
	}

	let {space, outputSpace, progression, premultiplied} = options;

	color1 = getColor(color1);
	color2 = getColor(color2);

	// Make sure we're working on copies of these colors
	color1 = clone(color1);
	color2 = clone(color2);

	let rangeArgs = {colors: [color1, color2], options};

	if (space) {
		space = ColorSpace.get(space);
	}
	else {
		space = ColorSpace.registry[defaults.interpolationSpace] || color1.space;
	}

	outputSpace = outputSpace ? ColorSpace.get(outputSpace) : space;

	color1 = to(color1, space);
	color2 = to(color2, space);

	// Gamut map to avoid areas of flat color
	color1 = toGamut(color1);
	color2 = toGamut(color2);

	// Handle hue interpolation
	// See https://github.com/w3c/csswg-drafts/issues/4735#issuecomment-635741840
	if (space.coords.h && space.coords.h.type === "angle") {
		let arc = options.hue = options.hue || "shorter";

		let hue = [space, "h"];
		let [θ1, θ2] = [get(color1, hue), get(color2, hue)];
		// Undefined hues must be evaluated before hue fix-up to properly
		// calculate hue arcs between undefined and defined hues.
		// See https://github.com/w3c/csswg-drafts/issues/9436#issuecomment-1746957545
		if (isNaN(θ1) && !isNaN(θ2)) {
			θ1 = θ2;
		}
		else if (isNaN(θ2) && !isNaN(θ1)) {
			θ2 = θ1;
		}
		[θ1, θ2] = adjust(arc, [θ1, θ2]);
		set(color1, hue, θ1);
		set(color2, hue, θ2);
	}

	if (premultiplied) {
		// not coping with polar spaces yet
		color1.coords = color1.coords.map(c => c * color1.alpha);
		color2.coords = color2.coords.map(c => c * color2.alpha);
	}

	return Object.assign(p => {
		p = progression ? progression(p) : p;
		let coords = color1.coords.map((start, i) => {
			let end = color2.coords[i];
			return interpolate(start, end, p);
		});

		let alpha = interpolate(color1.alpha, color2.alpha, p);
		let ret = {space, coords, alpha};

		if (premultiplied) {
			// undo premultiplication
			ret.coords = ret.coords.map(c => c / alpha);
		}

		if (outputSpace !== space) {
			ret = to(ret, outputSpace);
		}

		return ret;
	}, {
		rangeArgs,
	});
}

function isRange (val) {
	return type(val) === "function" && !!val.rangeArgs;
}

defaults.interpolationSpace = "lab";

function register (Color) {
	Color.defineFunction("mix", mix, {returns: "color"});
	Color.defineFunction("range", range, {returns: "function<color>"});
	Color.defineFunction("steps", steps, {returns: "array<color>"});
}

var interpolation = /*#__PURE__*/Object.freeze({
	__proto__: null,
	isRange: isRange,
	mix: mix,
	range: range,
	register: register,
	steps: steps
});

var HSL = new ColorSpace({
	id: "hsl",
	name: "HSL",
	coords: {
		h: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
		s: {
			range: [0, 100],
			name: "Saturation",
		},
		l: {
			range: [0, 100],
			name: "Lightness",
		},
	},

	base: sRGB,

	// Adapted from https://drafts.csswg.org/css-color-4/better-rgbToHsl.js
	fromBase: rgb => {
		let max = Math.max(...rgb);
		let min = Math.min(...rgb);
		let [r, g, b] = rgb;
		let [h, s, l] = [NaN, 0, (min + max) / 2];
		let d = max - min;

		if (d !== 0) {
			s = (l === 0 || l === 1) ? 0 : (max - l) / Math.min(l, 1 - l);

			switch (max) {
				case r: h = (g - b) / d + (g < b ? 6 : 0); break;
				case g: h = (b - r) / d + 2; break;
				case b: h = (r - g) / d + 4;
			}

			h = h * 60;
		}

		// Very out of gamut colors can produce negative saturation
		// If so, just rotate the hue by 180 and use a positive saturation
		// see https://github.com/w3c/csswg-drafts/issues/9222
		if (s < 0) {
			h += 180;
			s = Math.abs(s);
		}

		if (h >= 360) {
			h -= 360;
		}

		return [h, s * 100, l * 100];
	},

	// Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative
	toBase: hsl => {
		let [h, s, l] = hsl;
		h = h % 360;

		if (h < 0) {
			h += 360;
		}

		s /= 100;
		l /= 100;

		function f (n) {
			let k = (n + h / 30) % 12;
			let a = s * Math.min(l, 1 - l);
			return l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));
		}

		return [f(0), f(8), f(4)];
	},

	formats: {
		"hsl": {
			coords: ["<number> | <angle>", "<percentage>", "<percentage>"],
		},
		"hsla": {
			coords: ["<number> | <angle>", "<percentage>", "<percentage>"],
			commas: true,
			lastAlpha: true,
		},
	},
});

// The Hue, Whiteness Blackness (HWB) colorspace
// See https://drafts.csswg.org/css-color-4/#the-hwb-notation
// Note that, like HSL, calculations are done directly on
// gamma-corrected sRGB values rather than linearising them first.

var HSV = new ColorSpace({
	id: "hsv",
	name: "HSV",
	coords: {
		h: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
		s: {
			range: [0, 100],
			name: "Saturation",
		},
		v: {
			range: [0, 100],
			name: "Value",
		},
	},

	base: HSL,
	// https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion
	fromBase (hsl) {
		let [h, s, l] = hsl;
		s /= 100;
		l /= 100;

		let v = l + s * Math.min(l, 1 - l);

		return [
			h, // h is the same
			v === 0 ? 0 : 200 * (1 - l / v), // s
			100 * v,
		];
	},
	// https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion
	toBase (hsv) {
		let [h, s, v] = hsv;

		s /= 100;
		v /= 100;

		let l = v * (1 - s / 2);

		return [
			h, // h is the same
			(l === 0 || l === 1) ? 0 : ((v - l) / Math.min(l, 1 - l)) * 100,
			l * 100,
		];
	},

	formats: {
		color: {
			id: "--hsv",
			coords: ["<number> | <angle>", "<percentage> | <number>", "<percentage> | <number>"],
		},
	},
});

// The Hue, Whiteness Blackness (HWB) colorspace
// See https://drafts.csswg.org/css-color-4/#the-hwb-notation
// Note that, like HSL, calculations are done directly on
// gamma-corrected sRGB values rather than linearising them first.

var hwb = new ColorSpace({
	id: "hwb",
	name: "HWB",
	coords: {
		h: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
		w: {
			range: [0, 100],
			name: "Whiteness",
		},
		b: {
			range: [0, 100],
			name: "Blackness",
		},
	},

	base: HSV,
	fromBase (hsv) {
		let [h, s, v] = hsv;

		return [h, v * (100 - s) / 100, 100 - v];
	},
	toBase (hwb) {
		let [h, w, b] = hwb;

		// Now convert percentages to [0..1]
		w /= 100;
		b /= 100;

		// Achromatic check (white plus black >= 1)
		let sum = w + b;
		if (sum >= 1) {
			let gray = w / sum;
			return [h, 0, gray * 100];
		}

		let v = (1 - b);
		let s = (v === 0) ? 0 : 1 - w / v;
		return [h, s * 100, v * 100];
	},

	formats: {
		"hwb": {
			coords: ["<number> | <angle>", "<percentage> | <number>", "<percentage> | <number>"],
		},
	},
});

// convert an array of linear-light a98-rgb values to CIE XYZ
// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html
// has greater numerical precision than section 4.3.5.3 of
// https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf
// but the values below were calculated from first principles
// from the chromaticity coordinates of R G B W
const toXYZ_M$2 = [
	[ 0.5766690429101305,   0.1855582379065463,   0.1882286462349947  ],
	[ 0.29734497525053605,  0.6273635662554661,   0.07529145849399788 ],
	[ 0.02703136138641234,  0.07068885253582723,  0.9913375368376388  ],
];

const fromXYZ_M$2 = [
	[  2.0415879038107465,    -0.5650069742788596,   -0.34473135077832956 ],
	[ -0.9692436362808795,     1.8759675015077202,    0.04155505740717557 ],
	[  0.013444280632031142,  -0.11836239223101838,   1.0151749943912054  ],
];

var A98Linear = new RGBColorSpace({
	id: "a98rgb-linear",
	cssId: "--a98-rgb-linear",
	name: "Linear Adobe® 98 RGB compatible",
	white: "D65",
	toXYZ_M: toXYZ_M$2,
	fromXYZ_M: fromXYZ_M$2,
});

var a98rgb = new RGBColorSpace({
	id: "a98rgb",
	cssId: "a98-rgb",
	name: "Adobe® 98 RGB compatible",
	base: A98Linear,
	toBase: RGB => RGB.map(val => Math.pow(Math.abs(val), 563 / 256) * Math.sign(val)),
	fromBase: RGB => RGB.map(val => Math.pow(Math.abs(val), 256 / 563) * Math.sign(val)),
});

// convert an array of  prophoto-rgb values to CIE XYZ
// using  D50 (so no chromatic adaptation needed afterwards)
// matrix cannot be expressed in rational form, but is calculated to 64 bit accuracy
// see https://github.com/w3c/csswg-drafts/issues/7675
const toXYZ_M$1 = [
	[ 0.79776664490064230,  0.13518129740053308,  0.03134773412839220 ],
	[ 0.28807482881940130,  0.71183523424187300,  0.00008993693872564 ],
	[ 0.00000000000000000,  0.00000000000000000,  0.82510460251046020 ],
];

const fromXYZ_M$1 = [
	[  1.34578688164715830, -0.25557208737979464, -0.05110186497554526 ],
	[ -0.54463070512490190,  1.50824774284514680,  0.02052744743642139 ],
	[  0.00000000000000000,  0.00000000000000000,  1.21196754563894520 ],
];

var ProPhotoLinear = new RGBColorSpace({
	id: "prophoto-linear",
	cssId: "--prophoto-rgb-linear",
	name: "Linear ProPhoto",
	white: "D50",
	base: XYZ_D50,
	toXYZ_M: toXYZ_M$1,
	fromXYZ_M: fromXYZ_M$1,
});

const Et = 1 / 512;
const Et2 = 16 / 512;

var prophoto = new RGBColorSpace({
	id: "prophoto",
	cssId: "prophoto-rgb",
	name: "ProPhoto",
	base: ProPhotoLinear,
	toBase (RGB) {
		// Transfer curve is gamma 1.8 with a small linear portion
		return RGB.map(v => v < Et2 ? v / 16 : v ** 1.8);
	},
	fromBase (RGB) {
		return RGB.map(v => v >= Et ? v ** (1 / 1.8) : 16 * v);
	},
});

var oklch = new ColorSpace({
	id: "oklch",
	name: "Oklch",
	coords: {
		l: {
			refRange: [0, 1],
			name: "Lightness",
		},
		c: {
			refRange: [0, 0.4],
			name: "Chroma",
		},
		h: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
	},
	white: "D65",

	base: OKLab,
	fromBase (oklab) {
		// Convert to polar form
		let [L, a, b] = oklab;
		let h;
		const ε = 0.0002; // chromatic components much smaller than a,b

		if (Math.abs(a) < ε && Math.abs(b) < ε) {
			h = NaN;
		}
		else {
			h = Math.atan2(b, a) * 180 / Math.PI;
		}

		return [
			L, // OKLab L is still L
			Math.sqrt(a ** 2 + b ** 2), // Chroma
			constrain(h), // Hue, in degrees [0 to 360)
		];
	},
	// Convert from polar form
	toBase (oklch) {
		let [L, C, h] = oklch;
		let a, b;

		// check for NaN hue
		if (isNaN(h)) {
			a = 0;
			b = 0;
		}
		else {
			a = C * Math.cos(h * Math.PI / 180);
			b = C * Math.sin(h * Math.PI / 180);
		}

		return [ L, a, b ];
	},

	formats: {
		"oklch": {
			coords: ["<percentage> | <number>", "<number> | <percentage>[0,1]", "<number> | <angle>"],
		},
	},
});

let white = WHITES.D65;

const ε$2 = 216 / 24389;  // 6^3/29^3 == (24/116)^3
const κ$1 = 24389 / 27;   // 29^3/3^3
const [U_PRIME_WHITE, V_PRIME_WHITE] = uv({space: xyz_d65, coords: white});

var Luv = new ColorSpace({
	id: "luv",
	name: "Luv",
	coords: {
		l: {
			refRange: [0, 100],
			name: "Lightness",
		},
		// Reference ranges from https://facelessuser.github.io/coloraide/colors/luv/
		u: {
			refRange: [-215, 215],
		},
		v: {
			refRange: [-215, 215],
		},
	},

	white: white,
	base: xyz_d65,

	// Convert D65-adapted XYZ to Luv
	// https://en.wikipedia.org/wiki/CIELUV#The_forward_transformation
	fromBase (XYZ) {
		let xyz = [skipNone(XYZ[0]), skipNone(XYZ[1]), skipNone(XYZ[2])];
		let y = xyz[1];

		let [up, vp] = uv({space: xyz_d65, coords: xyz});

		// Protect against XYZ of [0, 0, 0]
		if (!Number.isFinite(up) || !Number.isFinite(vp)) {
			return [0, 0, 0];
		}

		let L = y <= ε$2 ? κ$1 * y : 116 * Math.cbrt(y) - 16;
		return [
			L,
			13 * L * (up - U_PRIME_WHITE),
			13 * L * (vp - V_PRIME_WHITE),
		 ];
	},

	// Convert Luv to D65-adapted XYZ
	// https://en.wikipedia.org/wiki/CIELUV#The_reverse_transformation
	toBase (Luv) {
		let [L, u, v] = Luv;

		// Protect against division by zero and NaN Lightness
		if (L === 0 || isNone(L)) {
			return [0, 0, 0];
		}

		u = skipNone(u);
		v = skipNone(v);

		let up = (u / (13 * L)) + U_PRIME_WHITE;
		let vp = (v / (13 * L)) + V_PRIME_WHITE;

		let y = L <= 8 ? L / κ$1 : Math.pow((L + 16) / 116, 3);

		return [
			y * ((9 * up) / (4 * vp)),
			y,
			y * ((12 - 3 * up - 20 * vp) / (4 * vp)),
		];
	},

	formats: {
		color: {
			id: "--luv",
			coords: ["<number> | <percentage>", "<number> | <percentage>[-1,1]", "<number> | <percentage>[-1,1]"],
		},
	},
});

var LCHuv = new ColorSpace({
	id: "lchuv",
	name: "LChuv",
	coords: {
		l: {
			refRange: [0, 100],
			name: "Lightness",
		},
		c: {
			refRange: [0, 220],
			name: "Chroma",
		},
		h: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
	},

	base: Luv,
	fromBase (Luv) {
		// Convert to polar form
		let [L, u, v] = Luv;
		let hue;
		const ε = 0.02;

		if (Math.abs(u) < ε && Math.abs(v) < ε) {
			hue = NaN;
		}
		else {
			hue = Math.atan2(v, u) * 180 / Math.PI;
		}

		return [
			L, // L is still L
			Math.sqrt(u ** 2 + v ** 2), // Chroma
			constrain(hue), // Hue, in degrees [0 to 360)
		];
	},
	toBase (LCH) {
		// Convert from polar form
		let [Lightness, Chroma, Hue] = LCH;
		// Clamp any negative Chroma
		if (Chroma < 0) {
			Chroma = 0;
		}
		// Deal with NaN Hue
		if (isNaN(Hue)) {
			Hue = 0;
		}
		return [
			Lightness, // L is still L
			Chroma * Math.cos(Hue * Math.PI / 180), // u
			Chroma * Math.sin(Hue * Math.PI / 180),  // v
		];
	},

	formats: {
		color: {
			id: "--lchuv",
			coords: ["<number> | <percentage>", "<number> | <percentage>", "<number> | <angle>"],
		},
	},
});

/*
Adapted from: https://github.com/hsluv/hsluv-javascript/blob/14b49e6cf9a9137916096b8487a5372626b57ba4/src/hsluv.ts

Copyright (c) 2012-2022 Alexei Boronine

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


const ε$1 = 216 / 24389;  // 6^3/29^3 == (24/116)^3
const κ = 24389 / 27;   // 29^3/3^3

const m_r0 = fromXYZ_M$3[0][0];
const m_r1 = fromXYZ_M$3[0][1];
const m_r2 = fromXYZ_M$3[0][2];
const m_g0 = fromXYZ_M$3[1][0];
const m_g1 = fromXYZ_M$3[1][1];
const m_g2 = fromXYZ_M$3[1][2];
const m_b0 = fromXYZ_M$3[2][0];
const m_b1 = fromXYZ_M$3[2][1];
const m_b2 = fromXYZ_M$3[2][2];

function distanceFromOriginAngle (slope, intercept, angle) {
	const d = intercept / (Math.sin(angle) - slope * Math.cos(angle));
	return d < 0 ? Infinity : d;
}

function calculateBoundingLines (l) {
	const sub1 = Math.pow(l + 16, 3) / 1560896;
	const sub2 = sub1 > ε$1 ? sub1 : l / κ;
	const s1r = sub2 * (284517 * m_r0 - 94839 * m_r2);
	const s2r = sub2 * (838422 * m_r2 + 769860 * m_r1 + 731718 * m_r0);
	const s3r = sub2 * (632260 * m_r2 - 126452 * m_r1);
	const s1g = sub2 * (284517 * m_g0 - 94839 * m_g2);
	const s2g = sub2 * (838422 * m_g2 + 769860 * m_g1 + 731718 * m_g0);
	const s3g = sub2 * (632260 * m_g2 - 126452 * m_g1);
	const s1b = sub2 * (284517 * m_b0 - 94839 * m_b2);
	const s2b = sub2 * (838422 * m_b2 + 769860 * m_b1 + 731718 * m_b0);
	const s3b = sub2 * (632260 * m_b2 - 126452 * m_b1);

	return {
		r0s: s1r / s3r,
		r0i: s2r * l / s3r,
		r1s: s1r / (s3r + 126452),
		r1i: (s2r - 769860) * l / (s3r + 126452),
		g0s: s1g / s3g,
		g0i: s2g * l / s3g,
		g1s: s1g / (s3g + 126452),
		g1i: (s2g - 769860) * l / (s3g + 126452),
		b0s: s1b / s3b,
		b0i: s2b * l / s3b,
		b1s: s1b / (s3b + 126452),
		b1i: (s2b - 769860) * l / (s3b + 126452),
	};
}

function calcMaxChromaHsluv (lines, h) {
	const hueRad = h / 360 * Math.PI * 2;
	const r0 = distanceFromOriginAngle(lines.r0s, lines.r0i, hueRad);
	const r1 = distanceFromOriginAngle(lines.r1s, lines.r1i, hueRad);
	const g0 = distanceFromOriginAngle(lines.g0s, lines.g0i, hueRad);
	const g1 = distanceFromOriginAngle(lines.g1s, lines.g1i, hueRad);
	const b0 = distanceFromOriginAngle(lines.b0s, lines.b0i, hueRad);
	const b1 = distanceFromOriginAngle(lines.b1s, lines.b1i, hueRad);

	return Math.min(r0, r1, g0, g1, b0, b1);
}

var hsluv = new ColorSpace({
	id: "hsluv",
	name: "HSLuv",
	coords: {
		h: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
		s: {
			range: [0, 100],
			name: "Saturation",
		},
		l: {
			range: [0, 100],
			name: "Lightness",
		},
	},

	base: LCHuv,
	gamutSpace: sRGB,

	// Convert LCHuv to HSLuv
	fromBase (lch) {
		let [l, c, h] = [skipNone(lch[0]), skipNone(lch[1]), skipNone(lch[2])];
		let s;

		if (l > 99.9999999) {
			s = 0;
			l = 100;
		}
		else if (l < 0.00000001) {
			s = 0;
			l = 0;
		}
		else {
			let lines = calculateBoundingLines(l);
			let max = calcMaxChromaHsluv(lines, h);
			s = c / max * 100;
		}

		return [h, s, l];
	},

	// Convert HSLuv to LCHuv
	toBase (hsl) {
		let [h, s, l] = [skipNone(hsl[0]), skipNone(hsl[1]), skipNone(hsl[2])];
		let c;

		if (l > 99.9999999) {
			l = 100;
			c = 0;
		}
		else if (l < 0.00000001) {
			l = 0;
			c = 0;
		}
		else {
			let lines = calculateBoundingLines(l);
			let max = calcMaxChromaHsluv(lines, h);
			c = max / 100 * s;
		}

		return [l, c, h];
	},

	formats: {
		color: {
			id: "--hsluv",
			coords: ["<number> | <angle>", "<percentage> | <number>", "<percentage> | <number>"],
		},
	},
});

/*
Adapted from: https://github.com/hsluv/hsluv-javascript/blob/14b49e6cf9a9137916096b8487a5372626b57ba4/src/hsluv.ts

Copyright (c) 2012-2022 Alexei Boronine

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/


fromXYZ_M$3[0][0];
fromXYZ_M$3[0][1];
fromXYZ_M$3[0][2];
fromXYZ_M$3[1][0];
fromXYZ_M$3[1][1];
fromXYZ_M$3[1][2];
fromXYZ_M$3[2][0];
fromXYZ_M$3[2][1];
fromXYZ_M$3[2][2];

function distanceFromOrigin (slope, intercept) {
	return Math.abs(intercept) / Math.sqrt(Math.pow(slope, 2) + 1);
}

function calcMaxChromaHpluv (lines) {
	let r0 = distanceFromOrigin(lines.r0s, lines.r0i);
	let r1 = distanceFromOrigin(lines.r1s, lines.r1i);
	let g0 = distanceFromOrigin(lines.g0s, lines.g0i);
	let g1 = distanceFromOrigin(lines.g1s, lines.g1i);
	let b0 = distanceFromOrigin(lines.b0s, lines.b0i);
	let b1 = distanceFromOrigin(lines.b1s, lines.b1i);

	return Math.min(r0, r1, g0, g1, b0, b1);
}

var hpluv = new ColorSpace({
	id: "hpluv",
	name: "HPLuv",
	coords: {
		h: {
			refRange: [0, 360],
			type: "angle",
			name: "Hue",
		},
		s: {
			range: [0, 100],
			name: "Saturation",
		},
		l: {
			range: [0, 100],
			name: "Lightness",
		},
	},

	base: LCHuv,
	gamutSpace: "self",

	// Convert LCHuv to HPLuv
	fromBase (lch) {
		let [l, c, h] = [skipNone(lch[0]), skipNone(lch[1]), skipNone(lch[2])];
		let s;

		if (l > 99.9999999) {
			s = 0;
			l = 100;
		}
		else if (l < 0.00000001) {
			s = 0;
			l = 0;
		}
		else {
			let lines = calculateBoundingLines(l);
			let max = calcMaxChromaHpluv(lines);
			s = c / max * 100;
		}
		return [h, s, l];
	},

	// Convert HPLuv to LCHuv
	toBase (hsl) {
		let [h, s, l] = [skipNone(hsl[0]), skipNone(hsl[1]), skipNone(hsl[2])];
		let c;

		if (l > 99.9999999) {
			l = 100;
			c = 0;
		}
		else if (l < 0.00000001) {
			l = 0;
			c = 0;
		}
		else {
			let lines = calculateBoundingLines(l);
			let max = calcMaxChromaHpluv(lines);
			c = max / 100 * s;
		}

		return [l, c, h];
	},

	formats: {
		color: {
			id: "--hpluv",
			coords: ["<number> | <angle>", "<percentage> | <number>", "<percentage> | <number>"],
		},
	},
});

const Yw = 203;	// absolute luminance of media white, cd/m²
const n = 2610 / (2 ** 14);
const ninv = (2 ** 14) / 2610;
const m = 2523 / (2 ** 5);
const minv = (2 ** 5) / 2523;
const c1 = 3424 / (2 ** 12);
const c2 = 2413 / (2 ** 7);
const c3 = 2392 / (2 ** 7);

var rec2100Pq = new RGBColorSpace({
	id: "rec2100pq",
	cssId: "rec2100-pq",
	name: "REC.2100-PQ",
	base: REC2020Linear,
	toBase (RGB) {
		// given PQ encoded component in range [0, 1]
		// return media-white relative linear-light
		return RGB.map(function (val) {
			let x = ((Math.max(((val ** minv) - c1), 0) / (c2 - (c3 * (val ** minv)))) ** ninv);
			return (x * 10000 / Yw); 	// luminance relative to diffuse white, [0, 70 or so].
		});
	},
	fromBase (RGB) {
		// given media-white relative linear-light
		// returnPQ encoded component in range [0, 1]
		return RGB.map(function (val) {
			let x = Math.max(val * Yw / 10000, 0); 	// absolute luminance of peak white is 10,000 cd/m².
			let num = (c1 + (c2 * (x ** n)));
			let denom = (1 + (c3 * (x ** n)));

			return ((num / denom)  ** m);
		});
	},
});

// FIXME see https://github.com/LeaVerou/color.js/issues/190

const a = 0.17883277;
const b = 0.28466892; // 1 - (4 * a)
const c = 0.55991073; // 0.5 - a * Math.log(4 *a)

const scale = 3.7743;	// Place 18% grey at HLG 0.38, so media white at 0.75

var rec2100Hlg = new RGBColorSpace({
	id: "rec2100hlg",
	cssId: "rec2100-hlg",
	name: "REC.2100-HLG",
	referred: "scene",

	base: REC2020Linear,
	toBase (RGB) {
		// given HLG encoded component in range [0, 1]
		// return media-white relative linear-light
		return RGB.map(function (val) {
			// first the HLG EOTF
			// ITU-R BT.2390-10 p.30 section
			// 6.3 The hybrid log-gamma electro-optical transfer function (EOTF)
			// Then scale by 3 so media white is 1.0
			if (val <= 0.5) {
				return (val ** 2) / 3 * scale;
			}
			return ((Math.exp((val - c) / a) + b) / 12) * scale;
		});
	},
	fromBase (RGB) {
		// given media-white relative linear-light
		// where diffuse white is 1.0,
		// return HLG encoded component in range [0, 1]
		return RGB.map(function (val) {
			// first scale to put linear-light media white at 1/3
			val /= scale;
			// now the HLG OETF
			// ITU-R BT.2390-10 p.23
			// 6.1 The hybrid log-gamma opto-electronic transfer function (OETF)
			if (val <= 1 / 12) {
				return Math.sqrt(3 * val);
			}
			return a * Math.log(12 * val - b) + c;
		});
	},
});

const CATs = {};

hooks.add("chromatic-adaptation-start", env => {
	if (env.options.method) {
		env.M = adapt(env.W1, env.W2, env.options.method);
	}
});

hooks.add("chromatic-adaptation-end", env => {
	if (!env.M) {
		env.M = adapt(env.W1, env.W2, env.options.method);
	}
});

function defineCAT ({id, toCone_M, fromCone_M}) {
	// Use id, toCone_M, fromCone_M like variables
	CATs[id] = arguments[0];
}

function adapt (W1, W2, id = "Bradford") {
	// adapt from a source whitepoint or illuminant W1
	// to a destination whitepoint or illuminant W2,
	// using the given chromatic adaptation transform (CAT)
	// debugger;
	let method = CATs[id];

	let [ρs, γs, βs] = multiplyMatrices(method.toCone_M, W1);
	let [ρd, γd, βd] = multiplyMatrices(method.toCone_M, W2);

	// all practical illuminants have non-zero XYZ so no division by zero can occur below
	let scale = [
		[ρd / ρs,  0,        0      ],
		[0,        γd / γs,  0      ],
		[0,        0,        βd / βs],
	];
	// console.log({scale});

	let scaled_cone_M = multiplyMatrices(scale, method.toCone_M);
	let adapt_M	= multiplyMatrices(method.fromCone_M, scaled_cone_M);
	// console.log({scaled_cone_M, adapt_M});
	return adapt_M;
}

defineCAT({
	id: "von Kries",
	toCone_M: [
		[  0.4002400,  0.7076000, -0.0808100 ],
		[ -0.2263000,  1.1653200,  0.0457000 ],
		[  0.0000000,  0.0000000,  0.9182200 ],
	],
	fromCone_M: [
		[ 1.8599363874558397, -1.1293816185800916,   0.21989740959619328     ],
		[ 0.3611914362417676,  0.6388124632850422,  -0.000006370596838649899 ],
		[ 0,                   0,                    1.0890636230968613      ],
	],
});

defineCAT({
	id: "Bradford",
	// Convert an array of XYZ values in the range 0.0 - 1.0
	// to cone fundamentals
	toCone_M: [
		[  0.8951000,  0.2664000, -0.1614000 ],
		[ -0.7502000,  1.7135000,  0.0367000 ],
		[  0.0389000, -0.0685000,  1.0296000 ],
	],
	// and back
	fromCone_M: [
		[  0.9869929054667121, -0.14705425642099013, 0.15996265166373122  ],
		[  0.4323052697233945,  0.5183602715367774,  0.049291228212855594 ],
		[ -0.00852866457517732, 0.04004282165408486, 0.96848669578755     ],
	],
});

defineCAT({
	id: "CAT02",
	// with complete chromatic adaptation to W2, so D = 1.0
	toCone_M: [
		[  0.7328000,  0.4296000, -0.1624000 ],
		[ -0.7036000,  1.6975000,  0.0061000 ],
		[  0.0030000,  0.0136000,  0.9834000 ],
	],
	fromCone_M: [
		[  1.0961238208355142,   -0.27886900021828726, 0.18274517938277307 ],
		[  0.4543690419753592,    0.4735331543074117,  0.07209780371722911 ],
		[ -0.009627608738429355, -0.00569803121611342, 1.0153256399545427  ],
	],
});

defineCAT({
	id: "CAT16",
	toCone_M: [
		[  0.401288,  0.650173, -0.051461 ],
		[ -0.250268,  1.204414,  0.045854 ],
		[ -0.002079,  0.048952,  0.953127 ],
	],
	// the extra precision is needed to avoid roundtripping errors
	fromCone_M: [
		[  1.862067855087233,   -1.0112546305316845,  0.14918677544445172  ],
		[  0.3875265432361372,   0.6214474419314753, -0.008973985167612521 ],
		[ -0.01584149884933386, -0.03412293802851557, 1.0499644368778496   ],
	],
});

Object.assign(WHITES, {
	// whitepoint values from ASTM E308-01 with 10nm spacing, 1931 2 degree observer
	// all normalized to Y (luminance) = 1.00000
	// Illuminant A is a tungsten electric light, giving a very warm, orange light.
	A:   [1.09850, 1.00000, 0.35585],

	// Illuminant C was an early approximation to daylight: illuminant A with a blue filter.
	C:   [0.98074, 1.000000, 1.18232],

	// The daylight series of illuminants simulate natural daylight.
	// The color temperature (in degrees Kelvin/100) ranges from
	// cool, overcast daylight (D50) to bright, direct sunlight (D65).
	D55: [0.95682, 1.00000, 0.92149],
	D75: [0.94972, 1.00000, 1.22638],

	// Equal-energy illuminant, used in two-stage CAT16
	E:   [1.00000, 1.00000, 1.00000],

	// The F series of illuminants represent fluorescent lights
	F2:  [0.99186, 1.00000, 0.67393],
	F7:  [0.95041, 1.00000, 1.08747],
	F11: [1.00962, 1.00000, 0.64350],
});

// The ACES whitepoint
// see TB-2018-001 Derivation of the ACES White Point CIE Chromaticity Coordinates
// also https://github.com/ampas/aces-dev/blob/master/documents/python/TB-2018-001/aces_wp.py
// Similar to D60
WHITES.ACES = [0.32168 / 0.33767, 1.00000, (1.00000 - 0.32168 - 0.33767) / 0.33767];

// convert an array of linear-light ACEScc values to CIE XYZ
const toXYZ_M = [
	[  0.6624541811085053,   0.13400420645643313,  0.1561876870049078  ],
	[  0.27222871678091454,  0.6740817658111484,   0.05368951740793705 ],
	[ -0.005574649490394108, 0.004060733528982826, 1.0103391003129971  ],
];
const fromXYZ_M = [
	[  1.6410233796943257,   -0.32480329418479,    -0.23642469523761225  ],
	[ -0.6636628587229829,    1.6153315916573379,   0.016756347685530137 ],
	[  0.011721894328375376, -0.008284441996237409, 0.9883948585390215   ],
];

var ACEScg = new RGBColorSpace({
	id: "acescg",
	cssId: "--acescg",
	name: "ACEScg",

	// ACEScg – A scene-referred, linear-light encoding of ACES Data
	// https://docs.acescentral.com/specifications/acescg/
	// uses the AP1 primaries, see section 4.3.1 Color primaries
	coords: {
		r: {
			range: [0, 65504],
			name: "Red",
		},
		g: {
			range: [0, 65504],
			name: "Green",
		},
		b: {
			range: [0, 65504],
			name: "Blue",
		},
	},

	referred: "scene",

	white: WHITES.ACES,

	toXYZ_M,
	fromXYZ_M,
});

// export default Color;

const ε = 2 ** -16;

// the smallest value which, in the 32bit IEEE 754 float encoding,
// decodes as a non-negative value
const ACES_min_nonzero = -0.35828683;

// brightest encoded value, decodes to 65504
const ACES_cc_max = (Math.log2(65504) + 9.72) / 17.52; // 1.468

var acescc = new RGBColorSpace({
	id: "acescc",
	cssId: "--acescc",
	name: "ACEScc",
	// see S-2014-003 ACEScc – A Logarithmic Encoding of ACES Data
	// https://docs.acescentral.com/specifications/acescc/
	// uses the AP1 primaries, see section 4.3.1 Color primaries

	// Appendix A: "Very small ACES scene referred values below 7 1/4 stops
	// below 18% middle gray are encoded as negative ACEScc values.
	// These values should be preserved per the encoding in Section 4.4
	// so that all positive ACES values are maintained."
	coords: {
		r: {
			range: [ACES_min_nonzero, ACES_cc_max],
			name: "Red",
		},
		g: {
			range: [ACES_min_nonzero, ACES_cc_max],
			name: "Green",
		},
		b: {
			range: [ACES_min_nonzero, ACES_cc_max],
			name: "Blue",
		},
	},
	referred: "scene",

	base: ACEScg,
	// from section 4.4.2 Decoding Function
	toBase (RGB) {
		const low = (9.72 - 15) / 17.52; // -0.3014

		return RGB.map(function (val) {
			if (val <= low) {
				return (2 ** ((val * 17.52) - 9.72) - ε) * 2; // very low values, below -0.3014
			}
			else if (val < ACES_cc_max) {
				return 2 ** ((val * 17.52) - 9.72);
			}
			else { // val >= ACES_cc_max
				return 65504;
			}
		});
	},

	// Non-linear encoding function from S-2014-003, section 4.4.1 Encoding Function
	fromBase (RGB) {
		return RGB.map(function (val) {
			if (val <= 0) {
				return (Math.log2(ε) + 9.72) / 17.52; // -0.3584
			}
			else if (val < ε) {
				return  (Math.log2(ε + val * 0.5) + 9.72) / 17.52;
			}
			else { // val >= ε
				return  (Math.log2(val) + 9.72) / 17.52;
			}
		});
	},
	// encoded media white (rgb 1,1,1) => linear  [ 222.861, 222.861, 222.861 ]
	// encoded media black (rgb 0,0,0) => linear [ 0.0011857, 0.0011857, 0.0011857]
});

var spaces = /*#__PURE__*/Object.freeze({
	__proto__: null,
	A98RGB: a98rgb,
	A98RGB_Linear: A98Linear,
	ACEScc: acescc,
	ACEScg: ACEScg,
	CAM16_JMh: cam16,
	HCT: hct,
	HPLuv: hpluv,
	HSL: HSL,
	HSLuv: hsluv,
	HSV: HSV,
	HWB: hwb,
	ICTCP: ictcp,
	JzCzHz: jzczhz,
	Jzazbz: Jzazbz,
	LCH: lch,
	LCHuv: LCHuv,
	Lab: lab,
	Lab_D65: lab_d65,
	Luv: Luv,
	OKLCH: oklch,
	OKLab: OKLab,
	P3: P3,
	P3_Linear: P3Linear,
	ProPhoto: prophoto,
	ProPhoto_Linear: ProPhotoLinear,
	REC_2020: REC2020,
	REC_2020_Linear: REC2020Linear,
	REC_2100_HLG: rec2100Hlg,
	REC_2100_PQ: rec2100Pq,
	XYZ_ABS_D65: XYZ_Abs_D65,
	XYZ_D50: XYZ_D50,
	XYZ_D65: xyz_d65,
	sRGB: sRGB,
	sRGB_Linear: sRGBLinear
});

/**
 * Class that represents a color
 */
class Color {
	/**
	 * Creates an instance of Color.
	 * Signatures:
	 * - `new Color(stringToParse)`
	 * - `new Color(otherColor)`
	 * - `new Color({space, coords, alpha})`
	 * - `new Color(space, coords, alpha)`
	 * - `new Color(spaceId, coords, alpha)`
	 */
	constructor (...args) {
		let color;

		if (args.length === 1) {
			color = getColor(args[0]);
		}

		let space, coords, alpha;

		if (color) {
			space = color.space || color.spaceId;
			coords = color.coords;
			alpha = color.alpha;
		}
		else {
			// default signature new Color(ColorSpace, array [, alpha])
			[space, coords, alpha] = args;
		}

		Object.defineProperty(this, "space", {
			value: ColorSpace.get(space),
			writable: false,
			enumerable: true,
			configurable: true, // see note in https://262.ecma-international.org/8.0/#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver
		});

		this.coords = coords ? coords.slice() : [0, 0, 0];

		// Clamp alpha to [0, 1]
		this.alpha = alpha > 1 || alpha === undefined ? 1 : (alpha < 0 ? 0 : alpha);

		// Convert "NaN" to NaN
		for (let i = 0; i < this.coords.length; i++) {
			if (this.coords[i] === "NaN") {
				this.coords[i] = NaN;
			}
		}

		// Define getters and setters for each coordinate
		for (let id in this.space.coords) {
			Object.defineProperty(this, id, {
				get: () => this.get(id),
				set: value => this.set(id, value),
			});
		}
	}

	get spaceId () {
		return this.space.id;
	}

	clone () {
		return new Color(this.space, this.coords, this.alpha);
	}

	toJSON () {
		return {
			spaceId: this.spaceId,
			coords: this.coords,
			alpha: this.alpha,
		};
	}

	display (...args) {
		let ret = display(this, ...args);

		// Convert color object to Color instance
		ret.color = new Color(ret.color);

		return ret;
	}

	/**
	 * Get a color from the argument passed
	 * Basically gets us the same result as new Color(color) but doesn't clone an existing color object
	 */
	static get (color, ...args) {
		if (color instanceof Color) {
			return color;
		}

		return new Color(color, ...args);
	}

	static defineFunction (name, code, o = code) {
		let {instance = true, returns} = o;

		let func = function (...args) {
			let ret = code(...args);

			if (returns === "color") {
				ret = Color.get(ret);
			}
			else if (returns === "function<color>") {
				let f = ret;
				ret = function (...args) {
					let ret = f(...args);
					return Color.get(ret);
				};
				// Copy any function metadata
				Object.assign(ret, f);
			}
			else if (returns === "array<color>") {
				ret = ret.map(c => Color.get(c));
			}

			return ret;
		};

		if (!(name in Color)) {
			Color[name] = func;
		}

		if (instance) {
			Color.prototype[name] = function (...args) {
				return func(this, ...args);
			};
		}
	}

	static defineFunctions (o) {
		for (let name in o) {
			Color.defineFunction(name, o[name], o[name]);
		}
	}

	static extend (exports) {
		if (exports.register) {
			exports.register(Color);
		}
		else {
			// No register method, just add the module's functions
			for (let name in exports) {
				Color.defineFunction(name, exports[name]);
			}
		}
	}
}

Color.defineFunctions({
	get,
	getAll,
	set,
	setAll,
	to,
	equals,
	inGamut,
	toGamut,
	distance,
	toString: serialize,
});

Object.assign(Color, {
	util,
	hooks,
	WHITES,
	Space: ColorSpace,
	spaces: ColorSpace.registry,
	parse,

	// Global defaults one may want to configure
	defaults,
});

for (let key of Object.keys(spaces)) {
	ColorSpace.register(spaces[key]);
}

/**
 * This plugin defines getters and setters for color[spaceId]
 * e.g. color.lch on *any* color gives us the lch coords
 */

// Add space accessors to existing color spaces
for (let id in ColorSpace.registry) {
	addSpaceAccessors(id, ColorSpace.registry[id]);
}

// Add space accessors to color spaces not yet created
hooks.add("colorspace-init-end", space => {
	addSpaceAccessors(space.id, space);
	space.aliases?.forEach(alias => {
		addSpaceAccessors(alias, space);
	});
});

function addSpaceAccessors (id, space) {
	let propId = id.replace(/-/g, "_");

	Object.defineProperty(Color.prototype, propId, {
		// Convert coords to coords in another colorspace and return them
		// Source colorspace: this.spaceId
		// Target colorspace: id
		get () {
			let ret = this.getAll(id);

			if (typeof Proxy === "undefined") {
				// If proxies are not supported, just return a static array
				return ret;
			}

			// Enable color.spaceId.coordName syntax
			return new Proxy(ret, {
				has: (obj, property) => {
					try {
						ColorSpace.resolveCoord([space, property]);
						return true;
					}
					catch (e) {}

					return Reflect.has(obj, property);
				},
				get: (obj, property, receiver) => {
					if (property && typeof property !== "symbol" && !(property in obj)) {
						let {index} = ColorSpace.resolveCoord([space, property]);

						if (index >= 0) {
							return obj[index];
						}
					}

					return Reflect.get(obj, property, receiver);
				},
				set: (obj, property, value, receiver) => {
					if (property && typeof property !== "symbol" && !(property in obj) || property >= 0) {
						let {index} = ColorSpace.resolveCoord([space, property]);

						if (index >= 0) {
							obj[index] = value;

							// Update color.coords
							this.setAll(id, obj);

							return true;
						}
					}

					return Reflect.set(obj, property, value, receiver);
				},
			});
		},
		// Convert coords in another colorspace to internal coords and set them
		// Target colorspace: this.spaceId
		// Source colorspace: id
		set (coords) {
			this.setAll(id, coords);
		},
		configurable: true,
		enumerable: true,
	});
}

// Import all modules of Color.js

Color.extend(deltaEMethods);
Color.extend({deltaE});
Object.assign(Color, {deltaEMethods});
Color.extend(variations);
Color.extend({contrast});
Color.extend(chromaticity);
Color.extend(luminance);
Color.extend(interpolation);
Color.extend(contrastMethods);


//# sourceMappingURL=color.js.map


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotation.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotation.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AnnotationsApi)
/* harmony export */ });
/* harmony import */ var _annotations_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./annotations/index.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/index.js");

class AnnotationsApi {
    list = {
        _: { alias: {} },
    };
    constructor() {
        _annotations_index_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach((annotation) => {
            this.addAnnotation(annotation().name, annotation);
        });
    }
    addAnnotation(name, annotationFactory) {
        const annotation = annotationFactory();
        this.list._.alias[name] = name;
        if (Array.isArray(annotation.alias)) {
            annotation.alias.forEach((aliasName) => {
                this.list._.alias[aliasName] = name;
            });
        }
        this.list[name] = annotation;
    }
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/access.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/access.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ access)
/* harmony export */ });
function access() {
    const defaultPrivatePrefixTest = RegExp.prototype.test.bind(/^[_-]/);
    return {
        name: "access",
        parse(text) {
            return text.trim();
        },
        autofill(item) {
            if (item.access !== "auto") {
                return;
            }
            if (defaultPrivatePrefixTest(item.context.name)) {
                return "private";
            }
            return "public";
        },
        resolve(data) {
            data.forEach((item) => {
                // Ensure valid access when not autofilled.
                if (item.access === "auto") {
                    item.access = "public";
                }
            });
        },
        default() {
            return "auto";
        },
        multiple: false,
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/alias.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/alias.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ alias)
/* harmony export */ });
function alias() {
    return {
        name: "alias",
        parse(text) {
            return text.trim();
        },
        resolve(data) {
            data.forEach((item) => {
                if (item.alias === undefined) {
                    return;
                }
                const alias = item.alias;
                const name = item.context.name;
                const aliasedItem = data.find((i) => i.context.name === alias);
                if (aliasedItem === undefined) {
                    console.warn(`Item \`${name}\` is an alias of \`${alias}\` but this item doesn't exist.`);
                    delete item.alias;
                    return;
                }
                if (!Array.isArray(aliasedItem.aliased)) {
                    aliasedItem.aliased = [];
                }
                aliasedItem.aliased.push(name);
            });
        },
        allowedOn: ["function", "mixin", "variable"],
        multiple: false,
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/author.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/author.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ author)
/* harmony export */ });
function author() {
    return {
        name: "author",
        parse(text) {
            return text.trim();
        },
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/content.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/content.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ content)
/* harmony export */ });
function content() {
    return {
        name: "content",
        parse(text) {
            return text.trim();
        },
        autofill(item) {
            if (!item.content && item.context.code.indexOf("@content") > -1) {
                return "";
            }
            return;
        },
        allowedOn: ["mixin"],
        multiple: false,
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/deprecated.js":
/*!*********************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/deprecated.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ deprecated)
/* harmony export */ });
function deprecated() {
    return {
        name: "deprecated",
        parse(text) {
            return text.trim();
        },
        multiple: false,
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/example.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/example.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ example)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/utils.js");
/**
 * `@example` is a multiline annotation.
 *
 * Check if there is something on the first line and use it as the type information.
 *
 * @example html - description
 * <div></div>
 */

const descRegEx = /(\w+)\s*(?:-?\s*(.*))/;
function example() {
    return {
        name: "example",
        parse(text) {
            const instance = {
                type: "scss", // Default to `scss`.
                code: text,
            };
            // Get the optional type info.
            const optionalType = text.substr(0, text.indexOf("\n"));
            if (optionalType.trim().length !== 0) {
                const typeDesc = descRegEx.exec(optionalType);
                if (typeDesc) {
                    instance.type = typeDesc[1];
                    if (typeDesc[2].length !== 0) {
                        instance.description = typeDesc[2];
                    }
                    instance.code = text.substr(optionalType.length + 1); // Remove the type
                }
            }
            // Remove all leading/trailing line breaks.
            instance.code = instance.code.replace(/^\n|\n$/g, "");
            instance.code = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.removeReduntantWhitespace)(instance.code);
            return instance;
        },
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/group.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/group.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ group)
/* harmony export */ });
function group() {
    return {
        name: "group",
        parse(text, info) {
            const lines = text.trim().split("\n");
            const slug = lines[0].trim().toLowerCase();
            const description = lines.splice(1).join("\n").trim();
            if (description) {
                info.groupDescriptions = info.groupDescriptions || {};
                info.groupDescriptions[slug] = description;
            }
            return [slug];
        },
        default() {
            return ["undefined"];
        },
        multiple: false,
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/groupDescription.js":
/*!***************************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/groupDescription.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ groupDescriptions)
/* harmony export */ });
/**
 * `@groupDescriptions` is should not be used on its own.
 *
 * It gets filled automatically from the lines following the `@group` annotation.
 *
 * @group example
 * This is a group description. It describes the group.
 * It can be split across multiple lines.
 *
 * {
 *   'groupDescriptions': {
 *     'example': 'This is a group description. It describes the group.\nIt can be split across multiple lines.'
 *   }
 * }
 */
function groupDescriptions() {
    return {
        name: "groupDescriptions",
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/ignore.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/ignore.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ignore)
/* harmony export */ });
function ignore() {
    return {
        name: "ignore",
        parse() {
            return;
        },
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/index.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/index.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _access_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./access.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/access.js");
/* harmony import */ var _alias_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./alias.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/alias.js");
/* harmony import */ var _author_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./author.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/author.js");
/* harmony import */ var _content_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./content.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/content.js");
/* harmony import */ var _deprecated_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./deprecated.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/deprecated.js");
/* harmony import */ var _example_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./example.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/example.js");
/* harmony import */ var _group_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./group.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/group.js");
/* harmony import */ var _groupDescription_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./groupDescription.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/groupDescription.js");
/* harmony import */ var _ignore_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ignore.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/ignore.js");
/* harmony import */ var _link_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./link.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/link.js");
/* harmony import */ var _name_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./name.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/name.js");
/* harmony import */ var _output_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./output.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/output.js");
/* harmony import */ var _parameter_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./parameter.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/parameter.js");
/* harmony import */ var _property_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./property.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/property.js");
/* harmony import */ var _require_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./require.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/require.js");
/* harmony import */ var _return_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./return.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/return.js");
/* harmony import */ var _see_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./see.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/see.js");
/* harmony import */ var _since_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./since.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/since.js");
/* harmony import */ var _throw_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./throw.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/throw.js");
/* harmony import */ var _todo_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./todo.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/todo.js");
/* harmony import */ var _type_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./type.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/type.js");





















/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ([
    _access_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    _alias_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    _author_js__WEBPACK_IMPORTED_MODULE_2__["default"],
    _content_js__WEBPACK_IMPORTED_MODULE_3__["default"],
    _deprecated_js__WEBPACK_IMPORTED_MODULE_4__["default"],
    _example_js__WEBPACK_IMPORTED_MODULE_5__["default"],
    _group_js__WEBPACK_IMPORTED_MODULE_6__["default"],
    _groupDescription_js__WEBPACK_IMPORTED_MODULE_7__["default"],
    _ignore_js__WEBPACK_IMPORTED_MODULE_8__["default"],
    _link_js__WEBPACK_IMPORTED_MODULE_9__["default"],
    _name_js__WEBPACK_IMPORTED_MODULE_10__["default"],
    _output_js__WEBPACK_IMPORTED_MODULE_11__["default"],
    _parameter_js__WEBPACK_IMPORTED_MODULE_12__["default"],
    _property_js__WEBPACK_IMPORTED_MODULE_13__["default"],
    _require_js__WEBPACK_IMPORTED_MODULE_14__["default"],
    _return_js__WEBPACK_IMPORTED_MODULE_15__["default"],
    _see_js__WEBPACK_IMPORTED_MODULE_16__["default"],
    _since_js__WEBPACK_IMPORTED_MODULE_17__["default"],
    _throw_js__WEBPACK_IMPORTED_MODULE_18__["default"],
    _todo_js__WEBPACK_IMPORTED_MODULE_19__["default"],
    _type_js__WEBPACK_IMPORTED_MODULE_20__["default"],
]);


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/link.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/link.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ link)
/* harmony export */ });
const linkRegex = /\s*([^:]+:\/\/[^\s]*)?\s*(.*?)$/;
function link() {
    return {
        name: "link",
        parse(text) {
            const parsed = linkRegex.exec(text.trim());
            if (!parsed) {
                return {
                    url: "",
                    caption: "",
                };
            }
            return {
                url: parsed[1] || "",
                caption: parsed[2] || "",
            };
        },
        alias: ["source"],
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/name.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/name.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ name)
/* harmony export */ });
function name() {
    return {
        name: "name",
        parse(text) {
            return text.trim();
        },
        multiple: false,
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/output.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/output.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ output)
/* harmony export */ });
function output() {
    return {
        name: "output",
        parse(text) {
            return text.trim();
        },
        alias: ["outputs"],
        allowedOn: ["mixin"],
        multiple: false,
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/parameter.js":
/*!********************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/parameter.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parameter)
/* harmony export */ });
const typeRegEx = /^\s*(?:\{(.*)\})?\s*(?:\$?([^\s^\][]+))?\s*(?:\[([^\]]*)\])?\s*(?:-?\s*([\s\S]*))?/;
function parameter() {
    return {
        name: "parameter",
        parse(text, info, id) {
            const parsed = typeRegEx.exec(text);
            const obj = {};
            if (!parsed) {
                return undefined;
            }
            if (parsed[1]) {
                obj.type = parsed[1];
            }
            if (parsed[2]) {
                obj.name = parsed[2];
            }
            else {
                console.warn(`@parameter must at least have a name. Location: ${id}:${info.commentRange.start}:${info.commentRange.end}`);
                return undefined;
            }
            if (parsed[3]) {
                obj.default = parsed[3];
            }
            if (parsed[4]) {
                obj.description = parsed[4];
            }
            return obj;
        },
        alias: ["arg", "argument", "arguments", "param", "parameters"],
        allowedOn: ["function", "mixin"],
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/property.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/property.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ property)
/* harmony export */ });
const reqRegEx = /\s*(?:{(.*)})?\s*(?:(\$?\S+))?\s*(?:\[([^\]]*)])?\s*-?\s*([\S\s]*)\s*$/;
function property() {
    return {
        name: "property",
        parse(text) {
            const match = reqRegEx.exec(text.trim());
            const obj = {
                type: match[1] || "Map",
            };
            if (match[2]) {
                obj.name = match[2];
            }
            if (match[3]) {
                obj.default = match[3];
            }
            if (match[4]) {
                obj.description = match[4];
            }
            return obj;
        },
        alias: ["prop"],
        allowedOn: ["variable"],
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/require.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/require.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ requireAnnotation)
/* harmony export */ });
const reqRegEx = /^\s*(?:\{(.*)\})?\s*(?:(\$?[^\s]+))?\s*(?:-?\s*([^<$]*))?\s*(?:<?\s*(.*)\s*>)?$/;
// Namespace delimiters.
const nsDelimiters = ["::", ":", "\\.", "/"];
const ns = new RegExp(nsDelimiters.join("|"), "g");
// Split a namespace on possible namespace delimiters.
const splitNamespace = (value) => value.split(ns);
function requireAnnotation() {
    return {
        name: "require",
        parse(text) {
            const match = reqRegEx.exec(text.trim());
            const obj = {
                type: match[1] || "function",
                name: match[2],
                external: false,
                description: undefined,
                url: undefined,
            };
            obj.external = splitNamespace(obj.name).length > 1;
            if (obj.name.indexOf("$") === 0) {
                obj.type = "variable";
                obj.name = obj.name.slice(1);
            }
            if (obj.name.indexOf("%") === 0) {
                obj.type = "placeholder";
                obj.name = obj.name.slice(1);
            }
            if (match[3]) {
                obj.description = match[3].trim();
            }
            if (match[4]) {
                obj.url = match[4];
            }
            return obj;
        },
        autofill(item) {
            const type = item.context.type;
            const shouldContinue = type === "mixin" || type === "placeholder" || type === "function";
            if (!shouldContinue) {
                return;
            }
            let handWritten;
            if (item.require) {
                handWritten = {};
                for (const reqObj of item.require) {
                    handWritten[reqObj.type + "-" + reqObj.name] = true;
                }
            }
            const mixinsMatches = searchForMatches(item.context.code, /@include\s+([^(;$]*)/gi, isAnnotatedByHand.bind(null, handWritten, "mixin"));
            const functionsMatches = searchForMatches(item.context.code, new RegExp("(@include)?\\s*([a-z0-9_-]+)\\s*\\(", "ig"), // Literal destorys Syntax
            isAnnotatedByHand.bind(null, handWritten, "function"), 2);
            const placeholdersMatches = searchForMatches(item.context.code, /@extend\s*%([^;\s]+)/gi, isAnnotatedByHand.bind(null, handWritten, "placeholder"));
            const variablesMatches = searchForMatches(item.context.code, /\$([a-z0-9_-]+)/gi, isAnnotatedByHand.bind(null, handWritten, "variable"));
            // Create object for each required item.
            const mixins = mixinsMatches.map(typeNameObject("mixin"));
            const functions = functionsMatches.map(typeNameObject("function"));
            const placeholders = placeholdersMatches.map(typeNameObject("placeholder"));
            const variables = variablesMatches.map(typeNameObject("variable"));
            // Merge all arrays.
            let all = mixins.concat(functions, placeholders, variables);
            // Merge in user supplyed requires if there are any.
            if (item.require && item.require.length > 0) {
                all = all.concat(item.require);
            }
            // Filter empty values.
            let filtered = all.filter((x) => {
                return x !== undefined;
            });
            if (filtered.length === 0) {
                return;
            }
            // Filter the item itself.
            filtered = filtered.filter((x) => {
                return !(x.name === item.context.name && x.type === item.context.type);
            });
            return filtered;
        },
        resolve(data) {
            data.forEach((item) => {
                if (item.require === undefined) {
                    return;
                }
                item.require = item.require
                    .map((req) => {
                    if (req.external === true) {
                        return req;
                    }
                    const reqItem = data.find((x) => x.context.name === req.name && x.context.type === req.type);
                    if (reqItem === undefined) {
                        if (!req.autofill) {
                            console.warn(`Item \`${item.context.name}\` requires \`${req.name}\` from type \`${req.type}\` but this item doesn't exist.`);
                        }
                        return;
                    }
                    if (!Array.isArray(reqItem.usedBy)) {
                        reqItem.usedBy = [];
                    }
                    reqItem.usedBy.push(item);
                    req.item = reqItem;
                    return req;
                })
                    .filter((x) => x !== undefined);
            });
        },
        alias: ["requires"],
    };
}
function isAnnotatedByHand(handWritten, type, name) {
    if (type && name && handWritten) {
        return handWritten[type + "-" + name];
    }
    return false;
}
function searchForMatches(code, regex, isAnnotatedByHandProxy, id = 1) {
    let match;
    const matches = [];
    while ((match = regex.exec(code))) {
        if (!isAnnotatedByHandProxy(match[id]) &&
            (id <= 1 || match[id - 1] === undefined)) {
            matches.push(match[id]);
        }
    }
    return matches;
}
function typeNameObject(type) {
    return function (name) {
        if (name.length === 0) {
            return;
        }
        return {
            type: type,
            name: name,
            autofill: true,
        };
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/return.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/return.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ returnAnnotation)
/* harmony export */ });
const typeRegEx = /^\s*(?:\{(.*)\})?\s*(?:-?\s*([\s\S]*))?/;
function returnAnnotation() {
    return {
        name: "return",
        parse(text, info, id) {
            const parsed = typeRegEx.exec(text);
            const obj = {};
            if (!parsed) {
                return undefined;
            }
            if (parsed[1]) {
                obj.type = parsed[1];
            }
            else {
                console.warn(`@return must at least have a type. Location: ${id}:${info.commentRange.start}:${info.commentRange.end}`);
                return undefined;
            }
            if (parsed[2]) {
                obj.description = parsed[2];
            }
            return obj;
        },
        alias: ["returns"],
        allowedOn: ["function"],
        multiple: false,
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/see.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/see.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ see)
/* harmony export */ });
const seeRegEx = /\s*(?:\{([\w-_]+)\}\s*)?(.*)/;
function see() {
    return {
        name: "see",
        parse(text) {
            const match = seeRegEx.exec(text);
            const obj = {
                type: match[1] || "function",
                name: match[2],
            };
            if (obj.name.indexOf("$") === 0) {
                obj.type = "variable";
                obj.name = obj.name.slice(1);
            }
            if (obj.name.indexOf("%") === 0) {
                obj.type = "placeholder";
                obj.name = obj.name.slice(1);
            }
            return obj;
        },
        resolve(data) {
            data.forEach((item) => {
                if (item.see === undefined) {
                    return;
                }
                item.see = item.see
                    .map((see) => {
                    const seeItem = data.find((x) => x.context.name === see.name);
                    if (!seeItem) {
                        console.warn(`Item \`${item.context.name}\` refers to \`${see.name}\` from type \`${see.type}\` but this item doesn't exist.`);
                    }
                    return seeItem;
                })
                    .filter((x) => x !== undefined);
            });
        },
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/since.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/since.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ since)
/* harmony export */ });
const sinceRegEx = /\s*([^\s]*)\s*(?:-?\s*([\s\S]*))?\s*$/;
function since() {
    return {
        name: "since",
        parse(text) {
            const parsed = sinceRegEx.exec(text);
            const obj = {};
            if (parsed[1]) {
                obj.version = parsed[1];
            }
            if (parsed[2]) {
                obj.description = parsed[2];
            }
            return obj;
        },
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/throw.js":
/*!****************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/throw.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ throwAnnotation)
/* harmony export */ });
const autoParserError = /@error\s+(?:'|")([^'"]+)/g;
function throwAnnotation() {
    return {
        name: "throw",
        parse(text) {
            return text.trim();
        },
        autofill(item) {
            let match;
            const throwing = item.throws || [];
            while ((match = autoParserError.exec(item.context.code))) {
                throwing.push(match[1]);
            }
            if (throwing.length === 0) {
                return;
            }
            const unique = [...new Set(throwing)];
            return unique;
        },
        alias: ["throws", "exception"],
        allowedOn: ["function", "mixin", "placeholder"],
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/todo.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/todo.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ todo)
/* harmony export */ });
function todo() {
    return {
        name: "todo",
        parse(text) {
            return text.trim();
        },
        alias: ["todos"],
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/annotations/type.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/annotations/type.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ type)
/* harmony export */ });
function type() {
    return {
        name: "type",
        parse(text) {
            return text.trim();
        },
        allowedOn: ["variable"],
        multiple: false,
    };
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/index.js":
/*!****************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parse: () => (/* reexport safe */ _sassdoc_parser_js__WEBPACK_IMPORTED_MODULE_0__.parse)
/* harmony export */ });
/* harmony import */ var _sassdoc_parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sassdoc-parser.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/sassdoc-parser.js");



/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/sassdoc-parser.js":
/*!*************************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/sassdoc-parser.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   parse: () => (/* binding */ parse)
/* harmony export */ });
/* harmony import */ var scss_comment_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! scss-comment-parser */ "../../node_modules/scss-comment-parser/index.js");
/* harmony import */ var _annotation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./annotation.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/annotation.js");
/* harmony import */ var _sorter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sorter.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/sorter.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ "../../node_modules/scss-sassdoc-parser/dist/esm/utils.js");




class Parser {
    annotations;
    scssParser;
    constructor(parserConfig) {
        this.annotations = new _annotation_js__WEBPACK_IMPORTED_MODULE_1__["default"]();
        this.scssParser = new scss_comment_parser__WEBPACK_IMPORTED_MODULE_0__(this.annotations.list, parserConfig);
        this.scssParser.commentParser.on("warning", (warning) => {
            console.warn(warning.message);
        });
    }
    async parseString(code, id) {
        let data = this.scssParser.parse((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.removeReduntantWhitespace)(code), id);
        data = (0,_sorter_js__WEBPACK_IMPORTED_MODULE_2__["default"])(data);
        data = data.map((d) => {
            if (!d.name) {
                // Give everything a default name from context
                d.name = d.context.name;
            }
            return d;
        });
        const promises = [];
        Object.keys(this.annotations.list).forEach((key) => {
            const annotation = this.annotations.list[key];
            if (annotation.resolve) {
                const promise = Promise.resolve(annotation.resolve(data));
                promises.push(promise);
            }
        });
        return Promise.all(promises).then(() => data);
    }
}
/**
 * Try to parse any SassDoc in the SCSS input
 *
 * @example
 *  await parse(`
 *    /// Main color
 *    $stardew: #ffffff;
 *  `);
 */
async function parse(code, options) {
    const parser = new Parser(options?.parserConfig);
    return await parser.parseString(code, options?.id);
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/sorter.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/sorter.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ sort)
/* harmony export */ });
function sort(data) {
    return data.sort((a, b) => {
        return (compare(a.group?.[0].toLowerCase() || "", b.group?.[0].toLowerCase() || "") ||
            compare(a.file?.path || "", b.file?.path || "") ||
            compare(a.context.line.start, b.context.line.start));
    });
}
function compare(a, b) {
    switch (true) {
        case a > b:
            return 1;
        case a === b:
            return 0;
        default:
            return -1;
    }
}


/***/ }),

/***/ "../../node_modules/scss-sassdoc-parser/dist/esm/utils.js":
/*!****************************************************************!*\
  !*** ../../node_modules/scss-sassdoc-parser/dist/esm/utils.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   removeReduntantWhitespace: () => (/* binding */ removeReduntantWhitespace)
/* harmony export */ });
const findLowestNumberOfPreceedingWhitespace = (block) => {
    const lines = block.match(/^[ \t]*(?=\S)/gm);
    if (!lines) {
        return 0;
    }
    return lines.reduce((r, a) => Math.min(r, a.length), Infinity);
};
const removeReduntantWhitespace = (block) => {
    const indent = findLowestNumberOfPreceedingWhitespace(block);
    if (indent === 0) {
        return block;
    }
    return block.replace(new RegExp(`^[ \\t]{${indent}}`, "gm"), "");
};


/***/ }),

/***/ "../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-textdocument/lib/esm/main.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   TextDocument: () => (/* binding */ TextDocument)
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

class FullTextDocument {
    constructor(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    get uri() {
        return this._uri;
    }
    get languageId() {
        return this._languageId;
    }
    get version() {
        return this._version;
    }
    getText(range) {
        if (range) {
            const start = this.offsetAt(range.start);
            const end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    }
    update(changes, version) {
        for (let change of changes) {
            if (FullTextDocument.isIncremental(change)) {
                // makes sure start is before end
                const range = getWellformedRange(change.range);
                // update content
                const startOffset = this.offsetAt(range.start);
                const endOffset = this.offsetAt(range.end);
                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);
                // update the offsets
                const startLine = Math.max(range.start.line, 0);
                const endLine = Math.max(range.end.line, 0);
                let lineOffsets = this._lineOffsets;
                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);
                if (endLine - startLine === addedLineOffsets.length) {
                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {
                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];
                    }
                }
                else {
                    if (addedLineOffsets.length < 10000) {
                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);
                    }
                    else { // avoid too many arguments for splice
                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));
                    }
                }
                const diff = change.text.length - (endOffset - startOffset);
                if (diff !== 0) {
                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {
                        lineOffsets[i] = lineOffsets[i] + diff;
                    }
                }
            }
            else if (FullTextDocument.isFull(change)) {
                this._content = change.text;
                this._lineOffsets = undefined;
            }
            else {
                throw new Error('Unknown change event received');
            }
        }
        this._version = version;
    }
    getLineOffsets() {
        if (this._lineOffsets === undefined) {
            this._lineOffsets = computeLineOffsets(this._content, true);
        }
        return this._lineOffsets;
    }
    positionAt(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        let lineOffsets = this.getLineOffsets();
        let low = 0, high = lineOffsets.length;
        if (high === 0) {
            return { line: 0, character: offset };
        }
        while (low < high) {
            let mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        let line = low - 1;
        return { line, character: offset - lineOffsets[line] };
    }
    offsetAt(position) {
        let lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        let lineOffset = lineOffsets[position.line];
        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    }
    get lineCount() {
        return this.getLineOffsets().length;
    }
    static isIncremental(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range !== undefined &&
            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');
    }
    static isFull(event) {
        let candidate = event;
        return candidate !== undefined && candidate !== null &&
            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;
    }
}
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new text document.
     *
     * @param uri The document's uri.
     * @param languageId  The document's language Id.
     * @param version The document's initial version number.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Updates a TextDocument by modifying its content.
     *
     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.
     * @param changes the changes to apply to the document.
     * @param version the changes version for the document.
     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.
     *
     */
    function update(document, changes, version) {
        if (document instanceof FullTextDocument) {
            document.update(changes, version);
            return document;
        }
        else {
            throw new Error('TextDocument.update: document must be created by TextDocument.create');
        }
    }
    TextDocument.update = update;
    function applyEdits(document, edits) {
        let text = document.getText();
        let sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {
            let diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        let lastModifiedOffset = 0;
        const spans = [];
        for (const e of sortedEdits) {
            let startOffset = document.offsetAt(e.range.start);
            if (startOffset < lastModifiedOffset) {
                throw new Error('Overlapping edit');
            }
            else if (startOffset > lastModifiedOffset) {
                spans.push(text.substring(lastModifiedOffset, startOffset));
            }
            if (e.newText.length) {
                spans.push(e.newText);
            }
            lastModifiedOffset = document.offsetAt(e.range.end);
        }
        spans.push(text.substr(lastModifiedOffset));
        return spans.join('');
    }
    TextDocument.applyEdits = applyEdits;
})(TextDocument || (TextDocument = {}));
function mergeSort(data, compare) {
    if (data.length <= 1) {
        // sorted
        return data;
    }
    const p = (data.length / 2) | 0;
    const left = data.slice(0, p);
    const right = data.slice(p);
    mergeSort(left, compare);
    mergeSort(right, compare);
    let leftIdx = 0;
    let rightIdx = 0;
    let i = 0;
    while (leftIdx < left.length && rightIdx < right.length) {
        let ret = compare(left[leftIdx], right[rightIdx]);
        if (ret <= 0) {
            // smaller_equal -> take left to preserve order
            data[i++] = left[leftIdx++];
        }
        else {
            // greater -> take right
            data[i++] = right[rightIdx++];
        }
    }
    while (leftIdx < left.length) {
        data[i++] = left[leftIdx++];
    }
    while (rightIdx < right.length) {
        data[i++] = right[rightIdx++];
    }
    return data;
}
function computeLineOffsets(text, isAtLineStart, textOffset = 0) {
    const result = isAtLineStart ? [textOffset] : [];
    for (let i = 0; i < text.length; i++) {
        let ch = text.charCodeAt(i);
        if (ch === 13 /* CharCode.CarriageReturn */ || ch === 10 /* CharCode.LineFeed */) {
            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {
                i++;
            }
            result.push(textOffset + i + 1);
        }
    }
    return result;
}
function getWellformedRange(range) {
    const start = range.start;
    const end = range.end;
    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {
        return { start: end, end: start };
    }
    return range;
}
function getWellformedEdit(textEdit) {
    const range = getWellformedRange(textEdit.range);
    if (range !== textEdit.range) {
        return { newText: textEdit.newText, range };
    }
    return textEdit;
}


/***/ }),

/***/ "../../node_modules/vscode-languageserver-types/lib/esm/main.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/vscode-languageserver-types/lib/esm/main.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   AnnotatedTextEdit: () => (/* binding */ AnnotatedTextEdit),
/* harmony export */   ChangeAnnotation: () => (/* binding */ ChangeAnnotation),
/* harmony export */   ChangeAnnotationIdentifier: () => (/* binding */ ChangeAnnotationIdentifier),
/* harmony export */   CodeAction: () => (/* binding */ CodeAction),
/* harmony export */   CodeActionContext: () => (/* binding */ CodeActionContext),
/* harmony export */   CodeActionKind: () => (/* binding */ CodeActionKind),
/* harmony export */   CodeActionTriggerKind: () => (/* binding */ CodeActionTriggerKind),
/* harmony export */   CodeDescription: () => (/* binding */ CodeDescription),
/* harmony export */   CodeLens: () => (/* binding */ CodeLens),
/* harmony export */   Color: () => (/* binding */ Color),
/* harmony export */   ColorInformation: () => (/* binding */ ColorInformation),
/* harmony export */   ColorPresentation: () => (/* binding */ ColorPresentation),
/* harmony export */   Command: () => (/* binding */ Command),
/* harmony export */   CompletionItem: () => (/* binding */ CompletionItem),
/* harmony export */   CompletionItemKind: () => (/* binding */ CompletionItemKind),
/* harmony export */   CompletionItemLabelDetails: () => (/* binding */ CompletionItemLabelDetails),
/* harmony export */   CompletionItemTag: () => (/* binding */ CompletionItemTag),
/* harmony export */   CompletionList: () => (/* binding */ CompletionList),
/* harmony export */   CreateFile: () => (/* binding */ CreateFile),
/* harmony export */   DeleteFile: () => (/* binding */ DeleteFile),
/* harmony export */   Diagnostic: () => (/* binding */ Diagnostic),
/* harmony export */   DiagnosticRelatedInformation: () => (/* binding */ DiagnosticRelatedInformation),
/* harmony export */   DiagnosticSeverity: () => (/* binding */ DiagnosticSeverity),
/* harmony export */   DiagnosticTag: () => (/* binding */ DiagnosticTag),
/* harmony export */   DocumentHighlight: () => (/* binding */ DocumentHighlight),
/* harmony export */   DocumentHighlightKind: () => (/* binding */ DocumentHighlightKind),
/* harmony export */   DocumentLink: () => (/* binding */ DocumentLink),
/* harmony export */   DocumentSymbol: () => (/* binding */ DocumentSymbol),
/* harmony export */   DocumentUri: () => (/* binding */ DocumentUri),
/* harmony export */   EOL: () => (/* binding */ EOL),
/* harmony export */   FoldingRange: () => (/* binding */ FoldingRange),
/* harmony export */   FoldingRangeKind: () => (/* binding */ FoldingRangeKind),
/* harmony export */   FormattingOptions: () => (/* binding */ FormattingOptions),
/* harmony export */   Hover: () => (/* binding */ Hover),
/* harmony export */   InlayHint: () => (/* binding */ InlayHint),
/* harmony export */   InlayHintKind: () => (/* binding */ InlayHintKind),
/* harmony export */   InlayHintLabelPart: () => (/* binding */ InlayHintLabelPart),
/* harmony export */   InlineCompletionContext: () => (/* binding */ InlineCompletionContext),
/* harmony export */   InlineCompletionItem: () => (/* binding */ InlineCompletionItem),
/* harmony export */   InlineCompletionList: () => (/* binding */ InlineCompletionList),
/* harmony export */   InlineCompletionTriggerKind: () => (/* binding */ InlineCompletionTriggerKind),
/* harmony export */   InlineValueContext: () => (/* binding */ InlineValueContext),
/* harmony export */   InlineValueEvaluatableExpression: () => (/* binding */ InlineValueEvaluatableExpression),
/* harmony export */   InlineValueText: () => (/* binding */ InlineValueText),
/* harmony export */   InlineValueVariableLookup: () => (/* binding */ InlineValueVariableLookup),
/* harmony export */   InsertReplaceEdit: () => (/* binding */ InsertReplaceEdit),
/* harmony export */   InsertTextFormat: () => (/* binding */ InsertTextFormat),
/* harmony export */   InsertTextMode: () => (/* binding */ InsertTextMode),
/* harmony export */   Location: () => (/* binding */ Location),
/* harmony export */   LocationLink: () => (/* binding */ LocationLink),
/* harmony export */   MarkedString: () => (/* binding */ MarkedString),
/* harmony export */   MarkupContent: () => (/* binding */ MarkupContent),
/* harmony export */   MarkupKind: () => (/* binding */ MarkupKind),
/* harmony export */   OptionalVersionedTextDocumentIdentifier: () => (/* binding */ OptionalVersionedTextDocumentIdentifier),
/* harmony export */   ParameterInformation: () => (/* binding */ ParameterInformation),
/* harmony export */   Position: () => (/* binding */ Position),
/* harmony export */   Range: () => (/* binding */ Range),
/* harmony export */   RenameFile: () => (/* binding */ RenameFile),
/* harmony export */   SelectedCompletionInfo: () => (/* binding */ SelectedCompletionInfo),
/* harmony export */   SelectionRange: () => (/* binding */ SelectionRange),
/* harmony export */   SemanticTokenModifiers: () => (/* binding */ SemanticTokenModifiers),
/* harmony export */   SemanticTokenTypes: () => (/* binding */ SemanticTokenTypes),
/* harmony export */   SemanticTokens: () => (/* binding */ SemanticTokens),
/* harmony export */   SignatureInformation: () => (/* binding */ SignatureInformation),
/* harmony export */   StringValue: () => (/* binding */ StringValue),
/* harmony export */   SymbolInformation: () => (/* binding */ SymbolInformation),
/* harmony export */   SymbolKind: () => (/* binding */ SymbolKind),
/* harmony export */   SymbolTag: () => (/* binding */ SymbolTag),
/* harmony export */   TextDocument: () => (/* binding */ TextDocument),
/* harmony export */   TextDocumentEdit: () => (/* binding */ TextDocumentEdit),
/* harmony export */   TextDocumentIdentifier: () => (/* binding */ TextDocumentIdentifier),
/* harmony export */   TextDocumentItem: () => (/* binding */ TextDocumentItem),
/* harmony export */   TextEdit: () => (/* binding */ TextEdit),
/* harmony export */   URI: () => (/* binding */ URI),
/* harmony export */   VersionedTextDocumentIdentifier: () => (/* binding */ VersionedTextDocumentIdentifier),
/* harmony export */   WorkspaceChange: () => (/* binding */ WorkspaceChange),
/* harmony export */   WorkspaceEdit: () => (/* binding */ WorkspaceEdit),
/* harmony export */   WorkspaceFolder: () => (/* binding */ WorkspaceFolder),
/* harmony export */   WorkspaceSymbol: () => (/* binding */ WorkspaceSymbol),
/* harmony export */   integer: () => (/* binding */ integer),
/* harmony export */   uinteger: () => (/* binding */ uinteger)
/* harmony export */ });
/* --------------------------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */

var DocumentUri;
(function (DocumentUri) {
    function is(value) {
        return typeof value === 'string';
    }
    DocumentUri.is = is;
})(DocumentUri || (DocumentUri = {}));
var URI;
(function (URI) {
    function is(value) {
        return typeof value === 'string';
    }
    URI.is = is;
})(URI || (URI = {}));
var integer;
(function (integer) {
    integer.MIN_VALUE = -2147483648;
    integer.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;
    }
    integer.is = is;
})(integer || (integer = {}));
var uinteger;
(function (uinteger) {
    uinteger.MIN_VALUE = 0;
    uinteger.MAX_VALUE = 2147483647;
    function is(value) {
        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;
    }
    uinteger.is = is;
})(uinteger || (uinteger = {}));
/**
 * The Position namespace provides helper functions to work with
 * {@link Position} literals.
 */
var Position;
(function (Position) {
    /**
     * Creates a new Position literal from the given line and character.
     * @param line The position's line.
     * @param character The position's character.
     */
    function create(line, character) {
        if (line === Number.MAX_VALUE) {
            line = uinteger.MAX_VALUE;
        }
        if (character === Number.MAX_VALUE) {
            character = uinteger.MAX_VALUE;
        }
        return { line, character };
    }
    Position.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Position} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);
    }
    Position.is = is;
})(Position || (Position = {}));
/**
 * The Range namespace provides helper functions to work with
 * {@link Range} literals.
 */
var Range;
(function (Range) {
    function create(one, two, three, four) {
        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {
            return { start: Position.create(one, two), end: Position.create(three, four) };
        }
        else if (Position.is(one) && Position.is(two)) {
            return { start: one, end: two };
        }
        else {
            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);
        }
    }
    Range.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Range} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);
    }
    Range.is = is;
})(Range || (Range = {}));
/**
 * The Location namespace provides helper functions to work with
 * {@link Location} literals.
 */
var Location;
(function (Location) {
    /**
     * Creates a Location literal.
     * @param uri The location's uri.
     * @param range The location's range.
     */
    function create(uri, range) {
        return { uri, range };
    }
    Location.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Location} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));
    }
    Location.is = is;
})(Location || (Location = {}));
/**
 * The LocationLink namespace provides helper functions to work with
 * {@link LocationLink} literals.
 */
var LocationLink;
(function (LocationLink) {
    /**
     * Creates a LocationLink literal.
     * @param targetUri The definition's uri.
     * @param targetRange The full range of the definition.
     * @param targetSelectionRange The span of the symbol definition at the target.
     * @param originSelectionRange The span of the symbol being defined in the originating source file.
     */
    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {
        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };
    }
    LocationLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link LocationLink} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)
            && Range.is(candidate.targetSelectionRange)
            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));
    }
    LocationLink.is = is;
})(LocationLink || (LocationLink = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link Color} literals.
 */
var Color;
(function (Color) {
    /**
     * Creates a new Color literal.
     */
    function create(red, green, blue, alpha) {
        return {
            red,
            green,
            blue,
            alpha,
        };
    }
    Color.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Color} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)
            && Is.numberRange(candidate.green, 0, 1)
            && Is.numberRange(candidate.blue, 0, 1)
            && Is.numberRange(candidate.alpha, 0, 1);
    }
    Color.is = is;
})(Color || (Color = {}));
/**
 * The ColorInformation namespace provides helper functions to work with
 * {@link ColorInformation} literals.
 */
var ColorInformation;
(function (ColorInformation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(range, color) {
        return {
            range,
            color,
        };
    }
    ColorInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);
    }
    ColorInformation.is = is;
})(ColorInformation || (ColorInformation = {}));
/**
 * The Color namespace provides helper functions to work with
 * {@link ColorPresentation} literals.
 */
var ColorPresentation;
(function (ColorPresentation) {
    /**
     * Creates a new ColorInformation literal.
     */
    function create(label, textEdit, additionalTextEdits) {
        return {
            label,
            textEdit,
            additionalTextEdits,
        };
    }
    ColorPresentation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ColorInformation} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label)
            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))
            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));
    }
    ColorPresentation.is = is;
})(ColorPresentation || (ColorPresentation = {}));
/**
 * A set of predefined range kinds.
 */
var FoldingRangeKind;
(function (FoldingRangeKind) {
    /**
     * Folding range for a comment
     */
    FoldingRangeKind.Comment = 'comment';
    /**
     * Folding range for an import or include
     */
    FoldingRangeKind.Imports = 'imports';
    /**
     * Folding range for a region (e.g. `#region`)
     */
    FoldingRangeKind.Region = 'region';
})(FoldingRangeKind || (FoldingRangeKind = {}));
/**
 * The folding range namespace provides helper functions to work with
 * {@link FoldingRange} literals.
 */
var FoldingRange;
(function (FoldingRange) {
    /**
     * Creates a new FoldingRange literal.
     */
    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {
        const result = {
            startLine,
            endLine
        };
        if (Is.defined(startCharacter)) {
            result.startCharacter = startCharacter;
        }
        if (Is.defined(endCharacter)) {
            result.endCharacter = endCharacter;
        }
        if (Is.defined(kind)) {
            result.kind = kind;
        }
        if (Is.defined(collapsedText)) {
            result.collapsedText = collapsedText;
        }
        return result;
    }
    FoldingRange.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FoldingRange} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)
            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))
            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))
            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));
    }
    FoldingRange.is = is;
})(FoldingRange || (FoldingRange = {}));
/**
 * The DiagnosticRelatedInformation namespace provides helper functions to work with
 * {@link DiagnosticRelatedInformation} literals.
 */
var DiagnosticRelatedInformation;
(function (DiagnosticRelatedInformation) {
    /**
     * Creates a new DiagnosticRelatedInformation literal.
     */
    function create(location, message) {
        return {
            location,
            message
        };
    }
    DiagnosticRelatedInformation.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);
    }
    DiagnosticRelatedInformation.is = is;
})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));
/**
 * The diagnostic's severity.
 */
var DiagnosticSeverity;
(function (DiagnosticSeverity) {
    /**
     * Reports an error.
     */
    DiagnosticSeverity.Error = 1;
    /**
     * Reports a warning.
     */
    DiagnosticSeverity.Warning = 2;
    /**
     * Reports an information.
     */
    DiagnosticSeverity.Information = 3;
    /**
     * Reports a hint.
     */
    DiagnosticSeverity.Hint = 4;
})(DiagnosticSeverity || (DiagnosticSeverity = {}));
/**
 * The diagnostic tags.
 *
 * @since 3.15.0
 */
var DiagnosticTag;
(function (DiagnosticTag) {
    /**
     * Unused or unnecessary code.
     *
     * Clients are allowed to render diagnostics with this tag faded out instead of having
     * an error squiggle.
     */
    DiagnosticTag.Unnecessary = 1;
    /**
     * Deprecated or obsolete code.
     *
     * Clients are allowed to rendered diagnostics with this tag strike through.
     */
    DiagnosticTag.Deprecated = 2;
})(DiagnosticTag || (DiagnosticTag = {}));
/**
 * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.
 *
 * @since 3.16.0
 */
var CodeDescription;
(function (CodeDescription) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.href);
    }
    CodeDescription.is = is;
})(CodeDescription || (CodeDescription = {}));
/**
 * The Diagnostic namespace provides helper functions to work with
 * {@link Diagnostic} literals.
 */
var Diagnostic;
(function (Diagnostic) {
    /**
     * Creates a new Diagnostic literal.
     */
    function create(range, message, severity, code, source, relatedInformation) {
        let result = { range, message };
        if (Is.defined(severity)) {
            result.severity = severity;
        }
        if (Is.defined(code)) {
            result.code = code;
        }
        if (Is.defined(source)) {
            result.source = source;
        }
        if (Is.defined(relatedInformation)) {
            result.relatedInformation = relatedInformation;
        }
        return result;
    }
    Diagnostic.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Diagnostic} interface.
     */
    function is(value) {
        var _a;
        let candidate = value;
        return Is.defined(candidate)
            && Range.is(candidate.range)
            && Is.string(candidate.message)
            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))
            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))
            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))
            && (Is.string(candidate.source) || Is.undefined(candidate.source))
            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));
    }
    Diagnostic.is = is;
})(Diagnostic || (Diagnostic = {}));
/**
 * The Command namespace provides helper functions to work with
 * {@link Command} literals.
 */
var Command;
(function (Command) {
    /**
     * Creates a new Command literal.
     */
    function create(title, command, ...args) {
        let result = { title, command };
        if (Is.defined(args) && args.length > 0) {
            result.arguments = args;
        }
        return result;
    }
    Command.create = create;
    /**
     * Checks whether the given literal conforms to the {@link Command} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);
    }
    Command.is = is;
})(Command || (Command = {}));
/**
 * The TextEdit namespace provides helper function to create replace,
 * insert and delete edits more easily.
 */
var TextEdit;
(function (TextEdit) {
    /**
     * Creates a replace text edit.
     * @param range The range of text to be replaced.
     * @param newText The new text.
     */
    function replace(range, newText) {
        return { range, newText };
    }
    TextEdit.replace = replace;
    /**
     * Creates an insert text edit.
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     */
    function insert(position, newText) {
        return { range: { start: position, end: position }, newText };
    }
    TextEdit.insert = insert;
    /**
     * Creates a delete text edit.
     * @param range The range of text to be deleted.
     */
    function del(range) {
        return { range, newText: '' };
    }
    TextEdit.del = del;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && Is.string(candidate.newText)
            && Range.is(candidate.range);
    }
    TextEdit.is = is;
})(TextEdit || (TextEdit = {}));
var ChangeAnnotation;
(function (ChangeAnnotation) {
    function create(label, needsConfirmation, description) {
        const result = { label };
        if (needsConfirmation !== undefined) {
            result.needsConfirmation = needsConfirmation;
        }
        if (description !== undefined) {
            result.description = description;
        }
        return result;
    }
    ChangeAnnotation.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&
            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    ChangeAnnotation.is = is;
})(ChangeAnnotation || (ChangeAnnotation = {}));
var ChangeAnnotationIdentifier;
(function (ChangeAnnotationIdentifier) {
    function is(value) {
        const candidate = value;
        return Is.string(candidate);
    }
    ChangeAnnotationIdentifier.is = is;
})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));
var AnnotatedTextEdit;
(function (AnnotatedTextEdit) {
    /**
     * Creates an annotated replace text edit.
     *
     * @param range The range of text to be replaced.
     * @param newText The new text.
     * @param annotation The annotation.
     */
    function replace(range, newText, annotation) {
        return { range, newText, annotationId: annotation };
    }
    AnnotatedTextEdit.replace = replace;
    /**
     * Creates an annotated insert text edit.
     *
     * @param position The position to insert the text at.
     * @param newText The text to be inserted.
     * @param annotation The annotation.
     */
    function insert(position, newText, annotation) {
        return { range: { start: position, end: position }, newText, annotationId: annotation };
    }
    AnnotatedTextEdit.insert = insert;
    /**
     * Creates an annotated delete text edit.
     *
     * @param range The range of text to be deleted.
     * @param annotation The annotation.
     */
    function del(range, annotation) {
        return { range, newText: '', annotationId: annotation };
    }
    AnnotatedTextEdit.del = del;
    function is(value) {
        const candidate = value;
        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    AnnotatedTextEdit.is = is;
})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));
/**
 * The TextDocumentEdit namespace provides helper function to create
 * an edit that manipulates a text document.
 */
var TextDocumentEdit;
(function (TextDocumentEdit) {
    /**
     * Creates a new `TextDocumentEdit`
     */
    function create(textDocument, edits) {
        return { textDocument, edits };
    }
    TextDocumentEdit.create = create;
    function is(value) {
        let candidate = value;
        return Is.defined(candidate)
            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)
            && Array.isArray(candidate.edits);
    }
    TextDocumentEdit.is = is;
})(TextDocumentEdit || (TextDocumentEdit = {}));
var CreateFile;
(function (CreateFile) {
    function create(uri, options, annotation) {
        let result = {
            kind: 'create',
            uri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    CreateFile.create = create;
    function is(value) {
        let candidate = value;
        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    CreateFile.is = is;
})(CreateFile || (CreateFile = {}));
var RenameFile;
(function (RenameFile) {
    function create(oldUri, newUri, options, annotation) {
        let result = {
            kind: 'rename',
            oldUri,
            newUri
        };
        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    RenameFile.create = create;
    function is(value) {
        let candidate = value;
        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||
            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    RenameFile.is = is;
})(RenameFile || (RenameFile = {}));
var DeleteFile;
(function (DeleteFile) {
    function create(uri, options, annotation) {
        let result = {
            kind: 'delete',
            uri
        };
        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {
            result.options = options;
        }
        if (annotation !== undefined) {
            result.annotationId = annotation;
        }
        return result;
    }
    DeleteFile.create = create;
    function is(value) {
        let candidate = value;
        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||
            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));
    }
    DeleteFile.is = is;
})(DeleteFile || (DeleteFile = {}));
var WorkspaceEdit;
(function (WorkspaceEdit) {
    function is(value) {
        let candidate = value;
        return candidate &&
            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&
            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {
                if (Is.string(change.kind)) {
                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);
                }
                else {
                    return TextDocumentEdit.is(change);
                }
            }));
    }
    WorkspaceEdit.is = is;
})(WorkspaceEdit || (WorkspaceEdit = {}));
class TextEditChangeImpl {
    constructor(edits, changeAnnotations) {
        this.edits = edits;
        this.changeAnnotations = changeAnnotations;
    }
    insert(position, newText, annotation) {
        let edit;
        let id;
        if (annotation === undefined) {
            edit = TextEdit.insert(position, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.insert(position, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.insert(position, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    }
    replace(range, newText, annotation) {
        let edit;
        let id;
        if (annotation === undefined) {
            edit = TextEdit.replace(range, newText);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.replace(range, newText, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.replace(range, newText, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    }
    delete(range, annotation) {
        let edit;
        let id;
        if (annotation === undefined) {
            edit = TextEdit.del(range);
        }
        else if (ChangeAnnotationIdentifier.is(annotation)) {
            id = annotation;
            edit = AnnotatedTextEdit.del(range, annotation);
        }
        else {
            this.assertChangeAnnotations(this.changeAnnotations);
            id = this.changeAnnotations.manage(annotation);
            edit = AnnotatedTextEdit.del(range, id);
        }
        this.edits.push(edit);
        if (id !== undefined) {
            return id;
        }
    }
    add(edit) {
        this.edits.push(edit);
    }
    all() {
        return this.edits;
    }
    clear() {
        this.edits.splice(0, this.edits.length);
    }
    assertChangeAnnotations(value) {
        if (value === undefined) {
            throw new Error(`Text edit change is not configured to manage change annotations.`);
        }
    }
}
/**
 * A helper class
 */
class ChangeAnnotations {
    constructor(annotations) {
        this._annotations = annotations === undefined ? Object.create(null) : annotations;
        this._counter = 0;
        this._size = 0;
    }
    all() {
        return this._annotations;
    }
    get size() {
        return this._size;
    }
    manage(idOrAnnotation, annotation) {
        let id;
        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {
            id = idOrAnnotation;
        }
        else {
            id = this.nextId();
            annotation = idOrAnnotation;
        }
        if (this._annotations[id] !== undefined) {
            throw new Error(`Id ${id} is already in use.`);
        }
        if (annotation === undefined) {
            throw new Error(`No annotation provided for id ${id}`);
        }
        this._annotations[id] = annotation;
        this._size++;
        return id;
    }
    nextId() {
        this._counter++;
        return this._counter.toString();
    }
}
/**
 * A workspace change helps constructing changes to a workspace.
 */
class WorkspaceChange {
    constructor(workspaceEdit) {
        this._textEditChanges = Object.create(null);
        if (workspaceEdit !== undefined) {
            this._workspaceEdit = workspaceEdit;
            if (workspaceEdit.documentChanges) {
                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);
                workspaceEdit.changeAnnotations = this._changeAnnotations.all();
                workspaceEdit.documentChanges.forEach((change) => {
                    if (TextDocumentEdit.is(change)) {
                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);
                        this._textEditChanges[change.textDocument.uri] = textEditChange;
                    }
                });
            }
            else if (workspaceEdit.changes) {
                Object.keys(workspaceEdit.changes).forEach((key) => {
                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);
                    this._textEditChanges[key] = textEditChange;
                });
            }
        }
        else {
            this._workspaceEdit = {};
        }
    }
    /**
     * Returns the underlying {@link WorkspaceEdit} literal
     * use to be returned from a workspace edit operation like rename.
     */
    get edit() {
        this.initDocumentChanges();
        if (this._changeAnnotations !== undefined) {
            if (this._changeAnnotations.size === 0) {
                this._workspaceEdit.changeAnnotations = undefined;
            }
            else {
                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
            }
        }
        return this._workspaceEdit;
    }
    getTextEditChange(key) {
        if (OptionalVersionedTextDocumentIdentifier.is(key)) {
            this.initDocumentChanges();
            if (this._workspaceEdit.documentChanges === undefined) {
                throw new Error('Workspace edit is not configured for document changes.');
            }
            const textDocument = { uri: key.uri, version: key.version };
            let result = this._textEditChanges[textDocument.uri];
            if (!result) {
                const edits = [];
                const textDocumentEdit = {
                    textDocument,
                    edits
                };
                this._workspaceEdit.documentChanges.push(textDocumentEdit);
                result = new TextEditChangeImpl(edits, this._changeAnnotations);
                this._textEditChanges[textDocument.uri] = result;
            }
            return result;
        }
        else {
            this.initChanges();
            if (this._workspaceEdit.changes === undefined) {
                throw new Error('Workspace edit is not configured for normal text edit changes.');
            }
            let result = this._textEditChanges[key];
            if (!result) {
                let edits = [];
                this._workspaceEdit.changes[key] = edits;
                result = new TextEditChangeImpl(edits);
                this._textEditChanges[key] = result;
            }
            return result;
        }
    }
    initDocumentChanges() {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._changeAnnotations = new ChangeAnnotations();
            this._workspaceEdit.documentChanges = [];
            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();
        }
    }
    initChanges() {
        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {
            this._workspaceEdit.changes = Object.create(null);
        }
    }
    createFile(uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        let annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        let operation;
        let id;
        if (annotation === undefined) {
            operation = CreateFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = CreateFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    }
    renameFile(oldUri, newUri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        let annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        let operation;
        let id;
        if (annotation === undefined) {
            operation = RenameFile.create(oldUri, newUri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = RenameFile.create(oldUri, newUri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    }
    deleteFile(uri, optionsOrAnnotation, options) {
        this.initDocumentChanges();
        if (this._workspaceEdit.documentChanges === undefined) {
            throw new Error('Workspace edit is not configured for document changes.');
        }
        let annotation;
        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {
            annotation = optionsOrAnnotation;
        }
        else {
            options = optionsOrAnnotation;
        }
        let operation;
        let id;
        if (annotation === undefined) {
            operation = DeleteFile.create(uri, options);
        }
        else {
            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);
            operation = DeleteFile.create(uri, options, id);
        }
        this._workspaceEdit.documentChanges.push(operation);
        if (id !== undefined) {
            return id;
        }
    }
}
/**
 * The TextDocumentIdentifier namespace provides helper functions to work with
 * {@link TextDocumentIdentifier} literals.
 */
var TextDocumentIdentifier;
(function (TextDocumentIdentifier) {
    /**
     * Creates a new TextDocumentIdentifier literal.
     * @param uri The document's uri.
     */
    function create(uri) {
        return { uri };
    }
    TextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri);
    }
    TextDocumentIdentifier.is = is;
})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));
/**
 * The VersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link VersionedTextDocumentIdentifier} literals.
 */
var VersionedTextDocumentIdentifier;
(function (VersionedTextDocumentIdentifier) {
    /**
     * Creates a new VersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri, version };
    }
    VersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);
    }
    VersionedTextDocumentIdentifier.is = is;
})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));
/**
 * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with
 * {@link OptionalVersionedTextDocumentIdentifier} literals.
 */
var OptionalVersionedTextDocumentIdentifier;
(function (OptionalVersionedTextDocumentIdentifier) {
    /**
     * Creates a new OptionalVersionedTextDocumentIdentifier literal.
     * @param uri The document's uri.
     * @param version The document's version.
     */
    function create(uri, version) {
        return { uri, version };
    }
    OptionalVersionedTextDocumentIdentifier.create = create;
    /**
     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));
    }
    OptionalVersionedTextDocumentIdentifier.is = is;
})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));
/**
 * The TextDocumentItem namespace provides helper functions to work with
 * {@link TextDocumentItem} literals.
 */
var TextDocumentItem;
(function (TextDocumentItem) {
    /**
     * Creates a new TextDocumentItem literal.
     * @param uri The document's uri.
     * @param languageId The document's language identifier.
     * @param version The document's version number.
     * @param text The document's text.
     */
    function create(uri, languageId, version, text) {
        return { uri, languageId, version, text };
    }
    TextDocumentItem.create = create;
    /**
     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);
    }
    TextDocumentItem.is = is;
})(TextDocumentItem || (TextDocumentItem = {}));
/**
 * Describes the content type that a client supports in various
 * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.
 *
 * Please note that `MarkupKinds` must not start with a `$`. This kinds
 * are reserved for internal usage.
 */
var MarkupKind;
(function (MarkupKind) {
    /**
     * Plain text is supported as a content format
     */
    MarkupKind.PlainText = 'plaintext';
    /**
     * Markdown is supported as a content format
     */
    MarkupKind.Markdown = 'markdown';
    /**
     * Checks whether the given value is a value of the {@link MarkupKind} type.
     */
    function is(value) {
        const candidate = value;
        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;
    }
    MarkupKind.is = is;
})(MarkupKind || (MarkupKind = {}));
var MarkupContent;
(function (MarkupContent) {
    /**
     * Checks whether the given value conforms to the {@link MarkupContent} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);
    }
    MarkupContent.is = is;
})(MarkupContent || (MarkupContent = {}));
/**
 * The kind of a completion entry.
 */
var CompletionItemKind;
(function (CompletionItemKind) {
    CompletionItemKind.Text = 1;
    CompletionItemKind.Method = 2;
    CompletionItemKind.Function = 3;
    CompletionItemKind.Constructor = 4;
    CompletionItemKind.Field = 5;
    CompletionItemKind.Variable = 6;
    CompletionItemKind.Class = 7;
    CompletionItemKind.Interface = 8;
    CompletionItemKind.Module = 9;
    CompletionItemKind.Property = 10;
    CompletionItemKind.Unit = 11;
    CompletionItemKind.Value = 12;
    CompletionItemKind.Enum = 13;
    CompletionItemKind.Keyword = 14;
    CompletionItemKind.Snippet = 15;
    CompletionItemKind.Color = 16;
    CompletionItemKind.File = 17;
    CompletionItemKind.Reference = 18;
    CompletionItemKind.Folder = 19;
    CompletionItemKind.EnumMember = 20;
    CompletionItemKind.Constant = 21;
    CompletionItemKind.Struct = 22;
    CompletionItemKind.Event = 23;
    CompletionItemKind.Operator = 24;
    CompletionItemKind.TypeParameter = 25;
})(CompletionItemKind || (CompletionItemKind = {}));
/**
 * Defines whether the insert text in a completion item should be interpreted as
 * plain text or a snippet.
 */
var InsertTextFormat;
(function (InsertTextFormat) {
    /**
     * The primary text to be inserted is treated as a plain string.
     */
    InsertTextFormat.PlainText = 1;
    /**
     * The primary text to be inserted is treated as a snippet.
     *
     * A snippet can define tab stops and placeholders with `$1`, `$2`
     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to
     * the end of the snippet. Placeholders with equal identifiers are linked,
     * that is typing in one will update others too.
     *
     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax
     */
    InsertTextFormat.Snippet = 2;
})(InsertTextFormat || (InsertTextFormat = {}));
/**
 * Completion item tags are extra annotations that tweak the rendering of a completion
 * item.
 *
 * @since 3.15.0
 */
var CompletionItemTag;
(function (CompletionItemTag) {
    /**
     * Render a completion as obsolete, usually using a strike-out.
     */
    CompletionItemTag.Deprecated = 1;
})(CompletionItemTag || (CompletionItemTag = {}));
/**
 * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.
 *
 * @since 3.16.0
 */
var InsertReplaceEdit;
(function (InsertReplaceEdit) {
    /**
     * Creates a new insert / replace edit
     */
    function create(newText, insert, replace) {
        return { newText, insert, replace };
    }
    InsertReplaceEdit.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.
     */
    function is(value) {
        const candidate = value;
        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);
    }
    InsertReplaceEdit.is = is;
})(InsertReplaceEdit || (InsertReplaceEdit = {}));
/**
 * How whitespace and indentation is handled during completion
 * item insertion.
 *
 * @since 3.16.0
 */
var InsertTextMode;
(function (InsertTextMode) {
    /**
     * The insertion or replace strings is taken as it is. If the
     * value is multi line the lines below the cursor will be
     * inserted using the indentation defined in the string value.
     * The client will not apply any kind of adjustments to the
     * string.
     */
    InsertTextMode.asIs = 1;
    /**
     * The editor adjusts leading whitespace of new lines so that
     * they match the indentation up to the cursor of the line for
     * which the item is accepted.
     *
     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a
     * multi line completion item is indented using 2 tabs and all
     * following lines inserted will be indented using 2 tabs as well.
     */
    InsertTextMode.adjustIndentation = 2;
})(InsertTextMode || (InsertTextMode = {}));
var CompletionItemLabelDetails;
(function (CompletionItemLabelDetails) {
    function is(value) {
        const candidate = value;
        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&
            (Is.string(candidate.description) || candidate.description === undefined);
    }
    CompletionItemLabelDetails.is = is;
})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));
/**
 * The CompletionItem namespace provides functions to deal with
 * completion items.
 */
var CompletionItem;
(function (CompletionItem) {
    /**
     * Create a completion item and seed it with a label.
     * @param label The completion item's label
     */
    function create(label) {
        return { label };
    }
    CompletionItem.create = create;
})(CompletionItem || (CompletionItem = {}));
/**
 * The CompletionList namespace provides functions to deal with
 * completion lists.
 */
var CompletionList;
(function (CompletionList) {
    /**
     * Creates a new completion list.
     *
     * @param items The completion items.
     * @param isIncomplete The list is not complete.
     */
    function create(items, isIncomplete) {
        return { items: items ? items : [], isIncomplete: !!isIncomplete };
    }
    CompletionList.create = create;
})(CompletionList || (CompletionList = {}));
var MarkedString;
(function (MarkedString) {
    /**
     * Creates a marked string from plain text.
     *
     * @param plainText The plain text.
     */
    function fromPlainText(plainText) {
        return plainText.replace(/[\\`*_{}[\]()#+\-.!]/g, '\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash
    }
    MarkedString.fromPlainText = fromPlainText;
    /**
     * Checks whether the given value conforms to the {@link MarkedString} type.
     */
    function is(value) {
        const candidate = value;
        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));
    }
    MarkedString.is = is;
})(MarkedString || (MarkedString = {}));
var Hover;
(function (Hover) {
    /**
     * Checks whether the given value conforms to the {@link Hover} interface.
     */
    function is(value) {
        let candidate = value;
        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||
            MarkedString.is(candidate.contents) ||
            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));
    }
    Hover.is = is;
})(Hover || (Hover = {}));
/**
 * The ParameterInformation namespace provides helper functions to work with
 * {@link ParameterInformation} literals.
 */
var ParameterInformation;
(function (ParameterInformation) {
    /**
     * Creates a new parameter information literal.
     *
     * @param label A label string.
     * @param documentation A doc string.
     */
    function create(label, documentation) {
        return documentation ? { label, documentation } : { label };
    }
    ParameterInformation.create = create;
})(ParameterInformation || (ParameterInformation = {}));
/**
 * The SignatureInformation namespace provides helper functions to work with
 * {@link SignatureInformation} literals.
 */
var SignatureInformation;
(function (SignatureInformation) {
    function create(label, documentation, ...parameters) {
        let result = { label };
        if (Is.defined(documentation)) {
            result.documentation = documentation;
        }
        if (Is.defined(parameters)) {
            result.parameters = parameters;
        }
        else {
            result.parameters = [];
        }
        return result;
    }
    SignatureInformation.create = create;
})(SignatureInformation || (SignatureInformation = {}));
/**
 * A document highlight kind.
 */
var DocumentHighlightKind;
(function (DocumentHighlightKind) {
    /**
     * A textual occurrence.
     */
    DocumentHighlightKind.Text = 1;
    /**
     * Read-access of a symbol, like reading a variable.
     */
    DocumentHighlightKind.Read = 2;
    /**
     * Write-access of a symbol, like writing to a variable.
     */
    DocumentHighlightKind.Write = 3;
})(DocumentHighlightKind || (DocumentHighlightKind = {}));
/**
 * DocumentHighlight namespace to provide helper functions to work with
 * {@link DocumentHighlight} literals.
 */
var DocumentHighlight;
(function (DocumentHighlight) {
    /**
     * Create a DocumentHighlight object.
     * @param range The range the highlight applies to.
     * @param kind The highlight kind
     */
    function create(range, kind) {
        let result = { range };
        if (Is.number(kind)) {
            result.kind = kind;
        }
        return result;
    }
    DocumentHighlight.create = create;
})(DocumentHighlight || (DocumentHighlight = {}));
/**
 * A symbol kind.
 */
var SymbolKind;
(function (SymbolKind) {
    SymbolKind.File = 1;
    SymbolKind.Module = 2;
    SymbolKind.Namespace = 3;
    SymbolKind.Package = 4;
    SymbolKind.Class = 5;
    SymbolKind.Method = 6;
    SymbolKind.Property = 7;
    SymbolKind.Field = 8;
    SymbolKind.Constructor = 9;
    SymbolKind.Enum = 10;
    SymbolKind.Interface = 11;
    SymbolKind.Function = 12;
    SymbolKind.Variable = 13;
    SymbolKind.Constant = 14;
    SymbolKind.String = 15;
    SymbolKind.Number = 16;
    SymbolKind.Boolean = 17;
    SymbolKind.Array = 18;
    SymbolKind.Object = 19;
    SymbolKind.Key = 20;
    SymbolKind.Null = 21;
    SymbolKind.EnumMember = 22;
    SymbolKind.Struct = 23;
    SymbolKind.Event = 24;
    SymbolKind.Operator = 25;
    SymbolKind.TypeParameter = 26;
})(SymbolKind || (SymbolKind = {}));
/**
 * Symbol tags are extra annotations that tweak the rendering of a symbol.
 *
 * @since 3.16
 */
var SymbolTag;
(function (SymbolTag) {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    SymbolTag.Deprecated = 1;
})(SymbolTag || (SymbolTag = {}));
var SymbolInformation;
(function (SymbolInformation) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the location of the symbol.
     * @param uri The resource of the location of symbol.
     * @param containerName The name of the symbol containing the symbol.
     */
    function create(name, kind, range, uri, containerName) {
        let result = {
            name,
            kind,
            location: { uri, range }
        };
        if (containerName) {
            result.containerName = containerName;
        }
        return result;
    }
    SymbolInformation.create = create;
})(SymbolInformation || (SymbolInformation = {}));
var WorkspaceSymbol;
(function (WorkspaceSymbol) {
    /**
     * Create a new workspace symbol.
     *
     * @param name The name of the symbol.
     * @param kind The kind of the symbol.
     * @param uri The resource of the location of the symbol.
     * @param range An options range of the location.
     * @returns A WorkspaceSymbol.
     */
    function create(name, kind, uri, range) {
        return range !== undefined
            ? { name, kind, location: { uri, range } }
            : { name, kind, location: { uri } };
    }
    WorkspaceSymbol.create = create;
})(WorkspaceSymbol || (WorkspaceSymbol = {}));
var DocumentSymbol;
(function (DocumentSymbol) {
    /**
     * Creates a new symbol information literal.
     *
     * @param name The name of the symbol.
     * @param detail The detail of the symbol.
     * @param kind The kind of the symbol.
     * @param range The range of the symbol.
     * @param selectionRange The selectionRange of the symbol.
     * @param children Children of the symbol.
     */
    function create(name, detail, kind, range, selectionRange, children) {
        let result = {
            name,
            detail,
            kind,
            range,
            selectionRange
        };
        if (children !== undefined) {
            result.children = children;
        }
        return result;
    }
    DocumentSymbol.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.
     */
    function is(value) {
        let candidate = value;
        return candidate &&
            Is.string(candidate.name) && Is.number(candidate.kind) &&
            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&
            (candidate.detail === undefined || Is.string(candidate.detail)) &&
            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&
            (candidate.children === undefined || Array.isArray(candidate.children)) &&
            (candidate.tags === undefined || Array.isArray(candidate.tags));
    }
    DocumentSymbol.is = is;
})(DocumentSymbol || (DocumentSymbol = {}));
/**
 * A set of predefined code action kinds
 */
var CodeActionKind;
(function (CodeActionKind) {
    /**
     * Empty kind.
     */
    CodeActionKind.Empty = '';
    /**
     * Base kind for quickfix actions: 'quickfix'
     */
    CodeActionKind.QuickFix = 'quickfix';
    /**
     * Base kind for refactoring actions: 'refactor'
     */
    CodeActionKind.Refactor = 'refactor';
    /**
     * Base kind for refactoring extraction actions: 'refactor.extract'
     *
     * Example extract actions:
     *
     * - Extract method
     * - Extract function
     * - Extract variable
     * - Extract interface from class
     * - ...
     */
    CodeActionKind.RefactorExtract = 'refactor.extract';
    /**
     * Base kind for refactoring inline actions: 'refactor.inline'
     *
     * Example inline actions:
     *
     * - Inline function
     * - Inline variable
     * - Inline constant
     * - ...
     */
    CodeActionKind.RefactorInline = 'refactor.inline';
    /**
     * Base kind for refactoring rewrite actions: 'refactor.rewrite'
     *
     * Example rewrite actions:
     *
     * - Convert JavaScript function to class
     * - Add or remove parameter
     * - Encapsulate field
     * - Make method static
     * - Move method to base class
     * - ...
     */
    CodeActionKind.RefactorRewrite = 'refactor.rewrite';
    /**
     * Base kind for source actions: `source`
     *
     * Source code actions apply to the entire file.
     */
    CodeActionKind.Source = 'source';
    /**
     * Base kind for an organize imports source action: `source.organizeImports`
     */
    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';
    /**
     * Base kind for auto-fix source actions: `source.fixAll`.
     *
     * Fix all actions automatically fix errors that have a clear fix that do not require user input.
     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.
     *
     * @since 3.15.0
     */
    CodeActionKind.SourceFixAll = 'source.fixAll';
})(CodeActionKind || (CodeActionKind = {}));
/**
 * The reason why code actions were requested.
 *
 * @since 3.17.0
 */
var CodeActionTriggerKind;
(function (CodeActionTriggerKind) {
    /**
     * Code actions were explicitly requested by the user or by an extension.
     */
    CodeActionTriggerKind.Invoked = 1;
    /**
     * Code actions were requested automatically.
     *
     * This typically happens when current selection in a file changes, but can
     * also be triggered when file content changes.
     */
    CodeActionTriggerKind.Automatic = 2;
})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));
/**
 * The CodeActionContext namespace provides helper functions to work with
 * {@link CodeActionContext} literals.
 */
var CodeActionContext;
(function (CodeActionContext) {
    /**
     * Creates a new CodeActionContext literal.
     */
    function create(diagnostics, only, triggerKind) {
        let result = { diagnostics };
        if (only !== undefined && only !== null) {
            result.only = only;
        }
        if (triggerKind !== undefined && triggerKind !== null) {
            result.triggerKind = triggerKind;
        }
        return result;
    }
    CodeActionContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)
            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))
            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);
    }
    CodeActionContext.is = is;
})(CodeActionContext || (CodeActionContext = {}));
var CodeAction;
(function (CodeAction) {
    function create(title, kindOrCommandOrEdit, kind) {
        let result = { title };
        let checkKind = true;
        if (typeof kindOrCommandOrEdit === 'string') {
            checkKind = false;
            result.kind = kindOrCommandOrEdit;
        }
        else if (Command.is(kindOrCommandOrEdit)) {
            result.command = kindOrCommandOrEdit;
        }
        else {
            result.edit = kindOrCommandOrEdit;
        }
        if (checkKind && kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    CodeAction.create = create;
    function is(value) {
        let candidate = value;
        return candidate && Is.string(candidate.title) &&
            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&
            (candidate.kind === undefined || Is.string(candidate.kind)) &&
            (candidate.edit !== undefined || candidate.command !== undefined) &&
            (candidate.command === undefined || Command.is(candidate.command)) &&
            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&
            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));
    }
    CodeAction.is = is;
})(CodeAction || (CodeAction = {}));
/**
 * The CodeLens namespace provides helper functions to work with
 * {@link CodeLens} literals.
 */
var CodeLens;
(function (CodeLens) {
    /**
     * Creates a new CodeLens literal.
     */
    function create(range, data) {
        let result = { range };
        if (Is.defined(data)) {
            result.data = data;
        }
        return result;
    }
    CodeLens.create = create;
    /**
     * Checks whether the given literal conforms to the {@link CodeLens} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));
    }
    CodeLens.is = is;
})(CodeLens || (CodeLens = {}));
/**
 * The FormattingOptions namespace provides helper functions to work with
 * {@link FormattingOptions} literals.
 */
var FormattingOptions;
(function (FormattingOptions) {
    /**
     * Creates a new FormattingOptions literal.
     */
    function create(tabSize, insertSpaces) {
        return { tabSize, insertSpaces };
    }
    FormattingOptions.create = create;
    /**
     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);
    }
    FormattingOptions.is = is;
})(FormattingOptions || (FormattingOptions = {}));
/**
 * The DocumentLink namespace provides helper functions to work with
 * {@link DocumentLink} literals.
 */
var DocumentLink;
(function (DocumentLink) {
    /**
     * Creates a new DocumentLink literal.
     */
    function create(range, target, data) {
        return { range, target, data };
    }
    DocumentLink.create = create;
    /**
     * Checks whether the given literal conforms to the {@link DocumentLink} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));
    }
    DocumentLink.is = is;
})(DocumentLink || (DocumentLink = {}));
/**
 * The SelectionRange namespace provides helper function to work with
 * SelectionRange literals.
 */
var SelectionRange;
(function (SelectionRange) {
    /**
     * Creates a new SelectionRange
     * @param range the range.
     * @param parent an optional parent.
     */
    function create(range, parent) {
        return { range, parent };
    }
    SelectionRange.create = create;
    function is(value) {
        let candidate = value;
        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));
    }
    SelectionRange.is = is;
})(SelectionRange || (SelectionRange = {}));
/**
 * A set of predefined token types. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenTypes;
(function (SemanticTokenTypes) {
    SemanticTokenTypes["namespace"] = "namespace";
    /**
     * Represents a generic type. Acts as a fallback for types which can't be mapped to
     * a specific type like class or enum.
     */
    SemanticTokenTypes["type"] = "type";
    SemanticTokenTypes["class"] = "class";
    SemanticTokenTypes["enum"] = "enum";
    SemanticTokenTypes["interface"] = "interface";
    SemanticTokenTypes["struct"] = "struct";
    SemanticTokenTypes["typeParameter"] = "typeParameter";
    SemanticTokenTypes["parameter"] = "parameter";
    SemanticTokenTypes["variable"] = "variable";
    SemanticTokenTypes["property"] = "property";
    SemanticTokenTypes["enumMember"] = "enumMember";
    SemanticTokenTypes["event"] = "event";
    SemanticTokenTypes["function"] = "function";
    SemanticTokenTypes["method"] = "method";
    SemanticTokenTypes["macro"] = "macro";
    SemanticTokenTypes["keyword"] = "keyword";
    SemanticTokenTypes["modifier"] = "modifier";
    SemanticTokenTypes["comment"] = "comment";
    SemanticTokenTypes["string"] = "string";
    SemanticTokenTypes["number"] = "number";
    SemanticTokenTypes["regexp"] = "regexp";
    SemanticTokenTypes["operator"] = "operator";
    /**
     * @since 3.17.0
     */
    SemanticTokenTypes["decorator"] = "decorator";
})(SemanticTokenTypes || (SemanticTokenTypes = {}));
/**
 * A set of predefined token modifiers. This set is not fixed
 * an clients can specify additional token types via the
 * corresponding client capabilities.
 *
 * @since 3.16.0
 */
var SemanticTokenModifiers;
(function (SemanticTokenModifiers) {
    SemanticTokenModifiers["declaration"] = "declaration";
    SemanticTokenModifiers["definition"] = "definition";
    SemanticTokenModifiers["readonly"] = "readonly";
    SemanticTokenModifiers["static"] = "static";
    SemanticTokenModifiers["deprecated"] = "deprecated";
    SemanticTokenModifiers["abstract"] = "abstract";
    SemanticTokenModifiers["async"] = "async";
    SemanticTokenModifiers["modification"] = "modification";
    SemanticTokenModifiers["documentation"] = "documentation";
    SemanticTokenModifiers["defaultLibrary"] = "defaultLibrary";
})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));
/**
 * @since 3.16.0
 */
var SemanticTokens;
(function (SemanticTokens) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&
            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');
    }
    SemanticTokens.is = is;
})(SemanticTokens || (SemanticTokens = {}));
/**
 * The InlineValueText namespace provides functions to deal with InlineValueTexts.
 *
 * @since 3.17.0
 */
var InlineValueText;
(function (InlineValueText) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, text) {
        return { range, text };
    }
    InlineValueText.create = create;
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);
    }
    InlineValueText.is = is;
})(InlineValueText || (InlineValueText = {}));
/**
 * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.
 *
 * @since 3.17.0
 */
var InlineValueVariableLookup;
(function (InlineValueVariableLookup) {
    /**
     * Creates a new InlineValueText literal.
     */
    function create(range, variableName, caseSensitiveLookup) {
        return { range, variableName, caseSensitiveLookup };
    }
    InlineValueVariableLookup.create = create;
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)
            && (Is.string(candidate.variableName) || candidate.variableName === undefined);
    }
    InlineValueVariableLookup.is = is;
})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));
/**
 * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.
 *
 * @since 3.17.0
 */
var InlineValueEvaluatableExpression;
(function (InlineValueEvaluatableExpression) {
    /**
     * Creates a new InlineValueEvaluatableExpression literal.
     */
    function create(range, expression) {
        return { range, expression };
    }
    InlineValueEvaluatableExpression.create = create;
    function is(value) {
        const candidate = value;
        return candidate !== undefined && candidate !== null && Range.is(candidate.range)
            && (Is.string(candidate.expression) || candidate.expression === undefined);
    }
    InlineValueEvaluatableExpression.is = is;
})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));
/**
 * The InlineValueContext namespace provides helper functions to work with
 * {@link InlineValueContext} literals.
 *
 * @since 3.17.0
 */
var InlineValueContext;
(function (InlineValueContext) {
    /**
     * Creates a new InlineValueContext literal.
     */
    function create(frameId, stoppedLocation) {
        return { frameId, stoppedLocation };
    }
    InlineValueContext.create = create;
    /**
     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.
     */
    function is(value) {
        const candidate = value;
        return Is.defined(candidate) && Range.is(value.stoppedLocation);
    }
    InlineValueContext.is = is;
})(InlineValueContext || (InlineValueContext = {}));
/**
 * Inlay hint kinds.
 *
 * @since 3.17.0
 */
var InlayHintKind;
(function (InlayHintKind) {
    /**
     * An inlay hint that for a type annotation.
     */
    InlayHintKind.Type = 1;
    /**
     * An inlay hint that is for a parameter.
     */
    InlayHintKind.Parameter = 2;
    function is(value) {
        return value === 1 || value === 2;
    }
    InlayHintKind.is = is;
})(InlayHintKind || (InlayHintKind = {}));
var InlayHintLabelPart;
(function (InlayHintLabelPart) {
    function create(value) {
        return { value };
    }
    InlayHintLabelPart.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.location === undefined || Location.is(candidate.location))
            && (candidate.command === undefined || Command.is(candidate.command));
    }
    InlayHintLabelPart.is = is;
})(InlayHintLabelPart || (InlayHintLabelPart = {}));
var InlayHint;
(function (InlayHint) {
    function create(position, label, kind) {
        const result = { position, label };
        if (kind !== undefined) {
            result.kind = kind;
        }
        return result;
    }
    InlayHint.create = create;
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && Position.is(candidate.position)
            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))
            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))
            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)
            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))
            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))
            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));
    }
    InlayHint.is = is;
})(InlayHint || (InlayHint = {}));
var StringValue;
(function (StringValue) {
    function createSnippet(value) {
        return { kind: 'snippet', value };
    }
    StringValue.createSnippet = createSnippet;
})(StringValue || (StringValue = {}));
var InlineCompletionItem;
(function (InlineCompletionItem) {
    function create(insertText, filterText, range, command) {
        return { insertText, filterText, range, command };
    }
    InlineCompletionItem.create = create;
})(InlineCompletionItem || (InlineCompletionItem = {}));
var InlineCompletionList;
(function (InlineCompletionList) {
    function create(items) {
        return { items };
    }
    InlineCompletionList.create = create;
})(InlineCompletionList || (InlineCompletionList = {}));
/**
 * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.
 *
 * @since 3.18.0
 * @proposed
 */
var InlineCompletionTriggerKind;
(function (InlineCompletionTriggerKind) {
    /**
     * Completion was triggered explicitly by a user gesture.
     */
    InlineCompletionTriggerKind.Invoked = 0;
    /**
     * Completion was triggered automatically while editing.
     */
    InlineCompletionTriggerKind.Automatic = 1;
})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));
var SelectedCompletionInfo;
(function (SelectedCompletionInfo) {
    function create(range, text) {
        return { range, text };
    }
    SelectedCompletionInfo.create = create;
})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));
var InlineCompletionContext;
(function (InlineCompletionContext) {
    function create(triggerKind, selectedCompletionInfo) {
        return { triggerKind, selectedCompletionInfo };
    }
    InlineCompletionContext.create = create;
})(InlineCompletionContext || (InlineCompletionContext = {}));
var WorkspaceFolder;
(function (WorkspaceFolder) {
    function is(value) {
        const candidate = value;
        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);
    }
    WorkspaceFolder.is = is;
})(WorkspaceFolder || (WorkspaceFolder = {}));
const EOL = ['\n', '\r\n', '\r'];
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
var TextDocument;
(function (TextDocument) {
    /**
     * Creates a new ITextDocument literal from the given uri and content.
     * @param uri The document's uri.
     * @param languageId The document's language Id.
     * @param version The document's version.
     * @param content The document's content.
     */
    function create(uri, languageId, version, content) {
        return new FullTextDocument(uri, languageId, version, content);
    }
    TextDocument.create = create;
    /**
     * Checks whether the given literal conforms to the {@link ITextDocument} interface.
     */
    function is(value) {
        let candidate = value;
        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)
            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;
    }
    TextDocument.is = is;
    function applyEdits(document, edits) {
        let text = document.getText();
        let sortedEdits = mergeSort(edits, (a, b) => {
            let diff = a.range.start.line - b.range.start.line;
            if (diff === 0) {
                return a.range.start.character - b.range.start.character;
            }
            return diff;
        });
        let lastModifiedOffset = text.length;
        for (let i = sortedEdits.length - 1; i >= 0; i--) {
            let e = sortedEdits[i];
            let startOffset = document.offsetAt(e.range.start);
            let endOffset = document.offsetAt(e.range.end);
            if (endOffset <= lastModifiedOffset) {
                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);
            }
            else {
                throw new Error('Overlapping edit');
            }
            lastModifiedOffset = startOffset;
        }
        return text;
    }
    TextDocument.applyEdits = applyEdits;
    function mergeSort(data, compare) {
        if (data.length <= 1) {
            // sorted
            return data;
        }
        const p = (data.length / 2) | 0;
        const left = data.slice(0, p);
        const right = data.slice(p);
        mergeSort(left, compare);
        mergeSort(right, compare);
        let leftIdx = 0;
        let rightIdx = 0;
        let i = 0;
        while (leftIdx < left.length && rightIdx < right.length) {
            let ret = compare(left[leftIdx], right[rightIdx]);
            if (ret <= 0) {
                // smaller_equal -> take left to preserve order
                data[i++] = left[leftIdx++];
            }
            else {
                // greater -> take right
                data[i++] = right[rightIdx++];
            }
        }
        while (leftIdx < left.length) {
            data[i++] = left[leftIdx++];
        }
        while (rightIdx < right.length) {
            data[i++] = right[rightIdx++];
        }
        return data;
    }
})(TextDocument || (TextDocument = {}));
/**
 * @deprecated Use the text document from the new vscode-languageserver-textdocument package.
 */
class FullTextDocument {
    constructor(uri, languageId, version, content) {
        this._uri = uri;
        this._languageId = languageId;
        this._version = version;
        this._content = content;
        this._lineOffsets = undefined;
    }
    get uri() {
        return this._uri;
    }
    get languageId() {
        return this._languageId;
    }
    get version() {
        return this._version;
    }
    getText(range) {
        if (range) {
            let start = this.offsetAt(range.start);
            let end = this.offsetAt(range.end);
            return this._content.substring(start, end);
        }
        return this._content;
    }
    update(event, version) {
        this._content = event.text;
        this._version = version;
        this._lineOffsets = undefined;
    }
    getLineOffsets() {
        if (this._lineOffsets === undefined) {
            let lineOffsets = [];
            let text = this._content;
            let isLineStart = true;
            for (let i = 0; i < text.length; i++) {
                if (isLineStart) {
                    lineOffsets.push(i);
                    isLineStart = false;
                }
                let ch = text.charAt(i);
                isLineStart = (ch === '\r' || ch === '\n');
                if (ch === '\r' && i + 1 < text.length && text.charAt(i + 1) === '\n') {
                    i++;
                }
            }
            if (isLineStart && text.length > 0) {
                lineOffsets.push(text.length);
            }
            this._lineOffsets = lineOffsets;
        }
        return this._lineOffsets;
    }
    positionAt(offset) {
        offset = Math.max(Math.min(offset, this._content.length), 0);
        let lineOffsets = this.getLineOffsets();
        let low = 0, high = lineOffsets.length;
        if (high === 0) {
            return Position.create(0, offset);
        }
        while (low < high) {
            let mid = Math.floor((low + high) / 2);
            if (lineOffsets[mid] > offset) {
                high = mid;
            }
            else {
                low = mid + 1;
            }
        }
        // low is the least x for which the line offset is larger than the current offset
        // or array.length if no line offset is larger than the current offset
        let line = low - 1;
        return Position.create(line, offset - lineOffsets[line]);
    }
    offsetAt(position) {
        let lineOffsets = this.getLineOffsets();
        if (position.line >= lineOffsets.length) {
            return this._content.length;
        }
        else if (position.line < 0) {
            return 0;
        }
        let lineOffset = lineOffsets[position.line];
        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;
        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);
    }
    get lineCount() {
        return this.getLineOffsets().length;
    }
}
var Is;
(function (Is) {
    const toString = Object.prototype.toString;
    function defined(value) {
        return typeof value !== 'undefined';
    }
    Is.defined = defined;
    function undefined(value) {
        return typeof value === 'undefined';
    }
    Is.undefined = undefined;
    function boolean(value) {
        return value === true || value === false;
    }
    Is.boolean = boolean;
    function string(value) {
        return toString.call(value) === '[object String]';
    }
    Is.string = string;
    function number(value) {
        return toString.call(value) === '[object Number]';
    }
    Is.number = number;
    function numberRange(value, min, max) {
        return toString.call(value) === '[object Number]' && min <= value && value <= max;
    }
    Is.numberRange = numberRange;
    function integer(value) {
        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;
    }
    Is.integer = integer;
    function uinteger(value) {
        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;
    }
    Is.uinteger = uinteger;
    function func(value) {
        return toString.call(value) === '[object Function]';
    }
    Is.func = func;
    function objectLiteral(value) {
        // Strictly speaking class instances pass this check as well. Since the LSP
        // doesn't use classes we ignore this for now. If we do we need to add something
        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`
        return value !== null && typeof value === 'object';
    }
    Is.objectLiteral = objectLiteral;
    function typedArray(value, check) {
        return Array.isArray(value) && value.every(check);
    }
    Is.typedArray = typedArray;
})(Is || (Is = {}));


/***/ }),

/***/ "../../node_modules/vscode-uri/lib/esm/index.mjs":
/*!*******************************************************!*\
  !*** ../../node_modules/vscode-uri/lib/esm/index.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   URI: () => (/* binding */ URI),
/* harmony export */   Utils: () => (/* binding */ Utils)
/* harmony export */ });
var LIB;(()=>{"use strict";var t={470:t=>{function e(t){if("string"!=typeof t)throw new TypeError("Path must be a string. Received "+JSON.stringify(t))}function r(t,e){for(var r,n="",i=0,o=-1,s=0,h=0;h<=t.length;++h){if(h<t.length)r=t.charCodeAt(h);else{if(47===r)break;r=47}if(47===r){if(o===h-1||1===s);else if(o!==h-1&&2===s){if(n.length<2||2!==i||46!==n.charCodeAt(n.length-1)||46!==n.charCodeAt(n.length-2))if(n.length>2){var a=n.lastIndexOf("/");if(a!==n.length-1){-1===a?(n="",i=0):i=(n=n.slice(0,a)).length-1-n.lastIndexOf("/"),o=h,s=0;continue}}else if(2===n.length||1===n.length){n="",i=0,o=h,s=0;continue}e&&(n.length>0?n+="/..":n="..",i=2)}else n.length>0?n+="/"+t.slice(o+1,h):n=t.slice(o+1,h),i=h-o-1;o=h,s=0}else 46===r&&-1!==s?++s:s=-1}return n}var n={resolve:function(){for(var t,n="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var s;o>=0?s=arguments[o]:(void 0===t&&(t=process.cwd()),s=t),e(s),0!==s.length&&(n=s+"/"+n,i=47===s.charCodeAt(0))}return n=r(n,!i),i?n.length>0?"/"+n:"/":n.length>0?n:"."},normalize:function(t){if(e(t),0===t.length)return".";var n=47===t.charCodeAt(0),i=47===t.charCodeAt(t.length-1);return 0!==(t=r(t,!n)).length||n||(t="."),t.length>0&&i&&(t+="/"),n?"/"+t:t},isAbsolute:function(t){return e(t),t.length>0&&47===t.charCodeAt(0)},join:function(){if(0===arguments.length)return".";for(var t,r=0;r<arguments.length;++r){var i=arguments[r];e(i),i.length>0&&(void 0===t?t=i:t+="/"+i)}return void 0===t?".":n.normalize(t)},relative:function(t,r){if(e(t),e(r),t===r)return"";if((t=n.resolve(t))===(r=n.resolve(r)))return"";for(var i=1;i<t.length&&47===t.charCodeAt(i);++i);for(var o=t.length,s=o-i,h=1;h<r.length&&47===r.charCodeAt(h);++h);for(var a=r.length-h,c=s<a?s:a,f=-1,u=0;u<=c;++u){if(u===c){if(a>c){if(47===r.charCodeAt(h+u))return r.slice(h+u+1);if(0===u)return r.slice(h+u)}else s>c&&(47===t.charCodeAt(i+u)?f=u:0===u&&(f=0));break}var l=t.charCodeAt(i+u);if(l!==r.charCodeAt(h+u))break;47===l&&(f=u)}var g="";for(u=i+f+1;u<=o;++u)u!==o&&47!==t.charCodeAt(u)||(0===g.length?g+="..":g+="/..");return g.length>0?g+r.slice(h+f):(h+=f,47===r.charCodeAt(h)&&++h,r.slice(h))},_makeLong:function(t){return t},dirname:function(t){if(e(t),0===t.length)return".";for(var r=t.charCodeAt(0),n=47===r,i=-1,o=!0,s=t.length-1;s>=1;--s)if(47===(r=t.charCodeAt(s))){if(!o){i=s;break}}else o=!1;return-1===i?n?"/":".":n&&1===i?"//":t.slice(0,i)},basename:function(t,r){if(void 0!==r&&"string"!=typeof r)throw new TypeError('"ext" argument must be a string');e(t);var n,i=0,o=-1,s=!0;if(void 0!==r&&r.length>0&&r.length<=t.length){if(r.length===t.length&&r===t)return"";var h=r.length-1,a=-1;for(n=t.length-1;n>=0;--n){var c=t.charCodeAt(n);if(47===c){if(!s){i=n+1;break}}else-1===a&&(s=!1,a=n+1),h>=0&&(c===r.charCodeAt(h)?-1==--h&&(o=n):(h=-1,o=a))}return i===o?o=a:-1===o&&(o=t.length),t.slice(i,o)}for(n=t.length-1;n>=0;--n)if(47===t.charCodeAt(n)){if(!s){i=n+1;break}}else-1===o&&(s=!1,o=n+1);return-1===o?"":t.slice(i,o)},extname:function(t){e(t);for(var r=-1,n=0,i=-1,o=!0,s=0,h=t.length-1;h>=0;--h){var a=t.charCodeAt(h);if(47!==a)-1===i&&(o=!1,i=h+1),46===a?-1===r?r=h:1!==s&&(s=1):-1!==r&&(s=-1);else if(!o){n=h+1;break}}return-1===r||-1===i||0===s||1===s&&r===i-1&&r===n+1?"":t.slice(r,i)},format:function(t){if(null===t||"object"!=typeof t)throw new TypeError('The "pathObject" argument must be of type Object. Received type '+typeof t);return function(t,e){var r=e.dir||e.root,n=e.base||(e.name||"")+(e.ext||"");return r?r===e.root?r+n:r+"/"+n:n}(0,t)},parse:function(t){e(t);var r={root:"",dir:"",base:"",ext:"",name:""};if(0===t.length)return r;var n,i=t.charCodeAt(0),o=47===i;o?(r.root="/",n=1):n=0;for(var s=-1,h=0,a=-1,c=!0,f=t.length-1,u=0;f>=n;--f)if(47!==(i=t.charCodeAt(f)))-1===a&&(c=!1,a=f+1),46===i?-1===s?s=f:1!==u&&(u=1):-1!==s&&(u=-1);else if(!c){h=f+1;break}return-1===s||-1===a||0===u||1===u&&s===a-1&&s===h+1?-1!==a&&(r.base=r.name=0===h&&o?t.slice(1,a):t.slice(h,a)):(0===h&&o?(r.name=t.slice(1,s),r.base=t.slice(1,a)):(r.name=t.slice(h,s),r.base=t.slice(h,a)),r.ext=t.slice(s,a)),h>0?r.dir=t.slice(0,h-1):o&&(r.dir="/"),r},sep:"/",delimiter:":",win32:null,posix:null};n.posix=n,t.exports=n}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};(()=>{let t;if(r.r(n),r.d(n,{URI:()=>f,Utils:()=>P}),"object"==typeof process)t="win32"===process.platform;else if("object"==typeof navigator){let e=navigator.userAgent;t=e.indexOf("Windows")>=0}const e=/^\w[\w\d+.-]*$/,i=/^\//,o=/^\/\//;function s(t,r){if(!t.scheme&&r)throw new Error(`[UriError]: Scheme is missing: {scheme: "", authority: "${t.authority}", path: "${t.path}", query: "${t.query}", fragment: "${t.fragment}"}`);if(t.scheme&&!e.test(t.scheme))throw new Error("[UriError]: Scheme contains illegal characters.");if(t.path)if(t.authority){if(!i.test(t.path))throw new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash ("/") character')}else if(o.test(t.path))throw new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters ("//")')}const h="",a="/",c=/^(([^:/?#]+?):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?/;class f{static isUri(t){return t instanceof f||!!t&&"string"==typeof t.authority&&"string"==typeof t.fragment&&"string"==typeof t.path&&"string"==typeof t.query&&"string"==typeof t.scheme&&"string"==typeof t.fsPath&&"function"==typeof t.with&&"function"==typeof t.toString}scheme;authority;path;query;fragment;constructor(t,e,r,n,i,o=!1){"object"==typeof t?(this.scheme=t.scheme||h,this.authority=t.authority||h,this.path=t.path||h,this.query=t.query||h,this.fragment=t.fragment||h):(this.scheme=function(t,e){return t||e?t:"file"}(t,o),this.authority=e||h,this.path=function(t,e){switch(t){case"https":case"http":case"file":e?e[0]!==a&&(e=a+e):e=a}return e}(this.scheme,r||h),this.query=n||h,this.fragment=i||h,s(this,o))}get fsPath(){return m(this,!1)}with(t){if(!t)return this;let{scheme:e,authority:r,path:n,query:i,fragment:o}=t;return void 0===e?e=this.scheme:null===e&&(e=h),void 0===r?r=this.authority:null===r&&(r=h),void 0===n?n=this.path:null===n&&(n=h),void 0===i?i=this.query:null===i&&(i=h),void 0===o?o=this.fragment:null===o&&(o=h),e===this.scheme&&r===this.authority&&n===this.path&&i===this.query&&o===this.fragment?this:new l(e,r,n,i,o)}static parse(t,e=!1){const r=c.exec(t);return r?new l(r[2]||h,C(r[4]||h),C(r[5]||h),C(r[7]||h),C(r[9]||h),e):new l(h,h,h,h,h)}static file(e){let r=h;if(t&&(e=e.replace(/\\/g,a)),e[0]===a&&e[1]===a){const t=e.indexOf(a,2);-1===t?(r=e.substring(2),e=a):(r=e.substring(2,t),e=e.substring(t)||a)}return new l("file",r,e,h,h)}static from(t){const e=new l(t.scheme,t.authority,t.path,t.query,t.fragment);return s(e,!0),e}toString(t=!1){return y(this,t)}toJSON(){return this}static revive(t){if(t){if(t instanceof f)return t;{const e=new l(t);return e._formatted=t.external,e._fsPath=t._sep===u?t.fsPath:null,e}}return t}}const u=t?1:void 0;class l extends f{_formatted=null;_fsPath=null;get fsPath(){return this._fsPath||(this._fsPath=m(this,!1)),this._fsPath}toString(t=!1){return t?y(this,!0):(this._formatted||(this._formatted=y(this,!1)),this._formatted)}toJSON(){const t={$mid:1};return this._fsPath&&(t.fsPath=this._fsPath,t._sep=u),this._formatted&&(t.external=this._formatted),this.path&&(t.path=this.path),this.scheme&&(t.scheme=this.scheme),this.authority&&(t.authority=this.authority),this.query&&(t.query=this.query),this.fragment&&(t.fragment=this.fragment),t}}const g={58:"%3A",47:"%2F",63:"%3F",35:"%23",91:"%5B",93:"%5D",64:"%40",33:"%21",36:"%24",38:"%26",39:"%27",40:"%28",41:"%29",42:"%2A",43:"%2B",44:"%2C",59:"%3B",61:"%3D",32:"%20"};function d(t,e,r){let n,i=-1;for(let o=0;o<t.length;o++){const s=t.charCodeAt(o);if(s>=97&&s<=122||s>=65&&s<=90||s>=48&&s<=57||45===s||46===s||95===s||126===s||e&&47===s||r&&91===s||r&&93===s||r&&58===s)-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),void 0!==n&&(n+=t.charAt(o));else{void 0===n&&(n=t.substr(0,o));const e=g[s];void 0!==e?(-1!==i&&(n+=encodeURIComponent(t.substring(i,o)),i=-1),n+=e):-1===i&&(i=o)}}return-1!==i&&(n+=encodeURIComponent(t.substring(i))),void 0!==n?n:t}function p(t){let e;for(let r=0;r<t.length;r++){const n=t.charCodeAt(r);35===n||63===n?(void 0===e&&(e=t.substr(0,r)),e+=g[n]):void 0!==e&&(e+=t[r])}return void 0!==e?e:t}function m(e,r){let n;return n=e.authority&&e.path.length>1&&"file"===e.scheme?`//${e.authority}${e.path}`:47===e.path.charCodeAt(0)&&(e.path.charCodeAt(1)>=65&&e.path.charCodeAt(1)<=90||e.path.charCodeAt(1)>=97&&e.path.charCodeAt(1)<=122)&&58===e.path.charCodeAt(2)?r?e.path.substr(1):e.path[1].toLowerCase()+e.path.substr(2):e.path,t&&(n=n.replace(/\//g,"\\")),n}function y(t,e){const r=e?p:d;let n="",{scheme:i,authority:o,path:s,query:h,fragment:c}=t;if(i&&(n+=i,n+=":"),(o||"file"===i)&&(n+=a,n+=a),o){let t=o.indexOf("@");if(-1!==t){const e=o.substr(0,t);o=o.substr(t+1),t=e.lastIndexOf(":"),-1===t?n+=r(e,!1,!1):(n+=r(e.substr(0,t),!1,!1),n+=":",n+=r(e.substr(t+1),!1,!0)),n+="@"}o=o.toLowerCase(),t=o.lastIndexOf(":"),-1===t?n+=r(o,!1,!0):(n+=r(o.substr(0,t),!1,!0),n+=o.substr(t))}if(s){if(s.length>=3&&47===s.charCodeAt(0)&&58===s.charCodeAt(2)){const t=s.charCodeAt(1);t>=65&&t<=90&&(s=`/${String.fromCharCode(t+32)}:${s.substr(3)}`)}else if(s.length>=2&&58===s.charCodeAt(1)){const t=s.charCodeAt(0);t>=65&&t<=90&&(s=`${String.fromCharCode(t+32)}:${s.substr(2)}`)}n+=r(s,!0,!1)}return h&&(n+="?",n+=r(h,!1,!1)),c&&(n+="#",n+=e?c:d(c,!1,!1)),n}function v(t){try{return decodeURIComponent(t)}catch{return t.length>3?t.substr(0,3)+v(t.substr(3)):t}}const b=/(%[0-9A-Za-z][0-9A-Za-z])+/g;function C(t){return t.match(b)?t.replace(b,(t=>v(t))):t}var A=r(470);const w=A.posix||A,x="/";var P;!function(t){t.joinPath=function(t,...e){return t.with({path:w.join(t.path,...e)})},t.resolvePath=function(t,...e){let r=t.path,n=!1;r[0]!==x&&(r=x+r,n=!0);let i=w.resolve(r,...e);return n&&i[0]===x&&!t.authority&&(i=i.substring(1)),t.with({path:i})},t.dirname=function(t){if(0===t.path.length||t.path===x)return t;let e=w.dirname(t.path);return 1===e.length&&46===e.charCodeAt(0)&&(e=""),t.with({path:e})},t.basename=function(t){return w.basename(t.path)},t.extname=function(t){return w.extname(t.path)}}(P||(P={}))})(),LIB=n})();const{URI,Utils}=LIB;
//# sourceMappingURL=index.mjs.map

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!****************************!*\
  !*** ./src/node-server.ts ***!
  \****************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vscode-languageserver/node */ "../../node_modules/vscode-languageserver/node.js");
/* harmony import */ var vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_file_system__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./node-file-system */ "./src/node-file-system.ts");
/* harmony import */ var _server__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./server */ "./src/server.ts");



const connection = (0,vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_0__.createConnection)(vscode_languageserver_node__WEBPACK_IMPORTED_MODULE_0__.ProposedFeatures.all);
console.log = connection.console.log.bind(connection.console);
console.error = connection.console.error.bind(connection.console);
const runtime = { file: new _node_file_system__WEBPACK_IMPORTED_MODULE_1__.NodeFileSystem() };
const server = new _server__WEBPACK_IMPORTED_MODULE_2__.SomeSassServer(connection, runtime);
server.listen();

})();

module.exports = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=node-server.js.map